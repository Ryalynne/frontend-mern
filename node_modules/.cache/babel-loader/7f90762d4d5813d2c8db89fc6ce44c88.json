{"ast":null,"code":"import _get from \"C:/Users/PC/Documents/PROGRAMMING/MERN/frontend/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/PC/Documents/PROGRAMMING/MERN/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _classCallCheck from \"C:/Users/PC/Documents/PROGRAMMING/MERN/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/PC/Documents/PROGRAMMING/MERN/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/PC/Documents/PROGRAMMING/MERN/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/PC/Documents/PROGRAMMING/MERN/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { DecodeStream } from './DecodeStream.js';\nimport { Base } from './Base.js';\n\nvar NumberT = /*#__PURE__*/function (_Base) {\n  _inherits(NumberT, _Base);\n\n  var _super = _createSuper(NumberT);\n\n  function NumberT(type) {\n    var _this;\n\n    var endian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'BE';\n\n    _classCallCheck(this, NumberT);\n\n    _this = _super.call(this);\n    _this.type = type;\n    _this.endian = endian;\n    _this.fn = _this.type;\n\n    if (_this.type[_this.type.length - 1] !== '8') {\n      _this.fn += _this.endian;\n    }\n\n    return _this;\n  }\n\n  _createClass(NumberT, [{\n    key: \"size\",\n    value: function size() {\n      return DecodeStream.TYPES[this.type];\n    }\n  }, {\n    key: \"decode\",\n    value: function decode(stream) {\n      return stream[\"read\".concat(this.fn)]();\n    }\n  }, {\n    key: \"encode\",\n    value: function encode(stream, val) {\n      return stream[\"write\".concat(this.fn)](val);\n    }\n  }]);\n\n  return NumberT;\n}(Base);\n\nexport { NumberT as Number };\nexport var uint8 = new NumberT('UInt8');\nexport var uint16be = new NumberT('UInt16', 'BE');\nexport var uint16 = uint16be;\nexport var uint16le = new NumberT('UInt16', 'LE');\nexport var uint24be = new NumberT('UInt24', 'BE');\nexport var uint24 = uint24be;\nexport var uint24le = new NumberT('UInt24', 'LE');\nexport var uint32be = new NumberT('UInt32', 'BE');\nexport var uint32 = uint32be;\nexport var uint32le = new NumberT('UInt32', 'LE');\nexport var int8 = new NumberT('Int8');\nexport var int16be = new NumberT('Int16', 'BE');\nexport var int16 = int16be;\nexport var int16le = new NumberT('Int16', 'LE');\nexport var int24be = new NumberT('Int24', 'BE');\nexport var int24 = int24be;\nexport var int24le = new NumberT('Int24', 'LE');\nexport var int32be = new NumberT('Int32', 'BE');\nexport var int32 = int32be;\nexport var int32le = new NumberT('Int32', 'LE');\nexport var floatbe = new NumberT('Float', 'BE');\nexport var float = floatbe;\nexport var floatle = new NumberT('Float', 'LE');\nexport var doublebe = new NumberT('Double', 'BE');\nexport var double = doublebe;\nexport var doublele = new NumberT('Double', 'LE');\nexport var Fixed = /*#__PURE__*/function (_NumberT) {\n  _inherits(Fixed, _NumberT);\n\n  var _super2 = _createSuper(Fixed);\n\n  function Fixed(size, endian) {\n    var _this2;\n\n    var fracBits = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : size >> 1;\n\n    _classCallCheck(this, Fixed);\n\n    _this2 = _super2.call(this, \"Int\".concat(size), endian);\n    _this2._point = 1 << fracBits;\n    return _this2;\n  }\n\n  _createClass(Fixed, [{\n    key: \"decode\",\n    value: function decode(stream) {\n      return _get(_getPrototypeOf(Fixed.prototype), \"decode\", this).call(this, stream) / this._point;\n    }\n  }, {\n    key: \"encode\",\n    value: function encode(stream, val) {\n      return _get(_getPrototypeOf(Fixed.prototype), \"encode\", this).call(this, stream, val * this._point | 0);\n    }\n  }]);\n\n  return Fixed;\n}(NumberT);\nexport var fixed16be = new Fixed(16, 'BE');\nexport var fixed16 = fixed16be;\nexport var fixed16le = new Fixed(16, 'LE');\nexport var fixed32be = new Fixed(32, 'BE');\nexport var fixed32 = fixed32be;\nexport var fixed32le = new Fixed(32, 'LE');","map":{"version":3,"sources":["C:/Users/PC/Documents/PROGRAMMING/MERN/frontend/node_modules/restructure/src/Number.js"],"names":["DecodeStream","Base","NumberT","type","endian","fn","length","TYPES","stream","val","Number","uint8","uint16be","uint16","uint16le","uint24be","uint24","uint24le","uint32be","uint32","uint32le","int8","int16be","int16","int16le","int24be","int24","int24le","int32be","int32","int32le","floatbe","float","floatle","doublebe","double","doublele","Fixed","size","fracBits","_point","fixed16be","fixed16","fixed16le","fixed32be","fixed32","fixed32le"],"mappings":";;;;;;AAAA,SAAQA,YAAR,QAA2B,mBAA3B;AACA,SAAQC,IAAR,QAAmB,WAAnB;;IAEMC,O;;;;;AACJ,mBAAYC,IAAZ,EAAiC;AAAA;;AAAA,QAAfC,MAAe,uEAAN,IAAM;;AAAA;;AAC/B;AACA,UAAKD,IAAL,GAAYA,IAAZ;AACA,UAAKC,MAAL,GAAcA,MAAd;AACA,UAAKC,EAAL,GAAU,MAAKF,IAAf;;AACA,QAAI,MAAKA,IAAL,CAAU,MAAKA,IAAL,CAAUG,MAAV,GAAmB,CAA7B,MAAoC,GAAxC,EAA6C;AAC3C,YAAKD,EAAL,IAAW,MAAKD,MAAhB;AACD;;AAP8B;AAQhC;;;;WAED,gBAAO;AACL,aAAOJ,YAAY,CAACO,KAAb,CAAmB,KAAKJ,IAAxB,CAAP;AACD;;;WAED,gBAAOK,MAAP,EAAe;AACb,aAAOA,MAAM,eAAQ,KAAKH,EAAb,EAAN,EAAP;AACD;;;WAED,gBAAOG,MAAP,EAAeC,GAAf,EAAoB;AAClB,aAAOD,MAAM,gBAAS,KAAKH,EAAd,EAAN,CAA0BI,GAA1B,CAAP;AACD;;;;EArBmBR,I;;AAwBtB,SAAQC,OAAO,IAAIQ,MAAnB;AAEA,OAAO,IAAMC,KAAK,GAAG,IAAIT,OAAJ,CAAY,OAAZ,CAAd;AACP,OAAO,IAAMU,QAAQ,GAAG,IAAIV,OAAJ,CAAY,QAAZ,EAAsB,IAAtB,CAAjB;AACP,OAAO,IAAMW,MAAM,GAAGD,QAAf;AACP,OAAO,IAAME,QAAQ,GAAG,IAAIZ,OAAJ,CAAY,QAAZ,EAAsB,IAAtB,CAAjB;AACP,OAAO,IAAMa,QAAQ,GAAG,IAAIb,OAAJ,CAAY,QAAZ,EAAsB,IAAtB,CAAjB;AACP,OAAO,IAAMc,MAAM,GAAGD,QAAf;AACP,OAAO,IAAME,QAAQ,GAAG,IAAIf,OAAJ,CAAY,QAAZ,EAAsB,IAAtB,CAAjB;AACP,OAAO,IAAMgB,QAAQ,GAAG,IAAIhB,OAAJ,CAAY,QAAZ,EAAsB,IAAtB,CAAjB;AACP,OAAO,IAAMiB,MAAM,GAAGD,QAAf;AACP,OAAO,IAAME,QAAQ,GAAG,IAAIlB,OAAJ,CAAY,QAAZ,EAAsB,IAAtB,CAAjB;AACP,OAAO,IAAMmB,IAAI,GAAG,IAAInB,OAAJ,CAAY,MAAZ,CAAb;AACP,OAAO,IAAMoB,OAAO,GAAG,IAAIpB,OAAJ,CAAY,OAAZ,EAAqB,IAArB,CAAhB;AACP,OAAO,IAAMqB,KAAK,GAAGD,OAAd;AACP,OAAO,IAAME,OAAO,GAAG,IAAItB,OAAJ,CAAY,OAAZ,EAAqB,IAArB,CAAhB;AACP,OAAO,IAAMuB,OAAO,GAAG,IAAIvB,OAAJ,CAAY,OAAZ,EAAqB,IAArB,CAAhB;AACP,OAAO,IAAMwB,KAAK,GAAGD,OAAd;AACP,OAAO,IAAME,OAAO,GAAG,IAAIzB,OAAJ,CAAY,OAAZ,EAAqB,IAArB,CAAhB;AACP,OAAO,IAAM0B,OAAO,GAAG,IAAI1B,OAAJ,CAAY,OAAZ,EAAqB,IAArB,CAAhB;AACP,OAAO,IAAM2B,KAAK,GAAGD,OAAd;AACP,OAAO,IAAME,OAAO,GAAG,IAAI5B,OAAJ,CAAY,OAAZ,EAAqB,IAArB,CAAhB;AACP,OAAO,IAAM6B,OAAO,GAAG,IAAI7B,OAAJ,CAAY,OAAZ,EAAqB,IAArB,CAAhB;AACP,OAAO,IAAM8B,KAAK,GAAGD,OAAd;AACP,OAAO,IAAME,OAAO,GAAG,IAAI/B,OAAJ,CAAY,OAAZ,EAAqB,IAArB,CAAhB;AACP,OAAO,IAAMgC,QAAQ,GAAG,IAAIhC,OAAJ,CAAY,QAAZ,EAAsB,IAAtB,CAAjB;AACP,OAAO,IAAMiC,MAAM,GAAGD,QAAf;AACP,OAAO,IAAME,QAAQ,GAAG,IAAIlC,OAAJ,CAAY,QAAZ,EAAsB,IAAtB,CAAjB;AAEP,WAAamC,KAAb;AAAA;;AAAA;;AACE,iBAAYC,IAAZ,EAAkBlC,MAAlB,EAAgD;AAAA;;AAAA,QAAtBmC,QAAsB,uEAAXD,IAAI,IAAI,CAAG;;AAAA;;AAC9C,6CAAYA,IAAZ,GAAoBlC,MAApB;AACA,WAAKoC,MAAL,GAAc,KAAKD,QAAnB;AAF8C;AAG/C;;AAJH;AAAA;AAAA,WAME,gBAAO/B,MAAP,EAAe;AACb,aAAO,kEAAaA,MAAb,IAAuB,KAAKgC,MAAnC;AACD;AARH;AAAA;AAAA,WAUE,gBAAOhC,MAAP,EAAeC,GAAf,EAAoB;AAClB,+EAAoBD,MAApB,EAA6BC,GAAG,GAAG,KAAK+B,MAAZ,GAAsB,CAAlD;AACD;AAZH;;AAAA;AAAA,EAA2BtC,OAA3B;AAeA,OAAO,IAAMuC,SAAS,GAAG,IAAIJ,KAAJ,CAAU,EAAV,EAAc,IAAd,CAAlB;AACP,OAAO,IAAMK,OAAO,GAAGD,SAAhB;AACP,OAAO,IAAME,SAAS,GAAG,IAAIN,KAAJ,CAAU,EAAV,EAAc,IAAd,CAAlB;AACP,OAAO,IAAMO,SAAS,GAAG,IAAIP,KAAJ,CAAU,EAAV,EAAc,IAAd,CAAlB;AACP,OAAO,IAAMQ,OAAO,GAAGD,SAAhB;AACP,OAAO,IAAME,SAAS,GAAG,IAAIT,KAAJ,CAAU,EAAV,EAAc,IAAd,CAAlB","sourcesContent":["import {DecodeStream} from './DecodeStream.js';\nimport {Base} from './Base.js';\n\nclass NumberT extends Base {\n  constructor(type, endian = 'BE') {\n    super();\n    this.type = type;\n    this.endian = endian;\n    this.fn = this.type;\n    if (this.type[this.type.length - 1] !== '8') {\n      this.fn += this.endian;\n    }\n  }\n\n  size() {\n    return DecodeStream.TYPES[this.type];\n  }\n\n  decode(stream) {\n    return stream[`read${this.fn}`]();\n  }\n\n  encode(stream, val) {\n    return stream[`write${this.fn}`](val);\n  }\n}\n\nexport {NumberT as Number};\n\nexport const uint8 = new NumberT('UInt8');\nexport const uint16be = new NumberT('UInt16', 'BE');\nexport const uint16 = uint16be;\nexport const uint16le = new NumberT('UInt16', 'LE');\nexport const uint24be = new NumberT('UInt24', 'BE');\nexport const uint24 = uint24be;\nexport const uint24le = new NumberT('UInt24', 'LE');\nexport const uint32be = new NumberT('UInt32', 'BE');\nexport const uint32 = uint32be;\nexport const uint32le = new NumberT('UInt32', 'LE');\nexport const int8 = new NumberT('Int8');\nexport const int16be = new NumberT('Int16', 'BE');\nexport const int16 = int16be;\nexport const int16le = new NumberT('Int16', 'LE');\nexport const int24be = new NumberT('Int24', 'BE');\nexport const int24 = int24be;\nexport const int24le = new NumberT('Int24', 'LE');\nexport const int32be = new NumberT('Int32', 'BE');\nexport const int32 = int32be;\nexport const int32le = new NumberT('Int32', 'LE');\nexport const floatbe = new NumberT('Float', 'BE');\nexport const float = floatbe;\nexport const floatle = new NumberT('Float', 'LE');\nexport const doublebe = new NumberT('Double', 'BE');\nexport const double = doublebe;\nexport const doublele = new NumberT('Double', 'LE');\n\nexport class Fixed extends NumberT {\n  constructor(size, endian, fracBits = size >> 1) {\n    super(`Int${size}`, endian);\n    this._point = 1 << fracBits;\n  }\n\n  decode(stream) {\n    return super.decode(stream) / this._point;\n  }\n\n  encode(stream, val) {\n    return super.encode(stream, (val * this._point) | 0);\n  }\n}\n\nexport const fixed16be = new Fixed(16, 'BE');\nexport const fixed16 = fixed16be;\nexport const fixed16le = new Fixed(16, 'LE');\nexport const fixed32be = new Fixed(32, 'BE');\nexport const fixed32 = fixed32be;\nexport const fixed32le = new Fixed(32, 'LE');\n"]},"metadata":{},"sourceType":"module"}