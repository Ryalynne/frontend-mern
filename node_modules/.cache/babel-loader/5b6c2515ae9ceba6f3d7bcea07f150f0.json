{"ast":null,"code":"import _classCallCheck from \"C:/Users/PC/Documents/PROGRAMMING/MERN/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/PC/Documents/PROGRAMMING/MERN/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { DecodeStream } from './DecodeStream.js';\nimport { EncodeStream } from './EncodeStream.js';\nexport var Base = /*#__PURE__*/function () {\n  function Base() {\n    _classCallCheck(this, Base);\n  }\n\n  _createClass(Base, [{\n    key: \"fromBuffer\",\n    value: function fromBuffer(buffer) {\n      var stream = new DecodeStream(buffer);\n      return this.decode(stream);\n    }\n  }, {\n    key: \"toBuffer\",\n    value: function toBuffer(value) {\n      var size = this.size(value);\n      var buffer = new Uint8Array(size);\n      var stream = new EncodeStream(buffer);\n      this.encode(stream, value);\n      return buffer;\n    }\n  }]);\n\n  return Base;\n}();","map":{"version":3,"sources":["C:/Users/PC/Documents/PROGRAMMING/MERN/frontend/node_modules/restructure/src/Base.js"],"names":["DecodeStream","EncodeStream","Base","buffer","stream","decode","value","size","Uint8Array","encode"],"mappings":";;AAAA,SAAQA,YAAR,QAA2B,mBAA3B;AACA,SAAQC,YAAR,QAA2B,mBAA3B;AAEA,WAAaC,IAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,WACE,oBAAWC,MAAX,EAAmB;AACjB,UAAIC,MAAM,GAAG,IAAIJ,YAAJ,CAAiBG,MAAjB,CAAb;AACA,aAAO,KAAKE,MAAL,CAAYD,MAAZ,CAAP;AACD;AAJH;AAAA;AAAA,WAME,kBAASE,KAAT,EAAgB;AACd,UAAIC,IAAI,GAAG,KAAKA,IAAL,CAAUD,KAAV,CAAX;AACA,UAAIH,MAAM,GAAG,IAAIK,UAAJ,CAAeD,IAAf,CAAb;AACA,UAAIH,MAAM,GAAG,IAAIH,YAAJ,CAAiBE,MAAjB,CAAb;AACA,WAAKM,MAAL,CAAYL,MAAZ,EAAoBE,KAApB;AACA,aAAOH,MAAP;AACD;AAZH;;AAAA;AAAA","sourcesContent":["import {DecodeStream} from './DecodeStream.js';\nimport {EncodeStream} from './EncodeStream.js';\n\nexport class Base {\n  fromBuffer(buffer) {\n    let stream = new DecodeStream(buffer);\n    return this.decode(stream);\n  }\n\n  toBuffer(value) {\n    let size = this.size(value);\n    let buffer = new Uint8Array(size);\n    let stream = new EncodeStream(buffer);\n    this.encode(stream, value);\n    return buffer;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}