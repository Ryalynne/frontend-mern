{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/PC/Documents/PROGRAMMING/MERN/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"C:/Users/PC/Documents/PROGRAMMING/MERN/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/PC/Documents/PROGRAMMING/MERN/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as r from \"restructure\";\nimport { concatenateUint8Arrays, readUInt8 } from \"./utils.js\";\n\nvar HuffmanTableElements = /*#__PURE__*/function () {\n  function HuffmanTableElements() {\n    _classCallCheck(this, HuffmanTableElements);\n  }\n\n  _createClass(HuffmanTableElements, [{\n    key: \"decode\",\n    value: function decode(stream, parent) {\n      var tables = {};\n      var buffer = stream.buffer.slice(stream.pos, stream.pos + parent.length - 2);\n\n      while (buffer.length > 0) {\n        var offset = 1;\n        var elements = [];\n        var identifier = readUInt8(buffer, 0);\n        var lengths = buffer.slice(offset, offset + 16);\n        offset += 16;\n\n        var _iterator = _createForOfIteratorHelper(lengths),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var length = _step.value;\n            elements.push(buffer.slice(offset, offset + length));\n            offset += length;\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        buffer = buffer.slice(offset);\n        tables[identifier] = concatenateUint8Arrays(elements);\n      }\n\n      stream.pos += parent.length - 2;\n      return tables;\n    }\n  }]);\n\n  return HuffmanTableElements;\n}();\n\nvar DefineHuffmanTableMarker = {\n  name: function name() {\n    return \"DHT\";\n  },\n  length: r.uint16be,\n  tables: new HuffmanTableElements()\n};\nexport default DefineHuffmanTableMarker;","map":{"version":3,"sources":["C:/Users/PC/Documents/PROGRAMMING/MERN/frontend/node_modules/jay-peg/src/markers/dht.js"],"names":["r","concatenateUint8Arrays","readUInt8","HuffmanTableElements","stream","parent","tables","buffer","slice","pos","length","offset","elements","identifier","lengths","push","DefineHuffmanTableMarker","name","uint16be"],"mappings":";;;AAAA,OAAO,KAAKA,CAAZ,MAAmB,aAAnB;AACA,SAASC,sBAAT,EAAiCC,SAAjC,QAAkD,YAAlD;;IAEMC,oB;;;;;;;WACJ,gBAAOC,MAAP,EAAeC,MAAf,EAAuB;AACrB,UAAMC,MAAM,GAAG,EAAf;AAEA,UAAIC,MAAM,GAAGH,MAAM,CAACG,MAAP,CAAcC,KAAd,CACXJ,MAAM,CAACK,GADI,EAEXL,MAAM,CAACK,GAAP,GAAaJ,MAAM,CAACK,MAApB,GAA6B,CAFlB,CAAb;;AAKA,aAAOH,MAAM,CAACG,MAAP,GAAgB,CAAvB,EAA0B;AACxB,YAAIC,MAAM,GAAG,CAAb;AAEA,YAAMC,QAAQ,GAAG,EAAjB;AACA,YAAMC,UAAU,GAAGX,SAAS,CAACK,MAAD,EAAS,CAAT,CAA5B;AACA,YAAMO,OAAO,GAAGP,MAAM,CAACC,KAAP,CAAaG,MAAb,EAAqBA,MAAM,GAAG,EAA9B,CAAhB;AAEAA,QAAAA,MAAM,IAAI,EAAV;;AAPwB,mDASHG,OATG;AAAA;;AAAA;AASxB,8DAA8B;AAAA,gBAAnBJ,MAAmB;AAC5BE,YAAAA,QAAQ,CAACG,IAAT,CAAcR,MAAM,CAACC,KAAP,CAAaG,MAAb,EAAqBA,MAAM,GAAGD,MAA9B,CAAd;AACAC,YAAAA,MAAM,IAAID,MAAV;AACD;AAZuB;AAAA;AAAA;AAAA;AAAA;;AAcxBH,QAAAA,MAAM,GAAGA,MAAM,CAACC,KAAP,CAAaG,MAAb,CAAT;AAEAL,QAAAA,MAAM,CAACO,UAAD,CAAN,GAAqBZ,sBAAsB,CAACW,QAAD,CAA3C;AACD;;AAEDR,MAAAA,MAAM,CAACK,GAAP,IAAcJ,MAAM,CAACK,MAAP,GAAgB,CAA9B;AAEA,aAAOJ,MAAP;AACD;;;;;;AAGH,IAAMU,wBAAwB,GAAG;AAC/BC,EAAAA,IAAI,EAAE;AAAA,WAAM,KAAN;AAAA,GADyB;AAE/BP,EAAAA,MAAM,EAAEV,CAAC,CAACkB,QAFqB;AAG/BZ,EAAAA,MAAM,EAAE,IAAIH,oBAAJ;AAHuB,CAAjC;AAMA,eAAea,wBAAf","sourcesContent":["import * as r from \"restructure\";\nimport { concatenateUint8Arrays, readUInt8 } from \"./utils.js\";\n\nclass HuffmanTableElements {\n  decode(stream, parent) {\n    const tables = {};\n\n    let buffer = stream.buffer.slice(\n      stream.pos,\n      stream.pos + parent.length - 2,\n    );\n\n    while (buffer.length > 0) {\n      let offset = 1;\n\n      const elements = [];\n      const identifier = readUInt8(buffer, 0);\n      const lengths = buffer.slice(offset, offset + 16);\n\n      offset += 16;\n\n      for (const length of lengths) {\n        elements.push(buffer.slice(offset, offset + length));\n        offset += length;\n      }\n\n      buffer = buffer.slice(offset);\n\n      tables[identifier] = concatenateUint8Arrays(elements);\n    }\n\n    stream.pos += parent.length - 2;\n\n    return tables;\n  }\n}\n\nconst DefineHuffmanTableMarker = {\n  name: () => \"DHT\",\n  length: r.uint16be,\n  tables: new HuffmanTableElements(),\n};\n\nexport default DefineHuffmanTableMarker;\n"]},"metadata":{},"sourceType":"module"}