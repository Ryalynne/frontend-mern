{"ast":null,"code":"import _objectSpread from \"C:/Users/PC/Documents/PROGRAMMING/MERN/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _defineProperty from \"C:/Users/PC/Documents/PROGRAMMING/MERN/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n// @ts-nocheck\nimport { Unit, Direction } from \"./generated/YGEnums.js\";\nimport YGEnums from \"./generated/YGEnums.js\"; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nexport default function wrapAssembly(lib) {\n  function patch(prototype, name, fn) {\n    var original = prototype[name];\n\n    prototype[name] = function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return fn.call.apply(fn, [this, original].concat(args));\n    };\n  }\n\n  var _loop = function _loop() {\n    var _methods;\n\n    var fnName = _arr[_i];\n    var methods = (_methods = {}, _defineProperty(_methods, Unit.Point, lib.Node.prototype[fnName]), _defineProperty(_methods, Unit.Percent, lib.Node.prototype[\"\".concat(fnName, \"Percent\")]), _defineProperty(_methods, Unit.Auto, lib.Node.prototype[\"\".concat(fnName, \"Auto\")]), _methods);\n    patch(lib.Node.prototype, fnName, function (original) {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      } // We patch all these functions to add support for the following calls:\n      // .setWidth(100) / .setWidth(\"100%\") / .setWidth(.getWidth()) / .setWidth(\"auto\")\n\n\n      var value = args.pop();\n      var unit, asNumber;\n\n      if (value === 'auto') {\n        unit = Unit.Auto;\n        asNumber = undefined;\n      } else if (typeof value === 'object') {\n        unit = value.unit;\n        asNumber = value.valueOf();\n      } else {\n        unit = typeof value === 'string' && value.endsWith('%') ? Unit.Percent : Unit.Point;\n        asNumber = parseFloat(value);\n\n        if (value !== undefined && !Number.isNaN(value) && Number.isNaN(asNumber)) {\n          throw new Error(\"Invalid value \".concat(value, \" for \").concat(fnName));\n        }\n      }\n\n      if (!methods[unit]) throw new Error(\"Failed to execute \\\"\".concat(fnName, \"\\\": Unsupported unit '\").concat(value, \"'\"));\n\n      if (asNumber !== undefined) {\n        var _methods$unit;\n\n        return (_methods$unit = methods[unit]).call.apply(_methods$unit, [this].concat(args, [asNumber]));\n      } else {\n        var _methods$unit2;\n\n        return (_methods$unit2 = methods[unit]).call.apply(_methods$unit2, [this].concat(args));\n      }\n    });\n  };\n\n  for (var _i = 0, _arr = ['setPosition', 'setMargin', 'setFlexBasis', 'setWidth', 'setHeight', 'setMinWidth', 'setMinHeight', 'setMaxWidth', 'setMaxHeight', 'setPadding', 'setGap']; _i < _arr.length; _i++) {\n    _loop();\n  }\n\n  function wrapMeasureFunction(measureFunction) {\n    return lib.MeasureCallback.implement({\n      measure: function measure() {\n        var _measureFunction = measureFunction.apply(void 0, arguments),\n            width = _measureFunction.width,\n            height = _measureFunction.height;\n\n        return {\n          width: width !== null && width !== void 0 ? width : NaN,\n          height: height !== null && height !== void 0 ? height : NaN\n        };\n      }\n    });\n  }\n\n  patch(lib.Node.prototype, 'setMeasureFunc', function (original, measureFunc) {\n    // This patch is just a convenience patch, since it helps write more\n    // idiomatic source code (such as .setMeasureFunc(null))\n    if (measureFunc) {\n      return original.call(this, wrapMeasureFunction(measureFunc));\n    } else {\n      return this.unsetMeasureFunc();\n    }\n  });\n\n  function wrapDirtiedFunc(dirtiedFunction) {\n    return lib.DirtiedCallback.implement({\n      dirtied: dirtiedFunction\n    });\n  }\n\n  patch(lib.Node.prototype, 'setDirtiedFunc', function (original, dirtiedFunc) {\n    original.call(this, wrapDirtiedFunc(dirtiedFunc));\n  });\n  patch(lib.Config.prototype, 'free', function () {\n    // Since we handle the memory allocation ourselves (via lib.Config.create),\n    // we also need to handle the deallocation\n    lib.Config.destroy(this);\n  });\n  patch(lib.Node, 'create', function (_, config) {\n    // We decide the constructor we want to call depending on the parameters\n    return config ? lib.Node.createWithConfig(config) : lib.Node.createDefault();\n  });\n  patch(lib.Node.prototype, 'free', function () {\n    // Since we handle the memory allocation ourselves (via lib.Node.create),\n    // we also need to handle the deallocation\n    lib.Node.destroy(this);\n  });\n  patch(lib.Node.prototype, 'freeRecursive', function () {\n    for (var t = 0, T = this.getChildCount(); t < T; ++t) {\n      this.getChild(0).freeRecursive();\n    }\n\n    this.free();\n  });\n  patch(lib.Node.prototype, 'calculateLayout', function (original) {\n    var width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : NaN;\n    var height = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : NaN;\n    var direction = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Direction.LTR; // Just a small patch to add support for the function default parameters\n\n    return original.call(this, width, height, direction);\n  });\n  return _objectSpread({\n    Config: lib.Config,\n    Node: lib.Node\n  }, YGEnums);\n}","map":{"version":3,"mappings":"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","names":["Unit","Direction","YGEnums","wrapAssembly","lib","patch","prototype","name","fn","original","args","_key","arguments","call","fnName","methods","Point","Node","Percent","Auto","_key2","value","pop","unit","asNumber","undefined","valueOf","endsWith","parseFloat","Number","isNaN","Error","wrapMeasureFunction","measureFunction","MeasureCallback","implement","measure","width","height","NaN","measureFunc","unsetMeasureFunc","wrapDirtiedFunc","dirtiedFunction","DirtiedCallback","dirtied","dirtiedFunc","Config","destroy","_","config","createWithConfig","createDefault","t","T","getChildCount","getChild","freeRecursive","free","direction","LTR"],"sources":["C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\yoga-layout\\src\\wrapAssembly.ts"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\n// @ts-nocheck\n\nimport {Unit, Direction} from './generated/YGEnums.ts';\nimport YGEnums from './generated/YGEnums.ts';\n\nimport type {\n  Align,\n  BoxSizing,\n  Display,\n  Edge,\n  Errata,\n  ExperimentalFeature,\n  FlexDirection,\n  Gutter,\n  Justify,\n  MeasureMode,\n  Overflow,\n  PositionType,\n  Wrap,\n} from './generated/YGEnums.ts';\n\ntype Layout = {\n  left: number;\n  right: number;\n  top: number;\n  bottom: number;\n  width: number;\n  height: number;\n};\n\ntype Size = {\n  width: number;\n  height: number;\n};\n\ntype Value = {\n  unit: Unit;\n  value: number;\n};\n\nexport type Config = {\n  free(): void;\n  isExperimentalFeatureEnabled(feature: ExperimentalFeature): boolean;\n  setExperimentalFeatureEnabled(\n    feature: ExperimentalFeature,\n    enabled: boolean,\n  ): void;\n  setPointScaleFactor(factor: number): void;\n  getErrata(): Errata;\n  setErrata(errata: Errata): void;\n  useWebDefaults(): boolean;\n  setUseWebDefaults(useWebDefaults: boolean): void;\n};\n\nexport type DirtiedFunction = (node: Node) => void;\n\nexport type MeasureFunction = (\n  width: number,\n  widthMode: MeasureMode,\n  height: number,\n  heightMode: MeasureMode,\n) => Size;\n\nexport type Node = {\n  calculateLayout(\n    width: number | 'auto' | undefined,\n    height: number | 'auto' | undefined,\n    direction?: Direction,\n  ): void;\n  copyStyle(node: Node): void;\n  free(): void;\n  freeRecursive(): void;\n  getAlignContent(): Align;\n  getAlignItems(): Align;\n  getAlignSelf(): Align;\n  getAspectRatio(): number;\n  getBorder(edge: Edge): number;\n  getChild(index: number): Node;\n  getChildCount(): number;\n  getComputedBorder(edge: Edge): number;\n  getComputedBottom(): number;\n  getComputedHeight(): number;\n  getComputedLayout(): Layout;\n  getComputedLeft(): number;\n  getComputedMargin(edge: Edge): number;\n  getComputedPadding(edge: Edge): number;\n  getComputedRight(): number;\n  getComputedTop(): number;\n  getComputedWidth(): number;\n  getDirection(): Direction;\n  getDisplay(): Display;\n  getFlexBasis(): Value;\n  getFlexDirection(): FlexDirection;\n  getFlexGrow(): number;\n  getFlexShrink(): number;\n  getFlexWrap(): Wrap;\n  getHeight(): Value;\n  getJustifyContent(): Justify;\n  getGap(gutter: Gutter): Value;\n  getMargin(edge: Edge): Value;\n  getMaxHeight(): Value;\n  getMaxWidth(): Value;\n  getMinHeight(): Value;\n  getMinWidth(): Value;\n  getOverflow(): Overflow;\n  getPadding(edge: Edge): Value;\n  getParent(): Node | null;\n  getPosition(edge: Edge): Value;\n  getPositionType(): PositionType;\n  getBoxSizing(): BoxSizing;\n  getWidth(): Value;\n  insertChild(child: Node, index: number): void;\n  isDirty(): boolean;\n  isReferenceBaseline(): boolean;\n  markDirty(): void;\n  hasNewLayout(): boolean;\n  markLayoutSeen(): void;\n  removeChild(child: Node): void;\n  reset(): void;\n  setAlignContent(alignContent: Align): void;\n  setAlignItems(alignItems: Align): void;\n  setAlignSelf(alignSelf: Align): void;\n  setAspectRatio(aspectRatio: number | undefined): void;\n  setBorder(edge: Edge, borderWidth: number | undefined): void;\n  setDirection(direction: Direction): void;\n  setDisplay(display: Display): void;\n  setFlex(flex: number | undefined): void;\n  setFlexBasis(flexBasis: number | 'auto' | `${number}%` | undefined): void;\n  setFlexBasisPercent(flexBasis: number | undefined): void;\n  setFlexBasisAuto(): void;\n  setFlexDirection(flexDirection: FlexDirection): void;\n  setFlexGrow(flexGrow: number | undefined): void;\n  setFlexShrink(flexShrink: number | undefined): void;\n  setFlexWrap(flexWrap: Wrap): void;\n  setHeight(height: number | 'auto' | `${number}%` | undefined): void;\n  setIsReferenceBaseline(isReferenceBaseline: boolean): void;\n  setHeightAuto(): void;\n  setHeightPercent(height: number | undefined): void;\n  setJustifyContent(justifyContent: Justify): void;\n  setGap(gutter: Gutter, gapLength: number | `${number}%` | undefined): Value;\n  setGapPercent(gutter: Gutter, gapLength: number | undefined): Value;\n  setMargin(\n    edge: Edge,\n    margin: number | 'auto' | `${number}%` | undefined,\n  ): void;\n  setMarginAuto(edge: Edge): void;\n  setMarginPercent(edge: Edge, margin: number | undefined): void;\n  setMaxHeight(maxHeight: number | `${number}%` | undefined): void;\n  setMaxHeightPercent(maxHeight: number | undefined): void;\n  setMaxWidth(maxWidth: number | `${number}%` | undefined): void;\n  setMaxWidthPercent(maxWidth: number | undefined): void;\n  setDirtiedFunc(dirtiedFunc: DirtiedFunction | null): void;\n  setMeasureFunc(measureFunc: MeasureFunction | null): void;\n  setMinHeight(minHeight: number | `${number}%` | undefined): void;\n  setMinHeightPercent(minHeight: number | undefined): void;\n  setMinWidth(minWidth: number | `${number}%` | undefined): void;\n  setMinWidthPercent(minWidth: number | undefined): void;\n  setOverflow(overflow: Overflow): void;\n  setPadding(edge: Edge, padding: number | `${number}%` | undefined): void;\n  setPaddingPercent(edge: Edge, padding: number | undefined): void;\n  setPosition(edge: Edge, position: number | `${number}%` | undefined): void;\n  setPositionPercent(edge: Edge, position: number | undefined): void;\n  setPositionType(positionType: PositionType): void;\n  setPositionAuto(edge: Edge): void;\n  setBoxSizing(boxSizing: BoxSizing): void;\n  setWidth(width: number | 'auto' | `${number}%` | undefined): void;\n  setWidthAuto(): void;\n  setWidthPercent(width: number | undefined): void;\n  unsetDirtiedFunc(): void;\n  unsetMeasureFunc(): void;\n  setAlwaysFormsContainingBlock(alwaysFormsContainingBlock: boolean): void;\n};\n\nexport type Yoga = {\n  Config: {\n    create(): Config;\n    destroy(config: Config): void;\n  };\n  Node: {\n    create(config?: Config): Node;\n    createDefault(): Node;\n    createWithConfig(config: Config): Node;\n    destroy(node: Node): void;\n  };\n} & typeof YGEnums;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport default function wrapAssembly(lib: any): Yoga {\n  function patch(prototype, name, fn) {\n    const original = prototype[name];\n\n    prototype[name] = function (...args) {\n      return fn.call(this, original, ...args);\n    };\n  }\n\n  for (const fnName of [\n    'setPosition',\n    'setMargin',\n    'setFlexBasis',\n    'setWidth',\n    'setHeight',\n    'setMinWidth',\n    'setMinHeight',\n    'setMaxWidth',\n    'setMaxHeight',\n    'setPadding',\n    'setGap',\n  ]) {\n    const methods = {\n      [Unit.Point]: lib.Node.prototype[fnName],\n      [Unit.Percent]: lib.Node.prototype[`${fnName}Percent`],\n      [Unit.Auto]: lib.Node.prototype[`${fnName}Auto`],\n    };\n\n    patch(lib.Node.prototype, fnName, function (original, ...args) {\n      // We patch all these functions to add support for the following calls:\n      // .setWidth(100) / .setWidth(\"100%\") / .setWidth(.getWidth()) / .setWidth(\"auto\")\n\n      const value = args.pop();\n      let unit, asNumber;\n\n      if (value === 'auto') {\n        unit = Unit.Auto;\n        asNumber = undefined;\n      } else if (typeof value === 'object') {\n        unit = value.unit;\n        asNumber = value.valueOf();\n      } else {\n        unit =\n          typeof value === 'string' && value.endsWith('%')\n            ? Unit.Percent\n            : Unit.Point;\n        asNumber = parseFloat(value);\n        if (\n          value !== undefined &&\n          !Number.isNaN(value) &&\n          Number.isNaN(asNumber)\n        ) {\n          throw new Error(`Invalid value ${value} for ${fnName}`);\n        }\n      }\n\n      if (!methods[unit])\n        throw new Error(\n          `Failed to execute \"${fnName}\": Unsupported unit '${value}'`,\n        );\n\n      if (asNumber !== undefined) {\n        return methods[unit].call(this, ...args, asNumber);\n      } else {\n        return methods[unit].call(this, ...args);\n      }\n    });\n  }\n\n  function wrapMeasureFunction(measureFunction) {\n    return lib.MeasureCallback.implement({\n      measure: (...args) => {\n        const {width, height} = measureFunction(...args);\n        return {\n          width: width ?? NaN,\n          height: height ?? NaN,\n        };\n      },\n    });\n  }\n\n  patch(lib.Node.prototype, 'setMeasureFunc', function (original, measureFunc) {\n    // This patch is just a convenience patch, since it helps write more\n    // idiomatic source code (such as .setMeasureFunc(null))\n    if (measureFunc) {\n      return original.call(this, wrapMeasureFunction(measureFunc));\n    } else {\n      return this.unsetMeasureFunc();\n    }\n  });\n\n  function wrapDirtiedFunc(dirtiedFunction) {\n    return lib.DirtiedCallback.implement({dirtied: dirtiedFunction});\n  }\n\n  patch(lib.Node.prototype, 'setDirtiedFunc', function (original, dirtiedFunc) {\n    original.call(this, wrapDirtiedFunc(dirtiedFunc));\n  });\n\n  patch(lib.Config.prototype, 'free', function () {\n    // Since we handle the memory allocation ourselves (via lib.Config.create),\n    // we also need to handle the deallocation\n    lib.Config.destroy(this);\n  });\n\n  patch(lib.Node, 'create', (_, config) => {\n    // We decide the constructor we want to call depending on the parameters\n    return config\n      ? lib.Node.createWithConfig(config)\n      : lib.Node.createDefault();\n  });\n\n  patch(lib.Node.prototype, 'free', function () {\n    // Since we handle the memory allocation ourselves (via lib.Node.create),\n    // we also need to handle the deallocation\n    lib.Node.destroy(this);\n  });\n\n  patch(lib.Node.prototype, 'freeRecursive', function () {\n    for (let t = 0, T = this.getChildCount(); t < T; ++t) {\n      this.getChild(0).freeRecursive();\n    }\n    this.free();\n  });\n\n  patch(\n    lib.Node.prototype,\n    'calculateLayout',\n    function (original, width = NaN, height = NaN, direction = Direction.LTR) {\n      // Just a small patch to add support for the function default parameters\n      return original.call(this, width, height, direction);\n    },\n  );\n\n  return {\n    Config: lib.Config,\n    Node: lib.Node,\n    ...YGEnums,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}