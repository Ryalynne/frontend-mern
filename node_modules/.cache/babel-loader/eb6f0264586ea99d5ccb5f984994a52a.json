{"ast":null,"code":"import _slicedToArray from \"C:/Users/PC/Documents/PROGRAMMING/MERN/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"C:/Users/PC/Documents/PROGRAMMING/MERN/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _defineProperty from \"C:/Users/PC/Documents/PROGRAMMING/MERN/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"C:/Users/PC/Documents/PROGRAMMING/MERN/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { compose, castArray, parseFloat as parseFloat$1, matchPercent } from '@react-pdf/fns';\nimport matchMedia from 'media-engine';\nimport hlsToHex from 'hsl-to-hex';\nimport colorString from 'color-string';\nimport parse$1 from 'postcss-value-parser/lib/parse.js';\nimport parseUnit from 'postcss-value-parser/lib/unit.js';\n/**\n * Remove nil values from array\n *\n * @param array - Style array\n * @returns Style array without nils\n */\n\nvar compact = function compact(array) {\n  return array.filter(Boolean);\n};\n/**\n * Merges style objects array\n *\n * @param styles - Style array\n * @returns Merged style object\n */\n\n\nvar mergeStyles = function mergeStyles(styles) {\n  return styles.reduce(function (acc, style) {\n    var s = Array.isArray(style) ? flatten(style) : style;\n    Object.keys(s).forEach(function (key) {\n      if (s[key] !== null && s[key] !== undefined) {\n        acc[key] = s[key];\n      }\n    });\n    return acc;\n  }, {});\n};\n/**\n * Flattens an array of style objects, into one aggregated style object.\n *\n * @param styles - Style or style array\n * @returns Flattened style object\n */\n\n\nvar flatten = compose(mergeStyles, compact, castArray);\n/**\n * Resolves media queries in styles object\n *\n * @param container - Container for which styles are resolved\n * @param style - Style description\n * @returns Resolved style object\n */\n\nvar resolveMediaQueries = function resolveMediaQueries(container, style) {\n  return Object.keys(style).reduce(function (acc, key) {\n    if (/@media/.test(key)) {\n      return _objectSpread(_objectSpread({}, acc), matchMedia(_defineProperty({}, key, style[key]), container));\n    }\n\n    return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, key, style[key]));\n  }, {});\n};\n\nvar isRgb = function isRgb(value) {\n  return /rgba?/g.test(value);\n};\n\nvar isHsl = function isHsl(value) {\n  return /hsla?/g.test(value);\n};\n/**\n * Transform rgb color to hexa\n *\n * @param value - Styles value\n * @returns Transformed value\n */\n\n\nvar parseRgb = function parseRgb(value) {\n  var rgb = colorString.get.rgb(value);\n  return colorString.to.hex(rgb);\n};\n/**\n * Transform Hsl color to hexa\n *\n * @param value - Styles value\n * @returns Transformed value\n */\n\n\nvar parseHsl = function parseHsl(value) {\n  var hsl = colorString.get.hsl(value).map(Math.round);\n  var hex = hlsToHex.apply(void 0, _toConsumableArray(hsl));\n  return hex.toUpperCase();\n};\n/**\n * Transform given color to hexa\n *\n * @param value - Styles value\n * @returns Transformed value\n */\n\n\nvar transformColor = function transformColor(value) {\n  if (isRgb(value)) return parseRgb(value);\n  if (isHsl(value)) return parseHsl(value);\n  return value;\n};\n/**\n * Parses scalar value in value and unit pairs\n *\n * @param value - Scalar value\n * @returns Parsed value\n */\n\n\nvar parseValue = function parseValue(value) {\n  if (typeof value === 'number') return {\n    value: value,\n    unit: undefined\n  };\n  var match = /^(-?\\d*\\.?\\d+)(in|mm|cm|pt|vh|vw|px|rem)?$/g.exec(value);\n  return match ? {\n    value: parseFloat(match[1]),\n    unit: match[2] || 'pt'\n  } : {\n    value: value,\n    unit: undefined\n  };\n};\n/**\n * Transform given scalar value\n *\n * @param container\n * @param value - Styles value\n * @returns Transformed value\n */\n\n\nvar transformUnit = function transformUnit(container, value) {\n  var scalar = parseValue(value);\n  var outputDpi = 72;\n  var inputDpi = container.dpi || 72;\n  var mmFactor = 1 / 25.4 * outputDpi;\n  var cmFactor = 1 / 2.54 * outputDpi;\n  if (typeof scalar.value !== 'number') return scalar.value;\n\n  switch (scalar.unit) {\n    case 'rem':\n      return scalar.value * (container.remBase || 18);\n\n    case 'in':\n      return scalar.value * outputDpi;\n\n    case 'mm':\n      return scalar.value * mmFactor;\n\n    case 'cm':\n      return scalar.value * cmFactor;\n\n    case 'vh':\n      return scalar.value * (container.height / 100);\n\n    case 'vw':\n      return scalar.value * (container.width / 100);\n\n    case 'px':\n      return Math.round(scalar.value * (outputDpi / inputDpi));\n\n    default:\n      return scalar.value;\n  }\n};\n\nvar processNumberValue = function processNumberValue(key, value) {\n  return _defineProperty({}, key, parseFloat$1(value));\n};\n\nvar processUnitValue = function processUnitValue(key, value, container) {\n  return _defineProperty({}, key, transformUnit(container, value));\n};\n\nvar processColorValue = function processColorValue(key, value) {\n  var result = _defineProperty({}, key, transformColor(value));\n\n  return result;\n};\n\nvar processNoopValue = function processNoopValue(key, value) {\n  return _defineProperty({}, key, value);\n};\n\nvar BORDER_SHORTHAND_REGEX = /(-?\\d+(\\.\\d+)?(in|mm|cm|pt|vw|vh|px|rem)?)\\s(\\S+)\\s(.+)/;\n\nvar matchBorderShorthand = function matchBorderShorthand(value) {\n  return value.match(BORDER_SHORTHAND_REGEX) || [];\n};\n\nvar resolveBorderShorthand = function resolveBorderShorthand(key, value, container) {\n  var match = matchBorderShorthand(\"\".concat(value));\n\n  if (match) {\n    var widthMatch = match[1] || value;\n    var styleMatch = match[4] || value;\n    var colorMatch = match[5] || value;\n    var style = styleMatch;\n    var color = colorMatch ? transformColor(colorMatch) : undefined;\n    var width = widthMatch ? transformUnit(container, widthMatch) : undefined;\n\n    if (key.match(/(Top|Right|Bottom|Left)$/)) {\n      var _ref4;\n\n      return _ref4 = {}, _defineProperty(_ref4, \"\".concat(key, \"Color\"), color), _defineProperty(_ref4, \"\".concat(key, \"Style\"), style), _defineProperty(_ref4, \"\".concat(key, \"Width\"), width), _ref4;\n    }\n\n    if (key.match(/Color$/)) {\n      return {\n        borderTopColor: color,\n        borderRightColor: color,\n        borderBottomColor: color,\n        borderLeftColor: color\n      };\n    }\n\n    if (key.match(/Style$/)) {\n      if (typeof style === 'number') throw new Error(\"Invalid border style: \".concat(style));\n      return {\n        borderTopStyle: style,\n        borderRightStyle: style,\n        borderBottomStyle: style,\n        borderLeftStyle: style\n      };\n    }\n\n    if (key.match(/Width$/)) {\n      if (typeof width !== 'number') throw new Error(\"Invalid border width: \".concat(width));\n      return {\n        borderTopWidth: width,\n        borderRightWidth: width,\n        borderBottomWidth: width,\n        borderLeftWidth: width\n      };\n    }\n\n    if (key.match(/Radius$/)) {\n      var radius = value ? transformUnit(container, value) : undefined;\n      if (typeof radius !== 'number') throw new Error(\"Invalid border radius: \".concat(radius));\n      return {\n        borderTopLeftRadius: radius,\n        borderTopRightRadius: radius,\n        borderBottomRightRadius: radius,\n        borderBottomLeftRadius: radius\n      };\n    }\n\n    if (typeof width !== 'number') throw new Error(\"Invalid border width: \".concat(width));\n    if (typeof style === 'number') throw new Error(\"Invalid border style: \".concat(style));\n    return {\n      borderTopColor: color,\n      borderTopStyle: style,\n      borderTopWidth: width,\n      borderRightColor: color,\n      borderRightStyle: style,\n      borderRightWidth: width,\n      borderBottomColor: color,\n      borderBottomStyle: style,\n      borderBottomWidth: width,\n      borderLeftColor: color,\n      borderLeftStyle: style,\n      borderLeftWidth: width\n    };\n  }\n\n  return _defineProperty({}, key, value);\n};\n\nvar handlers$b = {\n  border: resolveBorderShorthand,\n  borderBottom: resolveBorderShorthand,\n  borderBottomColor: processColorValue,\n  borderBottomLeftRadius: processUnitValue,\n  borderBottomRightRadius: processUnitValue,\n  borderBottomStyle: processNoopValue,\n  borderBottomWidth: processUnitValue,\n  borderColor: resolveBorderShorthand,\n  borderLeft: resolveBorderShorthand,\n  borderLeftColor: processColorValue,\n  borderLeftStyle: processNoopValue,\n  borderLeftWidth: processUnitValue,\n  borderRadius: resolveBorderShorthand,\n  borderRight: resolveBorderShorthand,\n  borderRightColor: processColorValue,\n  borderRightStyle: processNoopValue,\n  borderRightWidth: processUnitValue,\n  borderStyle: resolveBorderShorthand,\n  borderTop: resolveBorderShorthand,\n  borderTopColor: processColorValue,\n  borderTopLeftRadius: processUnitValue,\n  borderTopRightRadius: processUnitValue,\n  borderTopStyle: processNoopValue,\n  borderTopWidth: processUnitValue,\n  borderWidth: resolveBorderShorthand\n};\nvar handlers$a = {\n  backgroundColor: processColorValue,\n  color: processColorValue,\n  opacity: processNumberValue\n};\nvar handlers$9 = {\n  height: processUnitValue,\n  maxHeight: processUnitValue,\n  maxWidth: processUnitValue,\n  minHeight: processUnitValue,\n  minWidth: processUnitValue,\n  width: processUnitValue\n}; // https://developer.mozilla.org/en-US/docs/Web/CSS/flex#values\n// TODO: change flex defaults to [0, 1, 'auto'] as in spec in next major release\n\nvar flexDefaults = [1, 1, 0];\nvar flexAuto = [1, 1, 'auto'];\n\nvar processFlexShorthand = function processFlexShorthand(key, value, container) {\n  var defaults = flexDefaults;\n  var matches = [];\n\n  if (value === 'auto') {\n    defaults = flexAuto;\n  } else {\n    matches = \"\".concat(value).split(' ');\n  }\n\n  var flexGrow = parseFloat$1(matches[0] || defaults[0]);\n  var flexShrink = parseFloat$1(matches[1] || defaults[1]);\n  var flexBasis = transformUnit(container, matches[2] || defaults[2]);\n  return {\n    flexGrow: flexGrow,\n    flexShrink: flexShrink,\n    flexBasis: flexBasis\n  };\n};\n\nvar handlers$8 = {\n  alignContent: processNoopValue,\n  alignItems: processNoopValue,\n  alignSelf: processNoopValue,\n  flex: processFlexShorthand,\n  flexBasis: processUnitValue,\n  flexDirection: processNoopValue,\n  flexFlow: processNoopValue,\n  flexGrow: processNumberValue,\n  flexShrink: processNumberValue,\n  flexWrap: processNoopValue,\n  justifyContent: processNoopValue,\n  justifySelf: processNoopValue\n};\n\nvar processGapShorthand = function processGapShorthand(key, value, container) {\n  var match = \"\".concat(value).split(' ');\n  var rowGap = transformUnit(container, (match === null || match === void 0 ? void 0 : match[0]) || value);\n  var columnGap = transformUnit(container, (match === null || match === void 0 ? void 0 : match[1]) || value);\n  return {\n    rowGap: rowGap,\n    columnGap: columnGap\n  };\n};\n\nvar handlers$7 = {\n  gap: processGapShorthand,\n  columnGap: processUnitValue,\n  rowGap: processUnitValue\n};\nvar handlers$6 = {\n  aspectRatio: processNumberValue,\n  bottom: processUnitValue,\n  display: processNoopValue,\n  left: processUnitValue,\n  position: processNoopValue,\n  right: processUnitValue,\n  top: processUnitValue,\n  overflow: processNoopValue,\n  zIndex: processNumberValue\n};\nvar BOX_MODEL_UNITS = 'px,in,mm,cm,pt,%,vw,vh';\n\nvar logError = function logError(style, value) {\n  var name = style.toString(); // eslint-disable-next-line no-console\n\n  console.error(\"\\n    @react-pdf/stylesheet parsing error:\\n    \".concat(name, \": \").concat(value, \",\\n    \").concat(' '.repeat(name.length + 2), \"^\\n    Unsupported \").concat(name, \" value format\\n  \"));\n};\n/**\n * @param options\n * @param [options.expandsTo]\n * @param [options.maxValues]\n * @param [options.autoSupported]\n */\n\n\nvar expandBoxModel = function expandBoxModel() {\n  var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      expandsTo = _ref6.expandsTo,\n      _ref6$maxValues = _ref6.maxValues,\n      maxValues = _ref6$maxValues === void 0 ? 1 : _ref6$maxValues,\n      _ref6$autoSupported = _ref6.autoSupported,\n      autoSupported = _ref6$autoSupported === void 0 ? false : _ref6$autoSupported;\n\n  return function (model, value, container) {\n    var nodes = parse$1(\"\".concat(value));\n    var parts = [];\n\n    for (var i = 0; i < nodes.length; i++) {\n      var node = nodes[i]; // value contains `calc`, `url` or other css function\n      // `,`, `/` or strings that unsupported by margin and padding\n\n      if (node.type === 'function' || node.type === 'string' || node.type === 'div') {\n        logError(model, value);\n        return {};\n      }\n\n      if (node.type === 'word') {\n        if (node.value === 'auto' && autoSupported) {\n          parts.push(node.value);\n        } else {\n          var result = parseUnit(node.value); // when unit isn't specified this condition is true\n\n          if (result && BOX_MODEL_UNITS.includes(result.unit)) {\n            parts.push(node.value);\n          } else {\n            logError(model, value);\n            return {};\n          }\n        }\n      }\n    } // checks that we have enough parsed values\n\n\n    if (parts.length > maxValues) {\n      logError(model, value);\n      return {};\n    }\n\n    var first = transformUnit(container, parts[0]);\n\n    if (expandsTo) {\n      var second = transformUnit(container, parts[1] || parts[0]);\n      var third = transformUnit(container, parts[2] || parts[0]);\n      var fourth = transformUnit(container, parts[3] || parts[1] || parts[0]);\n      return expandsTo({\n        first: first,\n        second: second,\n        third: third,\n        fourth: fourth\n      });\n    }\n\n    return _defineProperty({}, model, first);\n  };\n};\n\nvar processMargin = expandBoxModel({\n  expandsTo: function expandsTo(_ref8) {\n    var first = _ref8.first,\n        second = _ref8.second,\n        third = _ref8.third,\n        fourth = _ref8.fourth;\n    return {\n      marginTop: first,\n      marginRight: second,\n      marginBottom: third,\n      marginLeft: fourth\n    };\n  },\n  maxValues: 4,\n  autoSupported: true\n});\nvar processMarginVertical = expandBoxModel({\n  expandsTo: function expandsTo(_ref9) {\n    var first = _ref9.first,\n        second = _ref9.second;\n    return {\n      marginTop: first,\n      marginBottom: second\n    };\n  },\n  maxValues: 2,\n  autoSupported: true\n});\nvar processMarginHorizontal = expandBoxModel({\n  expandsTo: function expandsTo(_ref10) {\n    var first = _ref10.first,\n        second = _ref10.second;\n    return {\n      marginRight: first,\n      marginLeft: second\n    };\n  },\n  maxValues: 2,\n  autoSupported: true\n});\nvar processMarginSingle = expandBoxModel({\n  autoSupported: true\n});\nvar handlers$5 = {\n  margin: processMargin,\n  marginBottom: processMarginSingle,\n  marginHorizontal: processMarginHorizontal,\n  marginLeft: processMarginSingle,\n  marginRight: processMarginSingle,\n  marginTop: processMarginSingle,\n  marginVertical: processMarginVertical\n};\nvar processPadding = expandBoxModel({\n  expandsTo: function expandsTo(_ref11) {\n    var first = _ref11.first,\n        second = _ref11.second,\n        third = _ref11.third,\n        fourth = _ref11.fourth;\n    return {\n      paddingTop: first,\n      paddingRight: second,\n      paddingBottom: third,\n      paddingLeft: fourth\n    };\n  },\n  maxValues: 4\n});\nvar processPaddingVertical = expandBoxModel({\n  expandsTo: function expandsTo(_ref12) {\n    var first = _ref12.first,\n        second = _ref12.second;\n    return {\n      paddingTop: first,\n      paddingBottom: second\n    };\n  },\n  maxValues: 2\n});\nvar processPaddingHorizontal = expandBoxModel({\n  expandsTo: function expandsTo(_ref13) {\n    var first = _ref13.first,\n        second = _ref13.second;\n    return {\n      paddingRight: first,\n      paddingLeft: second\n    };\n  },\n  maxValues: 2\n});\nvar processPaddingSingle = expandBoxModel();\nvar handlers$4 = {\n  padding: processPadding,\n  paddingBottom: processPaddingSingle,\n  paddingHorizontal: processPaddingHorizontal,\n  paddingLeft: processPaddingSingle,\n  paddingRight: processPaddingSingle,\n  paddingTop: processPaddingSingle,\n  paddingVertical: processPaddingVertical\n};\n\nvar offsetKeyword = function offsetKeyword(value) {\n  switch (value) {\n    case 'top':\n    case 'left':\n      return '0%';\n\n    case 'right':\n    case 'bottom':\n      return '100%';\n\n    case 'center':\n      return '50%';\n\n    default:\n      return value;\n  }\n};\n\nvar processObjectPosition = function processObjectPosition(key, value, container) {\n  var match = \"\".concat(value).split(' ');\n  var objectPositionX = offsetKeyword(transformUnit(container, (match === null || match === void 0 ? void 0 : match[0]) || value));\n  var objectPositionY = offsetKeyword(transformUnit(container, (match === null || match === void 0 ? void 0 : match[1]) || value));\n  return {\n    objectPositionX: objectPositionX,\n    objectPositionY: objectPositionY\n  };\n};\n\nvar processObjectPositionValue = function processObjectPositionValue(key, value, container) {\n  return _defineProperty({}, key, offsetKeyword(transformUnit(container, value)));\n};\n\nvar handlers$3 = {\n  objectPosition: processObjectPosition,\n  objectPositionX: processObjectPositionValue,\n  objectPositionY: processObjectPositionValue,\n  objectFit: processNoopValue\n};\n\nvar castInt = function castInt(value) {\n  if (typeof value === 'number') return value;\n  return parseInt(value, 10);\n};\n\nvar FONT_WEIGHTS = {\n  thin: 100,\n  hairline: 100,\n  ultralight: 200,\n  extralight: 200,\n  light: 300,\n  normal: 400,\n  medium: 500,\n  semibold: 600,\n  demibold: 600,\n  bold: 700,\n  ultrabold: 800,\n  extrabold: 800,\n  heavy: 900,\n  black: 900\n};\n\nvar transformFontWeight = function transformFontWeight(value) {\n  if (!value) return FONT_WEIGHTS.normal;\n  if (typeof value === 'number') return value;\n  var lv = value.toLowerCase();\n  if (FONT_WEIGHTS[lv]) return FONT_WEIGHTS[lv];\n  return castInt(value);\n};\n\nvar processFontWeight = function processFontWeight(key, value) {\n  return _defineProperty({}, key, transformFontWeight(value));\n};\n\nvar transformLineHeight = function transformLineHeight(value, styles, container) {\n  if (value === '') return value;\n  var fontSize = transformUnit(container, styles.fontSize || 18);\n  var lineHeight = transformUnit(container, value); // Percent values: use this number multiplied by the element's font size\n\n  var _ref16 = matchPercent(lineHeight) || {},\n      percent = _ref16.percent;\n\n  if (percent) return percent * fontSize; // Unitless values: use this number multiplied by the element's font size\n\n  return isNaN(value) ? lineHeight : lineHeight * fontSize;\n};\n\nvar processLineHeight = function processLineHeight(key, value, container, styles) {\n  return _defineProperty({}, key, transformLineHeight(value, styles, container));\n};\n\nvar handlers$2 = {\n  direction: processNoopValue,\n  fontFamily: processNoopValue,\n  fontSize: processUnitValue,\n  fontStyle: processNoopValue,\n  fontWeight: processFontWeight,\n  letterSpacing: processUnitValue,\n  lineHeight: processLineHeight,\n  maxLines: processNumberValue,\n  textAlign: processNoopValue,\n  textDecoration: processNoopValue,\n  textDecorationColor: processColorValue,\n  textDecorationStyle: processNoopValue,\n  textIndent: processNoopValue,\n  textOverflow: processNoopValue,\n  textTransform: processNoopValue,\n  verticalAlign: processNoopValue\n};\n\nvar matchNumber = function matchNumber(value) {\n  return typeof value === 'string' && /^-?\\d*\\.?\\d*$/.test(value);\n};\n\nvar castFloat = function castFloat(value) {\n  if (typeof value !== 'string') return value;\n  if (matchNumber(value)) return parseFloat(value);\n  return value;\n};\n\nvar parse = function parse(transformString) {\n  var transforms = transformString.trim().split(/\\)[ ,]|\\)/); // Handle \"initial\", \"inherit\", \"unset\".\n\n  if (transforms.length === 1) {\n    return [[transforms[0], true]];\n  }\n\n  var parsed = [];\n\n  for (var i = 0; i < transforms.length; i += 1) {\n    var transform = transforms[i];\n\n    if (transform) {\n      var _transform$split = transform.split('('),\n          _transform$split2 = _slicedToArray(_transform$split, 2),\n          name = _transform$split2[0],\n          rawValue = _transform$split2[1];\n\n      var splitChar = rawValue.indexOf(',') >= 0 ? ',' : ' ';\n      var value = rawValue.split(splitChar).map(function (val) {\n        return val.trim();\n      });\n      parsed.push({\n        operation: name.trim(),\n        value: value\n      });\n    }\n  }\n\n  return parsed;\n};\n\nvar parseAngle = function parseAngle(value) {\n  var unitsRegexp = /(-?\\d*\\.?\\d*)(\\w*)?/i;\n\n  var _unitsRegexp$exec = unitsRegexp.exec(value),\n      _unitsRegexp$exec2 = _slicedToArray(_unitsRegexp$exec, 3),\n      angle = _unitsRegexp$exec2[1],\n      unit = _unitsRegexp$exec2[2];\n\n  var number = Number.parseFloat(angle);\n  return unit === 'rad' ? number * 180 / Math.PI : number;\n};\n\nvar normalizeTransformOperation = function normalizeTransformOperation(_ref18) {\n  var operation = _ref18.operation,\n      value = _ref18.value;\n\n  switch (operation) {\n    case 'scale':\n      {\n        var _value$map = value.map(function (num) {\n          return Number.parseFloat(num);\n        }),\n            _value$map2 = _slicedToArray(_value$map, 2),\n            scaleX = _value$map2[0],\n            _value$map2$ = _value$map2[1],\n            scaleY = _value$map2$ === void 0 ? scaleX : _value$map2$;\n\n        return {\n          operation: 'scale',\n          value: [scaleX, scaleY]\n        };\n      }\n\n    case 'scaleX':\n      {\n        return {\n          operation: 'scale',\n          value: [Number.parseFloat(value), 1]\n        };\n      }\n\n    case 'scaleY':\n      {\n        return {\n          operation: 'scale',\n          value: [1, Number.parseFloat(value)]\n        };\n      }\n\n    case 'rotate':\n      {\n        return {\n          operation: 'rotate',\n          value: [parseAngle(value)]\n        };\n      }\n\n    case 'translate':\n      {\n        return {\n          operation: 'translate',\n          value: value.map(function (num) {\n            return Number.parseFloat(num);\n          })\n        };\n      }\n\n    case 'translateX':\n      {\n        return {\n          operation: 'translate',\n          value: [Number.parseFloat(value), 0]\n        };\n      }\n\n    case 'translateY':\n      {\n        return {\n          operation: 'translate',\n          value: [0, Number.parseFloat(value)]\n        };\n      }\n\n    case 'skew':\n      {\n        return {\n          operation: 'skew',\n          value: value.map(parseAngle)\n        };\n      }\n\n    case 'skewX':\n      {\n        return {\n          operation: 'skew',\n          value: [parseAngle(value), 0]\n        };\n      }\n\n    case 'skewY':\n      {\n        return {\n          operation: 'skew',\n          value: [0, parseAngle(value)]\n        };\n      }\n\n    default:\n      {\n        return {\n          operation: operation,\n          value: value.map(function (num) {\n            return Number.parseFloat(num);\n          })\n        };\n      }\n  }\n};\n\nvar normalize = function normalize(operations) {\n  return operations.map(function (operation) {\n    return normalizeTransformOperation(operation);\n  });\n};\n\nvar processTransform = function processTransform(key, value) {\n  if (typeof value !== 'string') return _defineProperty({}, key, value);\n  return _defineProperty({}, key, normalize(parse(value)));\n};\n\nvar Y_AXIS_SHORTHANDS = {\n  top: true,\n  bottom: true\n};\n\nvar sortTransformOriginPair = function sortTransformOriginPair(a, b) {\n  if (Y_AXIS_SHORTHANDS[a]) return 1;\n  if (Y_AXIS_SHORTHANDS[b]) return -1;\n  return 0;\n};\n\nvar getTransformOriginPair = function getTransformOriginPair(values) {\n  if (!values || values.length === 0) return ['center', 'center'];\n  var pair = values.length === 1 ? [values[0], 'center'] : values;\n  return pair.sort(sortTransformOriginPair);\n}; // Transforms shorthand transformOrigin values\n\n\nvar processTransformOriginShorthand = function processTransformOriginShorthand(key, value, container) {\n  var match = \"\".concat(value).split(' ');\n  var pair = getTransformOriginPair(match);\n  var transformOriginX = transformUnit(container, pair[0]);\n  var transformOriginY = transformUnit(container, pair[1]);\n  return {\n    transformOriginX: offsetKeyword(transformOriginX) || castFloat(transformOriginX),\n    transformOriginY: offsetKeyword(transformOriginY) || castFloat(transformOriginY)\n  };\n};\n\nvar processTransformOriginValue = function processTransformOriginValue(key, value, container) {\n  var v = transformUnit(container, value);\n  return _defineProperty({}, key, offsetKeyword(v) || castFloat(v));\n};\n\nvar handlers$1 = {\n  transform: processTransform,\n  gradientTransform: processTransform,\n  transformOrigin: processTransformOriginShorthand,\n  transformOriginX: processTransformOriginValue,\n  transformOriginY: processTransformOriginValue\n};\nvar handlers = {\n  fill: processColorValue,\n  stroke: processColorValue,\n  strokeDasharray: processNoopValue,\n  strokeWidth: processUnitValue,\n  fillOpacity: processNumberValue,\n  strokeOpacity: processNumberValue,\n  fillRule: processNoopValue,\n  textAnchor: processNoopValue,\n  strokeLinecap: processNoopValue,\n  strokeLinejoin: processNoopValue,\n  visibility: processNoopValue,\n  clipPath: processNoopValue,\n  dominantBaseline: processNoopValue\n};\n\nvar shorthands = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, handlers$b), handlers$a), handlers$9), handlers$8), handlers$7), handlers$6), handlers$5), handlers$4), handlers$3), handlers$2), handlers$1), handlers);\n/**\n * Expand the shorthand properties.\n *\n * @param style - Style object\n * @returns Expanded style object\n */\n\n\nvar resolve = function resolve(container) {\n  return function (style) {\n    var propsArray = Object.keys(style);\n    var resolvedStyle = {};\n\n    for (var i = 0; i < propsArray.length; i += 1) {\n      var key = propsArray[i];\n      var value = style[key];\n\n      if (!shorthands[key]) {\n        resolvedStyle[key] = value;\n        continue;\n      }\n\n      var resolved = shorthands[key](key, value, container, style);\n      var keys = Object.keys(resolved);\n\n      for (var j = 0; j < keys.length; j += 1) {\n        var propName = keys[j];\n        var propValue = resolved[propName];\n        resolvedStyle[propName] = propValue;\n      }\n    }\n\n    return resolvedStyle;\n  };\n};\n/**\n * Resolves styles\n *\n * @param container\n * @param style - Style\n * @returns Resolved style\n */\n\n\nvar resolveStyles = function resolveStyles(container, style) {\n  var computeMediaQueries = function computeMediaQueries(value) {\n    return resolveMediaQueries(container, value);\n  };\n\n  return compose(resolve(container), computeMediaQueries, flatten)(style);\n};\n\nexport { resolveStyles as default, flatten, transformColor };","map":{"version":3,"sources":["C:/Users/PC/Documents/PROGRAMMING/MERN/frontend/node_modules/@react-pdf/stylesheet/lib/index.js"],"names":["compose","castArray","parseFloat","parseFloat$1","matchPercent","matchMedia","hlsToHex","colorString","parse$1","parseUnit","compact","array","filter","Boolean","mergeStyles","styles","reduce","acc","style","s","Array","isArray","flatten","Object","keys","forEach","key","undefined","resolveMediaQueries","container","test","isRgb","value","isHsl","parseRgb","rgb","get","to","hex","parseHsl","hsl","map","Math","round","toUpperCase","transformColor","parseValue","unit","match","exec","transformUnit","scalar","outputDpi","inputDpi","dpi","mmFactor","cmFactor","remBase","height","width","processNumberValue","processUnitValue","processColorValue","result","processNoopValue","BORDER_SHORTHAND_REGEX","matchBorderShorthand","resolveBorderShorthand","widthMatch","styleMatch","colorMatch","color","borderTopColor","borderRightColor","borderBottomColor","borderLeftColor","Error","borderTopStyle","borderRightStyle","borderBottomStyle","borderLeftStyle","borderTopWidth","borderRightWidth","borderBottomWidth","borderLeftWidth","radius","borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius","handlers$b","border","borderBottom","borderColor","borderLeft","borderRadius","borderRight","borderStyle","borderTop","borderWidth","handlers$a","backgroundColor","opacity","handlers$9","maxHeight","maxWidth","minHeight","minWidth","flexDefaults","flexAuto","processFlexShorthand","defaults","matches","split","flexGrow","flexShrink","flexBasis","handlers$8","alignContent","alignItems","alignSelf","flex","flexDirection","flexFlow","flexWrap","justifyContent","justifySelf","processGapShorthand","rowGap","columnGap","handlers$7","gap","handlers$6","aspectRatio","bottom","display","left","position","right","top","overflow","zIndex","BOX_MODEL_UNITS","logError","name","toString","console","error","repeat","length","expandBoxModel","expandsTo","maxValues","autoSupported","model","nodes","parts","i","node","type","push","includes","first","second","third","fourth","processMargin","marginTop","marginRight","marginBottom","marginLeft","processMarginVertical","processMarginHorizontal","processMarginSingle","handlers$5","margin","marginHorizontal","marginVertical","processPadding","paddingTop","paddingRight","paddingBottom","paddingLeft","processPaddingVertical","processPaddingHorizontal","processPaddingSingle","handlers$4","padding","paddingHorizontal","paddingVertical","offsetKeyword","processObjectPosition","objectPositionX","objectPositionY","processObjectPositionValue","handlers$3","objectPosition","objectFit","castInt","parseInt","FONT_WEIGHTS","thin","hairline","ultralight","extralight","light","normal","medium","semibold","demibold","bold","ultrabold","extrabold","heavy","black","transformFontWeight","lv","toLowerCase","processFontWeight","transformLineHeight","fontSize","lineHeight","percent","isNaN","processLineHeight","handlers$2","direction","fontFamily","fontStyle","fontWeight","letterSpacing","maxLines","textAlign","textDecoration","textDecorationColor","textDecorationStyle","textIndent","textOverflow","textTransform","verticalAlign","matchNumber","castFloat","parse","transformString","transforms","trim","parsed","transform","rawValue","splitChar","indexOf","val","operation","parseAngle","unitsRegexp","angle","number","Number","PI","normalizeTransformOperation","num","scaleX","scaleY","normalize","operations","processTransform","Y_AXIS_SHORTHANDS","sortTransformOriginPair","a","b","getTransformOriginPair","values","pair","sort","processTransformOriginShorthand","transformOriginX","transformOriginY","processTransformOriginValue","v","handlers$1","gradientTransform","transformOrigin","handlers","fill","stroke","strokeDasharray","strokeWidth","fillOpacity","strokeOpacity","fillRule","textAnchor","strokeLinecap","strokeLinejoin","visibility","clipPath","dominantBaseline","shorthands","resolve","propsArray","resolvedStyle","resolved","j","propName","propValue","resolveStyles","computeMediaQueries","default"],"mappings":"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","sourcesContent":["import { compose, castArray, parseFloat as parseFloat$1, matchPercent } from '@react-pdf/fns';\nimport matchMedia from 'media-engine';\nimport hlsToHex from 'hsl-to-hex';\nimport colorString from 'color-string';\nimport parse$1 from 'postcss-value-parser/lib/parse.js';\nimport parseUnit from 'postcss-value-parser/lib/unit.js';\n\n/**\n * Remove nil values from array\n *\n * @param array - Style array\n * @returns Style array without nils\n */\nconst compact = (array) => array.filter(Boolean);\n/**\n * Merges style objects array\n *\n * @param styles - Style array\n * @returns Merged style object\n */\nconst mergeStyles = (styles) => styles.reduce((acc, style) => {\n    const s = Array.isArray(style) ? flatten(style) : style;\n    Object.keys(s).forEach((key) => {\n        if (s[key] !== null && s[key] !== undefined) {\n            acc[key] = s[key];\n        }\n    });\n    return acc;\n}, {});\n/**\n * Flattens an array of style objects, into one aggregated style object.\n *\n * @param styles - Style or style array\n * @returns Flattened style object\n */\nconst flatten = compose(mergeStyles, compact, (castArray));\n\n/**\n * Resolves media queries in styles object\n *\n * @param container - Container for which styles are resolved\n * @param style - Style description\n * @returns Resolved style object\n */\nconst resolveMediaQueries = (container, style) => {\n    return Object.keys(style).reduce((acc, key) => {\n        if (/@media/.test(key)) {\n            return {\n                ...acc,\n                ...matchMedia({ [key]: style[key] }, container),\n            };\n        }\n        return { ...acc, [key]: style[key] };\n    }, {});\n};\n\nconst isRgb = (value) => /rgba?/g.test(value);\nconst isHsl = (value) => /hsla?/g.test(value);\n/**\n * Transform rgb color to hexa\n *\n * @param value - Styles value\n * @returns Transformed value\n */\nconst parseRgb = (value) => {\n    const rgb = colorString.get.rgb(value);\n    return colorString.to.hex(rgb);\n};\n/**\n * Transform Hsl color to hexa\n *\n * @param value - Styles value\n * @returns Transformed value\n */\nconst parseHsl = (value) => {\n    const hsl = colorString.get.hsl(value).map(Math.round);\n    const hex = hlsToHex(...hsl);\n    return hex.toUpperCase();\n};\n/**\n * Transform given color to hexa\n *\n * @param value - Styles value\n * @returns Transformed value\n */\nconst transformColor = (value) => {\n    if (isRgb(value))\n        return parseRgb(value);\n    if (isHsl(value))\n        return parseHsl(value);\n    return value;\n};\n\n/**\n * Parses scalar value in value and unit pairs\n *\n * @param value - Scalar value\n * @returns Parsed value\n */\nconst parseValue = (value) => {\n    if (typeof value === 'number')\n        return { value, unit: undefined };\n    const match = /^(-?\\d*\\.?\\d+)(in|mm|cm|pt|vh|vw|px|rem)?$/g.exec(value);\n    return match\n        ? { value: parseFloat(match[1]), unit: match[2] || 'pt' }\n        : { value, unit: undefined };\n};\n/**\n * Transform given scalar value\n *\n * @param container\n * @param value - Styles value\n * @returns Transformed value\n */\nconst transformUnit = (container, value) => {\n    const scalar = parseValue(value);\n    const outputDpi = 72;\n    const inputDpi = container.dpi || 72;\n    const mmFactor = (1 / 25.4) * outputDpi;\n    const cmFactor = (1 / 2.54) * outputDpi;\n    if (typeof scalar.value !== 'number')\n        return scalar.value;\n    switch (scalar.unit) {\n        case 'rem':\n            return scalar.value * (container.remBase || 18);\n        case 'in':\n            return scalar.value * outputDpi;\n        case 'mm':\n            return scalar.value * mmFactor;\n        case 'cm':\n            return scalar.value * cmFactor;\n        case 'vh':\n            return scalar.value * (container.height / 100);\n        case 'vw':\n            return scalar.value * (container.width / 100);\n        case 'px':\n            return Math.round(scalar.value * (outputDpi / inputDpi));\n        default:\n            return scalar.value;\n    }\n};\n\nconst processNumberValue = (key, value) => ({\n    [key]: parseFloat$1(value),\n});\nconst processUnitValue = (key, value, container) => ({\n    [key]: transformUnit(container, value),\n});\nconst processColorValue = (key, value) => {\n    const result = { [key]: transformColor(value) };\n    return result;\n};\nconst processNoopValue = (key, value) => ({\n    [key]: value,\n});\n\nconst BORDER_SHORTHAND_REGEX = /(-?\\d+(\\.\\d+)?(in|mm|cm|pt|vw|vh|px|rem)?)\\s(\\S+)\\s(.+)/;\nconst matchBorderShorthand = (value) => value.match(BORDER_SHORTHAND_REGEX) || [];\nconst resolveBorderShorthand = (key, value, container) => {\n    const match = matchBorderShorthand(`${value}`);\n    if (match) {\n        const widthMatch = match[1] || value;\n        const styleMatch = match[4] || value;\n        const colorMatch = match[5] || value;\n        const style = styleMatch;\n        const color = colorMatch ? transformColor(colorMatch) : undefined;\n        const width = widthMatch ? transformUnit(container, widthMatch) : undefined;\n        if (key.match(/(Top|Right|Bottom|Left)$/)) {\n            return {\n                [`${key}Color`]: color,\n                [`${key}Style`]: style,\n                [`${key}Width`]: width,\n            };\n        }\n        if (key.match(/Color$/)) {\n            return {\n                borderTopColor: color,\n                borderRightColor: color,\n                borderBottomColor: color,\n                borderLeftColor: color,\n            };\n        }\n        if (key.match(/Style$/)) {\n            if (typeof style === 'number')\n                throw new Error(`Invalid border style: ${style}`);\n            return {\n                borderTopStyle: style,\n                borderRightStyle: style,\n                borderBottomStyle: style,\n                borderLeftStyle: style,\n            };\n        }\n        if (key.match(/Width$/)) {\n            if (typeof width !== 'number')\n                throw new Error(`Invalid border width: ${width}`);\n            return {\n                borderTopWidth: width,\n                borderRightWidth: width,\n                borderBottomWidth: width,\n                borderLeftWidth: width,\n            };\n        }\n        if (key.match(/Radius$/)) {\n            const radius = value ? transformUnit(container, value) : undefined;\n            if (typeof radius !== 'number')\n                throw new Error(`Invalid border radius: ${radius}`);\n            return {\n                borderTopLeftRadius: radius,\n                borderTopRightRadius: radius,\n                borderBottomRightRadius: radius,\n                borderBottomLeftRadius: radius,\n            };\n        }\n        if (typeof width !== 'number')\n            throw new Error(`Invalid border width: ${width}`);\n        if (typeof style === 'number')\n            throw new Error(`Invalid border style: ${style}`);\n        return {\n            borderTopColor: color,\n            borderTopStyle: style,\n            borderTopWidth: width,\n            borderRightColor: color,\n            borderRightStyle: style,\n            borderRightWidth: width,\n            borderBottomColor: color,\n            borderBottomStyle: style,\n            borderBottomWidth: width,\n            borderLeftColor: color,\n            borderLeftStyle: style,\n            borderLeftWidth: width,\n        };\n    }\n    return { [key]: value };\n};\nconst handlers$b = {\n    border: (resolveBorderShorthand),\n    borderBottom: (resolveBorderShorthand),\n    borderBottomColor: (processColorValue),\n    borderBottomLeftRadius: (processUnitValue),\n    borderBottomRightRadius: (processUnitValue),\n    borderBottomStyle: (processNoopValue),\n    borderBottomWidth: (processUnitValue),\n    borderColor: (resolveBorderShorthand),\n    borderLeft: (resolveBorderShorthand),\n    borderLeftColor: (processColorValue),\n    borderLeftStyle: (processNoopValue),\n    borderLeftWidth: (processUnitValue),\n    borderRadius: (resolveBorderShorthand),\n    borderRight: (resolveBorderShorthand),\n    borderRightColor: (processColorValue),\n    borderRightStyle: (processNoopValue),\n    borderRightWidth: (processUnitValue),\n    borderStyle: (resolveBorderShorthand),\n    borderTop: (resolveBorderShorthand),\n    borderTopColor: (processColorValue),\n    borderTopLeftRadius: (processUnitValue),\n    borderTopRightRadius: (processUnitValue),\n    borderTopStyle: (processNoopValue),\n    borderTopWidth: (processUnitValue),\n    borderWidth: (resolveBorderShorthand),\n};\n\nconst handlers$a = {\n    backgroundColor: (processColorValue),\n    color: (processColorValue),\n    opacity: (processNumberValue),\n};\n\nconst handlers$9 = {\n    height: (processUnitValue),\n    maxHeight: (processUnitValue),\n    maxWidth: (processUnitValue),\n    minHeight: (processUnitValue),\n    minWidth: (processUnitValue),\n    width: (processUnitValue),\n};\n\n// https://developer.mozilla.org/en-US/docs/Web/CSS/flex#values\n// TODO: change flex defaults to [0, 1, 'auto'] as in spec in next major release\nconst flexDefaults = [1, 1, 0];\nconst flexAuto = [1, 1, 'auto'];\nconst processFlexShorthand = (key, value, container) => {\n    let defaults = flexDefaults;\n    let matches = [];\n    if (value === 'auto') {\n        defaults = flexAuto;\n    }\n    else {\n        matches = `${value}`.split(' ');\n    }\n    const flexGrow = parseFloat$1(matches[0] || defaults[0]);\n    const flexShrink = parseFloat$1(matches[1] || defaults[1]);\n    const flexBasis = transformUnit(container, matches[2] || defaults[2]);\n    return { flexGrow, flexShrink, flexBasis };\n};\nconst handlers$8 = {\n    alignContent: (processNoopValue),\n    alignItems: (processNoopValue),\n    alignSelf: (processNoopValue),\n    flex: (processFlexShorthand),\n    flexBasis: (processUnitValue),\n    flexDirection: (processNoopValue),\n    flexFlow: (processNoopValue),\n    flexGrow: (processNumberValue),\n    flexShrink: (processNumberValue),\n    flexWrap: (processNoopValue),\n    justifyContent: (processNoopValue),\n    justifySelf: (processNoopValue),\n};\n\nconst processGapShorthand = (key, value, container) => {\n    const match = `${value}`.split(' ');\n    const rowGap = transformUnit(container, match?.[0] || value);\n    const columnGap = transformUnit(container, match?.[1] || value);\n    return { rowGap, columnGap };\n};\nconst handlers$7 = {\n    gap: (processGapShorthand),\n    columnGap: (processUnitValue),\n    rowGap: (processUnitValue),\n};\n\nconst handlers$6 = {\n    aspectRatio: (processNumberValue),\n    bottom: (processUnitValue),\n    display: (processNoopValue),\n    left: (processUnitValue),\n    position: (processNoopValue),\n    right: (processUnitValue),\n    top: (processUnitValue),\n    overflow: (processNoopValue),\n    zIndex: (processNumberValue),\n};\n\nconst BOX_MODEL_UNITS = 'px,in,mm,cm,pt,%,vw,vh';\nconst logError = (style, value) => {\n    const name = style.toString();\n    // eslint-disable-next-line no-console\n    console.error(`\n    @react-pdf/stylesheet parsing error:\n    ${name}: ${value},\n    ${' '.repeat(name.length + 2)}^\n    Unsupported ${name} value format\n  `);\n};\n/**\n * @param options\n * @param [options.expandsTo]\n * @param [options.maxValues]\n * @param [options.autoSupported]\n */\nconst expandBoxModel = ({ expandsTo, maxValues = 1, autoSupported = false, } = {}) => (model, value, container) => {\n    const nodes = parse$1(`${value}`);\n    const parts = [];\n    for (let i = 0; i < nodes.length; i++) {\n        const node = nodes[i];\n        // value contains `calc`, `url` or other css function\n        // `,`, `/` or strings that unsupported by margin and padding\n        if (node.type === 'function' ||\n            node.type === 'string' ||\n            node.type === 'div') {\n            logError(model, value);\n            return {};\n        }\n        if (node.type === 'word') {\n            if (node.value === 'auto' && autoSupported) {\n                parts.push(node.value);\n            }\n            else {\n                const result = parseUnit(node.value);\n                // when unit isn't specified this condition is true\n                if (result && BOX_MODEL_UNITS.includes(result.unit)) {\n                    parts.push(node.value);\n                }\n                else {\n                    logError(model, value);\n                    return {};\n                }\n            }\n        }\n    }\n    // checks that we have enough parsed values\n    if (parts.length > maxValues) {\n        logError(model, value);\n        return {};\n    }\n    const first = transformUnit(container, parts[0]);\n    if (expandsTo) {\n        const second = transformUnit(container, parts[1] || parts[0]);\n        const third = transformUnit(container, parts[2] || parts[0]);\n        const fourth = transformUnit(container, parts[3] || parts[1] || parts[0]);\n        return expandsTo({ first, second, third, fourth });\n    }\n    return {\n        [model]: first,\n    };\n};\n\nconst processMargin = expandBoxModel({\n    expandsTo: ({ first, second, third, fourth }) => ({\n        marginTop: first,\n        marginRight: second,\n        marginBottom: third,\n        marginLeft: fourth,\n    }),\n    maxValues: 4,\n    autoSupported: true,\n});\nconst processMarginVertical = expandBoxModel({\n    expandsTo: ({ first, second }) => ({\n        marginTop: first,\n        marginBottom: second,\n    }),\n    maxValues: 2,\n    autoSupported: true,\n});\nconst processMarginHorizontal = expandBoxModel({\n    expandsTo: ({ first, second }) => ({\n        marginRight: first,\n        marginLeft: second,\n    }),\n    maxValues: 2,\n    autoSupported: true,\n});\nconst processMarginSingle = expandBoxModel({\n    autoSupported: true,\n});\nconst handlers$5 = {\n    margin: (processMargin),\n    marginBottom: (processMarginSingle),\n    marginHorizontal: (processMarginHorizontal),\n    marginLeft: (processMarginSingle),\n    marginRight: (processMarginSingle),\n    marginTop: (processMarginSingle),\n    marginVertical: (processMarginVertical),\n};\n\nconst processPadding = expandBoxModel({\n    expandsTo: ({ first, second, third, fourth }) => ({\n        paddingTop: first,\n        paddingRight: second,\n        paddingBottom: third,\n        paddingLeft: fourth,\n    }),\n    maxValues: 4,\n});\nconst processPaddingVertical = expandBoxModel({\n    expandsTo: ({ first, second }) => ({\n        paddingTop: first,\n        paddingBottom: second,\n    }),\n    maxValues: 2,\n});\nconst processPaddingHorizontal = expandBoxModel({\n    expandsTo: ({ first, second }) => ({\n        paddingRight: first,\n        paddingLeft: second,\n    }),\n    maxValues: 2,\n});\nconst processPaddingSingle = expandBoxModel();\nconst handlers$4 = {\n    padding: (processPadding),\n    paddingBottom: (processPaddingSingle),\n    paddingHorizontal: (processPaddingHorizontal),\n    paddingLeft: (processPaddingSingle),\n    paddingRight: (processPaddingSingle),\n    paddingTop: (processPaddingSingle),\n    paddingVertical: (processPaddingVertical),\n};\n\nconst offsetKeyword = (value) => {\n    switch (value) {\n        case 'top':\n        case 'left':\n            return '0%';\n        case 'right':\n        case 'bottom':\n            return '100%';\n        case 'center':\n            return '50%';\n        default:\n            return value;\n    }\n};\n\nconst processObjectPosition = (key, value, container) => {\n    const match = `${value}`.split(' ');\n    const objectPositionX = offsetKeyword(transformUnit(container, match?.[0] || value));\n    const objectPositionY = offsetKeyword(transformUnit(container, match?.[1] || value));\n    return { objectPositionX, objectPositionY };\n};\nconst processObjectPositionValue = (key, value, container) => ({\n    [key]: offsetKeyword(transformUnit(container, value)),\n});\nconst handlers$3 = {\n    objectPosition: (processObjectPosition),\n    objectPositionX: (processObjectPositionValue),\n    objectPositionY: (processObjectPositionValue),\n    objectFit: (processNoopValue),\n};\n\nconst castInt = (value) => {\n    if (typeof value === 'number')\n        return value;\n    return parseInt(value, 10);\n};\n\nconst FONT_WEIGHTS = {\n    thin: 100,\n    hairline: 100,\n    ultralight: 200,\n    extralight: 200,\n    light: 300,\n    normal: 400,\n    medium: 500,\n    semibold: 600,\n    demibold: 600,\n    bold: 700,\n    ultrabold: 800,\n    extrabold: 800,\n    heavy: 900,\n    black: 900,\n};\nconst transformFontWeight = (value) => {\n    if (!value)\n        return FONT_WEIGHTS.normal;\n    if (typeof value === 'number')\n        return value;\n    const lv = value.toLowerCase();\n    if (FONT_WEIGHTS[lv])\n        return FONT_WEIGHTS[lv];\n    return castInt(value);\n};\nconst processFontWeight = (key, value) => {\n    return { [key]: transformFontWeight(value) };\n};\nconst transformLineHeight = (value, styles, container) => {\n    if (value === '')\n        return value;\n    const fontSize = transformUnit(container, styles.fontSize || 18);\n    const lineHeight = transformUnit(container, value);\n    // Percent values: use this number multiplied by the element's font size\n    const { percent } = matchPercent(lineHeight) || {};\n    if (percent)\n        return percent * fontSize;\n    // Unitless values: use this number multiplied by the element's font size\n    return isNaN(value) ? lineHeight : lineHeight * fontSize;\n};\nconst processLineHeight = (key, value, container, styles) => {\n    return {\n        [key]: transformLineHeight(value, styles, container),\n    };\n};\nconst handlers$2 = {\n    direction: (processNoopValue),\n    fontFamily: (processNoopValue),\n    fontSize: (processUnitValue),\n    fontStyle: (processNoopValue),\n    fontWeight: (processFontWeight),\n    letterSpacing: (processUnitValue),\n    lineHeight: (processLineHeight),\n    maxLines: (processNumberValue),\n    textAlign: (processNoopValue),\n    textDecoration: (processNoopValue),\n    textDecorationColor: (processColorValue),\n    textDecorationStyle: (processNoopValue),\n    textIndent: (processNoopValue),\n    textOverflow: (processNoopValue),\n    textTransform: (processNoopValue),\n    verticalAlign: (processNoopValue),\n};\n\nconst matchNumber = (value) => typeof value === 'string' && /^-?\\d*\\.?\\d*$/.test(value);\nconst castFloat = (value) => {\n    if (typeof value !== 'string')\n        return value;\n    if (matchNumber(value))\n        return parseFloat(value);\n    return value;\n};\n\nconst parse = (transformString) => {\n    const transforms = transformString.trim().split(/\\)[ ,]|\\)/);\n    // Handle \"initial\", \"inherit\", \"unset\".\n    if (transforms.length === 1) {\n        return [[transforms[0], true]];\n    }\n    const parsed = [];\n    for (let i = 0; i < transforms.length; i += 1) {\n        const transform = transforms[i];\n        if (transform) {\n            const [name, rawValue] = transform.split('(');\n            const splitChar = rawValue.indexOf(',') >= 0 ? ',' : ' ';\n            const value = rawValue.split(splitChar).map((val) => val.trim());\n            parsed.push({ operation: name.trim(), value });\n        }\n    }\n    return parsed;\n};\nconst parseAngle = (value) => {\n    const unitsRegexp = /(-?\\d*\\.?\\d*)(\\w*)?/i;\n    const [, angle, unit] = unitsRegexp.exec(value);\n    const number = Number.parseFloat(angle);\n    return unit === 'rad' ? (number * 180) / Math.PI : number;\n};\nconst normalizeTransformOperation = ({ operation, value }) => {\n    switch (operation) {\n        case 'scale': {\n            const [scaleX, scaleY = scaleX] = value.map((num) => Number.parseFloat(num));\n            return { operation: 'scale', value: [scaleX, scaleY] };\n        }\n        case 'scaleX': {\n            return { operation: 'scale', value: [Number.parseFloat(value), 1] };\n        }\n        case 'scaleY': {\n            return { operation: 'scale', value: [1, Number.parseFloat(value)] };\n        }\n        case 'rotate': {\n            return { operation: 'rotate', value: [parseAngle(value)] };\n        }\n        case 'translate': {\n            return {\n                operation: 'translate',\n                value: value.map((num) => Number.parseFloat(num)),\n            };\n        }\n        case 'translateX': {\n            return {\n                operation: 'translate',\n                value: [Number.parseFloat(value), 0],\n            };\n        }\n        case 'translateY': {\n            return { operation: 'translate', value: [0, Number.parseFloat(value)] };\n        }\n        case 'skew': {\n            return { operation: 'skew', value: value.map(parseAngle) };\n        }\n        case 'skewX': {\n            return { operation: 'skew', value: [parseAngle(value), 0] };\n        }\n        case 'skewY': {\n            return { operation: 'skew', value: [0, parseAngle(value)] };\n        }\n        default: {\n            return { operation, value: value.map((num) => Number.parseFloat(num)) };\n        }\n    }\n};\nconst normalize = (operations) => {\n    return operations.map((operation) => normalizeTransformOperation(operation));\n};\nconst processTransform = (key, value) => {\n    if (typeof value !== 'string')\n        return { [key]: value };\n    return { [key]: normalize(parse(value)) };\n};\nconst Y_AXIS_SHORTHANDS = { top: true, bottom: true };\nconst sortTransformOriginPair = (a, b) => {\n    if (Y_AXIS_SHORTHANDS[a])\n        return 1;\n    if (Y_AXIS_SHORTHANDS[b])\n        return -1;\n    return 0;\n};\nconst getTransformOriginPair = (values) => {\n    if (!values || values.length === 0)\n        return ['center', 'center'];\n    const pair = values.length === 1 ? [values[0], 'center'] : values;\n    return pair.sort(sortTransformOriginPair);\n};\n// Transforms shorthand transformOrigin values\nconst processTransformOriginShorthand = (key, value, container) => {\n    const match = `${value}`.split(' ');\n    const pair = getTransformOriginPair(match);\n    const transformOriginX = transformUnit(container, pair[0]);\n    const transformOriginY = transformUnit(container, pair[1]);\n    return {\n        transformOriginX: offsetKeyword(transformOriginX) || castFloat(transformOriginX),\n        transformOriginY: offsetKeyword(transformOriginY) || castFloat(transformOriginY),\n    };\n};\nconst processTransformOriginValue = (key, value, container) => {\n    const v = transformUnit(container, value);\n    return { [key]: offsetKeyword(v) || castFloat(v) };\n};\nconst handlers$1 = {\n    transform: processTransform,\n    gradientTransform: processTransform,\n    transformOrigin: (processTransformOriginShorthand),\n    transformOriginX: (processTransformOriginValue),\n    transformOriginY: (processTransformOriginValue),\n};\n\nconst handlers = {\n    fill: (processColorValue),\n    stroke: (processColorValue),\n    strokeDasharray: (processNoopValue),\n    strokeWidth: (processUnitValue),\n    fillOpacity: (processNumberValue),\n    strokeOpacity: (processNumberValue),\n    fillRule: (processNoopValue),\n    textAnchor: (processNoopValue),\n    strokeLinecap: (processNoopValue),\n    strokeLinejoin: (processNoopValue),\n    visibility: (processNoopValue),\n    clipPath: (processNoopValue),\n    dominantBaseline: (processNoopValue),\n};\n\nconst shorthands = {\n    ...handlers$b,\n    ...handlers$a,\n    ...handlers$9,\n    ...handlers$8,\n    ...handlers$7,\n    ...handlers$6,\n    ...handlers$5,\n    ...handlers$4,\n    ...handlers$3,\n    ...handlers$2,\n    ...handlers$1,\n    ...handlers,\n};\n/**\n * Expand the shorthand properties.\n *\n * @param style - Style object\n * @returns Expanded style object\n */\nconst resolve = (container) => (style) => {\n    const propsArray = Object.keys(style);\n    const resolvedStyle = {};\n    for (let i = 0; i < propsArray.length; i += 1) {\n        const key = propsArray[i];\n        const value = style[key];\n        if (!shorthands[key]) {\n            resolvedStyle[key] = value;\n            continue;\n        }\n        const resolved = shorthands[key](key, value, container, style);\n        const keys = Object.keys(resolved);\n        for (let j = 0; j < keys.length; j += 1) {\n            const propName = keys[j];\n            const propValue = resolved[propName];\n            resolvedStyle[propName] = propValue;\n        }\n    }\n    return resolvedStyle;\n};\n\n/**\n * Resolves styles\n *\n * @param container\n * @param style - Style\n * @returns Resolved style\n */\nconst resolveStyles = (container, style) => {\n    const computeMediaQueries = (value) => resolveMediaQueries(container, value);\n    return compose(resolve(container), computeMediaQueries, flatten)(style);\n};\n\nexport { resolveStyles as default, flatten, transformColor };\n"]},"metadata":{},"sourceType":"module"}