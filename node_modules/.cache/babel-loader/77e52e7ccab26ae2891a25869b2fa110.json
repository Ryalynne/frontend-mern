{"ast":null,"code":"import _objectSpread from \"C:/Users/PC/Documents/PROGRAMMING/MERN/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"C:/Users/PC/Documents/PROGRAMMING/MERN/frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _asyncToGenerator from \"C:/Users/PC/Documents/PROGRAMMING/MERN/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"C:/Users/PC/Documents/PROGRAMMING/MERN/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"C:/Users/PC/Documents/PROGRAMMING/MERN/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/PC/Documents/PROGRAMMING/MERN/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"C:/Users/PC/Documents/PROGRAMMING/MERN/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nvar _excluded = [\"src\", \"fontWeight\", \"fontStyle\"],\n    _excluded2 = [\"src\", \"fontStyle\", \"fontWeight\"],\n    _excluded3 = [\"src\", \"fontStyle\", \"fontWeight\"];\nimport _regeneratorRuntime from \"C:\\\\Users\\\\PC\\\\Documents\\\\PROGRAMMING\\\\MERN\\\\frontend\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\nimport 'is-url';\nimport * as fontkit from 'fontkit';\nimport { PDFFont } from '@react-pdf/pdfkit'; // @ts-expect-error ts being silly\n\nvar STANDARD_FONTS = ['Courier', 'Courier-Bold', 'Courier-Oblique', 'Courier-BoldOblique', 'Helvetica', 'Helvetica-Bold', 'Helvetica-Oblique', 'Helvetica-BoldOblique', 'Times-Roman', 'Times-Bold', 'Times-Italic', 'Times-BoldItalic'];\n\nvar StandardFont = /*#__PURE__*/function () {\n  function StandardFont(src) {\n    _classCallCheck(this, StandardFont);\n\n    _defineProperty(this, \"name\", void 0);\n\n    _defineProperty(this, \"src\", void 0);\n\n    _defineProperty(this, \"fullName\", void 0);\n\n    _defineProperty(this, \"familyName\", void 0);\n\n    _defineProperty(this, \"subfamilyName\", void 0);\n\n    _defineProperty(this, \"postscriptName\", void 0);\n\n    _defineProperty(this, \"copyright\", void 0);\n\n    _defineProperty(this, \"version\", void 0);\n\n    _defineProperty(this, \"underlinePosition\", void 0);\n\n    _defineProperty(this, \"underlineThickness\", void 0);\n\n    _defineProperty(this, \"italicAngle\", void 0);\n\n    _defineProperty(this, \"bbox\", void 0);\n\n    _defineProperty(this, 'OS/2', void 0);\n\n    _defineProperty(this, \"hhea\", void 0);\n\n    _defineProperty(this, \"numGlyphs\", void 0);\n\n    _defineProperty(this, \"characterSet\", void 0);\n\n    _defineProperty(this, \"availableFeatures\", void 0);\n\n    _defineProperty(this, \"type\", void 0);\n\n    this.name = src;\n    this.fullName = src;\n    this.familyName = src;\n    this.subfamilyName = src;\n    this.type = 'STANDARD';\n    this.postscriptName = src;\n    this.availableFeatures = [];\n    this.copyright = '';\n    this.version = 1;\n    this.underlinePosition = -100;\n    this.underlineThickness = 50;\n    this.italicAngle = 0;\n    this.bbox = {};\n    this['OS/2'] = {};\n    this.hhea = {};\n    this.numGlyphs = 0;\n    this.characterSet = [];\n    this.src = PDFFont.open(null, src);\n  }\n\n  _createClass(StandardFont, [{\n    key: \"encode\",\n    value: function encode(str) {\n      return this.src.encode(str);\n    }\n  }, {\n    key: \"layout\",\n    value: function layout(str) {\n      var _this = this;\n\n      var _this$encode = this.encode(str),\n          _this$encode2 = _slicedToArray(_this$encode, 2),\n          encoded = _this$encode2[0],\n          positions = _this$encode2[1];\n\n      var glyphs = encoded.map(function (g, i) {\n        var glyph = _this.getGlyph(parseInt(g, 16));\n\n        glyph.advanceWidth = positions[i].advanceWidth;\n        return glyph;\n      });\n      var advanceWidth = positions.reduce(function (acc, p) {\n        return acc + p.advanceWidth;\n      }, 0);\n      return {\n        positions: positions,\n        stringIndices: positions.map(function (_, i) {\n          return i;\n        }),\n        glyphs: glyphs,\n        script: 'latin',\n        language: 'dflt',\n        direction: 'ltr',\n        features: {},\n        advanceWidth: advanceWidth,\n        advanceHeight: 0,\n        bbox: undefined\n      };\n    }\n  }, {\n    key: \"glyphForCodePoint\",\n    value: function glyphForCodePoint(codePoint) {\n      var glyph = this.getGlyph(codePoint);\n      glyph.advanceWidth = 400;\n      return glyph;\n    }\n  }, {\n    key: \"getGlyph\",\n    value: function getGlyph(id) {\n      return {\n        id: id,\n        codePoints: [id],\n        isLigature: false,\n        name: this.src.font.characterToGlyph(id),\n        _font: this.src,\n        // @ts-expect-error assign proper value\n        advanceWidth: undefined\n      };\n    }\n  }, {\n    key: \"hasGlyphForCodePoint\",\n    value: function hasGlyphForCodePoint(codePoint) {\n      return this.src.font.characterToGlyph(codePoint) !== '.notdef';\n    } // Based on empirical observation\n\n  }, {\n    key: \"ascent\",\n    get: function get() {\n      return 900;\n    } // Based on empirical observation\n\n  }, {\n    key: \"capHeight\",\n    get: function get() {\n      switch (this.name) {\n        case 'Times-Roman':\n        case 'Times-Bold':\n        case 'Times-Italic':\n        case 'Times-BoldItalic':\n          return 650;\n\n        case 'Courier':\n        case 'Courier-Bold':\n        case 'Courier-Oblique':\n        case 'Courier-BoldOblique':\n          return 550;\n\n        default:\n          return 690;\n      }\n    } // Based on empirical observation\n\n  }, {\n    key: \"xHeight\",\n    get: function get() {\n      switch (this.name) {\n        case 'Times-Roman':\n        case 'Times-Bold':\n        case 'Times-Italic':\n        case 'Times-BoldItalic':\n          return 440;\n\n        case 'Courier':\n        case 'Courier-Bold':\n        case 'Courier-Oblique':\n        case 'Courier-BoldOblique':\n          return 390;\n\n        default:\n          return 490;\n      }\n    } // Based on empirical observation\n\n  }, {\n    key: \"descent\",\n    get: function get() {\n      switch (this.name) {\n        case 'Times-Roman':\n        case 'Times-Bold':\n        case 'Times-Italic':\n        case 'Times-BoldItalic':\n          return -220;\n\n        case 'Courier':\n        case 'Courier-Bold':\n        case 'Courier-Oblique':\n        case 'Courier-BoldOblique':\n          return -230;\n\n        default:\n          return -200;\n      }\n    }\n  }, {\n    key: \"lineGap\",\n    get: function get() {\n      return 0;\n    }\n  }, {\n    key: \"unitsPerEm\",\n    get: function get() {\n      return 1000;\n    }\n  }, {\n    key: \"stringsForGlyph\",\n    value: function stringsForGlyph() {\n      throw new Error('Method not implemented.');\n    }\n  }, {\n    key: \"glyphsForString\",\n    value: function glyphsForString() {\n      throw new Error('Method not implemented.');\n    }\n  }, {\n    key: \"widthOfGlyph\",\n    value: function widthOfGlyph() {\n      throw new Error('Method not implemented.');\n    }\n  }, {\n    key: \"getAvailableFeatures\",\n    value: function getAvailableFeatures() {\n      throw new Error('Method not implemented.');\n    }\n  }, {\n    key: \"createSubset\",\n    value: function createSubset() {\n      throw new Error('Method not implemented.');\n    }\n  }, {\n    key: \"getVariation\",\n    value: function getVariation() {\n      throw new Error('Method not implemented.');\n    }\n  }, {\n    key: \"getFont\",\n    value: function getFont() {\n      throw new Error('Method not implemented.');\n    }\n  }, {\n    key: \"getName\",\n    value: function getName() {\n      throw new Error('Method not implemented.');\n    }\n  }, {\n    key: \"setDefaultLanguage\",\n    value: function setDefaultLanguage() {\n      throw new Error('Method not implemented.');\n    }\n  }]);\n\n  return StandardFont;\n}();\n\nvar fetchFont = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(src, options) {\n    var response, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch(src, options);\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return response.arrayBuffer();\n\n          case 5:\n            data = _context.sent;\n            return _context.abrupt(\"return\", new Uint8Array(data));\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function fetchFont(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar isDataUrl = function isDataUrl(dataUrl) {\n  var header = dataUrl.split(',')[0];\n  var hasDataPrefix = header.substring(0, 5) === 'data:';\n  var hasBase64Prefix = header.split(';')[1] === 'base64';\n  return hasDataPrefix && hasBase64Prefix;\n};\n\nvar FontSource = /*#__PURE__*/function () {\n  function FontSource(src, fontFamily, fontStyle, fontWeight, options) {\n    _classCallCheck(this, FontSource);\n\n    _defineProperty(this, \"src\", void 0);\n\n    _defineProperty(this, \"fontFamily\", void 0);\n\n    _defineProperty(this, \"fontStyle\", void 0);\n\n    _defineProperty(this, \"fontWeight\", void 0);\n\n    _defineProperty(this, \"data\", void 0);\n\n    _defineProperty(this, \"options\", void 0);\n\n    _defineProperty(this, \"loadResultPromise\", void 0);\n\n    this.src = src;\n    this.fontFamily = fontFamily;\n    this.fontStyle = fontStyle || 'normal';\n    this.fontWeight = fontWeight || 400;\n    this.data = null;\n    this.options = options || {};\n    this.loadResultPromise = null;\n  }\n\n  _createClass(FontSource, [{\n    key: \"_load\",\n    value: function () {\n      var _load2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var postscriptName, data, raw, uint8Array, _this$options, headers, body, _this$options$method, method, buffer;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                postscriptName = this.options.postscriptName;\n                data = null;\n\n                if (!STANDARD_FONTS.includes(this.src)) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                data = new StandardFont(this.src);\n                _context2.next = 17;\n                break;\n\n              case 6:\n                if (!isDataUrl(this.src)) {\n                  _context2.next = 12;\n                  break;\n                }\n\n                raw = this.src.split(',')[1];\n                uint8Array = new Uint8Array(atob(raw).split('').map(function (c) {\n                  return c.charCodeAt(0);\n                }));\n                data = fontkit.create(uint8Array, postscriptName);\n                _context2.next = 17;\n                break;\n\n              case 12:\n                _this$options = this.options, headers = _this$options.headers, body = _this$options.body, _this$options$method = _this$options.method, method = _this$options$method === void 0 ? 'GET' : _this$options$method;\n                _context2.next = 15;\n                return fetchFont(this.src, {\n                  method: method,\n                  body: body,\n                  headers: headers\n                });\n\n              case 15:\n                buffer = _context2.sent;\n                data = fontkit.create(buffer, postscriptName);\n\n              case 17:\n                if (!(data && 'fonts' in data)) {\n                  _context2.next = 19;\n                  break;\n                }\n\n                throw new Error('Font collection is not supported');\n\n              case 19:\n                this.data = data;\n\n              case 20:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function _load() {\n        return _load2.apply(this, arguments);\n      }\n\n      return _load;\n    }()\n  }, {\n    key: \"load\",\n    value: function () {\n      var _load3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (this.loadResultPromise === null) {\n                  this.loadResultPromise = this._load();\n                }\n\n                return _context3.abrupt(\"return\", this.loadResultPromise);\n\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function load() {\n        return _load3.apply(this, arguments);\n      }\n\n      return load;\n    }()\n  }]);\n\n  return FontSource;\n}();\n\nvar FONT_WEIGHTS = {\n  thin: 100,\n  hairline: 100,\n  ultralight: 200,\n  extralight: 200,\n  light: 300,\n  normal: 400,\n  medium: 500,\n  semibold: 600,\n  demibold: 600,\n  bold: 700,\n  ultrabold: 800,\n  extrabold: 800,\n  heavy: 900,\n  black: 900\n};\n\nvar resolveFontWeight = function resolveFontWeight(value) {\n  return typeof value === 'string' ? FONT_WEIGHTS[value] : value;\n};\n\nvar sortByFontWeight = function sortByFontWeight(a, b) {\n  return a.fontWeight - b.fontWeight;\n};\n\nvar FontFamily = /*#__PURE__*/function () {\n  function FontFamily(family) {\n    _classCallCheck(this, FontFamily);\n\n    _defineProperty(this, \"family\", void 0);\n\n    _defineProperty(this, \"sources\", void 0);\n\n    this.family = family;\n    this.sources = [];\n  }\n\n  _createClass(FontFamily, [{\n    key: \"register\",\n    value: function register(_ref2) {\n      var src = _ref2.src,\n          fontWeight = _ref2.fontWeight,\n          fontStyle = _ref2.fontStyle,\n          options = _objectWithoutProperties(_ref2, _excluded);\n\n      var numericFontWeight = fontWeight ? resolveFontWeight(fontWeight) : undefined;\n      this.sources.push(new FontSource(src, this.family, fontStyle, numericFontWeight, options));\n    }\n  }, {\n    key: \"resolve\",\n    value: function resolve(descriptor) {\n      var _descriptor$fontWeigh = descriptor.fontWeight,\n          fontWeight = _descriptor$fontWeigh === void 0 ? 400 : _descriptor$fontWeigh,\n          _descriptor$fontStyle = descriptor.fontStyle,\n          fontStyle = _descriptor$fontStyle === void 0 ? 'normal' : _descriptor$fontStyle;\n      var styleSources = this.sources.filter(function (s) {\n        return s.fontStyle === fontStyle;\n      });\n      var exactFit = styleSources.find(function (s) {\n        return s.fontWeight === fontWeight;\n      });\n      if (exactFit) return exactFit; // Weight resolution. https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight#Fallback_weights\n\n      var font = null;\n      var numericFontWeight = resolveFontWeight(fontWeight);\n\n      if (numericFontWeight >= 400 && numericFontWeight <= 500) {\n        var leftOffset = styleSources.filter(function (s) {\n          return s.fontWeight <= numericFontWeight;\n        });\n        var rightOffset = styleSources.filter(function (s) {\n          return s.fontWeight > 500;\n        });\n        var fit = styleSources.filter(function (s) {\n          return s.fontWeight >= numericFontWeight && s.fontWeight < 500;\n        });\n        font = fit[0] || leftOffset[leftOffset.length - 1] || rightOffset[0];\n      }\n\n      var lt = styleSources.filter(function (s) {\n        return s.fontWeight < numericFontWeight;\n      }).sort(sortByFontWeight);\n      var gt = styleSources.filter(function (s) {\n        return s.fontWeight > numericFontWeight;\n      }).sort(sortByFontWeight);\n\n      if (numericFontWeight < 400) {\n        font = lt[lt.length - 1] || gt[0];\n      }\n\n      if (numericFontWeight > 500) {\n        font = gt[0] || lt[lt.length - 1];\n      }\n\n      if (!font) {\n        throw new Error(\"Could not resolve font for \".concat(this.family, \", fontWeight \").concat(fontWeight, \", fontStyle \").concat(fontStyle));\n      }\n\n      return font;\n    }\n  }], [{\n    key: \"create\",\n    value: function create(family) {\n      return new FontFamily(family);\n    }\n  }]);\n\n  return FontFamily;\n}();\n\nvar FontStore = /*#__PURE__*/_createClass(function FontStore() {\n  var _this2 = this;\n\n  _classCallCheck(this, FontStore);\n\n  _defineProperty(this, \"fontFamilies\", {});\n\n  _defineProperty(this, \"emojiSource\", null);\n\n  _defineProperty(this, \"hyphenationCallback\", null);\n\n  _defineProperty(this, \"register\", function (data) {\n    var family = data.family;\n\n    if (!_this2.fontFamilies[family]) {\n      _this2.fontFamilies[family] = FontFamily.create(family);\n    } // Bulk loading\n\n\n    if ('fonts' in data) {\n      for (var i = 0; i < data.fonts.length; i += 1) {\n        var _data$fonts$i = data.fonts[i],\n            src = _data$fonts$i.src,\n            fontStyle = _data$fonts$i.fontStyle,\n            fontWeight = _data$fonts$i.fontWeight,\n            options = _objectWithoutProperties(_data$fonts$i, _excluded2);\n\n        _this2.fontFamilies[family].register(_objectSpread({\n          src: src,\n          fontStyle: fontStyle,\n          fontWeight: fontWeight\n        }, options));\n      }\n    } else {\n      var _src = data.src,\n          _fontStyle = data.fontStyle,\n          _fontWeight = data.fontWeight,\n          _options = _objectWithoutProperties(data, _excluded3);\n\n      _this2.fontFamilies[family].register(_objectSpread({\n        src: _src,\n        fontStyle: _fontStyle,\n        fontWeight: _fontWeight\n      }, _options));\n    }\n  });\n\n  _defineProperty(this, \"registerEmojiSource\", function (emojiSource) {\n    _this2.emojiSource = emojiSource;\n  });\n\n  _defineProperty(this, \"registerHyphenationCallback\", function (callback) {\n    _this2.hyphenationCallback = callback;\n  });\n\n  _defineProperty(this, \"getFont\", function (descriptor) {\n    var fontFamily = descriptor.fontFamily;\n\n    if (!_this2.fontFamilies[fontFamily]) {\n      throw new Error(\"Font family not registered: \".concat(fontFamily, \". Please register it calling Font.register() method.\"));\n    }\n\n    return _this2.fontFamilies[fontFamily].resolve(descriptor);\n  });\n\n  _defineProperty(this, \"load\", /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(descriptor) {\n      var font;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              font = _this2.getFont(descriptor);\n\n              if (!font) {\n                _context4.next = 4;\n                break;\n              }\n\n              _context4.next = 4;\n              return font.load();\n\n            case 4:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function (_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }());\n\n  _defineProperty(this, \"reset\", function () {\n    var keys = Object.keys(_this2.fontFamilies);\n\n    for (var i = 0; i < keys.length; i += 1) {\n      var key = keys[i];\n\n      for (var j = 0; j < _this2.fontFamilies[key].sources.length; j++) {\n        var fontSource = _this2.fontFamilies[key].sources[j];\n        fontSource.data = null;\n      }\n    }\n  });\n\n  _defineProperty(this, \"clear\", function () {\n    _this2.fontFamilies = {};\n  });\n\n  _defineProperty(this, \"getRegisteredFonts\", function () {\n    return _this2.fontFamilies;\n  });\n\n  _defineProperty(this, \"getEmojiSource\", function () {\n    return _this2.emojiSource;\n  });\n\n  _defineProperty(this, \"getHyphenationCallback\", function () {\n    return _this2.hyphenationCallback;\n  });\n\n  _defineProperty(this, \"getRegisteredFontFamilies\", function () {\n    return Object.keys(_this2.fontFamilies);\n  });\n\n  this.register({\n    family: 'Helvetica',\n    fonts: [{\n      src: 'Helvetica',\n      fontStyle: 'normal',\n      fontWeight: 400\n    }, {\n      src: 'Helvetica-Bold',\n      fontStyle: 'normal',\n      fontWeight: 700\n    }, {\n      src: 'Helvetica-Oblique',\n      fontStyle: 'italic',\n      fontWeight: 400\n    }, {\n      src: 'Helvetica-BoldOblique',\n      fontStyle: 'italic',\n      fontWeight: 700\n    }]\n  });\n  this.register({\n    family: 'Courier',\n    fonts: [{\n      src: 'Courier',\n      fontStyle: 'normal',\n      fontWeight: 400\n    }, {\n      src: 'Courier-Bold',\n      fontStyle: 'normal',\n      fontWeight: 700\n    }, {\n      src: 'Courier-Oblique',\n      fontStyle: 'italic',\n      fontWeight: 400\n    }, {\n      src: 'Courier-BoldOblique',\n      fontStyle: 'italic',\n      fontWeight: 700\n    }]\n  });\n  this.register({\n    family: 'Times-Roman',\n    fonts: [{\n      src: 'Times-Roman',\n      fontStyle: 'normal',\n      fontWeight: 400\n    }, {\n      src: 'Times-Bold',\n      fontStyle: 'normal',\n      fontWeight: 700\n    }, {\n      src: 'Times-Italic',\n      fontStyle: 'italic',\n      fontWeight: 400\n    }, {\n      src: 'Times-BoldItalic',\n      fontStyle: 'italic',\n      fontWeight: 700\n    }]\n  }); // For backwards compatibility\n\n  this.register({\n    family: 'Helvetica-Bold',\n    src: 'Helvetica-Bold'\n  });\n  this.register({\n    family: 'Helvetica-Oblique',\n    src: 'Helvetica-Oblique'\n  });\n  this.register({\n    family: 'Helvetica-BoldOblique',\n    src: 'Helvetica-BoldOblique'\n  });\n  this.register({\n    family: 'Courier-Bold',\n    src: 'Courier-Bold'\n  });\n  this.register({\n    family: 'Courier-Oblique',\n    src: 'Courier-Oblique'\n  });\n  this.register({\n    family: 'Courier-BoldOblique',\n    src: 'Courier-BoldOblique'\n  });\n  this.register({\n    family: 'Times-Bold',\n    src: 'Times-Bold'\n  });\n  this.register({\n    family: 'Times-Italic',\n    src: 'Times-Italic'\n  });\n  this.register({\n    family: 'Times-BoldItalic',\n    src: 'Times-BoldItalic'\n  }); // Load default fonts\n\n  this.load({\n    fontFamily: 'Helvetica',\n    fontStyle: 'normal',\n    fontWeight: 400\n  });\n  this.load({\n    fontFamily: 'Helvetica',\n    fontStyle: 'normal',\n    fontWeight: 700\n  });\n  this.load({\n    fontFamily: 'Helvetica',\n    fontStyle: 'italic',\n    fontWeight: 400\n  });\n  this.load({\n    fontFamily: 'Helvetica',\n    fontStyle: 'italic',\n    fontWeight: 700\n  });\n});\n\nexport { FontStore as default };","map":{"version":3,"sources":["C:/Users/PC/Documents/PROGRAMMING/MERN/frontend/node_modules/@react-pdf/font/lib/index.browser.js"],"names":["fontkit","PDFFont","STANDARD_FONTS","StandardFont","src","name","fullName","familyName","subfamilyName","type","postscriptName","availableFeatures","copyright","version","underlinePosition","underlineThickness","italicAngle","bbox","hhea","numGlyphs","characterSet","open","str","encode","encoded","positions","glyphs","map","g","i","glyph","getGlyph","parseInt","advanceWidth","reduce","acc","p","stringIndices","_","script","language","direction","features","advanceHeight","undefined","codePoint","id","codePoints","isLigature","font","characterToGlyph","_font","Error","fetchFont","options","fetch","response","arrayBuffer","data","Uint8Array","isDataUrl","dataUrl","header","split","hasDataPrefix","substring","hasBase64Prefix","FontSource","fontFamily","fontStyle","fontWeight","loadResultPromise","includes","raw","uint8Array","atob","c","charCodeAt","create","headers","body","method","buffer","_load","FONT_WEIGHTS","thin","hairline","ultralight","extralight","light","normal","medium","semibold","demibold","bold","ultrabold","extrabold","heavy","black","resolveFontWeight","value","sortByFontWeight","a","b","FontFamily","family","sources","numericFontWeight","push","descriptor","styleSources","filter","s","exactFit","find","leftOffset","rightOffset","fit","length","lt","sort","gt","FontStore","fontFamilies","fonts","register","emojiSource","callback","hyphenationCallback","resolve","getFont","load","keys","Object","key","j","fontSource","default"],"mappings":"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","sourcesContent":["import 'is-url';\nimport * as fontkit from 'fontkit';\nimport { PDFFont } from '@react-pdf/pdfkit';\n\n// @ts-expect-error ts being silly\nconst STANDARD_FONTS = [\n    'Courier',\n    'Courier-Bold',\n    'Courier-Oblique',\n    'Courier-BoldOblique',\n    'Helvetica',\n    'Helvetica-Bold',\n    'Helvetica-Oblique',\n    'Helvetica-BoldOblique',\n    'Times-Roman',\n    'Times-Bold',\n    'Times-Italic',\n    'Times-BoldItalic',\n];\nclass StandardFont {\n    name;\n    src;\n    fullName;\n    familyName;\n    subfamilyName;\n    postscriptName;\n    copyright;\n    version;\n    underlinePosition;\n    underlineThickness;\n    italicAngle;\n    bbox;\n    'OS/2';\n    hhea;\n    numGlyphs;\n    characterSet;\n    availableFeatures;\n    type;\n    constructor(src) {\n        this.name = src;\n        this.fullName = src;\n        this.familyName = src;\n        this.subfamilyName = src;\n        this.type = 'STANDARD';\n        this.postscriptName = src;\n        this.availableFeatures = [];\n        this.copyright = '';\n        this.version = 1;\n        this.underlinePosition = -100;\n        this.underlineThickness = 50;\n        this.italicAngle = 0;\n        this.bbox = {};\n        this['OS/2'] = {};\n        this.hhea = {};\n        this.numGlyphs = 0;\n        this.characterSet = [];\n        this.src = PDFFont.open(null, src);\n    }\n    encode(str) {\n        return this.src.encode(str);\n    }\n    layout(str) {\n        const [encoded, positions] = this.encode(str);\n        const glyphs = encoded.map((g, i) => {\n            const glyph = this.getGlyph(parseInt(g, 16));\n            glyph.advanceWidth = positions[i].advanceWidth;\n            return glyph;\n        });\n        const advanceWidth = positions.reduce((acc, p) => acc + p.advanceWidth, 0);\n        return {\n            positions,\n            stringIndices: positions.map((_, i) => i),\n            glyphs,\n            script: 'latin',\n            language: 'dflt',\n            direction: 'ltr',\n            features: {},\n            advanceWidth,\n            advanceHeight: 0,\n            bbox: undefined,\n        };\n    }\n    glyphForCodePoint(codePoint) {\n        const glyph = this.getGlyph(codePoint);\n        glyph.advanceWidth = 400;\n        return glyph;\n    }\n    getGlyph(id) {\n        return {\n            id,\n            codePoints: [id],\n            isLigature: false,\n            name: this.src.font.characterToGlyph(id),\n            _font: this.src,\n            // @ts-expect-error assign proper value\n            advanceWidth: undefined,\n        };\n    }\n    hasGlyphForCodePoint(codePoint) {\n        return this.src.font.characterToGlyph(codePoint) !== '.notdef';\n    }\n    // Based on empirical observation\n    get ascent() {\n        return 900;\n    }\n    // Based on empirical observation\n    get capHeight() {\n        switch (this.name) {\n            case 'Times-Roman':\n            case 'Times-Bold':\n            case 'Times-Italic':\n            case 'Times-BoldItalic':\n                return 650;\n            case 'Courier':\n            case 'Courier-Bold':\n            case 'Courier-Oblique':\n            case 'Courier-BoldOblique':\n                return 550;\n            default:\n                return 690;\n        }\n    }\n    // Based on empirical observation\n    get xHeight() {\n        switch (this.name) {\n            case 'Times-Roman':\n            case 'Times-Bold':\n            case 'Times-Italic':\n            case 'Times-BoldItalic':\n                return 440;\n            case 'Courier':\n            case 'Courier-Bold':\n            case 'Courier-Oblique':\n            case 'Courier-BoldOblique':\n                return 390;\n            default:\n                return 490;\n        }\n    }\n    // Based on empirical observation\n    get descent() {\n        switch (this.name) {\n            case 'Times-Roman':\n            case 'Times-Bold':\n            case 'Times-Italic':\n            case 'Times-BoldItalic':\n                return -220;\n            case 'Courier':\n            case 'Courier-Bold':\n            case 'Courier-Oblique':\n            case 'Courier-BoldOblique':\n                return -230;\n            default:\n                return -200;\n        }\n    }\n    get lineGap() {\n        return 0;\n    }\n    get unitsPerEm() {\n        return 1000;\n    }\n    stringsForGlyph() {\n        throw new Error('Method not implemented.');\n    }\n    glyphsForString() {\n        throw new Error('Method not implemented.');\n    }\n    widthOfGlyph() {\n        throw new Error('Method not implemented.');\n    }\n    getAvailableFeatures() {\n        throw new Error('Method not implemented.');\n    }\n    createSubset() {\n        throw new Error('Method not implemented.');\n    }\n    getVariation() {\n        throw new Error('Method not implemented.');\n    }\n    getFont() {\n        throw new Error('Method not implemented.');\n    }\n    getName() {\n        throw new Error('Method not implemented.');\n    }\n    setDefaultLanguage() {\n        throw new Error('Method not implemented.');\n    }\n}\n\nconst fetchFont = async (src, options) => {\n    const response = await fetch(src, options);\n    const data = await response.arrayBuffer();\n    return new Uint8Array(data);\n};\nconst isDataUrl = (dataUrl) => {\n    const header = dataUrl.split(',')[0];\n    const hasDataPrefix = header.substring(0, 5) === 'data:';\n    const hasBase64Prefix = header.split(';')[1] === 'base64';\n    return hasDataPrefix && hasBase64Prefix;\n};\nclass FontSource {\n    src;\n    fontFamily;\n    fontStyle;\n    fontWeight;\n    data;\n    options;\n    loadResultPromise;\n    constructor(src, fontFamily, fontStyle, fontWeight, options) {\n        this.src = src;\n        this.fontFamily = fontFamily;\n        this.fontStyle = fontStyle || 'normal';\n        this.fontWeight = fontWeight || 400;\n        this.data = null;\n        this.options = options || {};\n        this.loadResultPromise = null;\n    }\n    async _load() {\n        const { postscriptName } = this.options;\n        let data = null;\n        if (STANDARD_FONTS.includes(this.src)) {\n            data = new StandardFont(this.src);\n        }\n        else if (isDataUrl(this.src)) {\n            const raw = this.src.split(',')[1];\n            const uint8Array = new Uint8Array(atob(raw)\n                .split('')\n                .map((c) => c.charCodeAt(0)));\n            data = fontkit.create(uint8Array, postscriptName);\n        }\n        else {\n            const { headers, body, method = 'GET' } = this.options;\n            const buffer = await fetchFont(this.src, { method, body, headers });\n            data = fontkit.create(buffer, postscriptName);\n        }\n        if (data && 'fonts' in data) {\n            throw new Error('Font collection is not supported');\n        }\n        this.data = data;\n    }\n    async load() {\n        if (this.loadResultPromise === null) {\n            this.loadResultPromise = this._load();\n        }\n        return this.loadResultPromise;\n    }\n}\n\nconst FONT_WEIGHTS = {\n    thin: 100,\n    hairline: 100,\n    ultralight: 200,\n    extralight: 200,\n    light: 300,\n    normal: 400,\n    medium: 500,\n    semibold: 600,\n    demibold: 600,\n    bold: 700,\n    ultrabold: 800,\n    extrabold: 800,\n    heavy: 900,\n    black: 900,\n};\nconst resolveFontWeight = (value) => {\n    return typeof value === 'string' ? FONT_WEIGHTS[value] : value;\n};\nconst sortByFontWeight = (a, b) => a.fontWeight - b.fontWeight;\nclass FontFamily {\n    family;\n    sources;\n    static create(family) {\n        return new FontFamily(family);\n    }\n    constructor(family) {\n        this.family = family;\n        this.sources = [];\n    }\n    register({ src, fontWeight, fontStyle, ...options }) {\n        const numericFontWeight = fontWeight\n            ? resolveFontWeight(fontWeight)\n            : undefined;\n        this.sources.push(new FontSource(src, this.family, fontStyle, numericFontWeight, options));\n    }\n    resolve(descriptor) {\n        const { fontWeight = 400, fontStyle = 'normal' } = descriptor;\n        const styleSources = this.sources.filter((s) => s.fontStyle === fontStyle);\n        const exactFit = styleSources.find((s) => s.fontWeight === fontWeight);\n        if (exactFit)\n            return exactFit;\n        // Weight resolution. https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight#Fallback_weights\n        let font = null;\n        const numericFontWeight = resolveFontWeight(fontWeight);\n        if (numericFontWeight >= 400 && numericFontWeight <= 500) {\n            const leftOffset = styleSources.filter((s) => s.fontWeight <= numericFontWeight);\n            const rightOffset = styleSources.filter((s) => s.fontWeight > 500);\n            const fit = styleSources.filter((s) => s.fontWeight >= numericFontWeight && s.fontWeight < 500);\n            font = fit[0] || leftOffset[leftOffset.length - 1] || rightOffset[0];\n        }\n        const lt = styleSources\n            .filter((s) => s.fontWeight < numericFontWeight)\n            .sort(sortByFontWeight);\n        const gt = styleSources\n            .filter((s) => s.fontWeight > numericFontWeight)\n            .sort(sortByFontWeight);\n        if (numericFontWeight < 400) {\n            font = lt[lt.length - 1] || gt[0];\n        }\n        if (numericFontWeight > 500) {\n            font = gt[0] || lt[lt.length - 1];\n        }\n        if (!font) {\n            throw new Error(`Could not resolve font for ${this.family}, fontWeight ${fontWeight}, fontStyle ${fontStyle}`);\n        }\n        return font;\n    }\n}\n\nclass FontStore {\n    fontFamilies = {};\n    emojiSource = null;\n    constructor() {\n        this.register({\n            family: 'Helvetica',\n            fonts: [\n                { src: 'Helvetica', fontStyle: 'normal', fontWeight: 400 },\n                { src: 'Helvetica-Bold', fontStyle: 'normal', fontWeight: 700 },\n                { src: 'Helvetica-Oblique', fontStyle: 'italic', fontWeight: 400 },\n                { src: 'Helvetica-BoldOblique', fontStyle: 'italic', fontWeight: 700 },\n            ],\n        });\n        this.register({\n            family: 'Courier',\n            fonts: [\n                { src: 'Courier', fontStyle: 'normal', fontWeight: 400 },\n                { src: 'Courier-Bold', fontStyle: 'normal', fontWeight: 700 },\n                { src: 'Courier-Oblique', fontStyle: 'italic', fontWeight: 400 },\n                { src: 'Courier-BoldOblique', fontStyle: 'italic', fontWeight: 700 },\n            ],\n        });\n        this.register({\n            family: 'Times-Roman',\n            fonts: [\n                { src: 'Times-Roman', fontStyle: 'normal', fontWeight: 400 },\n                { src: 'Times-Bold', fontStyle: 'normal', fontWeight: 700 },\n                { src: 'Times-Italic', fontStyle: 'italic', fontWeight: 400 },\n                { src: 'Times-BoldItalic', fontStyle: 'italic', fontWeight: 700 },\n            ],\n        });\n        // For backwards compatibility\n        this.register({\n            family: 'Helvetica-Bold',\n            src: 'Helvetica-Bold',\n        });\n        this.register({\n            family: 'Helvetica-Oblique',\n            src: 'Helvetica-Oblique',\n        });\n        this.register({\n            family: 'Helvetica-BoldOblique',\n            src: 'Helvetica-BoldOblique',\n        });\n        this.register({\n            family: 'Courier-Bold',\n            src: 'Courier-Bold',\n        });\n        this.register({\n            family: 'Courier-Oblique',\n            src: 'Courier-Oblique',\n        });\n        this.register({\n            family: 'Courier-BoldOblique',\n            src: 'Courier-BoldOblique',\n        });\n        this.register({\n            family: 'Times-Bold',\n            src: 'Times-Bold',\n        });\n        this.register({\n            family: 'Times-Italic',\n            src: 'Times-Italic',\n        });\n        this.register({\n            family: 'Times-BoldItalic',\n            src: 'Times-BoldItalic',\n        });\n        // Load default fonts\n        this.load({\n            fontFamily: 'Helvetica',\n            fontStyle: 'normal',\n            fontWeight: 400,\n        });\n        this.load({\n            fontFamily: 'Helvetica',\n            fontStyle: 'normal',\n            fontWeight: 700,\n        });\n        this.load({\n            fontFamily: 'Helvetica',\n            fontStyle: 'italic',\n            fontWeight: 400,\n        });\n        this.load({\n            fontFamily: 'Helvetica',\n            fontStyle: 'italic',\n            fontWeight: 700,\n        });\n    }\n    hyphenationCallback = null;\n    register = (data) => {\n        const { family } = data;\n        if (!this.fontFamilies[family]) {\n            this.fontFamilies[family] = FontFamily.create(family);\n        }\n        // Bulk loading\n        if ('fonts' in data) {\n            for (let i = 0; i < data.fonts.length; i += 1) {\n                const { src, fontStyle, fontWeight, ...options } = data.fonts[i];\n                this.fontFamilies[family].register({\n                    src,\n                    fontStyle,\n                    fontWeight,\n                    ...options,\n                });\n            }\n        }\n        else {\n            const { src, fontStyle, fontWeight, ...options } = data;\n            this.fontFamilies[family].register({\n                src,\n                fontStyle,\n                fontWeight,\n                ...options,\n            });\n        }\n    };\n    registerEmojiSource = (emojiSource) => {\n        this.emojiSource = emojiSource;\n    };\n    registerHyphenationCallback = (callback) => {\n        this.hyphenationCallback = callback;\n    };\n    getFont = (descriptor) => {\n        const { fontFamily } = descriptor;\n        if (!this.fontFamilies[fontFamily]) {\n            throw new Error(`Font family not registered: ${fontFamily}. Please register it calling Font.register() method.`);\n        }\n        return this.fontFamilies[fontFamily].resolve(descriptor);\n    };\n    load = async (descriptor) => {\n        const font = this.getFont(descriptor);\n        if (font)\n            await font.load();\n    };\n    reset = () => {\n        const keys = Object.keys(this.fontFamilies);\n        for (let i = 0; i < keys.length; i += 1) {\n            const key = keys[i];\n            for (let j = 0; j < this.fontFamilies[key].sources.length; j++) {\n                const fontSource = this.fontFamilies[key].sources[j];\n                fontSource.data = null;\n            }\n        }\n    };\n    clear = () => {\n        this.fontFamilies = {};\n    };\n    getRegisteredFonts = () => this.fontFamilies;\n    getEmojiSource = () => this.emojiSource;\n    getHyphenationCallback = () => this.hyphenationCallback;\n    getRegisteredFontFamilies = () => Object.keys(this.fontFamilies);\n}\n\nexport { FontStore as default };\n"]},"metadata":{},"sourceType":"module"}