{"ast":null,"code":"import { upperFirst, capitalize, parseFloat as parseFloat$1, without, pick, compose, evolve, mapValues, matchPercent, castArray, isNil, omit, asyncCompose } from '@react-pdf/fns';\nimport * as P from '@react-pdf/primitives';\nimport resolveStyle, { transformColor, flatten } from '@react-pdf/stylesheet';\nimport layoutEngine, { fontSubstitution, wordHyphenation, scriptItemizer, textDecoration, justification, linebreaker, bidi, fromFragments } from '@react-pdf/textkit';\nimport * as Yoga from 'yoga-layout/load';\nimport { loadYoga as loadYoga$1 } from 'yoga-layout/load';\nimport emojiRegex from 'emoji-regex';\nimport resolveImage from '@react-pdf/image';\n/**\n * Apply transformation to text string\n *\n * @param {string} text\n * @param {string} transformation type\n * @returns {string} transformed text\n */\n\nconst transformText = (text, transformation) => {\n  switch (transformation) {\n    case 'uppercase':\n      return text.toUpperCase();\n\n    case 'lowercase':\n      return text.toLowerCase();\n\n    case 'capitalize':\n      return capitalize(text);\n\n    case 'upperfirst':\n      return upperFirst(text);\n\n    default:\n      return text;\n  }\n};\n\nconst isTspan = node => node.type === P.Tspan;\n\nconst isTextInstance$4 = node => node.type === P.TextInstance;\n\nconst engines$1 = {\n  bidi,\n  linebreaker,\n  justification,\n  textDecoration,\n  scriptItemizer,\n  wordHyphenation,\n  fontSubstitution\n};\nconst engine$1 = layoutEngine(engines$1);\n\nconst getFragments$1 = (fontStore, instance) => {\n  if (!instance) return [{\n    string: ''\n  }];\n  const fragments = [];\n  const {\n    fill = 'black',\n    fontFamily = 'Helvetica',\n    fontWeight,\n    fontStyle,\n    fontSize = 18,\n    textDecorationColor,\n    textDecorationStyle,\n    textTransform,\n    opacity\n  } = instance.props;\n  const _textDecoration = instance.props.textDecoration;\n  const fontFamilies = typeof fontFamily === 'string' ? [fontFamily] : [...(fontFamily || [])]; // Fallback font\n\n  fontFamilies.push('Helvetica');\n  const font = fontFamilies.map(fontFamilyName => {\n    const opts = {\n      fontFamily: fontFamilyName,\n      fontWeight,\n      fontStyle\n    };\n    const obj = fontStore.getFont(opts);\n    return obj?.data;\n  });\n  const attributes = {\n    font,\n    opacity,\n    fontSize,\n    color: fill,\n    underlineStyle: textDecorationStyle,\n    underline: _textDecoration === 'underline' || _textDecoration === 'underline line-through' || _textDecoration === 'line-through underline',\n    underlineColor: textDecorationColor || fill,\n    strike: _textDecoration === 'line-through' || _textDecoration === 'underline line-through' || _textDecoration === 'line-through underline',\n    strikeStyle: textDecorationStyle,\n    strikeColor: textDecorationColor || fill\n  };\n\n  for (let i = 0; i < instance.children.length; i += 1) {\n    const child = instance.children[i];\n\n    if (isTextInstance$4(child)) {\n      fragments.push({\n        string: transformText(child.value, textTransform),\n        attributes\n      });\n    } else if (child) {\n      fragments.push(...getFragments$1(fontStore, child));\n    }\n  }\n\n  return fragments;\n};\n\nconst getAttributedString$1 = (fontStore, instance) => fromFragments(getFragments$1(fontStore, instance));\n\nconst AlmostInfinity = 999999999999;\nconst shrinkWhitespaceFactor = {\n  before: -0.5,\n  after: -0.5\n};\n\nconst layoutTspan = fontStore => (node, xOffset) => {\n  const attributedString = getAttributedString$1(fontStore, node);\n  const x = node.props.x === undefined ? xOffset : node.props.x;\n  const y = node.props?.y || 0;\n  const container = {\n    x,\n    y,\n    width: AlmostInfinity,\n    height: AlmostInfinity\n  };\n  const hyphenationCallback = node.props.hyphenationCallback || fontStore?.getHyphenationCallback() || null;\n  const layoutOptions = {\n    hyphenationCallback,\n    shrinkWhitespaceFactor\n  };\n  const lines = engine$1(attributedString, container, layoutOptions).flat();\n  return Object.assign({}, node, {\n    lines\n  });\n}; // Consecutive TSpan elements should be joined with a space\n\n\nconst joinTSpanLines = node => {\n  const children = node.children.map((child, index) => {\n    if (!isTspan(child)) return child;\n    const textInstance = child.children[0];\n\n    if (child.props.x === undefined && index < node.children.length - 1 && textInstance?.value) {\n      return Object.assign({}, child, {\n        children: [{ ...textInstance,\n          value: `${textInstance.value} `\n        }]\n      });\n    }\n\n    return child;\n  }, []);\n  return Object.assign({}, node, {\n    children\n  });\n};\n\nconst layoutText$1 = (fontStore, node) => {\n  if (!node.children) return node;\n  let currentXOffset = node.props?.x || 0;\n  const layoutFn = layoutTspan(fontStore);\n  const joinedNode = joinTSpanLines(node);\n  const children = joinedNode.children.map(child => {\n    const childWithLayout = layoutFn(child, currentXOffset);\n    currentXOffset += childWithLayout.lines[0].xAdvance;\n    return childWithLayout;\n  });\n  return Object.assign({}, node, {\n    children\n  });\n};\n\nconst isDefs = node => node.type === P.Defs;\n\nconst getDefs = node => {\n  const children = node.children || [];\n  const defs = children.find(isDefs);\n  const values = defs?.children || [];\n  return values.reduce((acc, value) => {\n    const id = value.props?.id;\n    if (id) acc[id] = value;\n    return acc;\n  }, {});\n};\n\nconst isNotDefs = node => node.type !== P.Defs;\n\nconst detachDefs = node => {\n  if (!node.children) return node;\n  const children = node.children.filter(isNotDefs);\n  return Object.assign({}, node, {\n    children\n  });\n};\n\nconst URL_REGEX = /url\\(['\"]?#([^'\"]+)['\"]?\\)/;\n\nconst replaceDef = (defs, value) => {\n  if (!value) return undefined;\n  if (!URL_REGEX.test(value)) return value;\n  const match = value.match(URL_REGEX);\n  return defs[match[1]];\n};\n\nconst parseNodeDefs = defs => node => {\n  const props = node.props;\n  const fill = `fill` in props ? replaceDef(defs, props?.fill) : undefined;\n  const clipPath = `clipPath` in props ? replaceDef(defs, props?.clipPath) : undefined;\n  const newProps = Object.assign({}, node.props, {\n    fill,\n    clipPath\n  });\n  const children = node.children ? node.children.map(parseNodeDefs(defs)) : undefined;\n  return Object.assign({}, node, {\n    props: newProps,\n    children\n  });\n};\n\nconst parseDefs = root => {\n  if (!root.children) return root;\n  const defs = getDefs(root);\n  const children = root.children.map(parseNodeDefs(defs));\n  return Object.assign({}, root, {\n    children\n  });\n};\n\nconst replaceDefs = node => {\n  return detachDefs(parseDefs(node));\n};\n\nconst parseViewbox = value => {\n  if (!value) return null;\n  if (typeof value !== 'string') return value;\n  const values = value.split(/[,\\s]+/).map(parseFloat$1);\n  if (values.length !== 4) return null;\n  return {\n    minX: values[0],\n    minY: values[1],\n    maxX: values[2],\n    maxY: values[3]\n  };\n};\n\nconst getContainer$1 = node => {\n  const viewbox = parseViewbox(node.props.viewBox);\n\n  if (viewbox) {\n    return {\n      width: viewbox.maxX,\n      height: viewbox.maxY\n    };\n  }\n\n  if (node.props.width && node.props.height) {\n    return {\n      width: parseFloat$1(node.props.width),\n      height: parseFloat$1(node.props.height)\n    };\n  }\n\n  return {\n    width: 0,\n    height: 0\n  };\n};\n\nconst BASE_SVG_INHERITED_PROPS = ['x', 'y', 'clipPath', 'clipRule', 'opacity', 'fill', 'fillOpacity', 'fillRule', 'stroke', 'strokeLinecap', 'strokeLinejoin', 'strokeOpacity', 'strokeWidth', 'textAnchor', 'dominantBaseline', 'color', 'fontFamily', 'fontSize', 'fontStyle', 'fontWeight', 'letterSpacing', 'opacity', 'textDecoration', 'lineHeight', 'textAlign', 'visibility', 'wordSpacing']; // Do not inherit \"x\" for <tspan> elements from <text> parent\n\nconst TEXT_SVG_INHERITED_PROPS = without(['x'], BASE_SVG_INHERITED_PROPS);\nconst SVG_INHERITED_PROPS = {\n  [P.Text]: TEXT_SVG_INHERITED_PROPS\n};\n\nconst getInheritProps = node => {\n  const props = node.props || {};\n  const svgInheritedProps = SVG_INHERITED_PROPS[node.type] ?? BASE_SVG_INHERITED_PROPS;\n  return pick(svgInheritedProps, props);\n};\n\nconst inheritProps = node => {\n  if (!node.children) return node;\n  const inheritedProps = getInheritProps(node);\n  const children = node.children.map(child => {\n    const props = Object.assign({}, inheritedProps, child.props || {});\n    const newChild = Object.assign({}, child, {\n      props\n    });\n    return inheritProps(newChild);\n  });\n  return Object.assign({}, node, {\n    children\n  });\n};\n\nconst parseAspectRatio = value => {\n  if (typeof value !== 'string') return value;\n  const match = value.replace(/[\\s\\r\\t\\n]+/gm, ' ').replace(/^defer\\s/, '').split(' ');\n  const align = match[0] || 'xMidYMid';\n  const meetOrSlice = match[1] || 'meet';\n  return {\n    align,\n    meetOrSlice\n  };\n};\n\nconst STYLE_PROPS = ['width', 'height', 'color', 'stroke', 'strokeWidth', 'opacity', 'fillOpacity', 'strokeOpacity', 'fill', 'fillRule', 'clipPath', 'offset', 'transform', 'strokeLinejoin', 'strokeLinecap', 'strokeDasharray', 'gradientUnits', 'gradientTransform'];\nconst VERTICAL_PROPS = ['y', 'y1', 'y2', 'height', 'cy', 'ry'];\nconst HORIZONTAL_PROPS = ['x', 'x1', 'x2', 'width', 'cx', 'rx'];\n\nconst isSvg$3 = node => node.type === P.Svg;\n\nconst isText$5 = node => node.type === P.Text;\n\nconst isTextInstance$3 = node => node.type === P.TextInstance;\n\nconst transformPercent = container => props => mapValues(props, (value, key) => {\n  const match = matchPercent(value);\n\n  if (match && VERTICAL_PROPS.includes(key)) {\n    return match.percent * container.height;\n  }\n\n  if (match && HORIZONTAL_PROPS.includes(key)) {\n    return match.percent * container.width;\n  }\n\n  return value;\n});\n\nconst parsePercent = value => {\n  const match = matchPercent(value);\n  return match ? match.percent : parseFloat$1(value);\n};\n\nconst parseTransform = container => value => {\n  return resolveStyle(container, {\n    transform: value\n  }).transform;\n};\n\nconst parseProps = container => node => {\n  let props = transformPercent(container)(node.props);\n  props = evolve({\n    x: parseFloat$1,\n    x1: parseFloat$1,\n    x2: parseFloat$1,\n    y: parseFloat$1,\n    y1: parseFloat$1,\n    y2: parseFloat$1,\n    r: parseFloat$1,\n    rx: parseFloat$1,\n    ry: parseFloat$1,\n    cx: parseFloat$1,\n    cy: parseFloat$1,\n    width: parseFloat$1,\n    height: parseFloat$1,\n    offset: parsePercent,\n    fill: transformColor,\n    opacity: parsePercent,\n    stroke: transformColor,\n    stopOpacity: parsePercent,\n    stopColor: transformColor,\n    transform: parseTransform(container),\n    gradientTransform: parseTransform(container)\n  }, props);\n  return Object.assign({}, node, {\n    props\n  });\n};\n\nconst mergeStyles$1 = node => {\n  const style = node.style || {};\n  const props = Object.assign({}, style, node.props);\n  return Object.assign({}, node, {\n    props\n  });\n};\n\nconst removeNoneValues = node => {\n  const removeNone = value => value === 'none' ? null : value;\n\n  const props = mapValues(node.props, removeNone);\n  return Object.assign({}, node, {\n    props\n  });\n};\n\nconst pickStyleProps = node => {\n  const props = node.props || {};\n  const styleProps = pick(STYLE_PROPS, props);\n  const style = Object.assign({}, styleProps, node.style || {});\n  return Object.assign({}, node, {\n    style\n  });\n};\n\nconst parseSvgProps = node => {\n  const props = evolve({\n    width: parseFloat$1,\n    height: parseFloat$1,\n    viewBox: parseViewbox,\n    preserveAspectRatio: parseAspectRatio\n  }, node.props);\n  return Object.assign({}, node, {\n    props\n  });\n};\n\nconst wrapBetweenTspan = node => ({\n  type: P.Tspan,\n  props: {},\n  style: {},\n  children: [node]\n});\n\nconst addMissingTspan = node => {\n  if (!isText$5(node)) return node;\n  if (!node.children) return node;\n\n  const resolveChild = child => isTextInstance$3(child) ? wrapBetweenTspan(child) : child;\n\n  const children = node.children.map(resolveChild);\n  return Object.assign({}, node, {\n    children\n  });\n};\n\nconst parseText = fontStore => node => {\n  if (isText$5(node)) return layoutText$1(fontStore, node);\n  if (!node.children) return node;\n  const children = node.children.map(parseText(fontStore));\n  return Object.assign({}, node, {\n    children\n  });\n};\n\nconst resolveSvgNode = container => compose(parseProps(container), addMissingTspan, removeNoneValues, mergeStyles$1);\n\nconst resolveChildren = container => node => {\n  if (!node.children) return node;\n  const resolveChild = compose(resolveChildren(container), resolveSvgNode(container));\n  const children = node.children.map(resolveChild);\n  return Object.assign({}, node, {\n    children\n  });\n};\n\nconst buildXLinksIndex = node => {\n  const idIndex = {};\n  const listToExplore = node.children?.slice(0) || [];\n\n  while (listToExplore.length > 0) {\n    const child = listToExplore.shift();\n\n    if (child.props && 'id' in child.props) {\n      idIndex[child.props.id] = child;\n    }\n\n    if (child.children) listToExplore.push(...child.children);\n  }\n\n  return idIndex;\n};\n\nconst replaceXLinks = (node, idIndex) => {\n  if (node.props && 'xlinkHref' in node.props) {\n    const linkedNode = idIndex[node.props.xlinkHref.replace(/^#/, '')]; // No node to extend from\n\n    if (!linkedNode) return node;\n    const newProps = Object.assign({}, linkedNode.props, node.props);\n    delete newProps.xlinkHref;\n    return Object.assign({}, linkedNode, {\n      props: newProps\n    });\n  }\n\n  const children = node.children?.map(child => replaceXLinks(child, idIndex));\n  return Object.assign({}, node, {\n    children\n  });\n};\n\nconst resolveXLinks = node => {\n  const idIndex = buildXLinksIndex(node);\n  return replaceXLinks(node, idIndex);\n};\n\nconst resolveSvgRoot = (node, fontStore) => {\n  const container = getContainer$1(node);\n  return compose(replaceDefs, parseText(fontStore), parseSvgProps, pickStyleProps, inheritProps, resolveChildren(container), resolveXLinks)(node);\n};\n/**\n * Pre-process SVG nodes so they can be rendered in the next steps\n *\n * @param node - Root node\n * @param fontStore - Font store\n * @returns Root node\n */\n\n\nconst resolveSvg = (node, fontStore) => {\n  if (!('children' in node)) return node;\n\n  const resolveChild = child => resolveSvg(child, fontStore);\n\n  const root = isSvg$3(node) ? resolveSvgRoot(node, fontStore) : node;\n  const children = root.children?.map(resolveChild);\n  return Object.assign({}, root, {\n    children\n  });\n};\n\nlet instancePromise;\n\nconst loadYoga = async () => {\n  // Yoga WASM binaries must be asynchronously compiled and loaded\n  // to prevent Event emitter memory leak warnings, Yoga must be loaded only once\n  const instance = await (instancePromise ??= loadYoga$1());\n  const config = instance.Config.create();\n  config.setPointScaleFactor(0);\n  const node = {\n    create: () => instance.Node.createWithConfig(config)\n  };\n  return {\n    node\n  };\n};\n\nconst resolveYoga = async root => {\n  const yoga = await loadYoga();\n  return Object.assign({}, root, {\n    yoga\n  });\n};\n\nconst getZIndex = node => node.style.zIndex;\n\nconst shouldSort = node => node.type !== P.Document && node.type !== P.Svg;\n\nconst sortZIndex = (a, b) => {\n  const za = getZIndex(a);\n  const zb = getZIndex(b);\n  if (!za && !zb) return 0;\n  if (!za) return 1;\n  if (!zb) return -1;\n  return zb - za;\n};\n/**\n * Sort children by zIndex value\n *\n * @param node\n * @returns Node\n */\n\n\nconst resolveNodeZIndex = node => {\n  if (!node.children) return node;\n  const sortedChildren = shouldSort(node) ? node.children.sort(sortZIndex) : node.children;\n  const children = sortedChildren.map(resolveNodeZIndex);\n  return Object.assign({}, node, {\n    children\n  });\n};\n/**\n * Sort children by zIndex value\n *\n * @param node\n * @returns Node\n */\n\n\nconst resolveZIndex = root => resolveNodeZIndex(root); // Caches emoji images data\n\n\nconst emojis = {};\nconst regex = emojiRegex();\n/**\n * When an emoji as no variations, it might still have 2 parts,\n * the canonical emoji and an empty string.\n * ex.\n *   (no color) Array.from('❤️') => [\"❤\", \"️\"]\n *   (w/ color) Array.from('👍🏿') => [\"👍\", \"🏿\"]\n *\n * The empty string needs to be removed otherwise the generated\n * url will be incorect.\n */\n\nconst removeVariationSelectors = x => x !== '️';\n\nconst getCodePoints = function (string) {\n  let withVariationSelectors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return Array.from(string).filter(withVariationSelectors ? () => true : removeVariationSelectors).map(char => char.codePointAt(0).toString(16)).join('-');\n};\n\nconst buildEmojiUrl = (emoji, source) => {\n  if ('builder' in source) {\n    return source.builder(getCodePoints(emoji, source.withVariationSelectors));\n  }\n\n  const {\n    url,\n    format = 'png',\n    withVariationSelectors\n  } = source;\n  return `${url}${getCodePoints(emoji, withVariationSelectors)}.${format}`;\n};\n\nconst fetchEmojis = (string, source) => {\n  if (!source) return [];\n  const promises = [];\n  Array.from(string.matchAll(regex)).forEach(match => {\n    const emoji = match[0];\n\n    if (!emojis[emoji] || emojis[emoji].loading) {\n      const emojiUrl = buildEmojiUrl(emoji, source);\n      emojis[emoji] = {\n        loading: true\n      };\n      promises.push(resolveImage({\n        uri: emojiUrl\n      }).then(image => {\n        emojis[emoji].loading = false;\n        emojis[emoji].data = image.data;\n      }));\n    }\n  });\n  return promises;\n};\n\nconst embedEmojis = fragments => {\n  const result = [];\n\n  for (let i = 0; i < fragments.length; i += 1) {\n    const fragment = fragments[i];\n    let lastIndex = 0;\n    Array.from(fragment.string.matchAll(regex)).forEach(match => {\n      const {\n        index\n      } = match;\n      const emoji = match[0];\n      const emojiSize = fragment.attributes.fontSize;\n      const chunk = fragment.string.slice(lastIndex, index + match[0].length); // If emoji image was found, we create a new fragment with the\n      // correct attachment and object substitution character;\n\n      if (emojis[emoji] && emojis[emoji].data) {\n        result.push({\n          string: chunk.replace(match[0], String.fromCharCode(0xfffc)),\n          attributes: { ...fragment.attributes,\n            attachment: {\n              width: emojiSize,\n              height: emojiSize,\n              yOffset: Math.floor(emojiSize * 0.1),\n              image: emojis[emoji].data\n            }\n          }\n        });\n      } else {\n        // If no emoji data, we try to use emojis in the font\n        result.push({\n          string: chunk,\n          attributes: fragment.attributes\n        });\n      }\n\n      lastIndex = index + emoji.length;\n    });\n\n    if (lastIndex < fragment.string.length) {\n      result.push({\n        string: fragment.string.slice(lastIndex),\n        attributes: fragment.attributes\n      });\n    }\n  }\n\n  return result;\n};\n/**\n * Get image source\n *\n * @param node - Image node\n * @returns Image src\n */\n\n\nconst getSource = node => {\n  if (node.props.src) return node.props.src;\n  if (node.props.source) return node.props.source;\n};\n/**\n * Resolves `src` to `@react-pdf/image` interface.\n *\n * Also it handles factories and async sources.\n *\n * @param src\n * @returns Resolved src\n */\n\n\nconst resolveSource = async src => {\n  const source = typeof src === 'function' ? await src() : await src;\n  return typeof source === 'string' ? {\n    uri: source\n  } : source;\n};\n/**\n * Fetches image and append data to node\n * Ideally this fn should be immutable.\n *\n * @param node\n */\n\n\nconst fetchImage = async node => {\n  const src = getSource(node);\n  const {\n    cache\n  } = node.props;\n\n  if (!src) {\n    console.warn(false, 'Image should receive either a \"src\" or \"source\" prop');\n    return;\n  }\n\n  try {\n    const source = await resolveSource(src);\n\n    if (!source) {\n      throw new Error(`Image's \"src\" or \"source\" prop returned ${source}`);\n    }\n\n    node.image = await resolveImage(source, {\n      cache\n    });\n    if (Buffer.isBuffer(source) || source instanceof Blob) return;\n    node.image.key = 'data' in source ? source.data.toString() : source.uri;\n  } catch (e) {\n    console.warn(e.message);\n  }\n};\n\nconst isImage$2 = node => node.type === P.Image;\n/**\n * Get all asset promises that need to be resolved\n *\n * @param fontStore - Font store\n * @param node - Root node\n * @returns Asset promises\n */\n\n\nconst fetchAssets = (fontStore, node) => {\n  const promises = [];\n  const listToExplore = node.children?.slice(0) || [];\n  const emojiSource = fontStore ? fontStore.getEmojiSource() : null;\n\n  while (listToExplore.length > 0) {\n    const n = listToExplore.shift();\n\n    if (isImage$2(n)) {\n      promises.push(fetchImage(n));\n    }\n\n    if (fontStore && n.style?.fontFamily) {\n      const fontFamilies = castArray(n.style.fontFamily);\n      promises.push(...fontFamilies.map(fontFamily => fontStore.load({\n        fontFamily,\n        fontStyle: n.style.fontStyle,\n        fontWeight: n.style.fontWeight\n      })));\n    }\n\n    if (typeof n === 'string') {\n      promises.push(...fetchEmojis(n, emojiSource));\n    }\n\n    if ('value' in n && typeof n.value === 'string') {\n      promises.push(...fetchEmojis(n.value, emojiSource));\n    }\n\n    if (n.children) {\n      n.children.forEach(childNode => {\n        listToExplore.push(childNode);\n      });\n    }\n  }\n\n  return promises;\n};\n/**\n * Fetch image, font and emoji assets in parallel.\n * Layout process will not be resumed until promise resolves.\n *\n * @param node root node\n * @param fontStore font store\n * @returns Root node\n */\n\n\nconst resolveAssets = async (node, fontStore) => {\n  const promises = fetchAssets(fontStore, node);\n  await Promise.all(promises);\n  return node;\n};\n\nconst isLink$1 = node => node.type === P.Link;\n\nconst DEFAULT_LINK_STYLES = {\n  color: 'blue',\n  textDecoration: 'underline'\n};\n/**\n * Computes styles using stylesheet\n *\n * @param container\n * @param node - Document node\n * @returns Computed styles\n */\n\nconst computeStyle = (container, node) => {\n  let baseStyle = [node.style];\n\n  if (isLink$1(node)) {\n    baseStyle = Array.isArray(node.style) ? [DEFAULT_LINK_STYLES, ...node.style] : [DEFAULT_LINK_STYLES, node.style];\n  }\n\n  return resolveStyle(container, baseStyle);\n};\n/**\n * Resolves node styles\n *\n * @param container\n * @returns Resolve node styles\n */\n\n\nconst resolveNodeStyles = container => node => {\n  const style = computeStyle(container, node);\n  if (!node.children) return Object.assign({}, node, {\n    style\n  });\n  const children = node.children.map(resolveNodeStyles(container));\n  return Object.assign({}, node, {\n    style,\n    children\n  });\n};\n/**\n * Resolves page styles\n *\n * @param page Document page\n * @returns Document page with resolved styles\n */\n\n\nconst resolvePageStyles = page => {\n  const dpi = page.props?.dpi || 72;\n  const style = page.style;\n  const width = page.box?.width || style.width;\n  const height = page.box?.height || style.height;\n  const orientation = page.props?.orientation || 'portrait';\n  const remBase = style?.fontSize || 18;\n  const container = {\n    width,\n    height,\n    orientation,\n    dpi,\n    remBase\n  };\n  return resolveNodeStyles(container)(page);\n};\n/**\n * Resolves document styles\n *\n * @param root - Document root\n * @returns Document root with resolved styles\n */\n\n\nconst resolveStyles = root => {\n  if (!root.children) return root;\n  const children = root.children.map(resolvePageStyles);\n  return Object.assign({}, root, {\n    children\n  });\n};\n\nconst getTransformStyle = s => node => isNil(node.style?.[s]) ? '50%' : node.style?.[s] ?? null;\n/**\n * Get node origin\n *\n * @param node\n * @returns {{ left?: number, top?: number }} node origin\n */\n\n\nconst getOrigin = node => {\n  if (!node.box) return null;\n  const {\n    left,\n    top,\n    width,\n    height\n  } = node.box;\n  const transformOriginX = getTransformStyle('transformOriginX')(node);\n  const transformOriginY = getTransformStyle('transformOriginY')(node);\n  const percentX = matchPercent(transformOriginX);\n  const percentY = matchPercent(transformOriginY);\n  const offsetX = percentX ? width * percentX.percent : transformOriginX;\n  const offsetY = percentY ? height * percentY.percent : transformOriginY;\n  if (isNil(offsetX) || typeof offsetX === 'string') throw new Error(`Invalid origin offsetX: ${offsetX}`);\n  if (isNil(offsetY) || typeof offsetY === 'string') throw new Error(`Invalid origin offsetY: ${offsetY}`);\n  return {\n    left: left + offsetX,\n    top: top + offsetY\n  };\n};\n/**\n * Resolve node origin\n *\n * @param node\n * @returns Node with origin attribute\n */\n\n\nconst resolveNodeOrigin = node => {\n  const origin = getOrigin(node);\n  const newNode = Object.assign({}, node, {\n    origin\n  });\n  if (!node.children) return newNode;\n  const children = node.children.map(resolveNodeOrigin);\n  return Object.assign({}, newNode, {\n    children\n  });\n};\n/**\n * Resolve document origins\n *\n * @param root - Document root\n * @returns Document root\n */\n\n\nconst resolveOrigin = root => {\n  if (!root.children) return root;\n  const children = root.children.map(resolveNodeOrigin);\n  return Object.assign({}, root, {\n    children\n  });\n};\n\nconst getBookmarkValue = bookmark => {\n  return typeof bookmark === 'string' ? {\n    title: bookmark,\n    fit: false,\n    expanded: false\n  } : bookmark;\n};\n\nconst resolveBookmarks = node => {\n  let refs = 0;\n  const children = (node.children || []).slice(0);\n  const listToExplore = children.map(value => ({\n    value,\n    parent: null\n  }));\n\n  while (listToExplore.length > 0) {\n    const element = listToExplore.shift();\n    if (!element) break;\n    const child = element.value;\n    let parent = element.parent;\n\n    if (child.props && 'bookmark' in child.props) {\n      const bookmark = getBookmarkValue(child.props.bookmark);\n      const ref = refs++;\n      const newHierarchy = {\n        ref,\n        parent: parent?.ref,\n        ...bookmark\n      };\n      child.props.bookmark = newHierarchy;\n      parent = newHierarchy;\n    }\n\n    if (child.children) {\n      child.children.forEach(childNode => {\n        listToExplore.push({\n          value: childNode,\n          parent\n        });\n      });\n    }\n  }\n\n  return node;\n};\n\nconst VALID_ORIENTATIONS = ['portrait', 'landscape'];\n/**\n * Get page orientation. Defaults to portrait\n *\n * @param page - Page object\n * @returns Page orientation\n */\n\nconst getOrientation = page => {\n  const value = page.props?.orientation || 'portrait';\n  return VALID_ORIENTATIONS.includes(value) ? value : 'portrait';\n};\n/**\n * Return true if page is landscape\n *\n * @param page - Page instance\n * @returns Is page landscape\n */\n\n\nconst isLandscape = page => getOrientation(page) === 'landscape'; // Page sizes for 72dpi. 72dpi is used internally by pdfkit.\n\n\nconst PAGE_SIZES = {\n  '4A0': [4767.87, 6740.79],\n  '2A0': [3370.39, 4767.87],\n  A0: [2383.94, 3370.39],\n  A1: [1683.78, 2383.94],\n  A2: [1190.55, 1683.78],\n  A3: [841.89, 1190.55],\n  A4: [595.28, 841.89],\n  A5: [419.53, 595.28],\n  A6: [297.64, 419.53],\n  A7: [209.76, 297.64],\n  A8: [147.4, 209.76],\n  A9: [104.88, 147.4],\n  A10: [73.7, 104.88],\n  B0: [2834.65, 4008.19],\n  B1: [2004.09, 2834.65],\n  B2: [1417.32, 2004.09],\n  B3: [1000.63, 1417.32],\n  B4: [708.66, 1000.63],\n  B5: [498.9, 708.66],\n  B6: [354.33, 498.9],\n  B7: [249.45, 354.33],\n  B8: [175.75, 249.45],\n  B9: [124.72, 175.75],\n  B10: [87.87, 124.72],\n  C0: [2599.37, 3676.54],\n  C1: [1836.85, 2599.37],\n  C2: [1298.27, 1836.85],\n  C3: [918.43, 1298.27],\n  C4: [649.13, 918.43],\n  C5: [459.21, 649.13],\n  C6: [323.15, 459.21],\n  C7: [229.61, 323.15],\n  C8: [161.57, 229.61],\n  C9: [113.39, 161.57],\n  C10: [79.37, 113.39],\n  RA0: [2437.8, 3458.27],\n  RA1: [1729.13, 2437.8],\n  RA2: [1218.9, 1729.13],\n  RA3: [864.57, 1218.9],\n  RA4: [609.45, 864.57],\n  SRA0: [2551.18, 3628.35],\n  SRA1: [1814.17, 2551.18],\n  SRA2: [1275.59, 1814.17],\n  SRA3: [907.09, 1275.59],\n  SRA4: [637.8, 907.09],\n  EXECUTIVE: [521.86, 756.0],\n  FOLIO: [612.0, 936.0],\n  LEGAL: [612.0, 1008.0],\n  LETTER: [612.0, 792.0],\n  TABLOID: [792.0, 1224.0],\n  ID1: [153, 243]\n};\n/**\n * Parses scalar value in value and unit pairs\n *\n * @param value - Scalar value\n * @returns Parsed value\n */\n\nconst parseValue = value => {\n  if (typeof value === 'number') return {\n    value,\n    unit: undefined\n  };\n  const match = /^(-?\\d*\\.?\\d+)(in|mm|cm|pt|px)?$/g.exec(value);\n  return match ? {\n    value: parseFloat(match[1]),\n    unit: match[2] || 'pt'\n  } : {\n    value,\n    unit: undefined\n  };\n};\n/**\n * Transform given scalar value to 72dpi equivalent of size\n *\n * @param value - Styles value\n * @param inputDpi - User defined dpi\n * @returns Transformed value\n */\n\n\nconst transformUnit = (value, inputDpi) => {\n  if (!value) return 0;\n  const scalar = parseValue(value);\n  const outputDpi = 72;\n  const mmFactor = 1 / 25.4 * outputDpi;\n  const cmFactor = 1 / 2.54 * outputDpi;\n  if (typeof scalar.value === 'string') throw new Error(`Invalid page size: ${value}`);\n\n  switch (scalar.unit) {\n    case 'in':\n      return scalar.value * outputDpi;\n\n    case 'mm':\n      return scalar.value * mmFactor;\n\n    case 'cm':\n      return scalar.value * cmFactor;\n\n    case 'px':\n      return Math.round(scalar.value * (outputDpi / inputDpi));\n\n    default:\n      return scalar.value;\n  }\n};\n\nconst transformUnits = (_ref, dpi) => {\n  let {\n    width,\n    height\n  } = _ref;\n  return {\n    width: transformUnit(width, dpi),\n    height: transformUnit(height, dpi)\n  };\n};\n/**\n * Transforms array into size object\n *\n * @param v - Values array\n * @returns Size object with width and height\n */\n\n\nconst toSizeObject = v => ({\n  width: v[0],\n  height: v[1]\n});\n/**\n * Flip size object\n *\n * @param v - Size object\n * @returns Flipped size object\n */\n\n\nconst flipSizeObject = v => ({\n  width: v.height,\n  height: v.width\n});\n/**\n * Returns size object from a given string\n *\n * @param v - Page size string\n * @returns Size object with width and height\n */\n\n\nconst getStringSize = v => {\n  return toSizeObject(PAGE_SIZES[v.toUpperCase()]);\n};\n/**\n * Returns size object from a single number\n *\n * @param n - Page size number\n * @returns Size object with width and height\n */\n\n\nconst getNumberSize = n => toSizeObject([n, n]);\n/**\n * Return page size in an object { width, height }\n *\n * @param page - Page node\n * @returns Size object with width and height\n */\n\n\nconst getSize = page => {\n  const value = page.props?.size || 'A4';\n  const dpi = page.props?.dpi || 72;\n  let size;\n\n  if (typeof value === 'string') {\n    size = getStringSize(value);\n  } else if (Array.isArray(value)) {\n    size = transformUnits(toSizeObject(value), dpi);\n  } else if (typeof value === 'number') {\n    size = transformUnits(getNumberSize(value), dpi);\n  } else {\n    size = transformUnits(value, dpi);\n  }\n\n  return isLandscape(page) ? flipSizeObject(size) : size;\n};\n/**\n * Resolves page size\n *\n * @param page\n * @returns Page with resolved size in style attribute\n */\n\n\nconst resolvePageSize = page => {\n  const size = getSize(page);\n  const style = flatten(page.style || {});\n  return { ...page,\n    style: { ...style,\n      ...size\n    }\n  };\n};\n/**\n * Resolves page sizes\n *\n * @param root  -Document root\n * @returns Document root with resolved page sizes\n */\n\n\nconst resolvePageSizes = root => {\n  if (!root.children) return root;\n  const children = root.children.map(resolvePageSize);\n  return Object.assign({}, root, {\n    children\n  });\n};\n\nconst isFixed = node => {\n  if (!node.props) return false;\n  return 'fixed' in node.props ? node.props.fixed === true : false;\n};\n/**\n * Get line index at given height\n *\n * @param node\n * @param height\n */\n\n\nconst lineIndexAtHeight = (node, height) => {\n  let y = 0;\n  if (!node.lines) return 0;\n\n  for (let i = 0; i < node.lines.length; i += 1) {\n    const line = node.lines[i];\n    if (y + line.box.height > height) return i;\n    y += line.box.height;\n  }\n\n  return node.lines.length;\n};\n/**\n * Get height for given text line index\n *\n * @param node\n * @param index\n */\n\n\nconst heightAtLineIndex = (node, index) => {\n  let counter = 0;\n  if (!node.lines) return counter;\n\n  for (let i = 0; i < index; i += 1) {\n    const line = node.lines[i];\n    if (!line) break;\n    counter += line.box.height;\n  }\n\n  return counter;\n};\n\nconst getLineBreak = (node, height) => {\n  const top = node.box?.top || 0;\n  const widows = node.props.widows || 2;\n  const orphans = node.props.orphans || 2;\n  const linesQuantity = node.lines.length;\n  const slicedLine = lineIndexAtHeight(node, height - top);\n\n  if (slicedLine === 0) {\n    return 0;\n  }\n\n  if (linesQuantity < orphans) {\n    return linesQuantity;\n  }\n\n  if (slicedLine < orphans || linesQuantity < orphans + widows) {\n    return 0;\n  }\n\n  if (linesQuantity === orphans + widows) {\n    return orphans;\n  }\n\n  if (linesQuantity - slicedLine < widows) {\n    return linesQuantity - widows;\n  }\n\n  return slicedLine;\n}; // Also receives contentArea in case it's needed\n\n\nconst splitText = (node, height) => {\n  const slicedLineIndex = getLineBreak(node, height);\n  const currentHeight = heightAtLineIndex(node, slicedLineIndex);\n  const nextHeight = node.box.height - currentHeight;\n  const current = Object.assign({}, node, {\n    box: { ...node.box,\n      height: currentHeight,\n      borderBottomWidth: 0\n    },\n    style: { ...node.style,\n      marginBottom: 0,\n      paddingBottom: 0,\n      borderBottomWidth: 0,\n      borderBottomLeftRadius: 0,\n      borderBottomRightRadius: 0\n    },\n    lines: node.lines.slice(0, slicedLineIndex)\n  });\n  const next = Object.assign({}, node, {\n    box: { ...node.box,\n      top: 0,\n      height: nextHeight,\n      borderTopWidth: 0\n    },\n    style: { ...node.style,\n      marginTop: 0,\n      paddingTop: 0,\n      borderTopWidth: 0,\n      borderTopLeftRadius: 0,\n      borderTopRightRadius: 0\n    },\n    lines: node.lines.slice(slicedLineIndex)\n  });\n  return [current, next];\n};\n\nconst getTop$1 = node => node.box?.top || 0;\n\nconst hasFixedHeight = node => !isNil(node.style?.height);\n\nconst splitNode = (node, height) => {\n  if (!node) return [null, null];\n  const nodeTop = getTop$1(node);\n  const current = Object.assign({}, node, {\n    box: { ...node.box,\n      borderBottomWidth: 0\n    },\n    style: { ...node.style,\n      marginBottom: 0,\n      paddingBottom: 0,\n      borderBottomWidth: 0,\n      borderBottomLeftRadius: 0,\n      borderBottomRightRadius: 0\n    }\n  });\n  current.style.height = height - nodeTop;\n  const nextHeight = hasFixedHeight(node) ? node.box.height - (height - nodeTop) : null;\n  const next = Object.assign({}, node, {\n    box: { ...node.box,\n      top: 0,\n      borderTopWidth: 0\n    },\n    style: { ...node.style,\n      marginTop: 0,\n      paddingTop: 0,\n      borderTopWidth: 0,\n      borderTopLeftRadius: 0,\n      borderTopRightRadius: 0\n    }\n  });\n\n  if (nextHeight) {\n    next.style.height = nextHeight;\n  }\n\n  return [current, next];\n};\n\nconst NON_WRAP_TYPES = [P.Svg, P.Note, P.Image, P.Canvas];\n\nconst getWrap = node => {\n  if (NON_WRAP_TYPES.includes(node.type)) return false;\n  if (!node.props) return true;\n  return 'wrap' in node.props ? node.props.wrap : true;\n};\n\nconst getComputedPadding = (node, edge) => {\n  const {\n    yogaNode\n  } = node;\n  return yogaNode ? yogaNode.getComputedPadding(edge) : null;\n};\n/**\n * Get Yoga computed paddings. Zero otherwise\n *\n * @param  node\n * @returns paddings\n */\n\n\nconst getPadding = node => {\n  const {\n    style,\n    box\n  } = node;\n  const paddingTop = getComputedPadding(node, Yoga.Edge.Top) || box?.paddingTop || style?.paddingTop || 0;\n  const paddingRight = getComputedPadding(node, Yoga.Edge.Right) || box?.paddingRight || style?.paddingRight || 0;\n  const paddingBottom = getComputedPadding(node, Yoga.Edge.Bottom) || box?.paddingBottom || style?.paddingBottom || 0;\n  const paddingLeft = getComputedPadding(node, Yoga.Edge.Left) || box?.paddingLeft || style?.paddingLeft || 0;\n  return {\n    paddingTop,\n    paddingRight,\n    paddingBottom,\n    paddingLeft\n  };\n};\n\nconst getWrapArea = page => {\n  const height = page.style?.height;\n  const {\n    paddingBottom\n  } = getPadding(page);\n  return height - paddingBottom;\n};\n\nconst getContentArea = page => {\n  const height = page.style?.height;\n  const {\n    paddingTop,\n    paddingBottom\n  } = getPadding(page);\n  return height - paddingBottom - paddingTop;\n};\n\nconst isString = value => typeof value === 'string';\n\nconst isNumber = value => typeof value === 'number';\n\nconst isBoolean = value => typeof value === 'boolean';\n\nconst isFragment = value => value && value.type === Symbol.for('react.fragment');\n/**\n * Transforms a react element instance to internal element format.\n *\n * Can return multiple instances in the case of arrays or fragments.\n *\n * @param element - React element\n * @returns Parsed React elements\n */\n\n\nconst createInstances = element => {\n  if (!element) return [];\n\n  if (Array.isArray(element)) {\n    return element.reduce((acc, el) => acc.concat(createInstances(el)), []);\n  }\n\n  if (isBoolean(element)) {\n    return [];\n  }\n\n  if (isString(element) || isNumber(element)) {\n    return [{\n      type: P.TextInstance,\n      value: `${element}`\n    }];\n  }\n\n  if (isFragment(element)) {\n    // @ts-expect-error figure out why this is complains\n    return createInstances(element.props.children);\n  }\n\n  if (!isString(element.type)) {\n    // @ts-expect-error figure out why this is complains\n    return createInstances(element.type(element.props));\n  }\n\n  const {\n    type,\n    props: {\n      style = {},\n      children,\n      ...props\n    }\n  } = element;\n  const nextChildren = castArray(children).reduce((acc, child) => acc.concat(createInstances(child)), []);\n  return [{\n    type,\n    style,\n    props,\n    children: nextChildren\n  }];\n};\n\nconst getBreak = node => 'break' in node.props ? node.props.break : false;\n\nconst getMinPresenceAhead = node => 'minPresenceAhead' in node.props ? node.props.minPresenceAhead : 0;\n\nconst getFurthestEnd = elements => Math.max(...elements.map(node => node.box.top + node.box.height));\n\nconst getEndOfMinPresenceAhead = child => {\n  return child.box.top + child.box.height + child.box.marginBottom + getMinPresenceAhead(child);\n};\n\nconst getEndOfPresence = (child, futureElements) => {\n  const afterMinPresenceAhead = getEndOfMinPresenceAhead(child);\n  const endOfFurthestFutureElement = getFurthestEnd(futureElements.filter(node => !('fixed' in node.props)));\n  return Math.min(afterMinPresenceAhead, endOfFurthestFutureElement);\n};\n\nconst shouldBreak = (child, futureElements, height) => {\n  if ('fixed' in child.props) return false;\n  const shouldSplit = height < child.box.top + child.box.height;\n  const canWrap = getWrap(child); // Calculate the y coordinate where the desired presence of the child ends\n\n  const endOfPresence = getEndOfPresence(child, futureElements); // If the child is already at the top of the page, breaking won't improve its presence\n  // (as long as react-pdf does not support breaking into differently sized containers)\n\n  const breakingImprovesPresence = child.box.top > child.box.marginTop;\n  return getBreak(child) || shouldSplit && !canWrap || !shouldSplit && endOfPresence > height && breakingImprovesPresence;\n};\n\nconst IGNORABLE_CODEPOINTS = [8232, // LINE_SEPARATOR\n8233 // PARAGRAPH_SEPARATOR\n];\n\nconst buildSubsetForFont = font => IGNORABLE_CODEPOINTS.reduce((acc, codePoint) => {\n  if (font && font.hasGlyphForCodePoint && font.hasGlyphForCodePoint(codePoint)) {\n    return acc;\n  }\n\n  return [...acc, String.fromCharCode(codePoint)];\n}, []);\n\nconst ignoreChars = fragments => fragments.map(fragment => {\n  const charSubset = buildSubsetForFont(fragment.attributes.font[0]);\n  const subsetRegex = new RegExp(charSubset.join('|'));\n  return {\n    string: fragment.string.replace(subsetRegex, ''),\n    attributes: fragment.attributes\n  };\n});\n\nconst PREPROCESSORS = [ignoreChars, embedEmojis];\n\nconst isImage$1 = node => node.type === P.Image;\n\nconst isTextInstance$2 = node => node.type === P.TextInstance;\n/**\n * Get textkit fragments of given node object\n *\n * @param fontStore - Font store\n * @param instance - Node\n * @param parentLink - Parent link\n * @param level - Fragment level\n * @returns Text fragments\n */\n\n\nconst getFragments = function (fontStore, instance) {\n  let parentLink = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  let level = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  if (!instance) return [{\n    string: ''\n  }];\n  let fragments = [];\n  const {\n    color = 'black',\n    direction = 'ltr',\n    fontFamily = 'Helvetica',\n    fontWeight,\n    fontStyle,\n    fontSize = 18,\n    textAlign,\n    lineHeight,\n    textDecoration,\n    textDecorationColor,\n    textDecorationStyle,\n    textTransform,\n    letterSpacing,\n    textIndent,\n    opacity,\n    verticalAlign\n  } = instance.style;\n  const fontFamilies = typeof fontFamily === 'string' ? [fontFamily] : [...(fontFamily || [])]; // Fallback font\n\n  fontFamilies.push('Helvetica');\n  const font = fontFamilies.map(fontFamilyName => {\n    const opts = {\n      fontFamily: fontFamilyName,\n      fontWeight,\n      fontStyle\n    };\n    const obj = fontStore.getFont(opts);\n    return obj?.data;\n  }); // Don't pass main background color to textkit. Will be rendered by the render package instead\n\n  const backgroundColor = level === 0 ? null : instance.style.backgroundColor;\n  const attributes = {\n    font,\n    color,\n    opacity,\n    fontSize,\n    lineHeight,\n    direction,\n    verticalAlign,\n    backgroundColor,\n    indent: textIndent,\n    characterSpacing: letterSpacing,\n    strikeStyle: textDecorationStyle,\n    underlineStyle: textDecorationStyle,\n    underline: textDecoration === 'underline' || textDecoration === 'underline line-through' || textDecoration === 'line-through underline',\n    strike: textDecoration === 'line-through' || textDecoration === 'underline line-through' || textDecoration === 'line-through underline',\n    strikeColor: textDecorationColor || color,\n    underlineColor: textDecorationColor || color,\n    // @ts-expect-error allow this props access\n    link: parentLink || instance.props?.src || instance.props?.href,\n    align: textAlign || (direction === 'rtl' ? 'right' : 'left')\n  };\n\n  for (let i = 0; i < instance.children.length; i += 1) {\n    const child = instance.children[i];\n\n    if (isImage$1(child)) {\n      fragments.push({\n        string: String.fromCharCode(0xfffc),\n        attributes: { ...attributes,\n          attachment: {\n            width: child.style.width || fontSize,\n            height: child.style.height || fontSize,\n            image: child.image.data\n          }\n        }\n      });\n    } else if (isTextInstance$2(child)) {\n      fragments.push({\n        string: transformText(child.value, textTransform),\n        attributes\n      });\n    } else if (child) {\n      fragments.push(...getFragments(fontStore, child, attributes.link, level + 1));\n    }\n  }\n\n  for (let i = 0; i < PREPROCESSORS.length; i += 1) {\n    const preprocessor = PREPROCESSORS[i];\n    fragments = preprocessor(fragments);\n  }\n\n  return fragments;\n};\n/**\n * Get textkit attributed string from text node\n *\n * @param fontStore - Font store\n * @param instance Node\n * @returns Attributed string\n */\n\n\nconst getAttributedString = (fontStore, instance) => {\n  const fragments = getFragments(fontStore, instance);\n  return fromFragments(fragments);\n};\n\nconst engines = {\n  bidi,\n  linebreaker,\n  justification,\n  textDecoration,\n  scriptItemizer,\n  wordHyphenation,\n  fontSubstitution\n};\nconst engine = layoutEngine(engines);\n\nconst getMaxLines = node => node.style?.maxLines;\n\nconst getTextOverflow = node => node.style?.textOverflow;\n/**\n * Get layout container for specific text node\n *\n * @param {number} width\n * @param {number} height\n * @param {Object} node\n * @returns {Object} layout container\n */\n\n\nconst getContainer = (width, height, node) => {\n  const maxLines = getMaxLines(node);\n  const textOverflow = getTextOverflow(node);\n  return {\n    x: 0,\n    y: 0,\n    width,\n    maxLines,\n    height: height || Infinity,\n    truncateMode: textOverflow\n  };\n};\n/**\n * Get text layout options for specific text node\n *\n * @param {Object} node instance\n * @returns {Object} layout options\n */\n\n\nconst getLayoutOptions = (fontStore, node) => ({\n  hyphenationPenalty: node.props.hyphenationPenalty,\n  shrinkWhitespaceFactor: {\n    before: -0.5,\n    after: -0.5\n  },\n  hyphenationCallback: node.props.hyphenationCallback || fontStore?.getHyphenationCallback() || null\n});\n/**\n * Get text lines for given node\n *\n * @param node - Node\n * @param width - Container width\n * @param height - Container height\n * @param fontStore - Font store\n * @returns Layout lines\n */\n\n\nconst layoutText = (node, width, height, fontStore) => {\n  const attributedString = getAttributedString(fontStore, node);\n  const container = getContainer(width, height, node);\n  const options = getLayoutOptions(fontStore, node);\n  const lines = engine(attributedString, container, options);\n  return lines.reduce((acc, line) => [...acc, ...line], []);\n};\n\nconst isSvg$2 = node => node.type === P.Svg;\n\nconst isText$4 = node => node.type === P.Text;\n\nconst shouldIterate = node => !isSvg$2(node) && !isText$4(node);\n\nconst shouldLayoutText = node => isText$4(node) && !node.lines;\n/**\n * Performs text layout on text node if wasn't calculated before.\n * Text layout is usually performed on Yoga's layout process (via setMeasureFunc),\n * but we need to layout those nodes with fixed width and height.\n *\n * @param node\n * @returns Layout node\n */\n\n\nconst resolveTextLayout = (node, fontStore) => {\n  if (shouldLayoutText(node)) {\n    const width = node.box.width - (node.box.paddingRight + node.box.paddingLeft);\n    const height = node.box.height - (node.box.paddingTop + node.box.paddingBottom);\n    node.lines = layoutText(node, width, height, fontStore);\n  }\n\n  if (shouldIterate(node)) {\n    if (!node.children) return node;\n\n    const mapChild = child => resolveTextLayout(child, fontStore);\n\n    const children = node.children.map(mapChild);\n    return Object.assign({}, node, {\n      children\n    });\n  }\n\n  return node;\n};\n\nconst BASE_INHERITABLE_PROPERTIES = ['color', 'fontFamily', 'fontSize', 'fontStyle', 'fontWeight', 'letterSpacing', 'opacity', 'textDecoration', 'textTransform', 'lineHeight', 'textAlign', 'visibility', 'wordSpacing'];\nconst TEXT_INHERITABLE_PROPERTIES = [...BASE_INHERITABLE_PROPERTIES, 'backgroundColor'];\n\nconst isType$2 = type => node => node.type === type;\n\nconst isSvg$1 = isType$2(P.Svg);\nconst isText$3 = isType$2(P.Text); // Merge style values\n\nconst mergeValues = (styleName, value, inheritedValue) => {\n  switch (styleName) {\n    case 'textDecoration':\n      {\n        // merge not none and not false textDecoration values to one rule\n        return [inheritedValue, value].filter(v => v && v !== 'none').join(' ');\n      }\n\n    default:\n      return value;\n  }\n}; // Merge inherited and node styles\n\n\nconst merge = (inheritedStyles, style) => {\n  const mergedStyles = { ...inheritedStyles\n  };\n  Object.entries(style).forEach(_ref2 => {\n    let [styleName, value] = _ref2;\n    mergedStyles[styleName] = mergeValues(styleName, value, inheritedStyles[styleName]);\n  });\n  return mergedStyles;\n};\n/**\n * Merges styles with node\n *\n * @param inheritedStyles - Style object\n * @returns Merge styles function\n */\n\n\nconst mergeStyles = inheritedStyles => node => {\n  const style = merge(inheritedStyles, node.style || {});\n  return Object.assign({}, node, {\n    style\n  });\n};\n/**\n * Inherit style values from the root to the leafs\n *\n * @param node - Document root\n * @returns Document root with inheritance\n *\n */\n\n\nconst resolveInheritance = node => {\n  if (isSvg$1(node)) return node;\n  if (!('children' in node)) return node;\n  const inheritableProperties = isText$3(node) ? TEXT_INHERITABLE_PROPERTIES : BASE_INHERITABLE_PROPERTIES;\n  const inheritStyles = pick(inheritableProperties, node.style || {});\n  const resolveChild = compose(resolveInheritance, mergeStyles(inheritStyles));\n  const children = node.children.map(resolveChild);\n  return Object.assign({}, node, {\n    children\n  });\n};\n\nconst getComputedMargin = (node, edge) => {\n  const {\n    yogaNode\n  } = node;\n  return yogaNode ? yogaNode.getComputedMargin(edge) : null;\n};\n/**\n * Get Yoga computed magins. Zero otherwise\n *\n * @param node\n * @returns Margins\n */\n\n\nconst getMargin = node => {\n  const {\n    style,\n    box\n  } = node;\n  const marginTop = getComputedMargin(node, Yoga.Edge.Top) || box?.marginTop || style?.marginTop || 0;\n  const marginRight = getComputedMargin(node, Yoga.Edge.Right) || box?.marginRight || style?.marginRight || 0;\n  const marginBottom = getComputedMargin(node, Yoga.Edge.Bottom) || box?.marginBottom || style?.marginBottom || 0;\n  const marginLeft = getComputedMargin(node, Yoga.Edge.Left) || box?.marginLeft || style?.marginLeft || 0;\n  return {\n    marginTop,\n    marginRight,\n    marginBottom,\n    marginLeft\n  };\n};\n/**\n * Get Yoga computed position. Zero otherwise\n *\n * @param node\n * @returns Position\n */\n\n\nconst getPosition = node => {\n  const {\n    yogaNode\n  } = node;\n  return {\n    top: yogaNode?.getComputedTop() || 0,\n    right: yogaNode?.getComputedRight() || 0,\n    bottom: yogaNode?.getComputedBottom() || 0,\n    left: yogaNode?.getComputedLeft() || 0\n  };\n};\n\nconst DEFAULT_DIMENSION = {\n  width: 0,\n  height: 0\n};\n/**\n * Get Yoga computed dimensions. Zero otherwise\n *\n * @param node\n * @returns Dimensions\n */\n\nconst getDimension = node => {\n  const {\n    yogaNode\n  } = node;\n  if (!yogaNode) return DEFAULT_DIMENSION;\n  return {\n    width: yogaNode.getComputedWidth(),\n    height: yogaNode.getComputedHeight()\n  };\n};\n\nconst getComputedBorder = (yogaNode, edge) => yogaNode ? yogaNode.getComputedBorder(edge) : 0;\n/**\n * Get Yoga computed border width. Zero otherwise\n *\n * @param node\n * @returns Border widths\n */\n\n\nconst getBorderWidth = node => {\n  const {\n    yogaNode\n  } = node;\n  return {\n    borderTopWidth: getComputedBorder(yogaNode, Yoga.Edge.Top),\n    borderRightWidth: getComputedBorder(yogaNode, Yoga.Edge.Right),\n    borderBottomWidth: getComputedBorder(yogaNode, Yoga.Edge.Bottom),\n    borderLeftWidth: getComputedBorder(yogaNode, Yoga.Edge.Left)\n  };\n};\n/**\n * Set display attribute to node's Yoga instance\n *\n * @param value - Display\n * @returns Node instance wrapper\n */\n\n\nconst setDisplay = value => node => {\n  const {\n    yogaNode\n  } = node;\n\n  if (yogaNode) {\n    yogaNode.setDisplay(value === 'none' ? Yoga.Display.None : Yoga.Display.Flex);\n  }\n\n  return node;\n};\n\nconst OVERFLOW = {\n  hidden: Yoga.Overflow.Hidden,\n  scroll: Yoga.Overflow.Scroll\n};\n/**\n * Set overflow attribute to node's Yoga instance\n *\n * @param value - Overflow value\n * @returns Node instance wrapper\n */\n\nconst setOverflow = value => node => {\n  const {\n    yogaNode\n  } = node;\n\n  if (!isNil(value) && yogaNode) {\n    const overflow = OVERFLOW[value] || Yoga.Overflow.Visible;\n    yogaNode.setOverflow(overflow);\n  }\n\n  return node;\n};\n\nconst FLEX_WRAP = {\n  wrap: Yoga.Wrap.Wrap,\n  'wrap-reverse': Yoga.Wrap.WrapReverse\n};\n/**\n * Set flex wrap attribute to node's Yoga instance\n *\n * @param value - Flex wrap value\n * @returns Node instance wrapper\n */\n\nconst setFlexWrap = value => node => {\n  const {\n    yogaNode\n  } = node;\n\n  if (yogaNode) {\n    const flexWrap = FLEX_WRAP[value] || Yoga.Wrap.NoWrap;\n    yogaNode.setFlexWrap(flexWrap);\n  }\n\n  return node;\n};\n/**\n * Set generic yoga attribute to node's Yoga instance, handing `auto`, edges and percentage cases\n *\n * @param attr - Property\n * @param edge - Edge\n * @returns Node instance wrapper\n */\n\n\nconst setYogaValue = (attr, edge) => value => node => {\n  const {\n    yogaNode\n  } = node;\n\n  if (!isNil(value) && yogaNode) {\n    const hasEdge = !isNil(edge);\n    const fixedMethod = `set${upperFirst(attr)}`;\n    const autoMethod = `${fixedMethod}Auto`;\n    const percentMethod = `${fixedMethod}Percent`;\n    const percent = matchPercent(value);\n\n    if (percent && !yogaNode[percentMethod]) {\n      throw new Error(`You can't pass percentage values to ${attr} property`);\n    }\n\n    if (percent) {\n      if (hasEdge) {\n        yogaNode[percentMethod]?.(edge, percent.value);\n      } else {\n        yogaNode[percentMethod]?.(percent.value);\n      }\n    } else if (value === 'auto') {\n      if (hasEdge) {\n        yogaNode[autoMethod]?.(edge);\n      } else {\n        yogaNode[autoMethod]?.();\n      }\n    } else if (hasEdge) {\n      yogaNode[fixedMethod]?.(edge, value);\n    } else {\n      yogaNode[fixedMethod]?.(value);\n    }\n  }\n\n  return node;\n};\n/**\n * Set flex grow attribute to node's Yoga instance\n *\n * @param  value - Flex grow value\n * @returns Node instance wrapper\n */\n\n\nconst setFlexGrow = value => node => {\n  return setYogaValue('flexGrow')(value || 0)(node);\n};\n/**\n * Set flex basis attribute to node's Yoga instance\n *\n * @param flex - Basis value\n * @param node - Node instance\n * @returns Node instance\n */\n\n\nconst setFlexBasis = setYogaValue('flexBasis');\nconst ALIGN = {\n  'flex-start': Yoga.Align.FlexStart,\n  center: Yoga.Align.Center,\n  'flex-end': Yoga.Align.FlexEnd,\n  stretch: Yoga.Align.Stretch,\n  baseline: Yoga.Align.Baseline,\n  'space-between': Yoga.Align.SpaceBetween,\n  'space-around': Yoga.Align.SpaceAround,\n  'space-evenly': Yoga.Align.SpaceEvenly\n};\n/**\n * Set generic align attribute to node's Yoga instance\n *\n * @param attr - Specific align property\n * @param value - Specific align value\n * @param node - Node\n * @returns Node\n */\n\nconst setAlign = attr => value => node => {\n  const {\n    yogaNode\n  } = node;\n  const defaultValue = attr === 'items' ? Yoga.Align.Stretch : Yoga.Align.Auto;\n\n  if (yogaNode) {\n    const align = ALIGN[value] || defaultValue;\n    yogaNode[`setAlign${upperFirst(attr)}`](align);\n  }\n\n  return node;\n};\n/**\n * Set align self attribute to node's Yoga instance\n *\n * @param align - Value\n * @param node - Node instance\n * @returns Node instance\n */\n\n\nconst setAlignSelf = setAlign('self');\n/**\n * Set align items attribute to node's Yoga instance\n *\n * @param align - Value\n * @param node - Node instance\n * @returns Node instance\n */\n\nconst setAlignItems = setAlign('items');\n/**\n * Set flex shrink attribute to node's Yoga instance\n *\n * @param value - Flex shrink value\n * @returns Node instance wrapper\n */\n\nconst setFlexShrink = value => node => {\n  return setYogaValue('flexShrink')(value || 1)(node);\n};\n/**\n * Set aspect ratio attribute to node's Yoga instance\n *\n * @param value - Ratio\n * @returns Node instance\n */\n\n\nconst setAspectRatio = value => node => {\n  const {\n    yogaNode\n  } = node;\n\n  if (!isNil(value) && yogaNode) {\n    yogaNode.setAspectRatio(value);\n  }\n\n  return node;\n};\n/**\n * Set align content attribute to node's Yoga instance\n *\n * @param align - Value\n * @param node - Instance\n * @returns Node instance\n */\n\n\nconst setAlignContent = setAlign('content');\nconst POSITION = {\n  absolute: Yoga.PositionType.Absolute,\n  relative: Yoga.PositionType.Relative,\n  static: Yoga.PositionType.Static\n};\n/**\n * Set position type attribute to node's Yoga instance\n *\n * @param value - Position position type\n * @returns Node instance\n */\n\nconst setPositionType = value => node => {\n  const {\n    yogaNode\n  } = node;\n\n  if (!isNil(value) && yogaNode) {\n    yogaNode.setPositionType(POSITION[value]);\n  }\n\n  return node;\n};\n\nconst FLEX_DIRECTIONS = {\n  row: Yoga.FlexDirection.Row,\n  'row-reverse': Yoga.FlexDirection.RowReverse,\n  'column-reverse': Yoga.FlexDirection.ColumnReverse\n};\n/**\n * Set flex direction attribute to node's Yoga instance\n *\n * @param value - Flex direction value\n * @returns Node instance wrapper\n */\n\nconst setFlexDirection = value => node => {\n  const {\n    yogaNode\n  } = node;\n\n  if (yogaNode) {\n    const flexDirection = FLEX_DIRECTIONS[value] || Yoga.FlexDirection.Column;\n    yogaNode.setFlexDirection(flexDirection);\n  }\n\n  return node;\n};\n\nconst JUSTIFY_CONTENT = {\n  center: Yoga.Justify.Center,\n  'flex-end': Yoga.Justify.FlexEnd,\n  'space-between': Yoga.Justify.SpaceBetween,\n  'space-around': Yoga.Justify.SpaceAround,\n  'space-evenly': Yoga.Justify.SpaceEvenly\n};\n/**\n * Set justify content attribute to node's Yoga instance\n *\n * @param value - Justify content value\n * @returns Node instance wrapper\n */\n\nconst setJustifyContent = value => node => {\n  const {\n    yogaNode\n  } = node;\n\n  if (!isNil(value) && yogaNode) {\n    const justifyContent = JUSTIFY_CONTENT[value] || Yoga.Justify.FlexStart;\n    yogaNode.setJustifyContent(justifyContent);\n  }\n\n  return node;\n};\n/**\n * Set margin top attribute to node's Yoga instance\n *\n * @param margin - Margin top\n * @param node - Node instance\n * @returns Node instance\n */\n\n\nconst setMarginTop = setYogaValue('margin', Yoga.Edge.Top);\n/**\n * Set margin right attribute to node's Yoga instance\n *\n * @param margin - Margin right\n * @param node - Node instance\n * @returns Node instance\n */\n\nconst setMarginRight = setYogaValue('margin', Yoga.Edge.Right);\n/**\n * Set margin bottom attribute to node's Yoga instance\n *\n * @param margin - Margin bottom\n * @param node - Node instance\n * @returns Node instance\n */\n\nconst setMarginBottom = setYogaValue('margin', Yoga.Edge.Bottom);\n/**\n * Set margin left attribute to node's Yoga instance\n *\n * @param margin - Margin left\n * @param node - Node instance\n * @returns Node instance\n */\n\nconst setMarginLeft = setYogaValue('margin', Yoga.Edge.Left);\n/**\n * Set padding top attribute to node's Yoga instance\n *\n * @param padding - Padding top\n * @param node - Node instance\n * @returns Node instance\n */\n\nconst setPaddingTop = setYogaValue('padding', Yoga.Edge.Top);\n/**\n * Set padding right attribute to node's Yoga instance\n *\n * @param padding - Padding right\n * @param node - Node instance\n * @returns Node instance\n */\n\nconst setPaddingRight = setYogaValue('padding', Yoga.Edge.Right);\n/**\n * Set padding bottom attribute to node's Yoga instance\n *\n * @param padding - Padding bottom\n * @param node Node instance\n * @returns Node instance\n */\n\nconst setPaddingBottom = setYogaValue('padding', Yoga.Edge.Bottom);\n/**\n * Set padding left attribute to node's Yoga instance\n *\n * @param padding - Padding left\n * @param node - Node instance\n * @returns Node instance\n */\n\nconst setPaddingLeft = setYogaValue('padding', Yoga.Edge.Left);\n/**\n * Set border top attribute to node's Yoga instance\n *\n * @param border - Border top width\n * @param node - Node instance\n * @returns Node instance\n */\n\nconst setBorderTop = setYogaValue('border', Yoga.Edge.Top);\n/**\n * Set border right attribute to node's Yoga instance\n *\n * @param border - Border right width\n * @param node - Node instance\n * @returns Node instance\n */\n\nconst setBorderRight = setYogaValue('border', Yoga.Edge.Right);\n/**\n * Set border bottom attribute to node's Yoga instance\n *\n * @param border - Border bottom width\n * @param node - Node instance\n * @returns Node instance\n */\n\nconst setBorderBottom = setYogaValue('border', Yoga.Edge.Bottom);\n/**\n * Set border left attribute to node's Yoga instance\n *\n * @param border - Border left width\n * @param node - Node instance\n * @returns Node instance\n */\n\nconst setBorderLeft = setYogaValue('border', Yoga.Edge.Left);\n/**\n * Set position top attribute to node's Yoga instance\n *\n * @param position - Position top\n * @param node - Node instance\n * @returns Node instance\n */\n\nconst setPositionTop = setYogaValue('position', Yoga.Edge.Top);\n/**\n * Set position right attribute to node's Yoga instance\n *\n * @param position - Position right\n * @param node - Node instance\n * @returns Node instance\n */\n\nconst setPositionRight = setYogaValue('position', Yoga.Edge.Right);\n/**\n * Set position bottom attribute to node's Yoga instance\n *\n * @param position - Position bottom\n * @param node - Node instance\n * @returns Node instance\n */\n\nconst setPositionBottom = setYogaValue('position', Yoga.Edge.Bottom);\n/**\n * Set position left attribute to node's Yoga instance\n *\n * @param position - Position left\n * @param node - Node instance\n * @returns Node instance\n */\n\nconst setPositionLeft = setYogaValue('position', Yoga.Edge.Left);\n/**\n * Set width to node's Yoga instance\n *\n * @param width - Width\n * @param node - Node instance\n * @returns Node instance\n */\n\nconst setWidth = setYogaValue('width');\n/**\n * Set min width to node's Yoga instance\n *\n * @param min - Width\n * @param node - Node instance\n * @returns Node instance\n */\n\nconst setMinWidth = setYogaValue('minWidth');\n/**\n * Set max width to node's Yoga instance\n *\n * @param max - Width\n * @param node - Node instance\n * @returns Node instance\n */\n\nconst setMaxWidth = setYogaValue('maxWidth');\n/**\n * Set height to node's Yoga instance\n *\n * @param height - Height\n * @param node - Node instance\n * @returns Node instance\n */\n\nconst setHeight = setYogaValue('height');\n/**\n * Set min height to node's Yoga instance\n *\n * @param min - Height\n * @param node - Node instance\n * @returns Node instance\n */\n\nconst setMinHeight = setYogaValue('minHeight');\n/**\n * Set max height to node's Yoga instance\n *\n * @param max - Height\n * @param node - Node instance\n * @returns Node instance\n */\n\nconst setMaxHeight = setYogaValue('maxHeight');\n/**\n * Set rowGap value to node's Yoga instance\n *\n * @param value - Gap value\n * @returns Node instance wrapper\n */\n\nconst setRowGap = setYogaValue('gap', Yoga.Gutter.Row);\n/**\n * Set columnGap value to node's Yoga instance\n *\n * @param value - Gap value\n * @returns Node instance wrapper\n */\n\nconst setColumnGap = setYogaValue('gap', Yoga.Gutter.Column);\n\nconst getAspectRatio = viewbox => {\n  if (!viewbox) return null;\n  if (typeof viewbox === 'string') return null;\n  return (viewbox.maxX - viewbox.minX) / (viewbox.maxY - viewbox.minY);\n};\n/**\n * Yoga svg measure function\n *\n * @param page\n * @param node\n * @returns Measure svg\n */\n\n\nconst measureCanvas$1 = (page, node) => (width, widthMode, height, heightMode) => {\n  const aspectRatio = getAspectRatio(node.props.viewBox) || 1;\n\n  if (widthMode === Yoga.MeasureMode.Exactly || widthMode === Yoga.MeasureMode.AtMost) {\n    return {\n      width,\n      height: width / aspectRatio\n    };\n  }\n\n  if (heightMode === Yoga.MeasureMode.Exactly) {\n    return {\n      width: height * aspectRatio\n    };\n  }\n\n  return {};\n};\n/**\n * Get lines width (if any)\n *\n * @param node\n * @returns Lines width\n */\n\n\nconst linesWidth = node => {\n  if (!node.lines) return 0;\n  return Math.max(0, ...node.lines.map(line => line.xAdvance));\n};\n/**\n * Get lines height (if any)\n *\n * @param node\n * @returns Lines height\n */\n\n\nconst linesHeight = node => {\n  if (!node.lines) return -1;\n  return node.lines.reduce((acc, line) => acc + line.box.height, 0);\n};\n\nconst ALIGNMENT_FACTORS = {\n  center: 0.5,\n  right: 1\n};\n/**\n * Yoga text measure function\n *\n * @param page\n * @param node\n * @param fontStore\n * @returns {MeasureText} measure text function\n */\n\nconst measureText = (page, node, fontStore) => (width, widthMode, height) => {\n  if (widthMode === Yoga.MeasureMode.Exactly) {\n    if (!node.lines) node.lines = layoutText(node, width, height, fontStore);\n    return {\n      height: linesHeight(node)\n    };\n  }\n\n  if (widthMode === Yoga.MeasureMode.AtMost) {\n    const alignFactor = ALIGNMENT_FACTORS[node.style?.textAlign] || 0;\n\n    if (!node.lines) {\n      node.lines = layoutText(node, width, height, fontStore);\n      node.alignOffset = (width - linesWidth(node)) * alignFactor; // Compensate align in variable width containers\n    }\n\n    return {\n      height: linesHeight(node),\n      width: Math.min(width, linesWidth(node))\n    };\n  }\n\n  return {};\n};\n/**\n * Get image ratio\n *\n * @param node - Image node\n * @returns Image ratio\n */\n\n\nconst getRatio = node => {\n  return node.image?.data ? node.image.width / node.image.height : 1;\n};\n/**\n * Checks if page has auto height\n *\n * @param page\n * @returns Is page height auto\n */\n\n\nconst isHeightAuto = page => isNil(page.box?.height);\n\nconst SAFETY_HEIGHT$1 = 10;\n/**\n * Yoga image measure function\n *\n * @param page - Page\n * @param node - Node\n * @returns Measure image\n */\n\nconst measureImage = (page, node) => (width, widthMode, height, heightMode) => {\n  const imageRatio = getRatio(node);\n  const imageMargin = getMargin(node);\n  const pagePadding = getPadding(page); // TODO: Check image percentage margins\n\n  const pageArea = isHeightAuto(page) ? Infinity : (page.box?.height || 0) - pagePadding.paddingTop - pagePadding.paddingBottom - imageMargin.marginTop - imageMargin.marginBottom - SAFETY_HEIGHT$1; // Skip measure if image data not present yet\n\n  if (!node.image) return {\n    width: 0,\n    height: 0\n  };\n\n  if (widthMode === Yoga.MeasureMode.Exactly && heightMode === Yoga.MeasureMode.Undefined) {\n    const scaledHeight = width / imageRatio;\n    return {\n      height: Math.min(pageArea, scaledHeight)\n    };\n  }\n\n  if (heightMode === Yoga.MeasureMode.Exactly && (widthMode === Yoga.MeasureMode.AtMost || widthMode === Yoga.MeasureMode.Undefined)) {\n    return {\n      width: Math.min(height * imageRatio, width)\n    };\n  }\n\n  if (widthMode === Yoga.MeasureMode.Exactly && heightMode === Yoga.MeasureMode.AtMost) {\n    const scaledHeight = width / imageRatio;\n    return {\n      height: Math.min(height, pageArea, scaledHeight)\n    };\n  }\n\n  if (widthMode === Yoga.MeasureMode.AtMost && heightMode === Yoga.MeasureMode.AtMost) {\n    if (imageRatio > 1) {\n      return {\n        width,\n        height: Math.min(width / imageRatio, height)\n      };\n    }\n\n    return {\n      height,\n      width: Math.min(height * imageRatio, width)\n    };\n  }\n\n  return {\n    height,\n    width\n  };\n};\n\nconst SAFETY_HEIGHT = 10;\n\nconst getMax = values => Math.max(-Infinity, ...values);\n/**\n * Helper object to predict canvas size\n * TODO: Implement remaining functions (as close as possible);\n */\n\n\nconst measureCtx = () => {\n  const ctx = {};\n  const points = [];\n\n  const nil = () => ctx;\n\n  const addPoint = (x, y) => points.push([x, y]);\n\n  const moveTo = (x, y) => {\n    addPoint(x, y);\n    return ctx;\n  };\n\n  const rect = (x, y, w, h) => {\n    addPoint(x, y);\n    addPoint(x + w, y);\n    addPoint(x, y + h);\n    addPoint(x + w, y + h);\n    return ctx;\n  };\n\n  const ellipse = (x, y, rx, ry) => {\n    ry = ry || rx;\n    addPoint(x - rx, y - ry);\n    addPoint(x + rx, y - ry);\n    addPoint(x + rx, y + ry);\n    addPoint(x - rx, y + ry);\n    return ctx;\n  };\n\n  const polygon = function () {\n    points.push(...arguments);\n    return ctx;\n  }; // Change dimensions\n\n\n  ctx.rect = rect;\n  ctx.moveTo = moveTo;\n  ctx.lineTo = moveTo;\n  ctx.circle = ellipse;\n  ctx.polygon = polygon;\n  ctx.ellipse = ellipse;\n  ctx.roundedRect = rect; // To be implemented\n\n  ctx.text = nil;\n  ctx.path = nil;\n  ctx.lineWidth = nil;\n  ctx.bezierCurveTo = nil;\n  ctx.quadraticCurveTo = nil;\n  ctx.scale = nil;\n  ctx.rotate = nil;\n  ctx.translate = nil; // These don't change dimensions\n\n  ctx.dash = nil;\n  ctx.clip = nil;\n  ctx.save = nil;\n  ctx.fill = nil;\n  ctx.font = nil;\n  ctx.stroke = nil;\n  ctx.lineCap = nil;\n  ctx.opacity = nil;\n  ctx.restore = nil;\n  ctx.lineJoin = nil;\n  ctx.fontSize = nil;\n  ctx.fillColor = nil;\n  ctx.miterLimit = nil;\n  ctx.strokeColor = nil;\n  ctx.fillOpacity = nil;\n  ctx.strokeOpacity = nil;\n  ctx.linearGradient = nil;\n  ctx.radialGradient = nil;\n\n  ctx.getWidth = () => getMax(points.map(p => p[0]));\n\n  ctx.getHeight = () => getMax(points.map(p => p[1]));\n\n  return ctx;\n};\n/**\n * @typedef {Function} MeasureCanvas\n * @returns {{ width: number, height: number }} canvas width and height\n */\n\n/**\n * Yoga canvas measure function\n *\n * @param {Object} page\n * @param {Object} node\n * @returns {MeasureCanvas} measure canvas\n */\n\n\nconst measureCanvas = (page, node) => () => {\n  const imageMargin = getMargin(node);\n  const pagePadding = getPadding(page); // TODO: Check image percentage margins\n\n  const pageArea = isHeightAuto(page) ? Infinity : (page.box?.height || 0) - pagePadding.paddingTop - pagePadding.paddingBottom - imageMargin.marginTop - imageMargin.marginBottom - SAFETY_HEIGHT;\n  const ctx = measureCtx();\n  node.props.paint(ctx);\n  const width = ctx.getWidth();\n  const height = Math.min(pageArea, ctx.getHeight());\n  return {\n    width,\n    height\n  };\n};\n\nconst isType$1 = type => node => node.type === type;\n\nconst isSvg = isType$1(P.Svg);\nconst isText$2 = isType$1(P.Text);\nconst isNote = isType$1(P.Note);\nconst isPage = isType$1(P.Page);\nconst isImage = isType$1(P.Image);\nconst isCanvas = isType$1(P.Canvas);\nconst isTextInstance$1 = isType$1(P.TextInstance);\n\nconst setNodeHeight = node => {\n  const value = isPage(node) ? node.box?.height : node.style?.height;\n  return setHeight(value);\n};\n/**\n * Set styles valeus into yoga node before layout calculation\n *\n * @param node\n */\n\n\nconst setYogaValues = node => {\n  compose(setNodeHeight(node), setWidth(node.style.width), setMinWidth(node.style.minWidth), setMaxWidth(node.style.maxWidth), setMinHeight(node.style.minHeight), setMaxHeight(node.style.maxHeight), setMarginTop(node.style.marginTop), setMarginRight(node.style.marginRight), setMarginBottom(node.style.marginBottom), setMarginLeft(node.style.marginLeft), setPaddingTop(node.style.paddingTop), setPaddingRight(node.style.paddingRight), setPaddingBottom(node.style.paddingBottom), setPaddingLeft(node.style.paddingLeft), setPositionType(node.style.position), setPositionTop(node.style.top), setPositionRight(node.style.right), setPositionBottom(node.style.bottom), setPositionLeft(node.style.left), setBorderTop(node.style.borderTopWidth), setBorderRight(node.style.borderRightWidth), setBorderBottom(node.style.borderBottomWidth), setBorderLeft(node.style.borderLeftWidth), setDisplay(node.style.display), setFlexDirection(node.style.flexDirection), setAlignSelf(node.style.alignSelf), setAlignContent(node.style.alignContent), setAlignItems(node.style.alignItems), setJustifyContent(node.style.justifyContent), setFlexWrap(node.style.flexWrap), setOverflow(node.style.overflow), setAspectRatio(node.style.aspectRatio), setFlexBasis(node.style.flexBasis), setFlexGrow(node.style.flexGrow), setFlexShrink(node.style.flexShrink), setRowGap(node.style.rowGap), setColumnGap(node.style.columnGap))(node);\n};\n/**\n * Inserts child into parent' yoga node\n *\n * @param parent parent\n * @returns Insert yoga nodes\n */\n\n\nconst insertYogaNodes = parent => child => {\n  parent.insertChild(child.yogaNode, parent.getChildCount());\n  return child;\n};\n\nconst setMeasureFunc = (node, page, fontStore) => {\n  const {\n    yogaNode\n  } = node;\n\n  if (isText$2(node)) {\n    yogaNode.setMeasureFunc(measureText(page, node, fontStore));\n  }\n\n  if (isImage(node)) {\n    yogaNode.setMeasureFunc(measureImage(page, node));\n  }\n\n  if (isCanvas(node)) {\n    yogaNode.setMeasureFunc(measureCanvas(page, node));\n  }\n\n  if (isSvg(node)) {\n    yogaNode.setMeasureFunc(measureCanvas$1(page, node));\n  }\n\n  return node;\n};\n\nconst isLayoutElement = node => !isText$2(node) && !isNote(node) && !isSvg(node);\n/**\n * @typedef {Function} CreateYogaNodes\n * @param {Object} node\n * @returns {Object} node with appended yoga node\n */\n\n/**\n * Creates and add yoga node to document tree\n * Handles measure function for text and image nodes\n *\n * @returns Create yoga nodes\n */\n\n\nconst createYogaNodes = (page, fontStore, yoga) => node => {\n  const yogaNode = yoga.node.create();\n  const result = Object.assign({}, node, {\n    yogaNode\n  });\n  setYogaValues(result);\n\n  if (isLayoutElement(node) && node.children) {\n    const resolveChild = compose(insertYogaNodes(yogaNode), createYogaNodes(page, fontStore, yoga));\n    result.children = node.children.map(resolveChild);\n  }\n\n  setMeasureFunc(result, page, fontStore);\n  return result;\n};\n/**\n * Performs yoga calculation\n *\n * @param page - Page node\n * @returns Page node\n */\n\n\nconst calculateLayout = page => {\n  page.yogaNode.calculateLayout();\n  return page;\n};\n/**\n * Saves Yoga layout result into 'box' attribute of node\n *\n * @param node\n * @returns Node with box data\n */\n\n\nconst persistDimensions = node => {\n  if (isTextInstance$1(node)) return node;\n  const box = Object.assign(getPadding(node), getMargin(node), getBorderWidth(node), getPosition(node), getDimension(node));\n  const newNode = Object.assign({}, node, {\n    box\n  });\n  if (!node.children) return newNode;\n  const children = node.children.map(persistDimensions);\n  return Object.assign({}, newNode, {\n    children\n  });\n};\n/**\n * Removes yoga node from document tree\n *\n * @param node\n * @returns Node without yoga node\n */\n\n\nconst destroyYogaNodes = node => {\n  const newNode = Object.assign({}, node);\n  delete newNode.yogaNode;\n  if (!node.children) return newNode;\n  const children = node.children.map(destroyYogaNodes);\n  return Object.assign({}, newNode, {\n    children\n  });\n};\n/**\n * Free yoga node from document tree\n *\n * @param node\n * @returns Node without yoga node\n */\n\n\nconst freeYogaNodes = node => {\n  if (node.yogaNode) node.yogaNode.freeRecursive();\n  return node;\n};\n/**\n * Calculates page object layout using Yoga.\n * Takes node values from 'box' and 'style' attributes, and persist them back into 'box'\n * Destroy yoga values at the end.\n *\n * @param page - Object\n * @returns Page object with correct 'box' layout attributes\n */\n\n\nconst resolvePageDimensions = (page, fontStore, yoga) => {\n  if (isNil(page)) return null;\n  return compose(destroyYogaNodes, freeYogaNodes, persistDimensions, calculateLayout, createYogaNodes(page, fontStore, yoga))(page);\n};\n/**\n * Calculates root object layout using Yoga.\n *\n * @param node - Root object\n * @param fontStore - Font store\n * @returns Root object with correct 'box' layout attributes\n */\n\n\nconst resolveDimensions = (node, fontStore) => {\n  if (!node.children) return node;\n\n  const resolveChild = child => resolvePageDimensions(child, fontStore, node.yoga);\n\n  const children = node.children.map(resolveChild);\n  return Object.assign({}, node, {\n    children\n  });\n};\n\nconst isText$1 = node => node.type === P.Text; // Prevent splitting elements by low decimal numbers\n\n\nconst SAFETY_THRESHOLD = 0.001;\n\nconst assingChildren = (children, node) => Object.assign({}, node, {\n  children\n});\n\nconst getTop = node => node.box?.top || 0;\n\nconst allFixed = nodes => nodes.every(isFixed);\n\nconst isDynamic = node => node.props && 'render' in node.props;\n\nconst relayoutPage = compose(resolveTextLayout, resolvePageDimensions, resolveInheritance, resolvePageStyles);\n\nconst warnUnavailableSpace = node => {\n  console.warn(`Node of type ${node.type} can't wrap between pages and it's bigger than available page height`);\n};\n\nconst splitNodes = (height, contentArea, nodes) => {\n  const currentChildren = [];\n  const nextChildren = [];\n\n  for (let i = 0; i < nodes.length; i += 1) {\n    const child = nodes[i];\n    const futureNodes = nodes.slice(i + 1);\n    const futureFixedNodes = futureNodes.filter(isFixed);\n    const nodeTop = getTop(child);\n    const nodeHeight = child.box.height;\n    const isOutside = height <= nodeTop;\n    const shouldBreak$1 = shouldBreak(child, futureNodes, height);\n    const shouldSplit = height + SAFETY_THRESHOLD < nodeTop + nodeHeight;\n    const canWrap = getWrap(child);\n    const fitsInsidePage = nodeHeight <= contentArea;\n\n    if (isFixed(child)) {\n      nextChildren.push(child);\n      currentChildren.push(child);\n      continue;\n    }\n\n    if (isOutside) {\n      const box = Object.assign({}, child.box, {\n        top: child.box.top - height\n      });\n      const next = Object.assign({}, child, {\n        box\n      });\n      nextChildren.push(next);\n      continue;\n    }\n\n    if (!fitsInsidePage && !canWrap) {\n      currentChildren.push(child);\n      nextChildren.push(...futureNodes);\n      warnUnavailableSpace(child);\n      break;\n    }\n\n    if (shouldBreak$1) {\n      const box = Object.assign({}, child.box, {\n        top: child.box.top - height\n      });\n      const props = Object.assign({}, child.props, {\n        wrap: true,\n        break: false\n      });\n      const next = Object.assign({}, child, {\n        box,\n        props\n      });\n      currentChildren.push(...futureFixedNodes);\n      nextChildren.push(next, ...futureNodes);\n      break;\n    }\n\n    if (shouldSplit) {\n      const [currentChild, nextChild] = split(child, height, contentArea); // All children are moved to the next page, it doesn't make sense to show the parent on the current page\n\n      if (child.children.length > 0 && currentChild.children.length === 0) {\n        // But if the current page is empty then we can just include the parent on the current page\n        if (currentChildren.length === 0) {\n          currentChildren.push(child, ...futureFixedNodes);\n          nextChildren.push(...futureNodes);\n        } else {\n          const box = Object.assign({}, child.box, {\n            top: child.box.top - height\n          });\n          const next = Object.assign({}, child, {\n            box\n          });\n          currentChildren.push(...futureFixedNodes);\n          nextChildren.push(next, ...futureNodes);\n        }\n\n        break;\n      }\n\n      if (currentChild) currentChildren.push(currentChild);\n      if (nextChild) nextChildren.push(nextChild);\n      continue;\n    }\n\n    currentChildren.push(child);\n  }\n\n  return [currentChildren, nextChildren];\n};\n\nconst splitChildren = (height, contentArea, node) => {\n  const children = node.children || [];\n  const availableHeight = height - getTop(node);\n  return splitNodes(availableHeight, contentArea, children);\n};\n\nconst splitView = (node, height, contentArea) => {\n  const [currentNode, nextNode] = splitNode(node, height);\n  const [currentChilds, nextChildren] = splitChildren(height, contentArea, node);\n  return [assingChildren(currentChilds, currentNode), assingChildren(nextChildren, nextNode)];\n};\n\nconst split = (node, height, contentArea) => isText$1(node) ? splitText(node, height) : splitView(node, height, contentArea);\n\nconst shouldResolveDynamicNodes = node => {\n  const children = node.children || [];\n  return isDynamic(node) || children.some(shouldResolveDynamicNodes);\n};\n\nconst resolveDynamicNodes = (props, node) => {\n  const isNodeDynamic = isDynamic(node); // Call render prop on dynamic nodes and append result to children\n\n  const resolveChildren = function () {\n    let children = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n    if (isNodeDynamic) {\n      const res = node.props.render(props);\n      return createInstances(res).filter(Boolean) // @ts-expect-error rework dynamic nodes. conflicting types\n      .map(n => resolveDynamicNodes(props, n));\n    }\n\n    return children.map(c => resolveDynamicNodes(props, c));\n  }; // We reset dynamic text box so it can be computed again later on\n\n\n  const resetHeight = isNodeDynamic && isText$1(node);\n  const box = resetHeight ? { ...node.box,\n    height: 0\n  } : node.box;\n  const children = resolveChildren(node.children); // @ts-expect-error handle text here specifically\n\n  const lines = isNodeDynamic ? null : node.lines;\n  return Object.assign({}, node, {\n    box,\n    lines,\n    children\n  });\n};\n\nconst resolveDynamicPage = (props, page, fontStore, yoga) => {\n  if (shouldResolveDynamicNodes(page)) {\n    const resolvedPage = resolveDynamicNodes(props, page);\n    return relayoutPage(resolvedPage, fontStore, yoga);\n  }\n\n  return page;\n};\n\nconst splitPage = (page, pageNumber, fontStore, yoga) => {\n  const wrapArea = getWrapArea(page);\n  const contentArea = getContentArea(page);\n  const dynamicPage = resolveDynamicPage({\n    pageNumber\n  }, page, fontStore, yoga);\n  const height = page.style.height;\n  const [currentChilds, nextChilds] = splitNodes(wrapArea, contentArea, dynamicPage.children);\n\n  const relayout = node => // @ts-expect-error rework pagination\n  relayoutPage(node, fontStore, yoga);\n\n  const currentBox = { ...page.box,\n    height\n  };\n  const currentPage = relayout(Object.assign({}, page, {\n    box: currentBox,\n    children: currentChilds\n  }));\n  if (nextChilds.length === 0 || allFixed(nextChilds)) return [currentPage, null];\n  const nextBox = omit('height', page.box);\n  const nextProps = omit('bookmark', page.props);\n  const nextPage = relayout(Object.assign({}, page, {\n    props: nextProps,\n    box: nextBox,\n    children: nextChilds\n  }));\n  return [currentPage, nextPage];\n};\n\nconst resolvePageIndices = (fontStore, yoga, page, pageNumber, pages) => {\n  const totalPages = pages.length;\n  const props = {\n    totalPages,\n    pageNumber: pageNumber + 1,\n    subPageNumber: page.subPageNumber + 1,\n    subPageTotalPages: page.subPageTotalPages\n  };\n  return resolveDynamicPage(props, page, fontStore, yoga);\n};\n\nconst assocSubPageData = subpages => {\n  return subpages.map((page, i) => ({ ...page,\n    subPageNumber: i,\n    subPageTotalPages: subpages.length\n  }));\n};\n\nconst dissocSubPageData = page => {\n  return omit(['subPageNumber', 'subPageTotalPages'], page);\n};\n\nconst paginate = (page, pageNumber, fontStore, yoga) => {\n  if (!page) return [];\n  if (page.props?.wrap === false) return [page];\n  let splittedPage = splitPage(page, pageNumber, fontStore, yoga);\n  const pages = [splittedPage[0]];\n  let nextPage = splittedPage[1];\n\n  while (nextPage !== null) {\n    splittedPage = splitPage(nextPage, pageNumber + pages.length, fontStore, yoga);\n    pages.push(splittedPage[0]);\n    nextPage = splittedPage[1];\n  }\n\n  return pages;\n};\n/**\n * Performs pagination. This is the step responsible of breaking the whole document\n * into pages following pagiation rules, such as `fixed`, `break` and dynamic nodes.\n *\n * @param root - Document node\n * @param fontStore - Font store\n * @returns Layout node\n */\n\n\nconst resolvePagination = (root, fontStore) => {\n  let pages = [];\n  let pageNumber = 1;\n\n  for (let i = 0; i < root.children.length; i += 1) {\n    const page = root.children[i];\n    let subpages = paginate(page, pageNumber, fontStore, root.yoga);\n    subpages = assocSubPageData(subpages);\n    pageNumber += subpages.length;\n    pages = pages.concat(subpages);\n  }\n\n  pages = pages.map(function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return dissocSubPageData(resolvePageIndices(fontStore, root.yoga, ...args));\n  });\n  return assingChildren(pages, root);\n};\n/**\n * Translates page percentage horizontal paddings in fixed ones\n *\n * @param container - Page container\n * @returns Resolve page horizontal padding\n */\n\n\nconst resolvePageHorizontalPadding = container => value => {\n  const match = matchPercent(value);\n  const width = container.width;\n  return match ? match.percent * width : value;\n};\n/**\n * Translates page percentage vertical paddings in fixed ones\n *\n * @param container - Page container\n * @returns Resolve page vertical padding\n */\n\n\nconst resolvePageVerticalPadding = container => value => {\n  const match = matchPercent(value);\n  const height = container.height;\n  return match ? match.percent * height : value;\n};\n/**\n * Translates page percentage paddings in fixed ones\n *\n * @param page\n * @returns Page with fixed paddings\n */\n\n\nconst resolvePagePaddings = page => {\n  const container = page.style;\n  const style = evolve({\n    paddingTop: resolvePageVerticalPadding(container),\n    paddingLeft: resolvePageHorizontalPadding(container),\n    paddingRight: resolvePageHorizontalPadding(container),\n    paddingBottom: resolvePageVerticalPadding(container)\n  }, page.style);\n  return Object.assign({}, page, {\n    style\n  });\n};\n/**\n * Translates all pages percentage paddings in fixed ones\n * This has to be computed from pages calculated size and not by Yoga\n * because at this point we didn't performed pagination yet.\n *\n * @param root - Document root\n * @returns Document root with translated page paddings\n */\n\n\nconst resolvePagesPaddings = root => {\n  if (!root.children) return root;\n  const children = root.children.map(resolvePagePaddings);\n  return Object.assign({}, root, {\n    children\n  });\n};\n\nconst resolveRadius = box => value => {\n  if (!value) return undefined;\n  const match = matchPercent(value);\n  return match ? match.percent * Math.min(box.width, box.height) : value;\n};\n/**\n * Transforms percent border radius into fixed values\n *\n * @param node\n * @returns Node\n */\n\n\nconst resolvePercentRadius = node => {\n  const style = evolve({\n    borderTopLeftRadius: resolveRadius(node.box),\n    borderTopRightRadius: resolveRadius(node.box),\n    borderBottomRightRadius: resolveRadius(node.box),\n    borderBottomLeftRadius: resolveRadius(node.box)\n  }, node.style || {});\n  const newNode = Object.assign({}, node, {\n    style\n  });\n  if (!node.children) return newNode;\n  const children = node.children.map(resolvePercentRadius);\n  return Object.assign({}, newNode, {\n    children\n  });\n};\n/**\n * Transform percent height into fixed\n *\n * @param height\n * @returns Height\n */\n\n\nconst transformHeight = (pageArea, height) => {\n  const match = matchPercent(height);\n  return match ? match.percent * pageArea : height;\n};\n/**\n * Get page area (height minus paddings)\n *\n * @param page\n * @returns Page area\n */\n\n\nconst getPageArea = page => {\n  const pageHeight = page.style.height;\n  const pagePaddingTop = page.style?.paddingTop || 0;\n  const pagePaddingBottom = page.style?.paddingBottom || 0;\n  return pageHeight - pagePaddingTop - pagePaddingBottom;\n};\n/**\n * Transform node percent height to fixed\n *\n * @param page\n * @param node\n * @returns Transformed node\n */\n\n\nconst resolveNodePercentHeight = (page, node) => {\n  if (isNil(page.style?.height)) return node;\n  if (isNil(node.style?.height)) return node;\n  const pageArea = getPageArea(page);\n  const height = transformHeight(pageArea, node.style.height);\n  const style = Object.assign({}, node.style, {\n    height\n  });\n  return Object.assign({}, node, {\n    style\n  });\n};\n/**\n * Transform page immediate children with percent height to fixed\n *\n * @param page\n * @returns Transformed page\n */\n\n\nconst resolvePagePercentHeight = page => {\n  if (!page.children) return page;\n\n  const resolveChild = child => resolveNodePercentHeight(page, child);\n\n  const children = page.children.map(resolveChild);\n  return Object.assign({}, page, {\n    children\n  });\n};\n/**\n * Transform all page immediate children with percent height to fixed.\n * This is needed for computing correct dimensions on pre-pagination layout.\n *\n * @param root - Document root\n * @returns Transformed document root\n */\n\n\nconst resolvePercentHeight = root => {\n  if (!root.children) return root;\n  const children = root.children.map(resolvePagePercentHeight);\n  return Object.assign({}, root, {\n    children\n  });\n};\n\nconst isType = type => node => node.type === type;\n\nconst isLink = isType(P.Link);\nconst isText = isType(P.Text);\nconst isTextInstance = isType(P.TextInstance);\n/**\n * Checks if node has render prop\n *\n * @param node\n * @returns Has render prop?\n */\n\nconst hasRenderProp = node => 'render' in node.props;\n/**\n * Checks if node is text type (Text or TextInstance)\n *\n * @param node\n * @returns Are all children text instances?\n */\n\n\nconst isTextType = node => isText(node) || isTextInstance(node);\n/**\n * Checks if is tet link that needs to be wrapped in Text\n *\n * @param node\n * @returns Are all children text instances?\n */\n\n\nconst isTextLink = node => {\n  const children = node.children || []; // Text string inside a Link\n\n  if (children.every(isTextInstance)) return true; // Text node inside a Link\n\n  if (children.every(isText)) return false;\n  return children.every(isTextType);\n};\n/**\n * Wraps node children inside Text node\n *\n * @param node\n * @returns Node with intermediate Text child\n */\n\n\nconst wrapText = node => {\n  const textElement = {\n    type: P.Text,\n    props: {},\n    style: {},\n    box: {},\n    children: node.children\n  };\n  return Object.assign({}, node, {\n    children: [textElement]\n  });\n};\n\nconst transformLink = node => {\n  if (!isLink(node)) return node; // If has render prop substitute the instance by a Text, that will\n  // ultimately render the inline Link via the textkit PDF renderer.\n\n  if (hasRenderProp(node)) return Object.assign({}, node, {\n    type: P.Text\n  }); // If is a text link (either contains Text or TextInstance), wrap it\n  // inside a Text element so styles are applied correctly\n\n  if (isTextLink(node)) return wrapText(node);\n  return node;\n};\n/**\n * Transforms Link layout to correctly render text and dynamic rendered links\n *\n * @param node\n * @returns Node with link substitution\n */\n\n\nconst resolveLinkSubstitution = node => {\n  if (!node.children) return node;\n  const resolveChild = compose(transformLink, resolveLinkSubstitution);\n  const children = node.children.map(resolveChild);\n  return Object.assign({}, node, {\n    children\n  });\n};\n\nconst layout = asyncCompose(resolveZIndex, resolveOrigin, resolveAssets, resolvePagination, resolveTextLayout, resolvePercentRadius, resolveDimensions, resolveSvg, resolveAssets, resolveInheritance, resolvePercentHeight, resolvePagesPaddings, resolveStyles, resolveLinkSubstitution, resolveBookmarks, resolvePageSizes, resolveYoga);\nexport { layout as default };","map":{"version":3,"sources":["C:/Users/PC/Documents/PROGRAMMING/MERN/frontend/node_modules/@react-pdf/layout/lib/index.js"],"names":["upperFirst","capitalize","parseFloat","parseFloat$1","without","pick","compose","evolve","mapValues","matchPercent","castArray","isNil","omit","asyncCompose","P","resolveStyle","transformColor","flatten","layoutEngine","fontSubstitution","wordHyphenation","scriptItemizer","textDecoration","justification","linebreaker","bidi","fromFragments","Yoga","loadYoga","loadYoga$1","emojiRegex","resolveImage","transformText","text","transformation","toUpperCase","toLowerCase","isTspan","node","type","Tspan","isTextInstance$4","TextInstance","engines$1","engine$1","getFragments$1","fontStore","instance","string","fragments","fill","fontFamily","fontWeight","fontStyle","fontSize","textDecorationColor","textDecorationStyle","textTransform","opacity","props","_textDecoration","fontFamilies","push","font","map","fontFamilyName","opts","obj","getFont","data","attributes","color","underlineStyle","underline","underlineColor","strike","strikeStyle","strikeColor","i","children","length","child","value","getAttributedString$1","AlmostInfinity","shrinkWhitespaceFactor","before","after","layoutTspan","xOffset","attributedString","x","undefined","y","container","width","height","hyphenationCallback","getHyphenationCallback","layoutOptions","lines","flat","Object","assign","joinTSpanLines","index","textInstance","layoutText$1","currentXOffset","layoutFn","joinedNode","childWithLayout","xAdvance","isDefs","Defs","getDefs","defs","find","values","reduce","acc","id","isNotDefs","detachDefs","filter","URL_REGEX","replaceDef","test","match","parseNodeDefs","clipPath","newProps","parseDefs","root","replaceDefs","parseViewbox","split","minX","minY","maxX","maxY","getContainer$1","viewbox","viewBox","BASE_SVG_INHERITED_PROPS","TEXT_SVG_INHERITED_PROPS","SVG_INHERITED_PROPS","Text","getInheritProps","svgInheritedProps","inheritProps","inheritedProps","newChild","parseAspectRatio","replace","align","meetOrSlice","STYLE_PROPS","VERTICAL_PROPS","HORIZONTAL_PROPS","isSvg$3","Svg","isText$5","isTextInstance$3","transformPercent","key","includes","percent","parsePercent","parseTransform","transform","parseProps","x1","x2","y1","y2","r","rx","ry","cx","cy","offset","stroke","stopOpacity","stopColor","gradientTransform","mergeStyles$1","style","removeNoneValues","removeNone","pickStyleProps","styleProps","parseSvgProps","preserveAspectRatio","wrapBetweenTspan","addMissingTspan","resolveChild","parseText","resolveSvgNode","resolveChildren","buildXLinksIndex","idIndex","listToExplore","slice","shift","replaceXLinks","linkedNode","xlinkHref","resolveXLinks","resolveSvgRoot","resolveSvg","instancePromise","config","Config","create","setPointScaleFactor","Node","createWithConfig","resolveYoga","yoga","getZIndex","zIndex","shouldSort","Document","sortZIndex","a","b","za","zb","resolveNodeZIndex","sortedChildren","sort","resolveZIndex","emojis","regex","removeVariationSelectors","getCodePoints","withVariationSelectors","Array","from","char","codePointAt","toString","join","buildEmojiUrl","emoji","source","builder","url","format","fetchEmojis","promises","matchAll","forEach","loading","emojiUrl","uri","then","image","embedEmojis","result","fragment","lastIndex","emojiSize","chunk","String","fromCharCode","attachment","yOffset","Math","floor","getSource","src","resolveSource","fetchImage","cache","console","warn","Error","Buffer","isBuffer","Blob","e","message","isImage$2","Image","fetchAssets","emojiSource","getEmojiSource","n","load","childNode","resolveAssets","Promise","all","isLink$1","Link","DEFAULT_LINK_STYLES","computeStyle","baseStyle","isArray","resolveNodeStyles","resolvePageStyles","page","dpi","box","orientation","remBase","resolveStyles","getTransformStyle","s","getOrigin","left","top","transformOriginX","transformOriginY","percentX","percentY","offsetX","offsetY","resolveNodeOrigin","origin","newNode","resolveOrigin","getBookmarkValue","bookmark","title","fit","expanded","resolveBookmarks","refs","parent","element","ref","newHierarchy","VALID_ORIENTATIONS","getOrientation","isLandscape","PAGE_SIZES","A0","A1","A2","A3","A4","A5","A6","A7","A8","A9","A10","B0","B1","B2","B3","B4","B5","B6","B7","B8","B9","B10","C0","C1","C2","C3","C4","C5","C6","C7","C8","C9","C10","RA0","RA1","RA2","RA3","RA4","SRA0","SRA1","SRA2","SRA3","SRA4","EXECUTIVE","FOLIO","LEGAL","LETTER","TABLOID","ID1","parseValue","unit","exec","transformUnit","inputDpi","scalar","outputDpi","mmFactor","cmFactor","round","transformUnits","toSizeObject","v","flipSizeObject","getStringSize","getNumberSize","getSize","size","resolvePageSize","resolvePageSizes","isFixed","fixed","lineIndexAtHeight","line","heightAtLineIndex","counter","getLineBreak","widows","orphans","linesQuantity","slicedLine","splitText","slicedLineIndex","currentHeight","nextHeight","current","borderBottomWidth","marginBottom","paddingBottom","borderBottomLeftRadius","borderBottomRightRadius","next","borderTopWidth","marginTop","paddingTop","borderTopLeftRadius","borderTopRightRadius","getTop$1","hasFixedHeight","splitNode","nodeTop","NON_WRAP_TYPES","Note","Canvas","getWrap","wrap","getComputedPadding","edge","yogaNode","getPadding","Edge","Top","paddingRight","Right","Bottom","paddingLeft","Left","getWrapArea","getContentArea","isString","isNumber","isBoolean","isFragment","Symbol","for","createInstances","el","concat","nextChildren","getBreak","break","getMinPresenceAhead","minPresenceAhead","getFurthestEnd","elements","max","getEndOfMinPresenceAhead","getEndOfPresence","futureElements","afterMinPresenceAhead","endOfFurthestFutureElement","min","shouldBreak","shouldSplit","canWrap","endOfPresence","breakingImprovesPresence","IGNORABLE_CODEPOINTS","buildSubsetForFont","codePoint","hasGlyphForCodePoint","ignoreChars","charSubset","subsetRegex","RegExp","PREPROCESSORS","isImage$1","isTextInstance$2","getFragments","parentLink","level","direction","textAlign","lineHeight","letterSpacing","textIndent","verticalAlign","backgroundColor","indent","characterSpacing","link","href","preprocessor","getAttributedString","engines","engine","getMaxLines","maxLines","getTextOverflow","textOverflow","getContainer","Infinity","truncateMode","getLayoutOptions","hyphenationPenalty","layoutText","options","isSvg$2","isText$4","shouldIterate","shouldLayoutText","resolveTextLayout","mapChild","BASE_INHERITABLE_PROPERTIES","TEXT_INHERITABLE_PROPERTIES","isType$2","isSvg$1","isText$3","mergeValues","styleName","inheritedValue","merge","inheritedStyles","mergedStyles","entries","mergeStyles","resolveInheritance","inheritableProperties","inheritStyles","getComputedMargin","getMargin","marginRight","marginLeft","getPosition","getComputedTop","right","getComputedRight","bottom","getComputedBottom","getComputedLeft","DEFAULT_DIMENSION","getDimension","getComputedWidth","getComputedHeight","getComputedBorder","getBorderWidth","borderRightWidth","borderLeftWidth","setDisplay","Display","None","Flex","OVERFLOW","hidden","Overflow","Hidden","scroll","Scroll","setOverflow","overflow","Visible","FLEX_WRAP","Wrap","WrapReverse","setFlexWrap","flexWrap","NoWrap","setYogaValue","attr","hasEdge","fixedMethod","autoMethod","percentMethod","setFlexGrow","setFlexBasis","ALIGN","Align","FlexStart","center","Center","FlexEnd","stretch","Stretch","baseline","Baseline","SpaceBetween","SpaceAround","SpaceEvenly","setAlign","defaultValue","Auto","setAlignSelf","setAlignItems","setFlexShrink","setAspectRatio","setAlignContent","POSITION","absolute","PositionType","Absolute","relative","Relative","static","Static","setPositionType","FLEX_DIRECTIONS","row","FlexDirection","Row","RowReverse","ColumnReverse","setFlexDirection","flexDirection","Column","JUSTIFY_CONTENT","Justify","setJustifyContent","justifyContent","setMarginTop","setMarginRight","setMarginBottom","setMarginLeft","setPaddingTop","setPaddingRight","setPaddingBottom","setPaddingLeft","setBorderTop","setBorderRight","setBorderBottom","setBorderLeft","setPositionTop","setPositionRight","setPositionBottom","setPositionLeft","setWidth","setMinWidth","setMaxWidth","setHeight","setMinHeight","setMaxHeight","setRowGap","Gutter","setColumnGap","getAspectRatio","measureCanvas$1","widthMode","heightMode","aspectRatio","MeasureMode","Exactly","AtMost","linesWidth","linesHeight","ALIGNMENT_FACTORS","measureText","alignFactor","alignOffset","getRatio","isHeightAuto","SAFETY_HEIGHT$1","measureImage","imageRatio","imageMargin","pagePadding","pageArea","Undefined","scaledHeight","SAFETY_HEIGHT","getMax","measureCtx","ctx","points","nil","addPoint","moveTo","rect","w","h","ellipse","polygon","lineTo","circle","roundedRect","path","lineWidth","bezierCurveTo","quadraticCurveTo","scale","rotate","translate","dash","clip","save","lineCap","restore","lineJoin","fillColor","miterLimit","strokeColor","fillOpacity","strokeOpacity","linearGradient","radialGradient","getWidth","p","getHeight","measureCanvas","paint","isType$1","isSvg","isText$2","isNote","isPage","Page","isImage","isCanvas","isTextInstance$1","setNodeHeight","setYogaValues","minWidth","maxWidth","minHeight","maxHeight","position","display","alignSelf","alignContent","alignItems","flexBasis","flexGrow","flexShrink","rowGap","columnGap","insertYogaNodes","insertChild","getChildCount","setMeasureFunc","isLayoutElement","createYogaNodes","calculateLayout","persistDimensions","destroyYogaNodes","freeYogaNodes","freeRecursive","resolvePageDimensions","resolveDimensions","isText$1","SAFETY_THRESHOLD","assingChildren","getTop","allFixed","nodes","every","isDynamic","relayoutPage","warnUnavailableSpace","splitNodes","contentArea","currentChildren","futureNodes","futureFixedNodes","nodeHeight","isOutside","shouldBreak$1","fitsInsidePage","currentChild","nextChild","splitChildren","availableHeight","splitView","currentNode","nextNode","currentChilds","shouldResolveDynamicNodes","some","resolveDynamicNodes","isNodeDynamic","res","render","Boolean","c","resetHeight","resolveDynamicPage","resolvedPage","splitPage","pageNumber","wrapArea","dynamicPage","nextChilds","relayout","currentBox","currentPage","nextBox","nextProps","nextPage","resolvePageIndices","pages","totalPages","subPageNumber","subPageTotalPages","assocSubPageData","subpages","dissocSubPageData","paginate","splittedPage","resolvePagination","args","resolvePageHorizontalPadding","resolvePageVerticalPadding","resolvePagePaddings","resolvePagesPaddings","resolveRadius","resolvePercentRadius","transformHeight","getPageArea","pageHeight","pagePaddingTop","pagePaddingBottom","resolveNodePercentHeight","resolvePagePercentHeight","resolvePercentHeight","isType","isLink","isText","isTextInstance","hasRenderProp","isTextType","isTextLink","wrapText","textElement","transformLink","resolveLinkSubstitution","layout","default"],"mappings":"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","sourcesContent":["import { upperFirst, capitalize, parseFloat as parseFloat$1, without, pick, compose, evolve, mapValues, matchPercent, castArray, isNil, omit, asyncCompose } from '@react-pdf/fns';\nimport * as P from '@react-pdf/primitives';\nimport resolveStyle, { transformColor, flatten } from '@react-pdf/stylesheet';\nimport layoutEngine, { fontSubstitution, wordHyphenation, scriptItemizer, textDecoration, justification, linebreaker, bidi, fromFragments } from '@react-pdf/textkit';\nimport * as Yoga from 'yoga-layout/load';\nimport { loadYoga as loadYoga$1 } from 'yoga-layout/load';\nimport emojiRegex from 'emoji-regex';\nimport resolveImage from '@react-pdf/image';\n\n/**\n * Apply transformation to text string\n *\n * @param {string} text\n * @param {string} transformation type\n * @returns {string} transformed text\n */\nconst transformText = (text, transformation) => {\n    switch (transformation) {\n        case 'uppercase':\n            return text.toUpperCase();\n        case 'lowercase':\n            return text.toLowerCase();\n        case 'capitalize':\n            return capitalize(text);\n        case 'upperfirst':\n            return upperFirst(text);\n        default:\n            return text;\n    }\n};\n\nconst isTspan = (node) => node.type === P.Tspan;\nconst isTextInstance$4 = (node) => node.type === P.TextInstance;\nconst engines$1 = {\n    bidi,\n    linebreaker,\n    justification,\n    textDecoration,\n    scriptItemizer,\n    wordHyphenation,\n    fontSubstitution,\n};\nconst engine$1 = layoutEngine(engines$1);\nconst getFragments$1 = (fontStore, instance) => {\n    if (!instance)\n        return [{ string: '' }];\n    const fragments = [];\n    const { fill = 'black', fontFamily = 'Helvetica', fontWeight, fontStyle, fontSize = 18, textDecorationColor, textDecorationStyle, textTransform, opacity, } = instance.props;\n    const _textDecoration = instance.props.textDecoration;\n    const fontFamilies = typeof fontFamily === 'string' ? [fontFamily] : [...(fontFamily || [])];\n    // Fallback font\n    fontFamilies.push('Helvetica');\n    const font = fontFamilies.map((fontFamilyName) => {\n        const opts = { fontFamily: fontFamilyName, fontWeight, fontStyle };\n        const obj = fontStore.getFont(opts);\n        return obj?.data;\n    });\n    const attributes = {\n        font,\n        opacity,\n        fontSize,\n        color: fill,\n        underlineStyle: textDecorationStyle,\n        underline: _textDecoration === 'underline' ||\n            _textDecoration === 'underline line-through' ||\n            _textDecoration === 'line-through underline',\n        underlineColor: textDecorationColor || fill,\n        strike: _textDecoration === 'line-through' ||\n            _textDecoration === 'underline line-through' ||\n            _textDecoration === 'line-through underline',\n        strikeStyle: textDecorationStyle,\n        strikeColor: textDecorationColor || fill,\n    };\n    for (let i = 0; i < instance.children.length; i += 1) {\n        const child = instance.children[i];\n        if (isTextInstance$4(child)) {\n            fragments.push({\n                string: transformText(child.value, textTransform),\n                attributes,\n            });\n        }\n        else if (child) {\n            fragments.push(...getFragments$1(fontStore, child));\n        }\n    }\n    return fragments;\n};\nconst getAttributedString$1 = (fontStore, instance) => fromFragments(getFragments$1(fontStore, instance));\nconst AlmostInfinity = 999999999999;\nconst shrinkWhitespaceFactor = { before: -0.5, after: -0.5 };\nconst layoutTspan = (fontStore) => (node, xOffset) => {\n    const attributedString = getAttributedString$1(fontStore, node);\n    const x = node.props.x === undefined ? xOffset : node.props.x;\n    const y = node.props?.y || 0;\n    const container = { x, y, width: AlmostInfinity, height: AlmostInfinity };\n    const hyphenationCallback = node.props.hyphenationCallback ||\n        fontStore?.getHyphenationCallback() ||\n        null;\n    const layoutOptions = { hyphenationCallback, shrinkWhitespaceFactor };\n    const lines = engine$1(attributedString, container, layoutOptions).flat();\n    return Object.assign({}, node, { lines });\n};\n// Consecutive TSpan elements should be joined with a space\nconst joinTSpanLines = (node) => {\n    const children = node.children.map((child, index) => {\n        if (!isTspan(child))\n            return child;\n        const textInstance = child.children[0];\n        if (child.props.x === undefined &&\n            index < node.children.length - 1 &&\n            textInstance?.value) {\n            return Object.assign({}, child, {\n                children: [{ ...textInstance, value: `${textInstance.value} ` }],\n            });\n        }\n        return child;\n    }, []);\n    return Object.assign({}, node, { children });\n};\nconst layoutText$1 = (fontStore, node) => {\n    if (!node.children)\n        return node;\n    let currentXOffset = node.props?.x || 0;\n    const layoutFn = layoutTspan(fontStore);\n    const joinedNode = joinTSpanLines(node);\n    const children = joinedNode.children.map((child) => {\n        const childWithLayout = layoutFn(child, currentXOffset);\n        currentXOffset += childWithLayout.lines[0].xAdvance;\n        return childWithLayout;\n    });\n    return Object.assign({}, node, { children });\n};\n\nconst isDefs = (node) => node.type === P.Defs;\nconst getDefs = (node) => {\n    const children = node.children || [];\n    const defs = children.find(isDefs);\n    const values = defs?.children || [];\n    return values.reduce((acc, value) => {\n        const id = value.props?.id;\n        if (id)\n            acc[id] = value;\n        return acc;\n    }, {});\n};\n\nconst isNotDefs = (node) => node.type !== P.Defs;\nconst detachDefs = (node) => {\n    if (!node.children)\n        return node;\n    const children = node.children.filter(isNotDefs);\n    return Object.assign({}, node, { children });\n};\nconst URL_REGEX = /url\\(['\"]?#([^'\"]+)['\"]?\\)/;\nconst replaceDef = (defs, value) => {\n    if (!value)\n        return undefined;\n    if (!URL_REGEX.test(value))\n        return value;\n    const match = value.match(URL_REGEX);\n    return defs[match[1]];\n};\nconst parseNodeDefs = (defs) => (node) => {\n    const props = node.props;\n    const fill = `fill` in props ? replaceDef(defs, props?.fill) : undefined;\n    const clipPath = `clipPath` in props\n        ? replaceDef(defs, props?.clipPath)\n        : undefined;\n    const newProps = Object.assign({}, node.props, { fill, clipPath });\n    const children = node.children\n        ? node.children.map(parseNodeDefs(defs))\n        : undefined;\n    return Object.assign({}, node, { props: newProps, children });\n};\nconst parseDefs = (root) => {\n    if (!root.children)\n        return root;\n    const defs = getDefs(root);\n    const children = root.children.map(parseNodeDefs(defs));\n    return Object.assign({}, root, { children });\n};\nconst replaceDefs = (node) => {\n    return detachDefs(parseDefs(node));\n};\n\nconst parseViewbox = (value) => {\n    if (!value)\n        return null;\n    if (typeof value !== 'string')\n        return value;\n    const values = value.split(/[,\\s]+/).map(parseFloat$1);\n    if (values.length !== 4)\n        return null;\n    return { minX: values[0], minY: values[1], maxX: values[2], maxY: values[3] };\n};\n\nconst getContainer$1 = (node) => {\n    const viewbox = parseViewbox(node.props.viewBox);\n    if (viewbox) {\n        return { width: viewbox.maxX, height: viewbox.maxY };\n    }\n    if (node.props.width && node.props.height) {\n        return {\n            width: parseFloat$1(node.props.width),\n            height: parseFloat$1(node.props.height),\n        };\n    }\n    return { width: 0, height: 0 };\n};\n\nconst BASE_SVG_INHERITED_PROPS = [\n    'x',\n    'y',\n    'clipPath',\n    'clipRule',\n    'opacity',\n    'fill',\n    'fillOpacity',\n    'fillRule',\n    'stroke',\n    'strokeLinecap',\n    'strokeLinejoin',\n    'strokeOpacity',\n    'strokeWidth',\n    'textAnchor',\n    'dominantBaseline',\n    'color',\n    'fontFamily',\n    'fontSize',\n    'fontStyle',\n    'fontWeight',\n    'letterSpacing',\n    'opacity',\n    'textDecoration',\n    'lineHeight',\n    'textAlign',\n    'visibility',\n    'wordSpacing',\n];\n// Do not inherit \"x\" for <tspan> elements from <text> parent\nconst TEXT_SVG_INHERITED_PROPS = without(['x'], BASE_SVG_INHERITED_PROPS);\nconst SVG_INHERITED_PROPS = {\n    [P.Text]: TEXT_SVG_INHERITED_PROPS,\n};\nconst getInheritProps = (node) => {\n    const props = node.props || {};\n    const svgInheritedProps = SVG_INHERITED_PROPS[node.type] ?? BASE_SVG_INHERITED_PROPS;\n    return pick(svgInheritedProps, props);\n};\nconst inheritProps = (node) => {\n    if (!node.children)\n        return node;\n    const inheritedProps = getInheritProps(node);\n    const children = node.children.map((child) => {\n        const props = Object.assign({}, inheritedProps, child.props || {});\n        const newChild = Object.assign({}, child, { props });\n        return inheritProps(newChild);\n    });\n    return Object.assign({}, node, { children });\n};\n\nconst parseAspectRatio = (value) => {\n    if (typeof value !== 'string')\n        return value;\n    const match = value\n        .replace(/[\\s\\r\\t\\n]+/gm, ' ')\n        .replace(/^defer\\s/, '')\n        .split(' ');\n    const align = (match[0] || 'xMidYMid');\n    const meetOrSlice = (match[1] ||\n        'meet');\n    return { align, meetOrSlice };\n};\n\nconst STYLE_PROPS = [\n    'width',\n    'height',\n    'color',\n    'stroke',\n    'strokeWidth',\n    'opacity',\n    'fillOpacity',\n    'strokeOpacity',\n    'fill',\n    'fillRule',\n    'clipPath',\n    'offset',\n    'transform',\n    'strokeLinejoin',\n    'strokeLinecap',\n    'strokeDasharray',\n    'gradientUnits',\n    'gradientTransform',\n];\nconst VERTICAL_PROPS = ['y', 'y1', 'y2', 'height', 'cy', 'ry'];\nconst HORIZONTAL_PROPS = ['x', 'x1', 'x2', 'width', 'cx', 'rx'];\nconst isSvg$3 = (node) => node.type === P.Svg;\nconst isText$5 = (node) => node.type === P.Text;\nconst isTextInstance$3 = (node) => node.type === P.TextInstance;\nconst transformPercent = (container) => (props) => mapValues(props, (value, key) => {\n    const match = matchPercent(value);\n    if (match && VERTICAL_PROPS.includes(key)) {\n        return match.percent * container.height;\n    }\n    if (match && HORIZONTAL_PROPS.includes(key)) {\n        return match.percent * container.width;\n    }\n    return value;\n});\nconst parsePercent = (value) => {\n    const match = matchPercent(value);\n    return match ? match.percent : parseFloat$1(value);\n};\nconst parseTransform = (container) => (value) => {\n    return resolveStyle(container, { transform: value }).transform;\n};\nconst parseProps = (container) => (node) => {\n    let props = transformPercent(container)(node.props);\n    props = evolve({\n        x: parseFloat$1,\n        x1: parseFloat$1,\n        x2: parseFloat$1,\n        y: parseFloat$1,\n        y1: parseFloat$1,\n        y2: parseFloat$1,\n        r: parseFloat$1,\n        rx: parseFloat$1,\n        ry: parseFloat$1,\n        cx: parseFloat$1,\n        cy: parseFloat$1,\n        width: parseFloat$1,\n        height: parseFloat$1,\n        offset: parsePercent,\n        fill: transformColor,\n        opacity: parsePercent,\n        stroke: transformColor,\n        stopOpacity: parsePercent,\n        stopColor: transformColor,\n        transform: parseTransform(container),\n        gradientTransform: parseTransform(container),\n    }, props);\n    return Object.assign({}, node, { props });\n};\nconst mergeStyles$1 = (node) => {\n    const style = node.style || {};\n    const props = Object.assign({}, style, node.props);\n    return Object.assign({}, node, { props });\n};\nconst removeNoneValues = (node) => {\n    const removeNone = (value) => (value === 'none' ? null : value);\n    const props = mapValues(node.props, removeNone);\n    return Object.assign({}, node, { props });\n};\nconst pickStyleProps = (node) => {\n    const props = node.props || {};\n    const styleProps = pick(STYLE_PROPS, props);\n    const style = Object.assign({}, styleProps, node.style || {});\n    return Object.assign({}, node, { style });\n};\nconst parseSvgProps = (node) => {\n    const props = evolve({\n        width: parseFloat$1,\n        height: parseFloat$1,\n        viewBox: parseViewbox,\n        preserveAspectRatio: parseAspectRatio,\n    }, node.props);\n    return Object.assign({}, node, { props });\n};\nconst wrapBetweenTspan = (node) => ({\n    type: P.Tspan,\n    props: {},\n    style: {},\n    children: [node],\n});\nconst addMissingTspan = (node) => {\n    if (!isText$5(node))\n        return node;\n    if (!node.children)\n        return node;\n    const resolveChild = (child) => isTextInstance$3(child) ? wrapBetweenTspan(child) : child;\n    const children = node.children.map(resolveChild);\n    return Object.assign({}, node, { children });\n};\nconst parseText = (fontStore) => (node) => {\n    if (isText$5(node))\n        return layoutText$1(fontStore, node);\n    if (!node.children)\n        return node;\n    const children = node.children.map(parseText(fontStore));\n    return Object.assign({}, node, { children });\n};\nconst resolveSvgNode = (container) => compose(parseProps(container), addMissingTspan, removeNoneValues, mergeStyles$1);\nconst resolveChildren = (container) => (node) => {\n    if (!node.children)\n        return node;\n    const resolveChild = compose(resolveChildren(container), resolveSvgNode(container));\n    const children = node.children.map(resolveChild);\n    return Object.assign({}, node, { children });\n};\nconst buildXLinksIndex = (node) => {\n    const idIndex = {};\n    const listToExplore = node.children?.slice(0) || [];\n    while (listToExplore.length > 0) {\n        const child = listToExplore.shift();\n        if (child.props && 'id' in child.props) {\n            idIndex[child.props.id] = child;\n        }\n        if (child.children)\n            listToExplore.push(...child.children);\n    }\n    return idIndex;\n};\nconst replaceXLinks = (node, idIndex) => {\n    if (node.props && 'xlinkHref' in node.props) {\n        const linkedNode = idIndex[node.props.xlinkHref.replace(/^#/, '')];\n        // No node to extend from\n        if (!linkedNode)\n            return node;\n        const newProps = Object.assign({}, linkedNode.props, node.props);\n        delete newProps.xlinkHref;\n        return Object.assign({}, linkedNode, { props: newProps });\n    }\n    const children = node.children?.map((child) => replaceXLinks(child, idIndex));\n    return Object.assign({}, node, { children });\n};\nconst resolveXLinks = (node) => {\n    const idIndex = buildXLinksIndex(node);\n    return replaceXLinks(node, idIndex);\n};\nconst resolveSvgRoot = (node, fontStore) => {\n    const container = getContainer$1(node);\n    return compose(replaceDefs, parseText(fontStore), parseSvgProps, pickStyleProps, inheritProps, resolveChildren(container), resolveXLinks)(node);\n};\n/**\n * Pre-process SVG nodes so they can be rendered in the next steps\n *\n * @param node - Root node\n * @param fontStore - Font store\n * @returns Root node\n */\nconst resolveSvg = (node, fontStore) => {\n    if (!('children' in node))\n        return node;\n    const resolveChild = (child) => resolveSvg(child, fontStore);\n    const root = isSvg$3(node) ? resolveSvgRoot(node, fontStore) : node;\n    const children = root.children?.map(resolveChild);\n    return Object.assign({}, root, { children });\n};\n\nlet instancePromise;\nconst loadYoga = async () => {\n    // Yoga WASM binaries must be asynchronously compiled and loaded\n    // to prevent Event emitter memory leak warnings, Yoga must be loaded only once\n    const instance = await (instancePromise ??= loadYoga$1());\n    const config = instance.Config.create();\n    config.setPointScaleFactor(0);\n    const node = { create: () => instance.Node.createWithConfig(config) };\n    return { node };\n};\n\nconst resolveYoga = async (root) => {\n    const yoga = await loadYoga();\n    return Object.assign({}, root, { yoga });\n};\n\nconst getZIndex = (node) => node.style.zIndex;\nconst shouldSort = (node) => node.type !== P.Document && node.type !== P.Svg;\nconst sortZIndex = (a, b) => {\n    const za = getZIndex(a);\n    const zb = getZIndex(b);\n    if (!za && !zb)\n        return 0;\n    if (!za)\n        return 1;\n    if (!zb)\n        return -1;\n    return zb - za;\n};\n/**\n * Sort children by zIndex value\n *\n * @param node\n * @returns Node\n */\nconst resolveNodeZIndex = (node) => {\n    if (!node.children)\n        return node;\n    const sortedChildren = shouldSort(node)\n        ? node.children.sort(sortZIndex)\n        : node.children;\n    const children = sortedChildren.map(resolveNodeZIndex);\n    return Object.assign({}, node, { children });\n};\n/**\n * Sort children by zIndex value\n *\n * @param node\n * @returns Node\n */\nconst resolveZIndex = (root) => resolveNodeZIndex(root);\n\n// Caches emoji images data\nconst emojis = {};\nconst regex = emojiRegex();\n/**\n * When an emoji as no variations, it might still have 2 parts,\n * the canonical emoji and an empty string.\n * ex.\n *   (no color) Array.from('❤️') => [\"❤\", \"️\"]\n *   (w/ color) Array.from('👍🏿') => [\"👍\", \"🏿\"]\n *\n * The empty string needs to be removed otherwise the generated\n * url will be incorect.\n */\nconst removeVariationSelectors = (x) => x !== '️';\nconst getCodePoints = (string, withVariationSelectors = false) => Array.from(string)\n    .filter(withVariationSelectors ? () => true : removeVariationSelectors)\n    .map((char) => char.codePointAt(0).toString(16))\n    .join('-');\nconst buildEmojiUrl = (emoji, source) => {\n    if ('builder' in source) {\n        return source.builder(getCodePoints(emoji, source.withVariationSelectors));\n    }\n    const { url, format = 'png', withVariationSelectors } = source;\n    return `${url}${getCodePoints(emoji, withVariationSelectors)}.${format}`;\n};\nconst fetchEmojis = (string, source) => {\n    if (!source)\n        return [];\n    const promises = [];\n    Array.from(string.matchAll(regex)).forEach((match) => {\n        const emoji = match[0];\n        if (!emojis[emoji] || emojis[emoji].loading) {\n            const emojiUrl = buildEmojiUrl(emoji, source);\n            emojis[emoji] = { loading: true };\n            promises.push(resolveImage({ uri: emojiUrl }).then((image) => {\n                emojis[emoji].loading = false;\n                emojis[emoji].data = image.data;\n            }));\n        }\n    });\n    return promises;\n};\nconst embedEmojis = (fragments) => {\n    const result = [];\n    for (let i = 0; i < fragments.length; i += 1) {\n        const fragment = fragments[i];\n        let lastIndex = 0;\n        Array.from(fragment.string.matchAll(regex)).forEach((match) => {\n            const { index } = match;\n            const emoji = match[0];\n            const emojiSize = fragment.attributes.fontSize;\n            const chunk = fragment.string.slice(lastIndex, index + match[0].length);\n            // If emoji image was found, we create a new fragment with the\n            // correct attachment and object substitution character;\n            if (emojis[emoji] && emojis[emoji].data) {\n                result.push({\n                    string: chunk.replace(match[0], String.fromCharCode(0xfffc)),\n                    attributes: {\n                        ...fragment.attributes,\n                        attachment: {\n                            width: emojiSize,\n                            height: emojiSize,\n                            yOffset: Math.floor(emojiSize * 0.1),\n                            image: emojis[emoji].data,\n                        },\n                    },\n                });\n            }\n            else {\n                // If no emoji data, we try to use emojis in the font\n                result.push({\n                    string: chunk,\n                    attributes: fragment.attributes,\n                });\n            }\n            lastIndex = index + emoji.length;\n        });\n        if (lastIndex < fragment.string.length) {\n            result.push({\n                string: fragment.string.slice(lastIndex),\n                attributes: fragment.attributes,\n            });\n        }\n    }\n    return result;\n};\n\n/**\n * Get image source\n *\n * @param node - Image node\n * @returns Image src\n */\nconst getSource = (node) => {\n    if (node.props.src)\n        return node.props.src;\n    if (node.props.source)\n        return node.props.source;\n};\n\n/**\n * Resolves `src` to `@react-pdf/image` interface.\n *\n * Also it handles factories and async sources.\n *\n * @param src\n * @returns Resolved src\n */\nconst resolveSource = async (src) => {\n    const source = typeof src === 'function' ? await src() : await src;\n    return typeof source === 'string' ? { uri: source } : source;\n};\n\n/**\n * Fetches image and append data to node\n * Ideally this fn should be immutable.\n *\n * @param node\n */\nconst fetchImage = async (node) => {\n    const src = getSource(node);\n    const { cache } = node.props;\n    if (!src) {\n        console.warn(false, 'Image should receive either a \"src\" or \"source\" prop');\n        return;\n    }\n    try {\n        const source = await resolveSource(src);\n        if (!source) {\n            throw new Error(`Image's \"src\" or \"source\" prop returned ${source}`);\n        }\n        node.image = await resolveImage(source, { cache });\n        if (Buffer.isBuffer(source) || source instanceof Blob)\n            return;\n        node.image.key = 'data' in source ? source.data.toString() : source.uri;\n    }\n    catch (e) {\n        console.warn(e.message);\n    }\n};\n\nconst isImage$2 = (node) => node.type === P.Image;\n/**\n * Get all asset promises that need to be resolved\n *\n * @param fontStore - Font store\n * @param node - Root node\n * @returns Asset promises\n */\nconst fetchAssets = (fontStore, node) => {\n    const promises = [];\n    const listToExplore = node.children?.slice(0) || [];\n    const emojiSource = fontStore ? fontStore.getEmojiSource() : null;\n    while (listToExplore.length > 0) {\n        const n = listToExplore.shift();\n        if (isImage$2(n)) {\n            promises.push(fetchImage(n));\n        }\n        if (fontStore && n.style?.fontFamily) {\n            const fontFamilies = castArray(n.style.fontFamily);\n            promises.push(...fontFamilies.map((fontFamily) => fontStore.load({\n                fontFamily,\n                fontStyle: n.style.fontStyle,\n                fontWeight: n.style.fontWeight,\n            })));\n        }\n        if (typeof n === 'string') {\n            promises.push(...fetchEmojis(n, emojiSource));\n        }\n        if ('value' in n && typeof n.value === 'string') {\n            promises.push(...fetchEmojis(n.value, emojiSource));\n        }\n        if (n.children) {\n            n.children.forEach((childNode) => {\n                listToExplore.push(childNode);\n            });\n        }\n    }\n    return promises;\n};\n/**\n * Fetch image, font and emoji assets in parallel.\n * Layout process will not be resumed until promise resolves.\n *\n * @param node root node\n * @param fontStore font store\n * @returns Root node\n */\nconst resolveAssets = async (node, fontStore) => {\n    const promises = fetchAssets(fontStore, node);\n    await Promise.all(promises);\n    return node;\n};\n\nconst isLink$1 = (node) => node.type === P.Link;\nconst DEFAULT_LINK_STYLES = {\n    color: 'blue',\n    textDecoration: 'underline',\n};\n/**\n * Computes styles using stylesheet\n *\n * @param container\n * @param node - Document node\n * @returns Computed styles\n */\nconst computeStyle = (container, node) => {\n    let baseStyle = [node.style];\n    if (isLink$1(node)) {\n        baseStyle = Array.isArray(node.style)\n            ? [DEFAULT_LINK_STYLES, ...node.style]\n            : [DEFAULT_LINK_STYLES, node.style];\n    }\n    return resolveStyle(container, baseStyle);\n};\n/**\n * Resolves node styles\n *\n * @param container\n * @returns Resolve node styles\n */\nconst resolveNodeStyles = (container) => (node) => {\n    const style = computeStyle(container, node);\n    if (!node.children)\n        return Object.assign({}, node, { style });\n    const children = node.children.map(resolveNodeStyles(container));\n    return Object.assign({}, node, { style, children });\n};\n/**\n * Resolves page styles\n *\n * @param page Document page\n * @returns Document page with resolved styles\n */\nconst resolvePageStyles = (page) => {\n    const dpi = page.props?.dpi || 72;\n    const style = page.style;\n    const width = page.box?.width || style.width;\n    const height = page.box?.height || style.height;\n    const orientation = page.props?.orientation || 'portrait';\n    const remBase = style?.fontSize || 18;\n    const container = { width, height, orientation, dpi, remBase };\n    return resolveNodeStyles(container)(page);\n};\n/**\n * Resolves document styles\n *\n * @param root - Document root\n * @returns Document root with resolved styles\n */\nconst resolveStyles = (root) => {\n    if (!root.children)\n        return root;\n    const children = root.children.map(resolvePageStyles);\n    return Object.assign({}, root, { children });\n};\n\nconst getTransformStyle = (s) => (node) => isNil(node.style?.[s]) ? '50%' : node.style?.[s] ?? null;\n/**\n * Get node origin\n *\n * @param node\n * @returns {{ left?: number, top?: number }} node origin\n */\nconst getOrigin = (node) => {\n    if (!node.box)\n        return null;\n    const { left, top, width, height } = node.box;\n    const transformOriginX = getTransformStyle('transformOriginX')(node);\n    const transformOriginY = getTransformStyle('transformOriginY')(node);\n    const percentX = matchPercent(transformOriginX);\n    const percentY = matchPercent(transformOriginY);\n    const offsetX = percentX ? width * percentX.percent : transformOriginX;\n    const offsetY = percentY ? height * percentY.percent : transformOriginY;\n    if (isNil(offsetX) || typeof offsetX === 'string')\n        throw new Error(`Invalid origin offsetX: ${offsetX}`);\n    if (isNil(offsetY) || typeof offsetY === 'string')\n        throw new Error(`Invalid origin offsetY: ${offsetY}`);\n    return { left: left + offsetX, top: top + offsetY };\n};\n\n/**\n * Resolve node origin\n *\n * @param node\n * @returns Node with origin attribute\n */\nconst resolveNodeOrigin = (node) => {\n    const origin = getOrigin(node);\n    const newNode = Object.assign({}, node, { origin });\n    if (!node.children)\n        return newNode;\n    const children = node.children.map(resolveNodeOrigin);\n    return Object.assign({}, newNode, { children });\n};\n/**\n * Resolve document origins\n *\n * @param root - Document root\n * @returns Document root\n */\nconst resolveOrigin = (root) => {\n    if (!root.children)\n        return root;\n    const children = root.children.map(resolveNodeOrigin);\n    return Object.assign({}, root, { children });\n};\n\nconst getBookmarkValue = (bookmark) => {\n    return typeof bookmark === 'string'\n        ? { title: bookmark, fit: false, expanded: false }\n        : bookmark;\n};\nconst resolveBookmarks = (node) => {\n    let refs = 0;\n    const children = (node.children || []).slice(0);\n    const listToExplore = children.map((value) => ({\n        value,\n        parent: null,\n    }));\n    while (listToExplore.length > 0) {\n        const element = listToExplore.shift();\n        if (!element)\n            break;\n        const child = element.value;\n        let parent = element.parent;\n        if (child.props && 'bookmark' in child.props) {\n            const bookmark = getBookmarkValue(child.props.bookmark);\n            const ref = refs++;\n            const newHierarchy = { ref, parent: parent?.ref, ...bookmark };\n            child.props.bookmark = newHierarchy;\n            parent = newHierarchy;\n        }\n        if (child.children) {\n            child.children.forEach((childNode) => {\n                listToExplore.push({ value: childNode, parent });\n            });\n        }\n    }\n    return node;\n};\n\nconst VALID_ORIENTATIONS = ['portrait', 'landscape'];\n/**\n * Get page orientation. Defaults to portrait\n *\n * @param page - Page object\n * @returns Page orientation\n */\nconst getOrientation = (page) => {\n    const value = page.props?.orientation || 'portrait';\n    return VALID_ORIENTATIONS.includes(value) ? value : 'portrait';\n};\n\n/**\n * Return true if page is landscape\n *\n * @param page - Page instance\n * @returns Is page landscape\n */\nconst isLandscape = (page) => getOrientation(page) === 'landscape';\n\n// Page sizes for 72dpi. 72dpi is used internally by pdfkit.\nconst PAGE_SIZES = {\n    '4A0': [4767.87, 6740.79],\n    '2A0': [3370.39, 4767.87],\n    A0: [2383.94, 3370.39],\n    A1: [1683.78, 2383.94],\n    A2: [1190.55, 1683.78],\n    A3: [841.89, 1190.55],\n    A4: [595.28, 841.89],\n    A5: [419.53, 595.28],\n    A6: [297.64, 419.53],\n    A7: [209.76, 297.64],\n    A8: [147.4, 209.76],\n    A9: [104.88, 147.4],\n    A10: [73.7, 104.88],\n    B0: [2834.65, 4008.19],\n    B1: [2004.09, 2834.65],\n    B2: [1417.32, 2004.09],\n    B3: [1000.63, 1417.32],\n    B4: [708.66, 1000.63],\n    B5: [498.9, 708.66],\n    B6: [354.33, 498.9],\n    B7: [249.45, 354.33],\n    B8: [175.75, 249.45],\n    B9: [124.72, 175.75],\n    B10: [87.87, 124.72],\n    C0: [2599.37, 3676.54],\n    C1: [1836.85, 2599.37],\n    C2: [1298.27, 1836.85],\n    C3: [918.43, 1298.27],\n    C4: [649.13, 918.43],\n    C5: [459.21, 649.13],\n    C6: [323.15, 459.21],\n    C7: [229.61, 323.15],\n    C8: [161.57, 229.61],\n    C9: [113.39, 161.57],\n    C10: [79.37, 113.39],\n    RA0: [2437.8, 3458.27],\n    RA1: [1729.13, 2437.8],\n    RA2: [1218.9, 1729.13],\n    RA3: [864.57, 1218.9],\n    RA4: [609.45, 864.57],\n    SRA0: [2551.18, 3628.35],\n    SRA1: [1814.17, 2551.18],\n    SRA2: [1275.59, 1814.17],\n    SRA3: [907.09, 1275.59],\n    SRA4: [637.8, 907.09],\n    EXECUTIVE: [521.86, 756.0],\n    FOLIO: [612.0, 936.0],\n    LEGAL: [612.0, 1008.0],\n    LETTER: [612.0, 792.0],\n    TABLOID: [792.0, 1224.0],\n    ID1: [153, 243],\n};\n/**\n * Parses scalar value in value and unit pairs\n *\n * @param value - Scalar value\n * @returns Parsed value\n */\nconst parseValue = (value) => {\n    if (typeof value === 'number')\n        return { value, unit: undefined };\n    const match = /^(-?\\d*\\.?\\d+)(in|mm|cm|pt|px)?$/g.exec(value);\n    return match\n        ? { value: parseFloat(match[1]), unit: match[2] || 'pt' }\n        : { value, unit: undefined };\n};\n/**\n * Transform given scalar value to 72dpi equivalent of size\n *\n * @param value - Styles value\n * @param inputDpi - User defined dpi\n * @returns Transformed value\n */\nconst transformUnit = (value, inputDpi) => {\n    if (!value)\n        return 0;\n    const scalar = parseValue(value);\n    const outputDpi = 72;\n    const mmFactor = (1 / 25.4) * outputDpi;\n    const cmFactor = (1 / 2.54) * outputDpi;\n    if (typeof scalar.value === 'string')\n        throw new Error(`Invalid page size: ${value}`);\n    switch (scalar.unit) {\n        case 'in':\n            return scalar.value * outputDpi;\n        case 'mm':\n            return scalar.value * mmFactor;\n        case 'cm':\n            return scalar.value * cmFactor;\n        case 'px':\n            return Math.round(scalar.value * (outputDpi / inputDpi));\n        default:\n            return scalar.value;\n    }\n};\nconst transformUnits = ({ width, height }, dpi) => ({\n    width: transformUnit(width, dpi),\n    height: transformUnit(height, dpi),\n});\n/**\n * Transforms array into size object\n *\n * @param v - Values array\n * @returns Size object with width and height\n */\nconst toSizeObject = (v) => ({\n    width: v[0],\n    height: v[1],\n});\n/**\n * Flip size object\n *\n * @param v - Size object\n * @returns Flipped size object\n */\nconst flipSizeObject = (v) => ({\n    width: v.height,\n    height: v.width,\n});\n/**\n * Returns size object from a given string\n *\n * @param v - Page size string\n * @returns Size object with width and height\n */\nconst getStringSize = (v) => {\n    return toSizeObject(PAGE_SIZES[v.toUpperCase()]);\n};\n/**\n * Returns size object from a single number\n *\n * @param n - Page size number\n * @returns Size object with width and height\n */\nconst getNumberSize = (n) => toSizeObject([n, n]);\n/**\n * Return page size in an object { width, height }\n *\n * @param page - Page node\n * @returns Size object with width and height\n */\nconst getSize = (page) => {\n    const value = page.props?.size || 'A4';\n    const dpi = page.props?.dpi || 72;\n    let size;\n    if (typeof value === 'string') {\n        size = getStringSize(value);\n    }\n    else if (Array.isArray(value)) {\n        size = transformUnits(toSizeObject(value), dpi);\n    }\n    else if (typeof value === 'number') {\n        size = transformUnits(getNumberSize(value), dpi);\n    }\n    else {\n        size = transformUnits(value, dpi);\n    }\n    return isLandscape(page) ? flipSizeObject(size) : size;\n};\n\n/**\n * Resolves page size\n *\n * @param page\n * @returns Page with resolved size in style attribute\n */\nconst resolvePageSize = (page) => {\n    const size = getSize(page);\n    const style = flatten(page.style || {});\n    return { ...page, style: { ...style, ...size } };\n};\n/**\n * Resolves page sizes\n *\n * @param root  -Document root\n * @returns Document root with resolved page sizes\n */\nconst resolvePageSizes = (root) => {\n    if (!root.children)\n        return root;\n    const children = root.children.map(resolvePageSize);\n    return Object.assign({}, root, { children });\n};\n\nconst isFixed = (node) => {\n    if (!node.props)\n        return false;\n    return 'fixed' in node.props ? node.props.fixed === true : false;\n};\n\n/**\n * Get line index at given height\n *\n * @param node\n * @param height\n */\nconst lineIndexAtHeight = (node, height) => {\n    let y = 0;\n    if (!node.lines)\n        return 0;\n    for (let i = 0; i < node.lines.length; i += 1) {\n        const line = node.lines[i];\n        if (y + line.box.height > height)\n            return i;\n        y += line.box.height;\n    }\n    return node.lines.length;\n};\n\n/**\n * Get height for given text line index\n *\n * @param node\n * @param index\n */\nconst heightAtLineIndex = (node, index) => {\n    let counter = 0;\n    if (!node.lines)\n        return counter;\n    for (let i = 0; i < index; i += 1) {\n        const line = node.lines[i];\n        if (!line)\n            break;\n        counter += line.box.height;\n    }\n    return counter;\n};\n\nconst getLineBreak = (node, height) => {\n    const top = node.box?.top || 0;\n    const widows = node.props.widows || 2;\n    const orphans = node.props.orphans || 2;\n    const linesQuantity = node.lines.length;\n    const slicedLine = lineIndexAtHeight(node, height - top);\n    if (slicedLine === 0) {\n        return 0;\n    }\n    if (linesQuantity < orphans) {\n        return linesQuantity;\n    }\n    if (slicedLine < orphans || linesQuantity < orphans + widows) {\n        return 0;\n    }\n    if (linesQuantity === orphans + widows) {\n        return orphans;\n    }\n    if (linesQuantity - slicedLine < widows) {\n        return linesQuantity - widows;\n    }\n    return slicedLine;\n};\n// Also receives contentArea in case it's needed\nconst splitText = (node, height) => {\n    const slicedLineIndex = getLineBreak(node, height);\n    const currentHeight = heightAtLineIndex(node, slicedLineIndex);\n    const nextHeight = node.box.height - currentHeight;\n    const current = Object.assign({}, node, {\n        box: {\n            ...node.box,\n            height: currentHeight,\n            borderBottomWidth: 0,\n        },\n        style: {\n            ...node.style,\n            marginBottom: 0,\n            paddingBottom: 0,\n            borderBottomWidth: 0,\n            borderBottomLeftRadius: 0,\n            borderBottomRightRadius: 0,\n        },\n        lines: node.lines.slice(0, slicedLineIndex),\n    });\n    const next = Object.assign({}, node, {\n        box: {\n            ...node.box,\n            top: 0,\n            height: nextHeight,\n            borderTopWidth: 0,\n        },\n        style: {\n            ...node.style,\n            marginTop: 0,\n            paddingTop: 0,\n            borderTopWidth: 0,\n            borderTopLeftRadius: 0,\n            borderTopRightRadius: 0,\n        },\n        lines: node.lines.slice(slicedLineIndex),\n    });\n    return [current, next];\n};\n\nconst getTop$1 = (node) => node.box?.top || 0;\nconst hasFixedHeight = (node) => !isNil(node.style?.height);\nconst splitNode = (node, height) => {\n    if (!node)\n        return [null, null];\n    const nodeTop = getTop$1(node);\n    const current = Object.assign({}, node, {\n        box: {\n            ...node.box,\n            borderBottomWidth: 0,\n        },\n        style: {\n            ...node.style,\n            marginBottom: 0,\n            paddingBottom: 0,\n            borderBottomWidth: 0,\n            borderBottomLeftRadius: 0,\n            borderBottomRightRadius: 0,\n        },\n    });\n    current.style.height = height - nodeTop;\n    const nextHeight = hasFixedHeight(node)\n        ? node.box.height - (height - nodeTop)\n        : null;\n    const next = Object.assign({}, node, {\n        box: {\n            ...node.box,\n            top: 0,\n            borderTopWidth: 0,\n        },\n        style: {\n            ...node.style,\n            marginTop: 0,\n            paddingTop: 0,\n            borderTopWidth: 0,\n            borderTopLeftRadius: 0,\n            borderTopRightRadius: 0,\n        },\n    });\n    if (nextHeight) {\n        next.style.height = nextHeight;\n    }\n    return [current, next];\n};\n\nconst NON_WRAP_TYPES = [P.Svg, P.Note, P.Image, P.Canvas];\nconst getWrap = (node) => {\n    if (NON_WRAP_TYPES.includes(node.type))\n        return false;\n    if (!node.props)\n        return true;\n    return 'wrap' in node.props ? node.props.wrap : true;\n};\n\nconst getComputedPadding = (node, edge) => {\n    const { yogaNode } = node;\n    return yogaNode ? yogaNode.getComputedPadding(edge) : null;\n};\n/**\n * Get Yoga computed paddings. Zero otherwise\n *\n * @param  node\n * @returns paddings\n */\nconst getPadding = (node) => {\n    const { style, box } = node;\n    const paddingTop = getComputedPadding(node, Yoga.Edge.Top) ||\n        box?.paddingTop ||\n        style?.paddingTop ||\n        0;\n    const paddingRight = getComputedPadding(node, Yoga.Edge.Right) ||\n        box?.paddingRight ||\n        style?.paddingRight ||\n        0;\n    const paddingBottom = getComputedPadding(node, Yoga.Edge.Bottom) ||\n        box?.paddingBottom ||\n        style?.paddingBottom ||\n        0;\n    const paddingLeft = getComputedPadding(node, Yoga.Edge.Left) ||\n        box?.paddingLeft ||\n        style?.paddingLeft ||\n        0;\n    return { paddingTop, paddingRight, paddingBottom, paddingLeft };\n};\n\nconst getWrapArea = (page) => {\n    const height = page.style?.height;\n    const { paddingBottom } = getPadding(page);\n    return height - paddingBottom;\n};\n\nconst getContentArea = (page) => {\n    const height = page.style?.height;\n    const { paddingTop, paddingBottom } = getPadding(page);\n    return height - paddingBottom - paddingTop;\n};\n\nconst isString = (value) => typeof value === 'string';\nconst isNumber = (value) => typeof value === 'number';\nconst isBoolean = (value) => typeof value === 'boolean';\nconst isFragment = (value) => value && value.type === Symbol.for('react.fragment');\n/**\n * Transforms a react element instance to internal element format.\n *\n * Can return multiple instances in the case of arrays or fragments.\n *\n * @param element - React element\n * @returns Parsed React elements\n */\nconst createInstances = (element) => {\n    if (!element)\n        return [];\n    if (Array.isArray(element)) {\n        return element.reduce((acc, el) => acc.concat(createInstances(el)), []);\n    }\n    if (isBoolean(element)) {\n        return [];\n    }\n    if (isString(element) || isNumber(element)) {\n        return [{ type: P.TextInstance, value: `${element}` }];\n    }\n    if (isFragment(element)) {\n        // @ts-expect-error figure out why this is complains\n        return createInstances(element.props.children);\n    }\n    if (!isString(element.type)) {\n        // @ts-expect-error figure out why this is complains\n        return createInstances(element.type(element.props));\n    }\n    const { type, props: { style = {}, children, ...props }, } = element;\n    const nextChildren = castArray(children).reduce((acc, child) => acc.concat(createInstances(child)), []);\n    return [\n        {\n            type,\n            style,\n            props,\n            children: nextChildren,\n        },\n    ];\n};\n\nconst getBreak = (node) => 'break' in node.props ? node.props.break : false;\nconst getMinPresenceAhead = (node) => 'minPresenceAhead' in node.props ? node.props.minPresenceAhead : 0;\nconst getFurthestEnd = (elements) => Math.max(...elements.map((node) => node.box.top + node.box.height));\nconst getEndOfMinPresenceAhead = (child) => {\n    return (child.box.top +\n        child.box.height +\n        child.box.marginBottom +\n        getMinPresenceAhead(child));\n};\nconst getEndOfPresence = (child, futureElements) => {\n    const afterMinPresenceAhead = getEndOfMinPresenceAhead(child);\n    const endOfFurthestFutureElement = getFurthestEnd(futureElements.filter((node) => !('fixed' in node.props)));\n    return Math.min(afterMinPresenceAhead, endOfFurthestFutureElement);\n};\nconst shouldBreak = (child, futureElements, height) => {\n    if ('fixed' in child.props)\n        return false;\n    const shouldSplit = height < child.box.top + child.box.height;\n    const canWrap = getWrap(child);\n    // Calculate the y coordinate where the desired presence of the child ends\n    const endOfPresence = getEndOfPresence(child, futureElements);\n    // If the child is already at the top of the page, breaking won't improve its presence\n    // (as long as react-pdf does not support breaking into differently sized containers)\n    const breakingImprovesPresence = child.box.top > child.box.marginTop;\n    return (getBreak(child) ||\n        (shouldSplit && !canWrap) ||\n        (!shouldSplit && endOfPresence > height && breakingImprovesPresence));\n};\n\nconst IGNORABLE_CODEPOINTS = [\n    8232, // LINE_SEPARATOR\n    8233, // PARAGRAPH_SEPARATOR\n];\nconst buildSubsetForFont = (font) => IGNORABLE_CODEPOINTS.reduce((acc, codePoint) => {\n    if (font &&\n        font.hasGlyphForCodePoint &&\n        font.hasGlyphForCodePoint(codePoint)) {\n        return acc;\n    }\n    return [...acc, String.fromCharCode(codePoint)];\n}, []);\nconst ignoreChars = (fragments) => fragments.map((fragment) => {\n    const charSubset = buildSubsetForFont(fragment.attributes.font[0]);\n    const subsetRegex = new RegExp(charSubset.join('|'));\n    return {\n        string: fragment.string.replace(subsetRegex, ''),\n        attributes: fragment.attributes,\n    };\n});\n\nconst PREPROCESSORS = [ignoreChars, embedEmojis];\nconst isImage$1 = (node) => node.type === P.Image;\nconst isTextInstance$2 = (node) => node.type === P.TextInstance;\n/**\n * Get textkit fragments of given node object\n *\n * @param fontStore - Font store\n * @param instance - Node\n * @param parentLink - Parent link\n * @param level - Fragment level\n * @returns Text fragments\n */\nconst getFragments = (fontStore, instance, parentLink = null, level = 0) => {\n    if (!instance)\n        return [{ string: '' }];\n    let fragments = [];\n    const { color = 'black', direction = 'ltr', fontFamily = 'Helvetica', fontWeight, fontStyle, fontSize = 18, textAlign, lineHeight, textDecoration, textDecorationColor, textDecorationStyle, textTransform, letterSpacing, textIndent, opacity, verticalAlign, } = instance.style;\n    const fontFamilies = typeof fontFamily === 'string' ? [fontFamily] : [...(fontFamily || [])];\n    // Fallback font\n    fontFamilies.push('Helvetica');\n    const font = fontFamilies.map((fontFamilyName) => {\n        const opts = { fontFamily: fontFamilyName, fontWeight, fontStyle };\n        const obj = fontStore.getFont(opts);\n        return obj?.data;\n    });\n    // Don't pass main background color to textkit. Will be rendered by the render package instead\n    const backgroundColor = level === 0 ? null : instance.style.backgroundColor;\n    const attributes = {\n        font,\n        color,\n        opacity,\n        fontSize,\n        lineHeight,\n        direction,\n        verticalAlign,\n        backgroundColor,\n        indent: textIndent,\n        characterSpacing: letterSpacing,\n        strikeStyle: textDecorationStyle,\n        underlineStyle: textDecorationStyle,\n        underline: textDecoration === 'underline' ||\n            textDecoration === 'underline line-through' ||\n            textDecoration === 'line-through underline',\n        strike: textDecoration === 'line-through' ||\n            textDecoration === 'underline line-through' ||\n            textDecoration === 'line-through underline',\n        strikeColor: textDecorationColor || color,\n        underlineColor: textDecorationColor || color,\n        // @ts-expect-error allow this props access\n        link: parentLink || instance.props?.src || instance.props?.href,\n        align: textAlign || (direction === 'rtl' ? 'right' : 'left'),\n    };\n    for (let i = 0; i < instance.children.length; i += 1) {\n        const child = instance.children[i];\n        if (isImage$1(child)) {\n            fragments.push({\n                string: String.fromCharCode(0xfffc),\n                attributes: {\n                    ...attributes,\n                    attachment: {\n                        width: (child.style.width || fontSize),\n                        height: (child.style.height || fontSize),\n                        image: child.image.data,\n                    },\n                },\n            });\n        }\n        else if (isTextInstance$2(child)) {\n            fragments.push({\n                string: transformText(child.value, textTransform),\n                attributes,\n            });\n        }\n        else if (child) {\n            fragments.push(...getFragments(fontStore, child, attributes.link, level + 1));\n        }\n    }\n    for (let i = 0; i < PREPROCESSORS.length; i += 1) {\n        const preprocessor = PREPROCESSORS[i];\n        fragments = preprocessor(fragments);\n    }\n    return fragments;\n};\n/**\n * Get textkit attributed string from text node\n *\n * @param fontStore - Font store\n * @param instance Node\n * @returns Attributed string\n */\nconst getAttributedString = (fontStore, instance) => {\n    const fragments = getFragments(fontStore, instance);\n    return fromFragments(fragments);\n};\n\nconst engines = {\n    bidi,\n    linebreaker,\n    justification,\n    textDecoration,\n    scriptItemizer,\n    wordHyphenation,\n    fontSubstitution,\n};\nconst engine = layoutEngine(engines);\nconst getMaxLines = (node) => node.style?.maxLines;\nconst getTextOverflow = (node) => node.style?.textOverflow;\n/**\n * Get layout container for specific text node\n *\n * @param {number} width\n * @param {number} height\n * @param {Object} node\n * @returns {Object} layout container\n */\nconst getContainer = (width, height, node) => {\n    const maxLines = getMaxLines(node);\n    const textOverflow = getTextOverflow(node);\n    return {\n        x: 0,\n        y: 0,\n        width,\n        maxLines,\n        height: height || Infinity,\n        truncateMode: textOverflow,\n    };\n};\n/**\n * Get text layout options for specific text node\n *\n * @param {Object} node instance\n * @returns {Object} layout options\n */\nconst getLayoutOptions = (fontStore, node) => ({\n    hyphenationPenalty: node.props.hyphenationPenalty,\n    shrinkWhitespaceFactor: { before: -0.5, after: -0.5 },\n    hyphenationCallback: node.props.hyphenationCallback ||\n        fontStore?.getHyphenationCallback() ||\n        null,\n});\n/**\n * Get text lines for given node\n *\n * @param node - Node\n * @param width - Container width\n * @param height - Container height\n * @param fontStore - Font store\n * @returns Layout lines\n */\nconst layoutText = (node, width, height, fontStore) => {\n    const attributedString = getAttributedString(fontStore, node);\n    const container = getContainer(width, height, node);\n    const options = getLayoutOptions(fontStore, node);\n    const lines = engine(attributedString, container, options);\n    return lines.reduce((acc, line) => [...acc, ...line], []);\n};\n\nconst isSvg$2 = (node) => node.type === P.Svg;\nconst isText$4 = (node) => node.type === P.Text;\nconst shouldIterate = (node) => !isSvg$2(node) && !isText$4(node);\nconst shouldLayoutText = (node) => isText$4(node) && !node.lines;\n/**\n * Performs text layout on text node if wasn't calculated before.\n * Text layout is usually performed on Yoga's layout process (via setMeasureFunc),\n * but we need to layout those nodes with fixed width and height.\n *\n * @param node\n * @returns Layout node\n */\nconst resolveTextLayout = (node, fontStore) => {\n    if (shouldLayoutText(node)) {\n        const width = node.box.width - (node.box.paddingRight + node.box.paddingLeft);\n        const height = node.box.height - (node.box.paddingTop + node.box.paddingBottom);\n        node.lines = layoutText(node, width, height, fontStore);\n    }\n    if (shouldIterate(node)) {\n        if (!node.children)\n            return node;\n        const mapChild = (child) => resolveTextLayout(child, fontStore);\n        const children = node.children.map(mapChild);\n        return Object.assign({}, node, { children });\n    }\n    return node;\n};\n\nconst BASE_INHERITABLE_PROPERTIES = [\n    'color',\n    'fontFamily',\n    'fontSize',\n    'fontStyle',\n    'fontWeight',\n    'letterSpacing',\n    'opacity',\n    'textDecoration',\n    'textTransform',\n    'lineHeight',\n    'textAlign',\n    'visibility',\n    'wordSpacing',\n];\nconst TEXT_INHERITABLE_PROPERTIES = [\n    ...BASE_INHERITABLE_PROPERTIES,\n    'backgroundColor',\n];\nconst isType$2 = (type) => (node) => node.type === type;\nconst isSvg$1 = isType$2(P.Svg);\nconst isText$3 = isType$2(P.Text);\n// Merge style values\nconst mergeValues = (styleName, value, inheritedValue) => {\n    switch (styleName) {\n        case 'textDecoration': {\n            // merge not none and not false textDecoration values to one rule\n            return [inheritedValue, value].filter((v) => v && v !== 'none').join(' ');\n        }\n        default:\n            return value;\n    }\n};\n// Merge inherited and node styles\nconst merge = (inheritedStyles, style) => {\n    const mergedStyles = { ...inheritedStyles };\n    Object.entries(style).forEach(([styleName, value]) => {\n        mergedStyles[styleName] = mergeValues(styleName, value, inheritedStyles[styleName]);\n    });\n    return mergedStyles;\n};\n/**\n * Merges styles with node\n *\n * @param inheritedStyles - Style object\n * @returns Merge styles function\n */\nconst mergeStyles = (inheritedStyles) => (node) => {\n    const style = merge(inheritedStyles, node.style || {});\n    return Object.assign({}, node, { style });\n};\n/**\n * Inherit style values from the root to the leafs\n *\n * @param node - Document root\n * @returns Document root with inheritance\n *\n */\nconst resolveInheritance = (node) => {\n    if (isSvg$1(node))\n        return node;\n    if (!('children' in node))\n        return node;\n    const inheritableProperties = isText$3(node)\n        ? TEXT_INHERITABLE_PROPERTIES\n        : BASE_INHERITABLE_PROPERTIES;\n    const inheritStyles = pick(inheritableProperties, node.style || {});\n    const resolveChild = compose(resolveInheritance, mergeStyles(inheritStyles));\n    const children = node.children.map(resolveChild);\n    return Object.assign({}, node, { children });\n};\n\nconst getComputedMargin = (node, edge) => {\n    const { yogaNode } = node;\n    return yogaNode ? yogaNode.getComputedMargin(edge) : null;\n};\n/**\n * Get Yoga computed magins. Zero otherwise\n *\n * @param node\n * @returns Margins\n */\nconst getMargin = (node) => {\n    const { style, box } = node;\n    const marginTop = getComputedMargin(node, Yoga.Edge.Top) ||\n        box?.marginTop ||\n        style?.marginTop ||\n        0;\n    const marginRight = getComputedMargin(node, Yoga.Edge.Right) ||\n        box?.marginRight ||\n        style?.marginRight ||\n        0;\n    const marginBottom = getComputedMargin(node, Yoga.Edge.Bottom) ||\n        box?.marginBottom ||\n        style?.marginBottom ||\n        0;\n    const marginLeft = getComputedMargin(node, Yoga.Edge.Left) ||\n        box?.marginLeft ||\n        style?.marginLeft ||\n        0;\n    return { marginTop, marginRight, marginBottom, marginLeft };\n};\n\n/**\n * Get Yoga computed position. Zero otherwise\n *\n * @param node\n * @returns Position\n */\nconst getPosition = (node) => {\n    const { yogaNode } = node;\n    return {\n        top: yogaNode?.getComputedTop() || 0,\n        right: yogaNode?.getComputedRight() || 0,\n        bottom: yogaNode?.getComputedBottom() || 0,\n        left: yogaNode?.getComputedLeft() || 0,\n    };\n};\n\nconst DEFAULT_DIMENSION = {\n    width: 0,\n    height: 0,\n};\n/**\n * Get Yoga computed dimensions. Zero otherwise\n *\n * @param node\n * @returns Dimensions\n */\nconst getDimension = (node) => {\n    const { yogaNode } = node;\n    if (!yogaNode)\n        return DEFAULT_DIMENSION;\n    return {\n        width: yogaNode.getComputedWidth(),\n        height: yogaNode.getComputedHeight(),\n    };\n};\n\nconst getComputedBorder = (yogaNode, edge) => (yogaNode ? yogaNode.getComputedBorder(edge) : 0);\n/**\n * Get Yoga computed border width. Zero otherwise\n *\n * @param node\n * @returns Border widths\n */\nconst getBorderWidth = (node) => {\n    const { yogaNode } = node;\n    return {\n        borderTopWidth: getComputedBorder(yogaNode, Yoga.Edge.Top),\n        borderRightWidth: getComputedBorder(yogaNode, Yoga.Edge.Right),\n        borderBottomWidth: getComputedBorder(yogaNode, Yoga.Edge.Bottom),\n        borderLeftWidth: getComputedBorder(yogaNode, Yoga.Edge.Left),\n    };\n};\n\n/**\n * Set display attribute to node's Yoga instance\n *\n * @param value - Display\n * @returns Node instance wrapper\n */\nconst setDisplay = (value) => (node) => {\n    const { yogaNode } = node;\n    if (yogaNode) {\n        yogaNode.setDisplay(value === 'none' ? Yoga.Display.None : Yoga.Display.Flex);\n    }\n    return node;\n};\n\nconst OVERFLOW = {\n    hidden: Yoga.Overflow.Hidden,\n    scroll: Yoga.Overflow.Scroll,\n};\n/**\n * Set overflow attribute to node's Yoga instance\n *\n * @param value - Overflow value\n * @returns Node instance wrapper\n */\nconst setOverflow = (value) => (node) => {\n    const { yogaNode } = node;\n    if (!isNil(value) && yogaNode) {\n        const overflow = OVERFLOW[value] || Yoga.Overflow.Visible;\n        yogaNode.setOverflow(overflow);\n    }\n    return node;\n};\n\nconst FLEX_WRAP = {\n    wrap: Yoga.Wrap.Wrap,\n    'wrap-reverse': Yoga.Wrap.WrapReverse,\n};\n/**\n * Set flex wrap attribute to node's Yoga instance\n *\n * @param value - Flex wrap value\n * @returns Node instance wrapper\n */\nconst setFlexWrap = (value) => (node) => {\n    const { yogaNode } = node;\n    if (yogaNode) {\n        const flexWrap = FLEX_WRAP[value] || Yoga.Wrap.NoWrap;\n        yogaNode.setFlexWrap(flexWrap);\n    }\n    return node;\n};\n\n/**\n * Set generic yoga attribute to node's Yoga instance, handing `auto`, edges and percentage cases\n *\n * @param attr - Property\n * @param edge - Edge\n * @returns Node instance wrapper\n */\nconst setYogaValue = (attr, edge) => (value) => (node) => {\n    const { yogaNode } = node;\n    if (!isNil(value) && yogaNode) {\n        const hasEdge = !isNil(edge);\n        const fixedMethod = `set${upperFirst(attr)}`;\n        const autoMethod = `${fixedMethod}Auto`;\n        const percentMethod = `${fixedMethod}Percent`;\n        const percent = matchPercent(value);\n        if (percent && !yogaNode[percentMethod]) {\n            throw new Error(`You can't pass percentage values to ${attr} property`);\n        }\n        if (percent) {\n            if (hasEdge) {\n                yogaNode[percentMethod]?.(edge, percent.value);\n            }\n            else {\n                yogaNode[percentMethod]?.(percent.value);\n            }\n        }\n        else if (value === 'auto') {\n            if (hasEdge) {\n                yogaNode[autoMethod]?.(edge);\n            }\n            else {\n                yogaNode[autoMethod]?.();\n            }\n        }\n        else if (hasEdge) {\n            yogaNode[fixedMethod]?.(edge, value);\n        }\n        else {\n            yogaNode[fixedMethod]?.(value);\n        }\n    }\n    return node;\n};\n\n/**\n * Set flex grow attribute to node's Yoga instance\n *\n * @param  value - Flex grow value\n * @returns Node instance wrapper\n */\nconst setFlexGrow = (value) => (node) => {\n    return setYogaValue('flexGrow')(value || 0)(node);\n};\n\n/**\n * Set flex basis attribute to node's Yoga instance\n *\n * @param flex - Basis value\n * @param node - Node instance\n * @returns Node instance\n */\nconst setFlexBasis = setYogaValue('flexBasis');\n\nconst ALIGN = {\n    'flex-start': Yoga.Align.FlexStart,\n    center: Yoga.Align.Center,\n    'flex-end': Yoga.Align.FlexEnd,\n    stretch: Yoga.Align.Stretch,\n    baseline: Yoga.Align.Baseline,\n    'space-between': Yoga.Align.SpaceBetween,\n    'space-around': Yoga.Align.SpaceAround,\n    'space-evenly': Yoga.Align.SpaceEvenly,\n};\n/**\n * Set generic align attribute to node's Yoga instance\n *\n * @param attr - Specific align property\n * @param value - Specific align value\n * @param node - Node\n * @returns Node\n */\nconst setAlign = (attr) => (value) => (node) => {\n    const { yogaNode } = node;\n    const defaultValue = attr === 'items' ? Yoga.Align.Stretch : Yoga.Align.Auto;\n    if (yogaNode) {\n        const align = ALIGN[value] || defaultValue;\n        yogaNode[`setAlign${upperFirst(attr)}`](align);\n    }\n    return node;\n};\n\n/**\n * Set align self attribute to node's Yoga instance\n *\n * @param align - Value\n * @param node - Node instance\n * @returns Node instance\n */\nconst setAlignSelf = setAlign('self');\n\n/**\n * Set align items attribute to node's Yoga instance\n *\n * @param align - Value\n * @param node - Node instance\n * @returns Node instance\n */\nconst setAlignItems = setAlign('items');\n\n/**\n * Set flex shrink attribute to node's Yoga instance\n *\n * @param value - Flex shrink value\n * @returns Node instance wrapper\n */\nconst setFlexShrink = (value) => (node) => {\n    return setYogaValue('flexShrink')(value || 1)(node);\n};\n\n/**\n * Set aspect ratio attribute to node's Yoga instance\n *\n * @param value - Ratio\n * @returns Node instance\n */\nconst setAspectRatio = (value) => (node) => {\n    const { yogaNode } = node;\n    if (!isNil(value) && yogaNode) {\n        yogaNode.setAspectRatio(value);\n    }\n    return node;\n};\n\n/**\n * Set align content attribute to node's Yoga instance\n *\n * @param align - Value\n * @param node - Instance\n * @returns Node instance\n */\nconst setAlignContent = setAlign('content');\n\nconst POSITION = {\n    absolute: Yoga.PositionType.Absolute,\n    relative: Yoga.PositionType.Relative,\n    static: Yoga.PositionType.Static,\n};\n/**\n * Set position type attribute to node's Yoga instance\n *\n * @param value - Position position type\n * @returns Node instance\n */\nconst setPositionType = (value) => (node) => {\n    const { yogaNode } = node;\n    if (!isNil(value) && yogaNode) {\n        yogaNode.setPositionType(POSITION[value]);\n    }\n    return node;\n};\n\nconst FLEX_DIRECTIONS = {\n    row: Yoga.FlexDirection.Row,\n    'row-reverse': Yoga.FlexDirection.RowReverse,\n    'column-reverse': Yoga.FlexDirection.ColumnReverse,\n};\n/**\n * Set flex direction attribute to node's Yoga instance\n *\n * @param value - Flex direction value\n * @returns Node instance wrapper\n */\nconst setFlexDirection = (value) => (node) => {\n    const { yogaNode } = node;\n    if (yogaNode) {\n        const flexDirection = FLEX_DIRECTIONS[value] || Yoga.FlexDirection.Column;\n        yogaNode.setFlexDirection(flexDirection);\n    }\n    return node;\n};\n\nconst JUSTIFY_CONTENT = {\n    center: Yoga.Justify.Center,\n    'flex-end': Yoga.Justify.FlexEnd,\n    'space-between': Yoga.Justify.SpaceBetween,\n    'space-around': Yoga.Justify.SpaceAround,\n    'space-evenly': Yoga.Justify.SpaceEvenly,\n};\n/**\n * Set justify content attribute to node's Yoga instance\n *\n * @param value - Justify content value\n * @returns Node instance wrapper\n */\nconst setJustifyContent = (value) => (node) => {\n    const { yogaNode } = node;\n    if (!isNil(value) && yogaNode) {\n        const justifyContent = JUSTIFY_CONTENT[value] || Yoga.Justify.FlexStart;\n        yogaNode.setJustifyContent(justifyContent);\n    }\n    return node;\n};\n\n/**\n * Set margin top attribute to node's Yoga instance\n *\n * @param margin - Margin top\n * @param node - Node instance\n * @returns Node instance\n */\nconst setMarginTop = setYogaValue('margin', Yoga.Edge.Top);\n/**\n * Set margin right attribute to node's Yoga instance\n *\n * @param margin - Margin right\n * @param node - Node instance\n * @returns Node instance\n */\nconst setMarginRight = setYogaValue('margin', Yoga.Edge.Right);\n/**\n * Set margin bottom attribute to node's Yoga instance\n *\n * @param margin - Margin bottom\n * @param node - Node instance\n * @returns Node instance\n */\nconst setMarginBottom = setYogaValue('margin', Yoga.Edge.Bottom);\n/**\n * Set margin left attribute to node's Yoga instance\n *\n * @param margin - Margin left\n * @param node - Node instance\n * @returns Node instance\n */\nconst setMarginLeft = setYogaValue('margin', Yoga.Edge.Left);\n\n/**\n * Set padding top attribute to node's Yoga instance\n *\n * @param padding - Padding top\n * @param node - Node instance\n * @returns Node instance\n */\nconst setPaddingTop = setYogaValue('padding', Yoga.Edge.Top);\n/**\n * Set padding right attribute to node's Yoga instance\n *\n * @param padding - Padding right\n * @param node - Node instance\n * @returns Node instance\n */\nconst setPaddingRight = setYogaValue('padding', Yoga.Edge.Right);\n/**\n * Set padding bottom attribute to node's Yoga instance\n *\n * @param padding - Padding bottom\n * @param node Node instance\n * @returns Node instance\n */\nconst setPaddingBottom = setYogaValue('padding', Yoga.Edge.Bottom);\n/**\n * Set padding left attribute to node's Yoga instance\n *\n * @param padding - Padding left\n * @param node - Node instance\n * @returns Node instance\n */\nconst setPaddingLeft = setYogaValue('padding', Yoga.Edge.Left);\n\n/**\n * Set border top attribute to node's Yoga instance\n *\n * @param border - Border top width\n * @param node - Node instance\n * @returns Node instance\n */\nconst setBorderTop = setYogaValue('border', Yoga.Edge.Top);\n/**\n * Set border right attribute to node's Yoga instance\n *\n * @param border - Border right width\n * @param node - Node instance\n * @returns Node instance\n */\nconst setBorderRight = setYogaValue('border', Yoga.Edge.Right);\n/**\n * Set border bottom attribute to node's Yoga instance\n *\n * @param border - Border bottom width\n * @param node - Node instance\n * @returns Node instance\n */\nconst setBorderBottom = setYogaValue('border', Yoga.Edge.Bottom);\n/**\n * Set border left attribute to node's Yoga instance\n *\n * @param border - Border left width\n * @param node - Node instance\n * @returns Node instance\n */\nconst setBorderLeft = setYogaValue('border', Yoga.Edge.Left);\n\n/**\n * Set position top attribute to node's Yoga instance\n *\n * @param position - Position top\n * @param node - Node instance\n * @returns Node instance\n */\nconst setPositionTop = setYogaValue('position', Yoga.Edge.Top);\n/**\n * Set position right attribute to node's Yoga instance\n *\n * @param position - Position right\n * @param node - Node instance\n * @returns Node instance\n */\nconst setPositionRight = setYogaValue('position', Yoga.Edge.Right);\n/**\n * Set position bottom attribute to node's Yoga instance\n *\n * @param position - Position bottom\n * @param node - Node instance\n * @returns Node instance\n */\nconst setPositionBottom = setYogaValue('position', Yoga.Edge.Bottom);\n/**\n * Set position left attribute to node's Yoga instance\n *\n * @param position - Position left\n * @param node - Node instance\n * @returns Node instance\n */\nconst setPositionLeft = setYogaValue('position', Yoga.Edge.Left);\n\n/**\n * Set width to node's Yoga instance\n *\n * @param width - Width\n * @param node - Node instance\n * @returns Node instance\n */\nconst setWidth = setYogaValue('width');\n/**\n * Set min width to node's Yoga instance\n *\n * @param min - Width\n * @param node - Node instance\n * @returns Node instance\n */\nconst setMinWidth = setYogaValue('minWidth');\n/**\n * Set max width to node's Yoga instance\n *\n * @param max - Width\n * @param node - Node instance\n * @returns Node instance\n */\nconst setMaxWidth = setYogaValue('maxWidth');\n/**\n * Set height to node's Yoga instance\n *\n * @param height - Height\n * @param node - Node instance\n * @returns Node instance\n */\nconst setHeight = setYogaValue('height');\n/**\n * Set min height to node's Yoga instance\n *\n * @param min - Height\n * @param node - Node instance\n * @returns Node instance\n */\nconst setMinHeight = setYogaValue('minHeight');\n/**\n * Set max height to node's Yoga instance\n *\n * @param max - Height\n * @param node - Node instance\n * @returns Node instance\n */\nconst setMaxHeight = setYogaValue('maxHeight');\n\n/**\n * Set rowGap value to node's Yoga instance\n *\n * @param value - Gap value\n * @returns Node instance wrapper\n */\nconst setRowGap = setYogaValue('gap', Yoga.Gutter.Row);\n/**\n * Set columnGap value to node's Yoga instance\n *\n * @param value - Gap value\n * @returns Node instance wrapper\n */\nconst setColumnGap = setYogaValue('gap', Yoga.Gutter.Column);\n\nconst getAspectRatio = (viewbox) => {\n    if (!viewbox)\n        return null;\n    if (typeof viewbox === 'string')\n        return null;\n    return (viewbox.maxX - viewbox.minX) / (viewbox.maxY - viewbox.minY);\n};\n/**\n * Yoga svg measure function\n *\n * @param page\n * @param node\n * @returns Measure svg\n */\nconst measureCanvas$1 = (page, node) => (width, widthMode, height, heightMode) => {\n    const aspectRatio = getAspectRatio(node.props.viewBox) || 1;\n    if (widthMode === Yoga.MeasureMode.Exactly ||\n        widthMode === Yoga.MeasureMode.AtMost) {\n        return { width, height: width / aspectRatio };\n    }\n    if (heightMode === Yoga.MeasureMode.Exactly) {\n        return { width: height * aspectRatio };\n    }\n    return {};\n};\n\n/**\n * Get lines width (if any)\n *\n * @param node\n * @returns Lines width\n */\nconst linesWidth = (node) => {\n    if (!node.lines)\n        return 0;\n    return Math.max(0, ...node.lines.map((line) => line.xAdvance));\n};\n\n/**\n * Get lines height (if any)\n *\n * @param node\n * @returns Lines height\n */\nconst linesHeight = (node) => {\n    if (!node.lines)\n        return -1;\n    return node.lines.reduce((acc, line) => acc + line.box.height, 0);\n};\n\nconst ALIGNMENT_FACTORS = { center: 0.5, right: 1 };\n/**\n * Yoga text measure function\n *\n * @param page\n * @param node\n * @param fontStore\n * @returns {MeasureText} measure text function\n */\nconst measureText = (page, node, fontStore) => (width, widthMode, height) => {\n    if (widthMode === Yoga.MeasureMode.Exactly) {\n        if (!node.lines)\n            node.lines = layoutText(node, width, height, fontStore);\n        return { height: linesHeight(node) };\n    }\n    if (widthMode === Yoga.MeasureMode.AtMost) {\n        const alignFactor = ALIGNMENT_FACTORS[node.style?.textAlign] || 0;\n        if (!node.lines) {\n            node.lines = layoutText(node, width, height, fontStore);\n            node.alignOffset = (width - linesWidth(node)) * alignFactor; // Compensate align in variable width containers\n        }\n        return {\n            height: linesHeight(node),\n            width: Math.min(width, linesWidth(node)),\n        };\n    }\n    return {};\n};\n\n/**\n * Get image ratio\n *\n * @param node - Image node\n * @returns Image ratio\n */\nconst getRatio = (node) => {\n    return node.image?.data ? node.image.width / node.image.height : 1;\n};\n\n/**\n * Checks if page has auto height\n *\n * @param page\n * @returns Is page height auto\n */\nconst isHeightAuto = (page) => isNil(page.box?.height);\n\nconst SAFETY_HEIGHT$1 = 10;\n/**\n * Yoga image measure function\n *\n * @param page - Page\n * @param node - Node\n * @returns Measure image\n */\nconst measureImage = (page, node) => (width, widthMode, height, heightMode) => {\n    const imageRatio = getRatio(node);\n    const imageMargin = getMargin(node);\n    const pagePadding = getPadding(page);\n    // TODO: Check image percentage margins\n    const pageArea = isHeightAuto(page)\n        ? Infinity\n        : (page.box?.height || 0) -\n            pagePadding.paddingTop -\n            pagePadding.paddingBottom -\n            imageMargin.marginTop -\n            imageMargin.marginBottom -\n            SAFETY_HEIGHT$1;\n    // Skip measure if image data not present yet\n    if (!node.image)\n        return { width: 0, height: 0 };\n    if (widthMode === Yoga.MeasureMode.Exactly &&\n        heightMode === Yoga.MeasureMode.Undefined) {\n        const scaledHeight = width / imageRatio;\n        return { height: Math.min(pageArea, scaledHeight) };\n    }\n    if (heightMode === Yoga.MeasureMode.Exactly &&\n        (widthMode === Yoga.MeasureMode.AtMost ||\n            widthMode === Yoga.MeasureMode.Undefined)) {\n        return { width: Math.min(height * imageRatio, width) };\n    }\n    if (widthMode === Yoga.MeasureMode.Exactly &&\n        heightMode === Yoga.MeasureMode.AtMost) {\n        const scaledHeight = width / imageRatio;\n        return { height: Math.min(height, pageArea, scaledHeight) };\n    }\n    if (widthMode === Yoga.MeasureMode.AtMost &&\n        heightMode === Yoga.MeasureMode.AtMost) {\n        if (imageRatio > 1) {\n            return {\n                width,\n                height: Math.min(width / imageRatio, height),\n            };\n        }\n        return {\n            height,\n            width: Math.min(height * imageRatio, width),\n        };\n    }\n    return { height, width };\n};\n\nconst SAFETY_HEIGHT = 10;\nconst getMax = (values) => Math.max(-Infinity, ...values);\n/**\n * Helper object to predict canvas size\n * TODO: Implement remaining functions (as close as possible);\n */\nconst measureCtx = () => {\n    const ctx = {};\n    const points = [];\n    const nil = () => ctx;\n    const addPoint = (x, y) => points.push([x, y]);\n    const moveTo = (x, y) => {\n        addPoint(x, y);\n        return ctx;\n    };\n    const rect = (x, y, w, h) => {\n        addPoint(x, y);\n        addPoint(x + w, y);\n        addPoint(x, y + h);\n        addPoint(x + w, y + h);\n        return ctx;\n    };\n    const ellipse = (x, y, rx, ry) => {\n        ry = ry || rx;\n        addPoint(x - rx, y - ry);\n        addPoint(x + rx, y - ry);\n        addPoint(x + rx, y + ry);\n        addPoint(x - rx, y + ry);\n        return ctx;\n    };\n    const polygon = (...pts) => {\n        points.push(...pts);\n        return ctx;\n    };\n    // Change dimensions\n    ctx.rect = rect;\n    ctx.moveTo = moveTo;\n    ctx.lineTo = moveTo;\n    ctx.circle = ellipse;\n    ctx.polygon = polygon;\n    ctx.ellipse = ellipse;\n    ctx.roundedRect = rect;\n    // To be implemented\n    ctx.text = nil;\n    ctx.path = nil;\n    ctx.lineWidth = nil;\n    ctx.bezierCurveTo = nil;\n    ctx.quadraticCurveTo = nil;\n    ctx.scale = nil;\n    ctx.rotate = nil;\n    ctx.translate = nil;\n    // These don't change dimensions\n    ctx.dash = nil;\n    ctx.clip = nil;\n    ctx.save = nil;\n    ctx.fill = nil;\n    ctx.font = nil;\n    ctx.stroke = nil;\n    ctx.lineCap = nil;\n    ctx.opacity = nil;\n    ctx.restore = nil;\n    ctx.lineJoin = nil;\n    ctx.fontSize = nil;\n    ctx.fillColor = nil;\n    ctx.miterLimit = nil;\n    ctx.strokeColor = nil;\n    ctx.fillOpacity = nil;\n    ctx.strokeOpacity = nil;\n    ctx.linearGradient = nil;\n    ctx.radialGradient = nil;\n    ctx.getWidth = () => getMax(points.map((p) => p[0]));\n    ctx.getHeight = () => getMax(points.map((p) => p[1]));\n    return ctx;\n};\n/**\n * @typedef {Function} MeasureCanvas\n * @returns {{ width: number, height: number }} canvas width and height\n */\n/**\n * Yoga canvas measure function\n *\n * @param {Object} page\n * @param {Object} node\n * @returns {MeasureCanvas} measure canvas\n */\nconst measureCanvas = (page, node) => () => {\n    const imageMargin = getMargin(node);\n    const pagePadding = getPadding(page);\n    // TODO: Check image percentage margins\n    const pageArea = isHeightAuto(page)\n        ? Infinity\n        : (page.box?.height || 0) -\n            pagePadding.paddingTop -\n            pagePadding.paddingBottom -\n            imageMargin.marginTop -\n            imageMargin.marginBottom -\n            SAFETY_HEIGHT;\n    const ctx = measureCtx();\n    node.props.paint(ctx);\n    const width = ctx.getWidth();\n    const height = Math.min(pageArea, ctx.getHeight());\n    return { width, height };\n};\n\nconst isType$1 = (type) => (node) => node.type === type;\nconst isSvg = isType$1(P.Svg);\nconst isText$2 = isType$1(P.Text);\nconst isNote = isType$1(P.Note);\nconst isPage = isType$1(P.Page);\nconst isImage = isType$1(P.Image);\nconst isCanvas = isType$1(P.Canvas);\nconst isTextInstance$1 = isType$1(P.TextInstance);\nconst setNodeHeight = (node) => {\n    const value = isPage(node) ? node.box?.height : node.style?.height;\n    return setHeight(value);\n};\n/**\n * Set styles valeus into yoga node before layout calculation\n *\n * @param node\n */\nconst setYogaValues = (node) => {\n    compose(setNodeHeight(node), setWidth(node.style.width), setMinWidth(node.style.minWidth), setMaxWidth(node.style.maxWidth), setMinHeight(node.style.minHeight), setMaxHeight(node.style.maxHeight), setMarginTop(node.style.marginTop), setMarginRight(node.style.marginRight), setMarginBottom(node.style.marginBottom), setMarginLeft(node.style.marginLeft), setPaddingTop(node.style.paddingTop), setPaddingRight(node.style.paddingRight), setPaddingBottom(node.style.paddingBottom), setPaddingLeft(node.style.paddingLeft), setPositionType(node.style.position), setPositionTop(node.style.top), setPositionRight(node.style.right), setPositionBottom(node.style.bottom), setPositionLeft(node.style.left), setBorderTop(node.style.borderTopWidth), setBorderRight(node.style.borderRightWidth), setBorderBottom(node.style.borderBottomWidth), setBorderLeft(node.style.borderLeftWidth), setDisplay(node.style.display), setFlexDirection(node.style.flexDirection), setAlignSelf(node.style.alignSelf), setAlignContent(node.style.alignContent), setAlignItems(node.style.alignItems), setJustifyContent(node.style.justifyContent), setFlexWrap(node.style.flexWrap), setOverflow(node.style.overflow), setAspectRatio(node.style.aspectRatio), setFlexBasis(node.style.flexBasis), setFlexGrow(node.style.flexGrow), setFlexShrink(node.style.flexShrink), setRowGap(node.style.rowGap), setColumnGap(node.style.columnGap))(node);\n};\n/**\n * Inserts child into parent' yoga node\n *\n * @param parent parent\n * @returns Insert yoga nodes\n */\nconst insertYogaNodes = (parent) => (child) => {\n    parent.insertChild(child.yogaNode, parent.getChildCount());\n    return child;\n};\nconst setMeasureFunc = (node, page, fontStore) => {\n    const { yogaNode } = node;\n    if (isText$2(node)) {\n        yogaNode.setMeasureFunc(measureText(page, node, fontStore));\n    }\n    if (isImage(node)) {\n        yogaNode.setMeasureFunc(measureImage(page, node));\n    }\n    if (isCanvas(node)) {\n        yogaNode.setMeasureFunc(measureCanvas(page, node));\n    }\n    if (isSvg(node)) {\n        yogaNode.setMeasureFunc(measureCanvas$1(page, node));\n    }\n    return node;\n};\nconst isLayoutElement = (node) => !isText$2(node) && !isNote(node) && !isSvg(node);\n/**\n * @typedef {Function} CreateYogaNodes\n * @param {Object} node\n * @returns {Object} node with appended yoga node\n */\n/**\n * Creates and add yoga node to document tree\n * Handles measure function for text and image nodes\n *\n * @returns Create yoga nodes\n */\nconst createYogaNodes = (page, fontStore, yoga) => (node) => {\n    const yogaNode = yoga.node.create();\n    const result = Object.assign({}, node, { yogaNode });\n    setYogaValues(result);\n    if (isLayoutElement(node) && node.children) {\n        const resolveChild = compose(insertYogaNodes(yogaNode), createYogaNodes(page, fontStore, yoga));\n        result.children = node.children.map(resolveChild);\n    }\n    setMeasureFunc(result, page, fontStore);\n    return result;\n};\n/**\n * Performs yoga calculation\n *\n * @param page - Page node\n * @returns Page node\n */\nconst calculateLayout = (page) => {\n    page.yogaNode.calculateLayout();\n    return page;\n};\n/**\n * Saves Yoga layout result into 'box' attribute of node\n *\n * @param node\n * @returns Node with box data\n */\nconst persistDimensions = (node) => {\n    if (isTextInstance$1(node))\n        return node;\n    const box = Object.assign(getPadding(node), getMargin(node), getBorderWidth(node), getPosition(node), getDimension(node));\n    const newNode = Object.assign({}, node, { box });\n    if (!node.children)\n        return newNode;\n    const children = node.children.map(persistDimensions);\n    return Object.assign({}, newNode, { children });\n};\n/**\n * Removes yoga node from document tree\n *\n * @param node\n * @returns Node without yoga node\n */\nconst destroyYogaNodes = (node) => {\n    const newNode = Object.assign({}, node);\n    delete newNode.yogaNode;\n    if (!node.children)\n        return newNode;\n    const children = node.children.map(destroyYogaNodes);\n    return Object.assign({}, newNode, { children });\n};\n/**\n * Free yoga node from document tree\n *\n * @param node\n * @returns Node without yoga node\n */\nconst freeYogaNodes = (node) => {\n    if (node.yogaNode)\n        node.yogaNode.freeRecursive();\n    return node;\n};\n/**\n * Calculates page object layout using Yoga.\n * Takes node values from 'box' and 'style' attributes, and persist them back into 'box'\n * Destroy yoga values at the end.\n *\n * @param page - Object\n * @returns Page object with correct 'box' layout attributes\n */\nconst resolvePageDimensions = (page, fontStore, yoga) => {\n    if (isNil(page))\n        return null;\n    return compose(destroyYogaNodes, freeYogaNodes, persistDimensions, calculateLayout, createYogaNodes(page, fontStore, yoga))(page);\n};\n/**\n * Calculates root object layout using Yoga.\n *\n * @param node - Root object\n * @param fontStore - Font store\n * @returns Root object with correct 'box' layout attributes\n */\nconst resolveDimensions = (node, fontStore) => {\n    if (!node.children)\n        return node;\n    const resolveChild = (child) => resolvePageDimensions(child, fontStore, node.yoga);\n    const children = node.children.map(resolveChild);\n    return Object.assign({}, node, { children });\n};\n\nconst isText$1 = (node) => node.type === P.Text;\n// Prevent splitting elements by low decimal numbers\nconst SAFETY_THRESHOLD = 0.001;\nconst assingChildren = (children, node) => Object.assign({}, node, { children });\nconst getTop = (node) => node.box?.top || 0;\nconst allFixed = (nodes) => nodes.every(isFixed);\nconst isDynamic = (node) => node.props && 'render' in node.props;\nconst relayoutPage = compose(resolveTextLayout, resolvePageDimensions, resolveInheritance, resolvePageStyles);\nconst warnUnavailableSpace = (node) => {\n    console.warn(`Node of type ${node.type} can't wrap between pages and it's bigger than available page height`);\n};\nconst splitNodes = (height, contentArea, nodes) => {\n    const currentChildren = [];\n    const nextChildren = [];\n    for (let i = 0; i < nodes.length; i += 1) {\n        const child = nodes[i];\n        const futureNodes = nodes.slice(i + 1);\n        const futureFixedNodes = futureNodes.filter(isFixed);\n        const nodeTop = getTop(child);\n        const nodeHeight = child.box.height;\n        const isOutside = height <= nodeTop;\n        const shouldBreak$1 = shouldBreak(child, futureNodes, height);\n        const shouldSplit = height + SAFETY_THRESHOLD < nodeTop + nodeHeight;\n        const canWrap = getWrap(child);\n        const fitsInsidePage = nodeHeight <= contentArea;\n        if (isFixed(child)) {\n            nextChildren.push(child);\n            currentChildren.push(child);\n            continue;\n        }\n        if (isOutside) {\n            const box = Object.assign({}, child.box, { top: child.box.top - height });\n            const next = Object.assign({}, child, { box });\n            nextChildren.push(next);\n            continue;\n        }\n        if (!fitsInsidePage && !canWrap) {\n            currentChildren.push(child);\n            nextChildren.push(...futureNodes);\n            warnUnavailableSpace(child);\n            break;\n        }\n        if (shouldBreak$1) {\n            const box = Object.assign({}, child.box, { top: child.box.top - height });\n            const props = Object.assign({}, child.props, {\n                wrap: true,\n                break: false,\n            });\n            const next = Object.assign({}, child, { box, props });\n            currentChildren.push(...futureFixedNodes);\n            nextChildren.push(next, ...futureNodes);\n            break;\n        }\n        if (shouldSplit) {\n            const [currentChild, nextChild] = split(child, height, contentArea);\n            // All children are moved to the next page, it doesn't make sense to show the parent on the current page\n            if (child.children.length > 0 && currentChild.children.length === 0) {\n                // But if the current page is empty then we can just include the parent on the current page\n                if (currentChildren.length === 0) {\n                    currentChildren.push(child, ...futureFixedNodes);\n                    nextChildren.push(...futureNodes);\n                }\n                else {\n                    const box = Object.assign({}, child.box, {\n                        top: child.box.top - height,\n                    });\n                    const next = Object.assign({}, child, { box });\n                    currentChildren.push(...futureFixedNodes);\n                    nextChildren.push(next, ...futureNodes);\n                }\n                break;\n            }\n            if (currentChild)\n                currentChildren.push(currentChild);\n            if (nextChild)\n                nextChildren.push(nextChild);\n            continue;\n        }\n        currentChildren.push(child);\n    }\n    return [currentChildren, nextChildren];\n};\nconst splitChildren = (height, contentArea, node) => {\n    const children = node.children || [];\n    const availableHeight = height - getTop(node);\n    return splitNodes(availableHeight, contentArea, children);\n};\nconst splitView = (node, height, contentArea) => {\n    const [currentNode, nextNode] = splitNode(node, height);\n    const [currentChilds, nextChildren] = splitChildren(height, contentArea, node);\n    return [\n        assingChildren(currentChilds, currentNode),\n        assingChildren(nextChildren, nextNode),\n    ];\n};\nconst split = (node, height, contentArea) => isText$1(node) ? splitText(node, height) : splitView(node, height, contentArea);\nconst shouldResolveDynamicNodes = (node) => {\n    const children = node.children || [];\n    return isDynamic(node) || children.some(shouldResolveDynamicNodes);\n};\nconst resolveDynamicNodes = (props, node) => {\n    const isNodeDynamic = isDynamic(node);\n    // Call render prop on dynamic nodes and append result to children\n    const resolveChildren = (children = []) => {\n        if (isNodeDynamic) {\n            const res = node.props.render(props);\n            return (createInstances(res)\n                .filter(Boolean)\n                // @ts-expect-error rework dynamic nodes. conflicting types\n                .map((n) => resolveDynamicNodes(props, n)));\n        }\n        return children.map((c) => resolveDynamicNodes(props, c));\n    };\n    // We reset dynamic text box so it can be computed again later on\n    const resetHeight = isNodeDynamic && isText$1(node);\n    const box = resetHeight ? { ...node.box, height: 0 } : node.box;\n    const children = resolveChildren(node.children);\n    // @ts-expect-error handle text here specifically\n    const lines = isNodeDynamic ? null : node.lines;\n    return Object.assign({}, node, { box, lines, children });\n};\nconst resolveDynamicPage = (props, page, fontStore, yoga) => {\n    if (shouldResolveDynamicNodes(page)) {\n        const resolvedPage = resolveDynamicNodes(props, page);\n        return relayoutPage(resolvedPage, fontStore, yoga);\n    }\n    return page;\n};\nconst splitPage = (page, pageNumber, fontStore, yoga) => {\n    const wrapArea = getWrapArea(page);\n    const contentArea = getContentArea(page);\n    const dynamicPage = resolveDynamicPage({ pageNumber }, page, fontStore, yoga);\n    const height = page.style.height;\n    const [currentChilds, nextChilds] = splitNodes(wrapArea, contentArea, dynamicPage.children);\n    const relayout = (node) => \n    // @ts-expect-error rework pagination\n    relayoutPage(node, fontStore, yoga);\n    const currentBox = { ...page.box, height };\n    const currentPage = relayout(Object.assign({}, page, { box: currentBox, children: currentChilds }));\n    if (nextChilds.length === 0 || allFixed(nextChilds))\n        return [currentPage, null];\n    const nextBox = omit('height', page.box);\n    const nextProps = omit('bookmark', page.props);\n    const nextPage = relayout(Object.assign({}, page, {\n        props: nextProps,\n        box: nextBox,\n        children: nextChilds,\n    }));\n    return [currentPage, nextPage];\n};\nconst resolvePageIndices = (fontStore, yoga, page, pageNumber, pages) => {\n    const totalPages = pages.length;\n    const props = {\n        totalPages,\n        pageNumber: pageNumber + 1,\n        subPageNumber: page.subPageNumber + 1,\n        subPageTotalPages: page.subPageTotalPages,\n    };\n    return resolveDynamicPage(props, page, fontStore, yoga);\n};\nconst assocSubPageData = (subpages) => {\n    return subpages.map((page, i) => ({\n        ...page,\n        subPageNumber: i,\n        subPageTotalPages: subpages.length,\n    }));\n};\nconst dissocSubPageData = (page) => {\n    return omit(['subPageNumber', 'subPageTotalPages'], page);\n};\nconst paginate = (page, pageNumber, fontStore, yoga) => {\n    if (!page)\n        return [];\n    if (page.props?.wrap === false)\n        return [page];\n    let splittedPage = splitPage(page, pageNumber, fontStore, yoga);\n    const pages = [splittedPage[0]];\n    let nextPage = splittedPage[1];\n    while (nextPage !== null) {\n        splittedPage = splitPage(nextPage, pageNumber + pages.length, fontStore, yoga);\n        pages.push(splittedPage[0]);\n        nextPage = splittedPage[1];\n    }\n    return pages;\n};\n/**\n * Performs pagination. This is the step responsible of breaking the whole document\n * into pages following pagiation rules, such as `fixed`, `break` and dynamic nodes.\n *\n * @param root - Document node\n * @param fontStore - Font store\n * @returns Layout node\n */\nconst resolvePagination = (root, fontStore) => {\n    let pages = [];\n    let pageNumber = 1;\n    for (let i = 0; i < root.children.length; i += 1) {\n        const page = root.children[i];\n        let subpages = paginate(page, pageNumber, fontStore, root.yoga);\n        subpages = assocSubPageData(subpages);\n        pageNumber += subpages.length;\n        pages = pages.concat(subpages);\n    }\n    pages = pages.map((...args) => dissocSubPageData(resolvePageIndices(fontStore, root.yoga, ...args)));\n    return assingChildren(pages, root);\n};\n\n/**\n * Translates page percentage horizontal paddings in fixed ones\n *\n * @param container - Page container\n * @returns Resolve page horizontal padding\n */\nconst resolvePageHorizontalPadding = (container) => (value) => {\n    const match = matchPercent(value);\n    const width = container.width;\n    return match ? match.percent * width : value;\n};\n/**\n * Translates page percentage vertical paddings in fixed ones\n *\n * @param container - Page container\n * @returns Resolve page vertical padding\n */\nconst resolvePageVerticalPadding = (container) => (value) => {\n    const match = matchPercent(value);\n    const height = container.height;\n    return match ? match.percent * height : value;\n};\n/**\n * Translates page percentage paddings in fixed ones\n *\n * @param page\n * @returns Page with fixed paddings\n */\nconst resolvePagePaddings = (page) => {\n    const container = page.style;\n    const style = evolve({\n        paddingTop: resolvePageVerticalPadding(container),\n        paddingLeft: resolvePageHorizontalPadding(container),\n        paddingRight: resolvePageHorizontalPadding(container),\n        paddingBottom: resolvePageVerticalPadding(container),\n    }, page.style);\n    return Object.assign({}, page, { style });\n};\n/**\n * Translates all pages percentage paddings in fixed ones\n * This has to be computed from pages calculated size and not by Yoga\n * because at this point we didn't performed pagination yet.\n *\n * @param root - Document root\n * @returns Document root with translated page paddings\n */\nconst resolvePagesPaddings = (root) => {\n    if (!root.children)\n        return root;\n    const children = root.children.map(resolvePagePaddings);\n    return Object.assign({}, root, { children });\n};\n\nconst resolveRadius = (box) => (value) => {\n    if (!value)\n        return undefined;\n    const match = matchPercent(value);\n    return match ? match.percent * Math.min(box.width, box.height) : value;\n};\n/**\n * Transforms percent border radius into fixed values\n *\n * @param node\n * @returns Node\n */\nconst resolvePercentRadius = (node) => {\n    const style = evolve({\n        borderTopLeftRadius: resolveRadius(node.box),\n        borderTopRightRadius: resolveRadius(node.box),\n        borderBottomRightRadius: resolveRadius(node.box),\n        borderBottomLeftRadius: resolveRadius(node.box),\n    }, node.style || {});\n    const newNode = Object.assign({}, node, { style });\n    if (!node.children)\n        return newNode;\n    const children = node.children.map(resolvePercentRadius);\n    return Object.assign({}, newNode, { children });\n};\n\n/**\n * Transform percent height into fixed\n *\n * @param height\n * @returns Height\n */\nconst transformHeight = (pageArea, height) => {\n    const match = matchPercent(height);\n    return match ? match.percent * pageArea : height;\n};\n/**\n * Get page area (height minus paddings)\n *\n * @param page\n * @returns Page area\n */\nconst getPageArea = (page) => {\n    const pageHeight = page.style.height;\n    const pagePaddingTop = (page.style?.paddingTop || 0);\n    const pagePaddingBottom = (page.style?.paddingBottom || 0);\n    return pageHeight - pagePaddingTop - pagePaddingBottom;\n};\n/**\n * Transform node percent height to fixed\n *\n * @param page\n * @param node\n * @returns Transformed node\n */\nconst resolveNodePercentHeight = (page, node) => {\n    if (isNil(page.style?.height))\n        return node;\n    if (isNil(node.style?.height))\n        return node;\n    const pageArea = getPageArea(page);\n    const height = transformHeight(pageArea, node.style.height);\n    const style = Object.assign({}, node.style, { height });\n    return Object.assign({}, node, { style });\n};\n/**\n * Transform page immediate children with percent height to fixed\n *\n * @param page\n * @returns Transformed page\n */\nconst resolvePagePercentHeight = (page) => {\n    if (!page.children)\n        return page;\n    const resolveChild = (child) => resolveNodePercentHeight(page, child);\n    const children = page.children.map(resolveChild);\n    return Object.assign({}, page, { children });\n};\n/**\n * Transform all page immediate children with percent height to fixed.\n * This is needed for computing correct dimensions on pre-pagination layout.\n *\n * @param root - Document root\n * @returns Transformed document root\n */\nconst resolvePercentHeight = (root) => {\n    if (!root.children)\n        return root;\n    const children = root.children.map(resolvePagePercentHeight);\n    return Object.assign({}, root, { children });\n};\n\nconst isType = (type) => (node) => node.type === type;\nconst isLink = isType(P.Link);\nconst isText = isType(P.Text);\nconst isTextInstance = isType(P.TextInstance);\n/**\n * Checks if node has render prop\n *\n * @param node\n * @returns Has render prop?\n */\nconst hasRenderProp = (node) => 'render' in node.props;\n/**\n * Checks if node is text type (Text or TextInstance)\n *\n * @param node\n * @returns Are all children text instances?\n */\nconst isTextType = (node) => isText(node) || isTextInstance(node);\n/**\n * Checks if is tet link that needs to be wrapped in Text\n *\n * @param node\n * @returns Are all children text instances?\n */\nconst isTextLink = (node) => {\n    const children = node.children || [];\n    // Text string inside a Link\n    if (children.every(isTextInstance))\n        return true;\n    // Text node inside a Link\n    if (children.every(isText))\n        return false;\n    return children.every(isTextType);\n};\n/**\n * Wraps node children inside Text node\n *\n * @param node\n * @returns Node with intermediate Text child\n */\nconst wrapText = (node) => {\n    const textElement = {\n        type: P.Text,\n        props: {},\n        style: {},\n        box: {},\n        children: node.children,\n    };\n    return Object.assign({}, node, { children: [textElement] });\n};\nconst transformLink = (node) => {\n    if (!isLink(node))\n        return node;\n    // If has render prop substitute the instance by a Text, that will\n    // ultimately render the inline Link via the textkit PDF renderer.\n    if (hasRenderProp(node))\n        return Object.assign({}, node, { type: P.Text });\n    // If is a text link (either contains Text or TextInstance), wrap it\n    // inside a Text element so styles are applied correctly\n    if (isTextLink(node))\n        return wrapText(node);\n    return node;\n};\n/**\n * Transforms Link layout to correctly render text and dynamic rendered links\n *\n * @param node\n * @returns Node with link substitution\n */\nconst resolveLinkSubstitution = (node) => {\n    if (!node.children)\n        return node;\n    const resolveChild = compose(transformLink, resolveLinkSubstitution);\n    const children = node.children.map(resolveChild);\n    return Object.assign({}, node, { children });\n};\n\nconst layout = asyncCompose(resolveZIndex, resolveOrigin, resolveAssets, resolvePagination, resolveTextLayout, resolvePercentRadius, resolveDimensions, resolveSvg, resolveAssets, resolveInheritance, resolvePercentHeight, resolvePagesPaddings, resolveStyles, resolveLinkSubstitution, resolveBookmarks, resolvePageSizes, resolveYoga);\n\nexport { layout as default };\n"]},"metadata":{},"sourceType":"module"}