{"ast":null,"code":"import { DecodeStream } from './DecodeStream.js';\nimport { Base } from './Base.js';\n\nclass NumberT extends Base {\n  constructor(type) {\n    let endian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'BE';\n    super();\n    this.type = type;\n    this.endian = endian;\n    this.fn = this.type;\n\n    if (this.type[this.type.length - 1] !== '8') {\n      this.fn += this.endian;\n    }\n  }\n\n  size() {\n    return DecodeStream.TYPES[this.type];\n  }\n\n  decode(stream) {\n    return stream[`read${this.fn}`]();\n  }\n\n  encode(stream, val) {\n    return stream[`write${this.fn}`](val);\n  }\n\n}\n\nexport { NumberT as Number };\nexport const uint8 = new NumberT('UInt8');\nexport const uint16be = new NumberT('UInt16', 'BE');\nexport const uint16 = uint16be;\nexport const uint16le = new NumberT('UInt16', 'LE');\nexport const uint24be = new NumberT('UInt24', 'BE');\nexport const uint24 = uint24be;\nexport const uint24le = new NumberT('UInt24', 'LE');\nexport const uint32be = new NumberT('UInt32', 'BE');\nexport const uint32 = uint32be;\nexport const uint32le = new NumberT('UInt32', 'LE');\nexport const int8 = new NumberT('Int8');\nexport const int16be = new NumberT('Int16', 'BE');\nexport const int16 = int16be;\nexport const int16le = new NumberT('Int16', 'LE');\nexport const int24be = new NumberT('Int24', 'BE');\nexport const int24 = int24be;\nexport const int24le = new NumberT('Int24', 'LE');\nexport const int32be = new NumberT('Int32', 'BE');\nexport const int32 = int32be;\nexport const int32le = new NumberT('Int32', 'LE');\nexport const floatbe = new NumberT('Float', 'BE');\nexport const float = floatbe;\nexport const floatle = new NumberT('Float', 'LE');\nexport const doublebe = new NumberT('Double', 'BE');\nexport const double = doublebe;\nexport const doublele = new NumberT('Double', 'LE');\nexport class Fixed extends NumberT {\n  constructor(size, endian) {\n    let fracBits = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : size >> 1;\n    super(`Int${size}`, endian);\n    this._point = 1 << fracBits;\n  }\n\n  decode(stream) {\n    return super.decode(stream) / this._point;\n  }\n\n  encode(stream, val) {\n    return super.encode(stream, val * this._point | 0);\n  }\n\n}\nexport const fixed16be = new Fixed(16, 'BE');\nexport const fixed16 = fixed16be;\nexport const fixed16le = new Fixed(16, 'LE');\nexport const fixed32be = new Fixed(32, 'BE');\nexport const fixed32 = fixed32be;\nexport const fixed32le = new Fixed(32, 'LE');","map":{"version":3,"sources":["C:/Users/PC/Documents/PROGRAMMING/MERN/frontend/node_modules/restructure/src/Number.js"],"names":["DecodeStream","Base","NumberT","constructor","type","endian","fn","length","size","TYPES","decode","stream","encode","val","Number","uint8","uint16be","uint16","uint16le","uint24be","uint24","uint24le","uint32be","uint32","uint32le","int8","int16be","int16","int16le","int24be","int24","int24le","int32be","int32","int32le","floatbe","float","floatle","doublebe","double","doublele","Fixed","fracBits","_point","fixed16be","fixed16","fixed16le","fixed32be","fixed32","fixed32le"],"mappings":"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","sourcesContent":["import {DecodeStream} from './DecodeStream.js';\nimport {Base} from './Base.js';\n\nclass NumberT extends Base {\n  constructor(type, endian = 'BE') {\n    super();\n    this.type = type;\n    this.endian = endian;\n    this.fn = this.type;\n    if (this.type[this.type.length - 1] !== '8') {\n      this.fn += this.endian;\n    }\n  }\n\n  size() {\n    return DecodeStream.TYPES[this.type];\n  }\n\n  decode(stream) {\n    return stream[`read${this.fn}`]();\n  }\n\n  encode(stream, val) {\n    return stream[`write${this.fn}`](val);\n  }\n}\n\nexport {NumberT as Number};\n\nexport const uint8 = new NumberT('UInt8');\nexport const uint16be = new NumberT('UInt16', 'BE');\nexport const uint16 = uint16be;\nexport const uint16le = new NumberT('UInt16', 'LE');\nexport const uint24be = new NumberT('UInt24', 'BE');\nexport const uint24 = uint24be;\nexport const uint24le = new NumberT('UInt24', 'LE');\nexport const uint32be = new NumberT('UInt32', 'BE');\nexport const uint32 = uint32be;\nexport const uint32le = new NumberT('UInt32', 'LE');\nexport const int8 = new NumberT('Int8');\nexport const int16be = new NumberT('Int16', 'BE');\nexport const int16 = int16be;\nexport const int16le = new NumberT('Int16', 'LE');\nexport const int24be = new NumberT('Int24', 'BE');\nexport const int24 = int24be;\nexport const int24le = new NumberT('Int24', 'LE');\nexport const int32be = new NumberT('Int32', 'BE');\nexport const int32 = int32be;\nexport const int32le = new NumberT('Int32', 'LE');\nexport const floatbe = new NumberT('Float', 'BE');\nexport const float = floatbe;\nexport const floatle = new NumberT('Float', 'LE');\nexport const doublebe = new NumberT('Double', 'BE');\nexport const double = doublebe;\nexport const doublele = new NumberT('Double', 'LE');\n\nexport class Fixed extends NumberT {\n  constructor(size, endian, fracBits = size >> 1) {\n    super(`Int${size}`, endian);\n    this._point = 1 << fracBits;\n  }\n\n  decode(stream) {\n    return super.decode(stream) / this._point;\n  }\n\n  encode(stream, val) {\n    return super.encode(stream, (val * this._point) | 0);\n  }\n}\n\nexport const fixed16be = new Fixed(16, 'BE');\nexport const fixed16 = fixed16be;\nexport const fixed16le = new Fixed(16, 'LE');\nexport const fixed32be = new Fixed(32, 'BE');\nexport const fixed32 = fixed32be;\nexport const fixed32le = new Fixed(32, 'LE');\n"]},"metadata":{},"sourceType":"module"}