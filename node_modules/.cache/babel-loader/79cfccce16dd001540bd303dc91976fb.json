{"ast":null,"code":"import 'is-url';\nimport * as fontkit from 'fontkit';\nimport { PDFFont } from '@react-pdf/pdfkit'; // @ts-expect-error ts being silly\n\nconst STANDARD_FONTS = ['Courier', 'Courier-Bold', 'Courier-Oblique', 'Courier-BoldOblique', 'Helvetica', 'Helvetica-Bold', 'Helvetica-Oblique', 'Helvetica-BoldOblique', 'Times-Roman', 'Times-Bold', 'Times-Italic', 'Times-BoldItalic'];\n\nclass StandardFont {\n  name;\n  src;\n  fullName;\n  familyName;\n  subfamilyName;\n  postscriptName;\n  copyright;\n  version;\n  underlinePosition;\n  underlineThickness;\n  italicAngle;\n  bbox;\n  'OS/2';\n  hhea;\n  numGlyphs;\n  characterSet;\n  availableFeatures;\n  type;\n\n  constructor(src) {\n    this.name = src;\n    this.fullName = src;\n    this.familyName = src;\n    this.subfamilyName = src;\n    this.type = 'STANDARD';\n    this.postscriptName = src;\n    this.availableFeatures = [];\n    this.copyright = '';\n    this.version = 1;\n    this.underlinePosition = -100;\n    this.underlineThickness = 50;\n    this.italicAngle = 0;\n    this.bbox = {};\n    this['OS/2'] = {};\n    this.hhea = {};\n    this.numGlyphs = 0;\n    this.characterSet = [];\n    this.src = PDFFont.open(null, src);\n  }\n\n  encode(str) {\n    return this.src.encode(str);\n  }\n\n  layout(str) {\n    const [encoded, positions] = this.encode(str);\n    const glyphs = encoded.map((g, i) => {\n      const glyph = this.getGlyph(parseInt(g, 16));\n      glyph.advanceWidth = positions[i].advanceWidth;\n      return glyph;\n    });\n    const advanceWidth = positions.reduce((acc, p) => acc + p.advanceWidth, 0);\n    return {\n      positions,\n      stringIndices: positions.map((_, i) => i),\n      glyphs,\n      script: 'latin',\n      language: 'dflt',\n      direction: 'ltr',\n      features: {},\n      advanceWidth,\n      advanceHeight: 0,\n      bbox: undefined\n    };\n  }\n\n  glyphForCodePoint(codePoint) {\n    const glyph = this.getGlyph(codePoint);\n    glyph.advanceWidth = 400;\n    return glyph;\n  }\n\n  getGlyph(id) {\n    return {\n      id,\n      codePoints: [id],\n      isLigature: false,\n      name: this.src.font.characterToGlyph(id),\n      _font: this.src,\n      // @ts-expect-error assign proper value\n      advanceWidth: undefined\n    };\n  }\n\n  hasGlyphForCodePoint(codePoint) {\n    return this.src.font.characterToGlyph(codePoint) !== '.notdef';\n  } // Based on empirical observation\n\n\n  get ascent() {\n    return 900;\n  } // Based on empirical observation\n\n\n  get capHeight() {\n    switch (this.name) {\n      case 'Times-Roman':\n      case 'Times-Bold':\n      case 'Times-Italic':\n      case 'Times-BoldItalic':\n        return 650;\n\n      case 'Courier':\n      case 'Courier-Bold':\n      case 'Courier-Oblique':\n      case 'Courier-BoldOblique':\n        return 550;\n\n      default:\n        return 690;\n    }\n  } // Based on empirical observation\n\n\n  get xHeight() {\n    switch (this.name) {\n      case 'Times-Roman':\n      case 'Times-Bold':\n      case 'Times-Italic':\n      case 'Times-BoldItalic':\n        return 440;\n\n      case 'Courier':\n      case 'Courier-Bold':\n      case 'Courier-Oblique':\n      case 'Courier-BoldOblique':\n        return 390;\n\n      default:\n        return 490;\n    }\n  } // Based on empirical observation\n\n\n  get descent() {\n    switch (this.name) {\n      case 'Times-Roman':\n      case 'Times-Bold':\n      case 'Times-Italic':\n      case 'Times-BoldItalic':\n        return -220;\n\n      case 'Courier':\n      case 'Courier-Bold':\n      case 'Courier-Oblique':\n      case 'Courier-BoldOblique':\n        return -230;\n\n      default:\n        return -200;\n    }\n  }\n\n  get lineGap() {\n    return 0;\n  }\n\n  get unitsPerEm() {\n    return 1000;\n  }\n\n  stringsForGlyph() {\n    throw new Error('Method not implemented.');\n  }\n\n  glyphsForString() {\n    throw new Error('Method not implemented.');\n  }\n\n  widthOfGlyph() {\n    throw new Error('Method not implemented.');\n  }\n\n  getAvailableFeatures() {\n    throw new Error('Method not implemented.');\n  }\n\n  createSubset() {\n    throw new Error('Method not implemented.');\n  }\n\n  getVariation() {\n    throw new Error('Method not implemented.');\n  }\n\n  getFont() {\n    throw new Error('Method not implemented.');\n  }\n\n  getName() {\n    throw new Error('Method not implemented.');\n  }\n\n  setDefaultLanguage() {\n    throw new Error('Method not implemented.');\n  }\n\n}\n\nconst fetchFont = async (src, options) => {\n  const response = await fetch(src, options);\n  const data = await response.arrayBuffer();\n  return new Uint8Array(data);\n};\n\nconst isDataUrl = dataUrl => {\n  const header = dataUrl.split(',')[0];\n  const hasDataPrefix = header.substring(0, 5) === 'data:';\n  const hasBase64Prefix = header.split(';')[1] === 'base64';\n  return hasDataPrefix && hasBase64Prefix;\n};\n\nclass FontSource {\n  src;\n  fontFamily;\n  fontStyle;\n  fontWeight;\n  data;\n  options;\n  loadResultPromise;\n\n  constructor(src, fontFamily, fontStyle, fontWeight, options) {\n    this.src = src;\n    this.fontFamily = fontFamily;\n    this.fontStyle = fontStyle || 'normal';\n    this.fontWeight = fontWeight || 400;\n    this.data = null;\n    this.options = options || {};\n    this.loadResultPromise = null;\n  }\n\n  async _load() {\n    const {\n      postscriptName\n    } = this.options;\n    let data = null;\n\n    if (STANDARD_FONTS.includes(this.src)) {\n      data = new StandardFont(this.src);\n    } else if (isDataUrl(this.src)) {\n      const raw = this.src.split(',')[1];\n      const uint8Array = new Uint8Array(atob(raw).split('').map(c => c.charCodeAt(0)));\n      data = fontkit.create(uint8Array, postscriptName);\n    } else {\n      const {\n        headers,\n        body,\n        method = 'GET'\n      } = this.options;\n      const buffer = await fetchFont(this.src, {\n        method,\n        body,\n        headers\n      });\n      data = fontkit.create(buffer, postscriptName);\n    }\n\n    if (data && 'fonts' in data) {\n      throw new Error('Font collection is not supported');\n    }\n\n    this.data = data;\n  }\n\n  async load() {\n    if (this.loadResultPromise === null) {\n      this.loadResultPromise = this._load();\n    }\n\n    return this.loadResultPromise;\n  }\n\n}\n\nconst FONT_WEIGHTS = {\n  thin: 100,\n  hairline: 100,\n  ultralight: 200,\n  extralight: 200,\n  light: 300,\n  normal: 400,\n  medium: 500,\n  semibold: 600,\n  demibold: 600,\n  bold: 700,\n  ultrabold: 800,\n  extrabold: 800,\n  heavy: 900,\n  black: 900\n};\n\nconst resolveFontWeight = value => {\n  return typeof value === 'string' ? FONT_WEIGHTS[value] : value;\n};\n\nconst sortByFontWeight = (a, b) => a.fontWeight - b.fontWeight;\n\nclass FontFamily {\n  family;\n  sources;\n\n  static create(family) {\n    return new FontFamily(family);\n  }\n\n  constructor(family) {\n    this.family = family;\n    this.sources = [];\n  }\n\n  register(_ref) {\n    let {\n      src,\n      fontWeight,\n      fontStyle,\n      ...options\n    } = _ref;\n    const numericFontWeight = fontWeight ? resolveFontWeight(fontWeight) : undefined;\n    this.sources.push(new FontSource(src, this.family, fontStyle, numericFontWeight, options));\n  }\n\n  resolve(descriptor) {\n    const {\n      fontWeight = 400,\n      fontStyle = 'normal'\n    } = descriptor;\n    const styleSources = this.sources.filter(s => s.fontStyle === fontStyle);\n    const exactFit = styleSources.find(s => s.fontWeight === fontWeight);\n    if (exactFit) return exactFit; // Weight resolution. https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight#Fallback_weights\n\n    let font = null;\n    const numericFontWeight = resolveFontWeight(fontWeight);\n\n    if (numericFontWeight >= 400 && numericFontWeight <= 500) {\n      const leftOffset = styleSources.filter(s => s.fontWeight <= numericFontWeight);\n      const rightOffset = styleSources.filter(s => s.fontWeight > 500);\n      const fit = styleSources.filter(s => s.fontWeight >= numericFontWeight && s.fontWeight < 500);\n      font = fit[0] || leftOffset[leftOffset.length - 1] || rightOffset[0];\n    }\n\n    const lt = styleSources.filter(s => s.fontWeight < numericFontWeight).sort(sortByFontWeight);\n    const gt = styleSources.filter(s => s.fontWeight > numericFontWeight).sort(sortByFontWeight);\n\n    if (numericFontWeight < 400) {\n      font = lt[lt.length - 1] || gt[0];\n    }\n\n    if (numericFontWeight > 500) {\n      font = gt[0] || lt[lt.length - 1];\n    }\n\n    if (!font) {\n      throw new Error(`Could not resolve font for ${this.family}, fontWeight ${fontWeight}, fontStyle ${fontStyle}`);\n    }\n\n    return font;\n  }\n\n}\n\nclass FontStore {\n  fontFamilies = {};\n  emojiSource = null;\n\n  constructor() {\n    this.register({\n      family: 'Helvetica',\n      fonts: [{\n        src: 'Helvetica',\n        fontStyle: 'normal',\n        fontWeight: 400\n      }, {\n        src: 'Helvetica-Bold',\n        fontStyle: 'normal',\n        fontWeight: 700\n      }, {\n        src: 'Helvetica-Oblique',\n        fontStyle: 'italic',\n        fontWeight: 400\n      }, {\n        src: 'Helvetica-BoldOblique',\n        fontStyle: 'italic',\n        fontWeight: 700\n      }]\n    });\n    this.register({\n      family: 'Courier',\n      fonts: [{\n        src: 'Courier',\n        fontStyle: 'normal',\n        fontWeight: 400\n      }, {\n        src: 'Courier-Bold',\n        fontStyle: 'normal',\n        fontWeight: 700\n      }, {\n        src: 'Courier-Oblique',\n        fontStyle: 'italic',\n        fontWeight: 400\n      }, {\n        src: 'Courier-BoldOblique',\n        fontStyle: 'italic',\n        fontWeight: 700\n      }]\n    });\n    this.register({\n      family: 'Times-Roman',\n      fonts: [{\n        src: 'Times-Roman',\n        fontStyle: 'normal',\n        fontWeight: 400\n      }, {\n        src: 'Times-Bold',\n        fontStyle: 'normal',\n        fontWeight: 700\n      }, {\n        src: 'Times-Italic',\n        fontStyle: 'italic',\n        fontWeight: 400\n      }, {\n        src: 'Times-BoldItalic',\n        fontStyle: 'italic',\n        fontWeight: 700\n      }]\n    }); // For backwards compatibility\n\n    this.register({\n      family: 'Helvetica-Bold',\n      src: 'Helvetica-Bold'\n    });\n    this.register({\n      family: 'Helvetica-Oblique',\n      src: 'Helvetica-Oblique'\n    });\n    this.register({\n      family: 'Helvetica-BoldOblique',\n      src: 'Helvetica-BoldOblique'\n    });\n    this.register({\n      family: 'Courier-Bold',\n      src: 'Courier-Bold'\n    });\n    this.register({\n      family: 'Courier-Oblique',\n      src: 'Courier-Oblique'\n    });\n    this.register({\n      family: 'Courier-BoldOblique',\n      src: 'Courier-BoldOblique'\n    });\n    this.register({\n      family: 'Times-Bold',\n      src: 'Times-Bold'\n    });\n    this.register({\n      family: 'Times-Italic',\n      src: 'Times-Italic'\n    });\n    this.register({\n      family: 'Times-BoldItalic',\n      src: 'Times-BoldItalic'\n    }); // Load default fonts\n\n    this.load({\n      fontFamily: 'Helvetica',\n      fontStyle: 'normal',\n      fontWeight: 400\n    });\n    this.load({\n      fontFamily: 'Helvetica',\n      fontStyle: 'normal',\n      fontWeight: 700\n    });\n    this.load({\n      fontFamily: 'Helvetica',\n      fontStyle: 'italic',\n      fontWeight: 400\n    });\n    this.load({\n      fontFamily: 'Helvetica',\n      fontStyle: 'italic',\n      fontWeight: 700\n    });\n  }\n\n  hyphenationCallback = null;\n  register = data => {\n    const {\n      family\n    } = data;\n\n    if (!this.fontFamilies[family]) {\n      this.fontFamilies[family] = FontFamily.create(family);\n    } // Bulk loading\n\n\n    if ('fonts' in data) {\n      for (let i = 0; i < data.fonts.length; i += 1) {\n        const {\n          src,\n          fontStyle,\n          fontWeight,\n          ...options\n        } = data.fonts[i];\n        this.fontFamilies[family].register({\n          src,\n          fontStyle,\n          fontWeight,\n          ...options\n        });\n      }\n    } else {\n      const {\n        src,\n        fontStyle,\n        fontWeight,\n        ...options\n      } = data;\n      this.fontFamilies[family].register({\n        src,\n        fontStyle,\n        fontWeight,\n        ...options\n      });\n    }\n  };\n  registerEmojiSource = emojiSource => {\n    this.emojiSource = emojiSource;\n  };\n  registerHyphenationCallback = callback => {\n    this.hyphenationCallback = callback;\n  };\n  getFont = descriptor => {\n    const {\n      fontFamily\n    } = descriptor;\n\n    if (!this.fontFamilies[fontFamily]) {\n      throw new Error(`Font family not registered: ${fontFamily}. Please register it calling Font.register() method.`);\n    }\n\n    return this.fontFamilies[fontFamily].resolve(descriptor);\n  };\n  load = async descriptor => {\n    const font = this.getFont(descriptor);\n    if (font) await font.load();\n  };\n  reset = () => {\n    const keys = Object.keys(this.fontFamilies);\n\n    for (let i = 0; i < keys.length; i += 1) {\n      const key = keys[i];\n\n      for (let j = 0; j < this.fontFamilies[key].sources.length; j++) {\n        const fontSource = this.fontFamilies[key].sources[j];\n        fontSource.data = null;\n      }\n    }\n  };\n  clear = () => {\n    this.fontFamilies = {};\n  };\n  getRegisteredFonts = () => this.fontFamilies;\n  getEmojiSource = () => this.emojiSource;\n  getHyphenationCallback = () => this.hyphenationCallback;\n  getRegisteredFontFamilies = () => Object.keys(this.fontFamilies);\n}\n\nexport { FontStore as default };","map":{"version":3,"sources":["C:/Users/PC/Documents/PROGRAMMING/MERN/frontend/node_modules/@react-pdf/font/lib/index.browser.js"],"names":["fontkit","PDFFont","STANDARD_FONTS","StandardFont","name","src","fullName","familyName","subfamilyName","postscriptName","copyright","version","underlinePosition","underlineThickness","italicAngle","bbox","hhea","numGlyphs","characterSet","availableFeatures","type","constructor","open","encode","str","layout","encoded","positions","glyphs","map","g","i","glyph","getGlyph","parseInt","advanceWidth","reduce","acc","p","stringIndices","_","script","language","direction","features","advanceHeight","undefined","glyphForCodePoint","codePoint","id","codePoints","isLigature","font","characterToGlyph","_font","hasGlyphForCodePoint","ascent","capHeight","xHeight","descent","lineGap","unitsPerEm","stringsForGlyph","Error","glyphsForString","widthOfGlyph","getAvailableFeatures","createSubset","getVariation","getFont","getName","setDefaultLanguage","fetchFont","options","response","fetch","data","arrayBuffer","Uint8Array","isDataUrl","dataUrl","header","split","hasDataPrefix","substring","hasBase64Prefix","FontSource","fontFamily","fontStyle","fontWeight","loadResultPromise","_load","includes","raw","uint8Array","atob","c","charCodeAt","create","headers","body","method","buffer","load","FONT_WEIGHTS","thin","hairline","ultralight","extralight","light","normal","medium","semibold","demibold","bold","ultrabold","extrabold","heavy","black","resolveFontWeight","value","sortByFontWeight","a","b","FontFamily","family","sources","register","numericFontWeight","push","resolve","descriptor","styleSources","filter","s","exactFit","find","leftOffset","rightOffset","fit","length","lt","sort","gt","FontStore","fontFamilies","emojiSource","fonts","hyphenationCallback","registerEmojiSource","registerHyphenationCallback","callback","reset","keys","Object","key","j","fontSource","clear","getRegisteredFonts","getEmojiSource","getHyphenationCallback","getRegisteredFontFamilies","default"],"mappings":"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","sourcesContent":["import 'is-url';\nimport * as fontkit from 'fontkit';\nimport { PDFFont } from '@react-pdf/pdfkit';\n\n// @ts-expect-error ts being silly\nconst STANDARD_FONTS = [\n    'Courier',\n    'Courier-Bold',\n    'Courier-Oblique',\n    'Courier-BoldOblique',\n    'Helvetica',\n    'Helvetica-Bold',\n    'Helvetica-Oblique',\n    'Helvetica-BoldOblique',\n    'Times-Roman',\n    'Times-Bold',\n    'Times-Italic',\n    'Times-BoldItalic',\n];\nclass StandardFont {\n    name;\n    src;\n    fullName;\n    familyName;\n    subfamilyName;\n    postscriptName;\n    copyright;\n    version;\n    underlinePosition;\n    underlineThickness;\n    italicAngle;\n    bbox;\n    'OS/2';\n    hhea;\n    numGlyphs;\n    characterSet;\n    availableFeatures;\n    type;\n    constructor(src) {\n        this.name = src;\n        this.fullName = src;\n        this.familyName = src;\n        this.subfamilyName = src;\n        this.type = 'STANDARD';\n        this.postscriptName = src;\n        this.availableFeatures = [];\n        this.copyright = '';\n        this.version = 1;\n        this.underlinePosition = -100;\n        this.underlineThickness = 50;\n        this.italicAngle = 0;\n        this.bbox = {};\n        this['OS/2'] = {};\n        this.hhea = {};\n        this.numGlyphs = 0;\n        this.characterSet = [];\n        this.src = PDFFont.open(null, src);\n    }\n    encode(str) {\n        return this.src.encode(str);\n    }\n    layout(str) {\n        const [encoded, positions] = this.encode(str);\n        const glyphs = encoded.map((g, i) => {\n            const glyph = this.getGlyph(parseInt(g, 16));\n            glyph.advanceWidth = positions[i].advanceWidth;\n            return glyph;\n        });\n        const advanceWidth = positions.reduce((acc, p) => acc + p.advanceWidth, 0);\n        return {\n            positions,\n            stringIndices: positions.map((_, i) => i),\n            glyphs,\n            script: 'latin',\n            language: 'dflt',\n            direction: 'ltr',\n            features: {},\n            advanceWidth,\n            advanceHeight: 0,\n            bbox: undefined,\n        };\n    }\n    glyphForCodePoint(codePoint) {\n        const glyph = this.getGlyph(codePoint);\n        glyph.advanceWidth = 400;\n        return glyph;\n    }\n    getGlyph(id) {\n        return {\n            id,\n            codePoints: [id],\n            isLigature: false,\n            name: this.src.font.characterToGlyph(id),\n            _font: this.src,\n            // @ts-expect-error assign proper value\n            advanceWidth: undefined,\n        };\n    }\n    hasGlyphForCodePoint(codePoint) {\n        return this.src.font.characterToGlyph(codePoint) !== '.notdef';\n    }\n    // Based on empirical observation\n    get ascent() {\n        return 900;\n    }\n    // Based on empirical observation\n    get capHeight() {\n        switch (this.name) {\n            case 'Times-Roman':\n            case 'Times-Bold':\n            case 'Times-Italic':\n            case 'Times-BoldItalic':\n                return 650;\n            case 'Courier':\n            case 'Courier-Bold':\n            case 'Courier-Oblique':\n            case 'Courier-BoldOblique':\n                return 550;\n            default:\n                return 690;\n        }\n    }\n    // Based on empirical observation\n    get xHeight() {\n        switch (this.name) {\n            case 'Times-Roman':\n            case 'Times-Bold':\n            case 'Times-Italic':\n            case 'Times-BoldItalic':\n                return 440;\n            case 'Courier':\n            case 'Courier-Bold':\n            case 'Courier-Oblique':\n            case 'Courier-BoldOblique':\n                return 390;\n            default:\n                return 490;\n        }\n    }\n    // Based on empirical observation\n    get descent() {\n        switch (this.name) {\n            case 'Times-Roman':\n            case 'Times-Bold':\n            case 'Times-Italic':\n            case 'Times-BoldItalic':\n                return -220;\n            case 'Courier':\n            case 'Courier-Bold':\n            case 'Courier-Oblique':\n            case 'Courier-BoldOblique':\n                return -230;\n            default:\n                return -200;\n        }\n    }\n    get lineGap() {\n        return 0;\n    }\n    get unitsPerEm() {\n        return 1000;\n    }\n    stringsForGlyph() {\n        throw new Error('Method not implemented.');\n    }\n    glyphsForString() {\n        throw new Error('Method not implemented.');\n    }\n    widthOfGlyph() {\n        throw new Error('Method not implemented.');\n    }\n    getAvailableFeatures() {\n        throw new Error('Method not implemented.');\n    }\n    createSubset() {\n        throw new Error('Method not implemented.');\n    }\n    getVariation() {\n        throw new Error('Method not implemented.');\n    }\n    getFont() {\n        throw new Error('Method not implemented.');\n    }\n    getName() {\n        throw new Error('Method not implemented.');\n    }\n    setDefaultLanguage() {\n        throw new Error('Method not implemented.');\n    }\n}\n\nconst fetchFont = async (src, options) => {\n    const response = await fetch(src, options);\n    const data = await response.arrayBuffer();\n    return new Uint8Array(data);\n};\nconst isDataUrl = (dataUrl) => {\n    const header = dataUrl.split(',')[0];\n    const hasDataPrefix = header.substring(0, 5) === 'data:';\n    const hasBase64Prefix = header.split(';')[1] === 'base64';\n    return hasDataPrefix && hasBase64Prefix;\n};\nclass FontSource {\n    src;\n    fontFamily;\n    fontStyle;\n    fontWeight;\n    data;\n    options;\n    loadResultPromise;\n    constructor(src, fontFamily, fontStyle, fontWeight, options) {\n        this.src = src;\n        this.fontFamily = fontFamily;\n        this.fontStyle = fontStyle || 'normal';\n        this.fontWeight = fontWeight || 400;\n        this.data = null;\n        this.options = options || {};\n        this.loadResultPromise = null;\n    }\n    async _load() {\n        const { postscriptName } = this.options;\n        let data = null;\n        if (STANDARD_FONTS.includes(this.src)) {\n            data = new StandardFont(this.src);\n        }\n        else if (isDataUrl(this.src)) {\n            const raw = this.src.split(',')[1];\n            const uint8Array = new Uint8Array(atob(raw)\n                .split('')\n                .map((c) => c.charCodeAt(0)));\n            data = fontkit.create(uint8Array, postscriptName);\n        }\n        else {\n            const { headers, body, method = 'GET' } = this.options;\n            const buffer = await fetchFont(this.src, { method, body, headers });\n            data = fontkit.create(buffer, postscriptName);\n        }\n        if (data && 'fonts' in data) {\n            throw new Error('Font collection is not supported');\n        }\n        this.data = data;\n    }\n    async load() {\n        if (this.loadResultPromise === null) {\n            this.loadResultPromise = this._load();\n        }\n        return this.loadResultPromise;\n    }\n}\n\nconst FONT_WEIGHTS = {\n    thin: 100,\n    hairline: 100,\n    ultralight: 200,\n    extralight: 200,\n    light: 300,\n    normal: 400,\n    medium: 500,\n    semibold: 600,\n    demibold: 600,\n    bold: 700,\n    ultrabold: 800,\n    extrabold: 800,\n    heavy: 900,\n    black: 900,\n};\nconst resolveFontWeight = (value) => {\n    return typeof value === 'string' ? FONT_WEIGHTS[value] : value;\n};\nconst sortByFontWeight = (a, b) => a.fontWeight - b.fontWeight;\nclass FontFamily {\n    family;\n    sources;\n    static create(family) {\n        return new FontFamily(family);\n    }\n    constructor(family) {\n        this.family = family;\n        this.sources = [];\n    }\n    register({ src, fontWeight, fontStyle, ...options }) {\n        const numericFontWeight = fontWeight\n            ? resolveFontWeight(fontWeight)\n            : undefined;\n        this.sources.push(new FontSource(src, this.family, fontStyle, numericFontWeight, options));\n    }\n    resolve(descriptor) {\n        const { fontWeight = 400, fontStyle = 'normal' } = descriptor;\n        const styleSources = this.sources.filter((s) => s.fontStyle === fontStyle);\n        const exactFit = styleSources.find((s) => s.fontWeight === fontWeight);\n        if (exactFit)\n            return exactFit;\n        // Weight resolution. https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight#Fallback_weights\n        let font = null;\n        const numericFontWeight = resolveFontWeight(fontWeight);\n        if (numericFontWeight >= 400 && numericFontWeight <= 500) {\n            const leftOffset = styleSources.filter((s) => s.fontWeight <= numericFontWeight);\n            const rightOffset = styleSources.filter((s) => s.fontWeight > 500);\n            const fit = styleSources.filter((s) => s.fontWeight >= numericFontWeight && s.fontWeight < 500);\n            font = fit[0] || leftOffset[leftOffset.length - 1] || rightOffset[0];\n        }\n        const lt = styleSources\n            .filter((s) => s.fontWeight < numericFontWeight)\n            .sort(sortByFontWeight);\n        const gt = styleSources\n            .filter((s) => s.fontWeight > numericFontWeight)\n            .sort(sortByFontWeight);\n        if (numericFontWeight < 400) {\n            font = lt[lt.length - 1] || gt[0];\n        }\n        if (numericFontWeight > 500) {\n            font = gt[0] || lt[lt.length - 1];\n        }\n        if (!font) {\n            throw new Error(`Could not resolve font for ${this.family}, fontWeight ${fontWeight}, fontStyle ${fontStyle}`);\n        }\n        return font;\n    }\n}\n\nclass FontStore {\n    fontFamilies = {};\n    emojiSource = null;\n    constructor() {\n        this.register({\n            family: 'Helvetica',\n            fonts: [\n                { src: 'Helvetica', fontStyle: 'normal', fontWeight: 400 },\n                { src: 'Helvetica-Bold', fontStyle: 'normal', fontWeight: 700 },\n                { src: 'Helvetica-Oblique', fontStyle: 'italic', fontWeight: 400 },\n                { src: 'Helvetica-BoldOblique', fontStyle: 'italic', fontWeight: 700 },\n            ],\n        });\n        this.register({\n            family: 'Courier',\n            fonts: [\n                { src: 'Courier', fontStyle: 'normal', fontWeight: 400 },\n                { src: 'Courier-Bold', fontStyle: 'normal', fontWeight: 700 },\n                { src: 'Courier-Oblique', fontStyle: 'italic', fontWeight: 400 },\n                { src: 'Courier-BoldOblique', fontStyle: 'italic', fontWeight: 700 },\n            ],\n        });\n        this.register({\n            family: 'Times-Roman',\n            fonts: [\n                { src: 'Times-Roman', fontStyle: 'normal', fontWeight: 400 },\n                { src: 'Times-Bold', fontStyle: 'normal', fontWeight: 700 },\n                { src: 'Times-Italic', fontStyle: 'italic', fontWeight: 400 },\n                { src: 'Times-BoldItalic', fontStyle: 'italic', fontWeight: 700 },\n            ],\n        });\n        // For backwards compatibility\n        this.register({\n            family: 'Helvetica-Bold',\n            src: 'Helvetica-Bold',\n        });\n        this.register({\n            family: 'Helvetica-Oblique',\n            src: 'Helvetica-Oblique',\n        });\n        this.register({\n            family: 'Helvetica-BoldOblique',\n            src: 'Helvetica-BoldOblique',\n        });\n        this.register({\n            family: 'Courier-Bold',\n            src: 'Courier-Bold',\n        });\n        this.register({\n            family: 'Courier-Oblique',\n            src: 'Courier-Oblique',\n        });\n        this.register({\n            family: 'Courier-BoldOblique',\n            src: 'Courier-BoldOblique',\n        });\n        this.register({\n            family: 'Times-Bold',\n            src: 'Times-Bold',\n        });\n        this.register({\n            family: 'Times-Italic',\n            src: 'Times-Italic',\n        });\n        this.register({\n            family: 'Times-BoldItalic',\n            src: 'Times-BoldItalic',\n        });\n        // Load default fonts\n        this.load({\n            fontFamily: 'Helvetica',\n            fontStyle: 'normal',\n            fontWeight: 400,\n        });\n        this.load({\n            fontFamily: 'Helvetica',\n            fontStyle: 'normal',\n            fontWeight: 700,\n        });\n        this.load({\n            fontFamily: 'Helvetica',\n            fontStyle: 'italic',\n            fontWeight: 400,\n        });\n        this.load({\n            fontFamily: 'Helvetica',\n            fontStyle: 'italic',\n            fontWeight: 700,\n        });\n    }\n    hyphenationCallback = null;\n    register = (data) => {\n        const { family } = data;\n        if (!this.fontFamilies[family]) {\n            this.fontFamilies[family] = FontFamily.create(family);\n        }\n        // Bulk loading\n        if ('fonts' in data) {\n            for (let i = 0; i < data.fonts.length; i += 1) {\n                const { src, fontStyle, fontWeight, ...options } = data.fonts[i];\n                this.fontFamilies[family].register({\n                    src,\n                    fontStyle,\n                    fontWeight,\n                    ...options,\n                });\n            }\n        }\n        else {\n            const { src, fontStyle, fontWeight, ...options } = data;\n            this.fontFamilies[family].register({\n                src,\n                fontStyle,\n                fontWeight,\n                ...options,\n            });\n        }\n    };\n    registerEmojiSource = (emojiSource) => {\n        this.emojiSource = emojiSource;\n    };\n    registerHyphenationCallback = (callback) => {\n        this.hyphenationCallback = callback;\n    };\n    getFont = (descriptor) => {\n        const { fontFamily } = descriptor;\n        if (!this.fontFamilies[fontFamily]) {\n            throw new Error(`Font family not registered: ${fontFamily}. Please register it calling Font.register() method.`);\n        }\n        return this.fontFamilies[fontFamily].resolve(descriptor);\n    };\n    load = async (descriptor) => {\n        const font = this.getFont(descriptor);\n        if (font)\n            await font.load();\n    };\n    reset = () => {\n        const keys = Object.keys(this.fontFamilies);\n        for (let i = 0; i < keys.length; i += 1) {\n            const key = keys[i];\n            for (let j = 0; j < this.fontFamilies[key].sources.length; j++) {\n                const fontSource = this.fontFamilies[key].sources[j];\n                fontSource.data = null;\n            }\n        }\n    };\n    clear = () => {\n        this.fontFamilies = {};\n    };\n    getRegisteredFonts = () => this.fontFamilies;\n    getEmojiSource = () => this.emojiSource;\n    getHyphenationCallback = () => this.hyphenationCallback;\n    getRegisteredFontFamilies = () => Object.keys(this.fontFamilies);\n}\n\nexport { FontStore as default };\n"]},"metadata":{},"sourceType":"module"}