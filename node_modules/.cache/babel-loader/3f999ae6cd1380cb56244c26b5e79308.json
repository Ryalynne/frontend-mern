{"ast":null,"code":"import { Base } from './Base.js';\nimport * as utils from './utils.js';\nexport class Struct extends Base {\n  constructor() {\n    let fields = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    this.fields = fields;\n  }\n\n  decode(stream, parent) {\n    let length = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n    const res = this._setup(stream, parent, length);\n\n    this._parseFields(stream, res, this.fields);\n\n    if (this.process != null) {\n      this.process.call(res, stream);\n    }\n\n    return res;\n  }\n\n  _setup(stream, parent, length) {\n    const res = {}; // define hidden properties\n\n    Object.defineProperties(res, {\n      parent: {\n        value: parent\n      },\n      _startOffset: {\n        value: stream.pos\n      },\n      _currentOffset: {\n        value: 0,\n        writable: true\n      },\n      _length: {\n        value: length\n      }\n    });\n    return res;\n  }\n\n  _parseFields(stream, res, fields) {\n    for (let key in fields) {\n      var val;\n      const type = fields[key];\n\n      if (typeof type === 'function') {\n        val = type.call(res, res);\n      } else {\n        val = type.decode(stream, res);\n      }\n\n      if (val !== undefined) {\n        if (val instanceof utils.PropertyDescriptor) {\n          Object.defineProperty(res, key, val);\n        } else {\n          res[key] = val;\n        }\n      }\n\n      res._currentOffset = stream.pos - res._startOffset;\n    }\n  }\n\n  size(val, parent) {\n    let includePointers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n    if (val == null) {\n      val = {};\n    }\n\n    const ctx = {\n      parent,\n      val,\n      pointerSize: 0\n    };\n\n    if (this.preEncode != null) {\n      this.preEncode.call(val);\n    }\n\n    let size = 0;\n\n    for (let key in this.fields) {\n      const type = this.fields[key];\n\n      if (type.size != null) {\n        size += type.size(val[key], ctx);\n      }\n    }\n\n    if (includePointers) {\n      size += ctx.pointerSize;\n    }\n\n    return size;\n  }\n\n  encode(stream, val, parent) {\n    let type;\n\n    if (this.preEncode != null) {\n      this.preEncode.call(val, stream);\n    }\n\n    const ctx = {\n      pointers: [],\n      startOffset: stream.pos,\n      parent,\n      val,\n      pointerSize: 0\n    };\n    ctx.pointerOffset = stream.pos + this.size(val, ctx, false);\n\n    for (let key in this.fields) {\n      type = this.fields[key];\n\n      if (type.encode != null) {\n        type.encode(stream, val[key], ctx);\n      }\n    }\n\n    let i = 0;\n\n    while (i < ctx.pointers.length) {\n      const ptr = ctx.pointers[i++];\n      ptr.type.encode(stream, ptr.val, ptr.parent);\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/PC/Documents/PROGRAMMING/MERN/frontend/node_modules/restructure/src/Struct.js"],"names":["Base","utils","Struct","constructor","fields","decode","stream","parent","length","res","_setup","_parseFields","process","call","Object","defineProperties","value","_startOffset","pos","_currentOffset","writable","_length","key","val","type","undefined","PropertyDescriptor","defineProperty","size","includePointers","ctx","pointerSize","preEncode","encode","pointers","startOffset","pointerOffset","i","ptr"],"mappings":"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","sourcesContent":["import {Base} from './Base.js';\nimport * as utils from './utils.js';\n\nexport class Struct extends Base {\n  constructor(fields = {}) {\n    super();\n    this.fields = fields;\n  }\n\n  decode(stream, parent, length = 0) {\n    const res = this._setup(stream, parent, length);\n    this._parseFields(stream, res, this.fields);\n\n    if (this.process != null) {\n      this.process.call(res, stream);\n    }\n    return res;\n  }\n\n  _setup(stream, parent, length) {\n    const res = {};\n\n    // define hidden properties\n    Object.defineProperties(res, {\n      parent:         { value: parent },\n      _startOffset:   { value: stream.pos },\n      _currentOffset: { value: 0, writable: true },\n      _length:        { value: length }\n    });\n\n    return res;\n  }\n\n  _parseFields(stream, res, fields) {\n    for (let key in fields) {\n      var val;\n      const type = fields[key];\n      if (typeof type === 'function') {\n        val = type.call(res, res);\n      } else {\n        val = type.decode(stream, res);\n      }\n\n      if (val !== undefined) {\n        if (val instanceof utils.PropertyDescriptor) {\n          Object.defineProperty(res, key, val);\n        } else {\n          res[key] = val;\n        }\n      }\n\n      res._currentOffset = stream.pos - res._startOffset;\n    }\n\n  }\n\n  size(val, parent, includePointers = true) {\n    if (val == null) { val = {}; }\n    const ctx = {\n      parent,\n      val,\n      pointerSize: 0\n    };\n\n    if (this.preEncode != null) {\n      this.preEncode.call(val);\n    }\n\n    let size = 0;\n    for (let key in this.fields) {\n      const type = this.fields[key];\n      if (type.size != null) {\n        size += type.size(val[key], ctx);\n      }\n    }\n\n    if (includePointers) {\n      size += ctx.pointerSize;\n    }\n\n    return size;\n  }\n\n  encode(stream, val, parent) {\n    let type;\n    if (this.preEncode != null) {\n      this.preEncode.call(val, stream);\n    }\n\n    const ctx = {\n      pointers: [],\n      startOffset: stream.pos,\n      parent,\n      val,\n      pointerSize: 0\n    };\n\n    ctx.pointerOffset = stream.pos + this.size(val, ctx, false);\n\n    for (let key in this.fields) {\n      type = this.fields[key];\n      if (type.encode != null) {\n        type.encode(stream, val[key], ctx);\n      }\n    }\n\n    let i = 0;\n    while (i < ctx.pointers.length) {\n      const ptr = ctx.pointers[i++];\n      ptr.type.encode(stream, ptr.val, ptr.parent);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}