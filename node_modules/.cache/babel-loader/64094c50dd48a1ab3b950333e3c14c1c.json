{"ast":null,"code":"import { DecodeStream as $6uUbQ$DecodeStream, Struct as $6uUbQ$Struct, String as $6uUbQ$String, uint32 as $6uUbQ$uint32, Pointer as $6uUbQ$Pointer, uint16 as $6uUbQ$uint16, Array as $6uUbQ$Array, VoidPointer as $6uUbQ$VoidPointer, int16 as $6uUbQ$int16, uint24 as $6uUbQ$uint24, uint8 as $6uUbQ$uint8, VersionedStruct as $6uUbQ$VersionedStruct, LazyArray as $6uUbQ$LazyArray, Reserved as $6uUbQ$Reserved, int32 as $6uUbQ$int32, Bitfield as $6uUbQ$Bitfield, fixed32 as $6uUbQ$fixed32, Buffer as $6uUbQ$Buffer, Number as $6uUbQ$Number, resolveLength as $6uUbQ$resolveLength, fixed16 as $6uUbQ$fixed16, PropertyDescriptor as $6uUbQ$PropertyDescriptor, Fixed as $6uUbQ$Fixed, int8 as $6uUbQ$int8, Optional as $6uUbQ$Optional, EncodeStream as $6uUbQ$EncodeStream } from \"restructure\";\nimport { _ as $6uUbQ$_ } from \"@swc/helpers/_/_define_property\";\nimport { _ as $6uUbQ$_1 } from \"@swc/helpers/_/_ts_decorate\";\nimport $6uUbQ$fastdeepequal from \"fast-deep-equal\";\nimport { getCombiningClass as $6uUbQ$getCombiningClass, getScript as $6uUbQ$getScript, isDigit as $6uUbQ$isDigit, getCategory as $6uUbQ$getCategory, isMark as $6uUbQ$isMark } from \"unicode-properties\";\nimport $6uUbQ$unicodetrie from \"unicode-trie\";\nimport $6uUbQ$dfa from \"dfa\";\nimport $6uUbQ$clone from \"clone\";\nimport $6uUbQ$tinyinflate from \"tiny-inflate\";\nimport $6uUbQ$brotlidecompressjs from \"brotli/decompress.js\";\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nvar $d636bc798e7178db$exports = {};\n$parcel$export($d636bc798e7178db$exports, \"logErrors\", () => $d636bc798e7178db$export$bd5c5d8b8dcafd78);\n$parcel$export($d636bc798e7178db$exports, \"registerFormat\", () => $d636bc798e7178db$export$36b2f24e97d43be);\n$parcel$export($d636bc798e7178db$exports, \"create\", () => $d636bc798e7178db$export$185802fd694ee1f5);\n$parcel$export($d636bc798e7178db$exports, \"defaultLanguage\", () => $d636bc798e7178db$export$42940898df819940);\n$parcel$export($d636bc798e7178db$exports, \"setDefaultLanguage\", () => $d636bc798e7178db$export$5157e7780d44cc36);\nlet $d636bc798e7178db$export$bd5c5d8b8dcafd78 = false;\nlet $d636bc798e7178db$var$formats = [];\n\nfunction $d636bc798e7178db$export$36b2f24e97d43be(format) {\n  $d636bc798e7178db$var$formats.push(format);\n}\n\nfunction $d636bc798e7178db$export$185802fd694ee1f5(buffer, postscriptName) {\n  for (let i = 0; i < $d636bc798e7178db$var$formats.length; i++) {\n    let format = $d636bc798e7178db$var$formats[i];\n\n    if (format.probe(buffer)) {\n      let font = new format(new (0, $6uUbQ$DecodeStream)(buffer));\n      if (postscriptName) return font.getFont(postscriptName);\n      return font;\n    }\n  }\n\n  throw new Error('Unknown font format');\n}\n\nlet $d636bc798e7178db$export$42940898df819940 = 'en';\n\nfunction $d636bc798e7178db$export$5157e7780d44cc36() {\n  let lang = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'en';\n  $d636bc798e7178db$export$42940898df819940 = lang;\n}\n/**\n * This decorator caches the results of a getter or method such that\n * the results are lazily computed once, and then cached.\n * @private\n */\n\n\nfunction $e71565f2ce09cb6b$export$69a3209f1a06c04d(target, key, descriptor) {\n  if (descriptor.get) {\n    let get = descriptor.get;\n\n    descriptor.get = function () {\n      let value = get.call(this);\n      Object.defineProperty(this, key, {\n        value: value\n      });\n      return value;\n    };\n  } else if (typeof descriptor.value === 'function') {\n    let fn = descriptor.value;\n    return {\n      get() {\n        let cache = new Map();\n\n        function memoized() {\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          let key = args.length > 0 ? args[0] : 'value';\n          if (cache.has(key)) return cache.get(key);\n          let result = fn.apply(this, args);\n          cache.set(key, result);\n          return result;\n        }\n\n        Object.defineProperty(this, key, {\n          value: memoized\n        });\n        return memoized;\n      }\n\n    };\n  }\n}\n\nlet $26a62205ad06574e$var$SubHeader = new $6uUbQ$Struct({\n  firstCode: $6uUbQ$uint16,\n  entryCount: $6uUbQ$uint16,\n  idDelta: $6uUbQ$int16,\n  idRangeOffset: $6uUbQ$uint16\n});\nlet $26a62205ad06574e$var$CmapGroup = new $6uUbQ$Struct({\n  startCharCode: $6uUbQ$uint32,\n  endCharCode: $6uUbQ$uint32,\n  glyphID: $6uUbQ$uint32\n});\nlet $26a62205ad06574e$var$UnicodeValueRange = new $6uUbQ$Struct({\n  startUnicodeValue: $6uUbQ$uint24,\n  additionalCount: $6uUbQ$uint8\n});\nlet $26a62205ad06574e$var$UVSMapping = new $6uUbQ$Struct({\n  unicodeValue: $6uUbQ$uint24,\n  glyphID: $6uUbQ$uint16\n});\nlet $26a62205ad06574e$var$DefaultUVS = new $6uUbQ$Array($26a62205ad06574e$var$UnicodeValueRange, $6uUbQ$uint32);\nlet $26a62205ad06574e$var$NonDefaultUVS = new $6uUbQ$Array($26a62205ad06574e$var$UVSMapping, $6uUbQ$uint32);\nlet $26a62205ad06574e$var$VarSelectorRecord = new $6uUbQ$Struct({\n  varSelector: $6uUbQ$uint24,\n  defaultUVS: new $6uUbQ$Pointer($6uUbQ$uint32, $26a62205ad06574e$var$DefaultUVS, {\n    type: 'parent'\n  }),\n  nonDefaultUVS: new $6uUbQ$Pointer($6uUbQ$uint32, $26a62205ad06574e$var$NonDefaultUVS, {\n    type: 'parent'\n  })\n});\nlet $26a62205ad06574e$var$CmapSubtable = new $6uUbQ$VersionedStruct($6uUbQ$uint16, {\n  0: {\n    length: $6uUbQ$uint16,\n    language: $6uUbQ$uint16,\n    codeMap: new $6uUbQ$LazyArray($6uUbQ$uint8, 256)\n  },\n  2: {\n    length: $6uUbQ$uint16,\n    language: $6uUbQ$uint16,\n    subHeaderKeys: new $6uUbQ$Array($6uUbQ$uint16, 256),\n    subHeaderCount: t => Math.max.apply(Math, t.subHeaderKeys),\n    subHeaders: new $6uUbQ$LazyArray($26a62205ad06574e$var$SubHeader, 'subHeaderCount'),\n    glyphIndexArray: new $6uUbQ$LazyArray($6uUbQ$uint16, 'subHeaderCount')\n  },\n  4: {\n    length: $6uUbQ$uint16,\n    language: $6uUbQ$uint16,\n    segCountX2: $6uUbQ$uint16,\n    segCount: t => t.segCountX2 >> 1,\n    searchRange: $6uUbQ$uint16,\n    entrySelector: $6uUbQ$uint16,\n    rangeShift: $6uUbQ$uint16,\n    endCode: new $6uUbQ$LazyArray($6uUbQ$uint16, 'segCount'),\n    reservedPad: new $6uUbQ$Reserved($6uUbQ$uint16),\n    startCode: new $6uUbQ$LazyArray($6uUbQ$uint16, 'segCount'),\n    idDelta: new $6uUbQ$LazyArray($6uUbQ$int16, 'segCount'),\n    idRangeOffset: new $6uUbQ$LazyArray($6uUbQ$uint16, 'segCount'),\n    glyphIndexArray: new $6uUbQ$LazyArray($6uUbQ$uint16, t => (t.length - t._currentOffset) / 2)\n  },\n  6: {\n    length: $6uUbQ$uint16,\n    language: $6uUbQ$uint16,\n    firstCode: $6uUbQ$uint16,\n    entryCount: $6uUbQ$uint16,\n    glyphIndices: new $6uUbQ$LazyArray($6uUbQ$uint16, 'entryCount')\n  },\n  8: {\n    reserved: new $6uUbQ$Reserved($6uUbQ$uint16),\n    length: $6uUbQ$uint32,\n    language: $6uUbQ$uint16,\n    is32: new $6uUbQ$LazyArray($6uUbQ$uint8, 8192),\n    nGroups: $6uUbQ$uint32,\n    groups: new $6uUbQ$LazyArray($26a62205ad06574e$var$CmapGroup, 'nGroups')\n  },\n  10: {\n    reserved: new $6uUbQ$Reserved($6uUbQ$uint16),\n    length: $6uUbQ$uint32,\n    language: $6uUbQ$uint32,\n    firstCode: $6uUbQ$uint32,\n    entryCount: $6uUbQ$uint32,\n    glyphIndices: new $6uUbQ$LazyArray($6uUbQ$uint16, 'numChars')\n  },\n  12: {\n    reserved: new $6uUbQ$Reserved($6uUbQ$uint16),\n    length: $6uUbQ$uint32,\n    language: $6uUbQ$uint32,\n    nGroups: $6uUbQ$uint32,\n    groups: new $6uUbQ$LazyArray($26a62205ad06574e$var$CmapGroup, 'nGroups')\n  },\n  13: {\n    reserved: new $6uUbQ$Reserved($6uUbQ$uint16),\n    length: $6uUbQ$uint32,\n    language: $6uUbQ$uint32,\n    nGroups: $6uUbQ$uint32,\n    groups: new $6uUbQ$LazyArray($26a62205ad06574e$var$CmapGroup, 'nGroups')\n  },\n  14: {\n    length: $6uUbQ$uint32,\n    numRecords: $6uUbQ$uint32,\n    varSelectors: new $6uUbQ$LazyArray($26a62205ad06574e$var$VarSelectorRecord, 'numRecords')\n  }\n});\nlet $26a62205ad06574e$var$CmapEntry = new $6uUbQ$Struct({\n  platformID: $6uUbQ$uint16,\n  encodingID: $6uUbQ$uint16,\n  table: new $6uUbQ$Pointer($6uUbQ$uint32, $26a62205ad06574e$var$CmapSubtable, {\n    type: 'parent',\n    lazy: true\n  })\n});\nvar // character to glyph mapping\n$26a62205ad06574e$export$2e2bcd8739ae039 = new $6uUbQ$Struct({\n  version: $6uUbQ$uint16,\n  numSubtables: $6uUbQ$uint16,\n  tables: new $6uUbQ$Array($26a62205ad06574e$var$CmapEntry, 'numSubtables')\n});\nvar // font header\n$f2612a29f92ac062$export$2e2bcd8739ae039 = new $6uUbQ$Struct({\n  version: $6uUbQ$int32,\n  revision: $6uUbQ$int32,\n  checkSumAdjustment: $6uUbQ$uint32,\n  magicNumber: $6uUbQ$uint32,\n  flags: $6uUbQ$uint16,\n  unitsPerEm: $6uUbQ$uint16,\n  created: new $6uUbQ$Array($6uUbQ$int32, 2),\n  modified: new $6uUbQ$Array($6uUbQ$int32, 2),\n  xMin: $6uUbQ$int16,\n  yMin: $6uUbQ$int16,\n  xMax: $6uUbQ$int16,\n  yMax: $6uUbQ$int16,\n  macStyle: new $6uUbQ$Bitfield($6uUbQ$uint16, ['bold', 'italic', 'underline', 'outline', 'shadow', 'condensed', 'extended']),\n  lowestRecPPEM: $6uUbQ$uint16,\n  fontDirectionHint: $6uUbQ$int16,\n  indexToLocFormat: $6uUbQ$int16,\n  glyphDataFormat: $6uUbQ$int16 // 0 for current format\n\n});\nvar // horizontal header\n$2c179dd593583073$export$2e2bcd8739ae039 = new $6uUbQ$Struct({\n  version: $6uUbQ$int32,\n  ascent: $6uUbQ$int16,\n  descent: $6uUbQ$int16,\n  lineGap: $6uUbQ$int16,\n  advanceWidthMax: $6uUbQ$uint16,\n  minLeftSideBearing: $6uUbQ$int16,\n  minRightSideBearing: $6uUbQ$int16,\n  xMaxExtent: $6uUbQ$int16,\n  caretSlopeRise: $6uUbQ$int16,\n  caretSlopeRun: $6uUbQ$int16,\n  caretOffset: $6uUbQ$int16,\n  reserved: new $6uUbQ$Reserved($6uUbQ$int16, 4),\n  metricDataFormat: $6uUbQ$int16,\n  numberOfMetrics: $6uUbQ$uint16 // Number of advance widths in 'hmtx' table\n\n});\nlet $bdc9060542264b85$var$HmtxEntry = new $6uUbQ$Struct({\n  advance: $6uUbQ$uint16,\n  bearing: $6uUbQ$int16\n});\nvar $bdc9060542264b85$export$2e2bcd8739ae039 = new $6uUbQ$Struct({\n  metrics: new $6uUbQ$LazyArray($bdc9060542264b85$var$HmtxEntry, t => t.parent.hhea.numberOfMetrics),\n  bearings: new $6uUbQ$LazyArray($6uUbQ$int16, t => t.parent.maxp.numGlyphs - t.parent.hhea.numberOfMetrics)\n});\nvar // maxiumum profile\n$dbf51cb3d3fe409d$export$2e2bcd8739ae039 = new $6uUbQ$Struct({\n  version: $6uUbQ$int32,\n  numGlyphs: $6uUbQ$uint16,\n  maxPoints: $6uUbQ$uint16,\n  maxContours: $6uUbQ$uint16,\n  maxComponentPoints: $6uUbQ$uint16,\n  maxComponentContours: $6uUbQ$uint16,\n  maxZones: $6uUbQ$uint16,\n  maxTwilightPoints: $6uUbQ$uint16,\n  maxStorage: $6uUbQ$uint16,\n  maxFunctionDefs: $6uUbQ$uint16,\n  maxInstructionDefs: $6uUbQ$uint16,\n  maxStackElements: $6uUbQ$uint16,\n  maxSizeOfInstructions: $6uUbQ$uint16,\n  maxComponentElements: $6uUbQ$uint16,\n  maxComponentDepth: $6uUbQ$uint16 // Maximum levels of recursion; 1 for simple components\n\n});\n/**\n * Gets an encoding name from platform, encoding, and language ids.\n * Returned encoding names can be used in iconv-lite to decode text.\n */\n\nfunction $e449ad78d50845fe$export$badc544e0651b6b1(platformID, encodingID) {\n  let languageID = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  if (platformID === 1 && $e449ad78d50845fe$export$479e671907f486d1[languageID]) return $e449ad78d50845fe$export$479e671907f486d1[languageID];\n  return $e449ad78d50845fe$export$6fef87b7618bdf0b[platformID][encodingID];\n}\n\nconst $e449ad78d50845fe$var$SINGLE_BYTE_ENCODINGS = new Set(['x-mac-roman', 'x-mac-cyrillic', 'iso-8859-6', 'iso-8859-8']);\nconst $e449ad78d50845fe$var$MAC_ENCODINGS = {\n  'x-mac-croatian': \"\\xc4\\xc5\\xc7\\xc9\\xd1\\xd6\\xdc\\xe1\\xe0\\xe2\\xe4\\xe3\\xe5\\xe7\\xe9\\xe8\\xea\\xeb\\xed\\xec\\xee\\xef\\xf1\\xf3\\xf2\\xf4\\xf6\\xf5\\xfa\\xf9\\xfb\\xfc\\u2020\\xb0\\xa2\\xa3\\xa7\\u2022\\xb6\\xdf\\xae\\u0160\\u2122\\xb4\\xa8\\u2260\\u017D\\xd8\\u221E\\xb1\\u2264\\u2265\\u2206\\xb5\\u2202\\u2211\\u220F\\u0161\\u222B\\xaa\\xba\\u03A9\\u017E\\xf8\\xbf\\xa1\\xac\\u221A\\u0192\\u2248\\u0106\\xab\\u010C\\u2026 \\xc0\\xc3\\xd5\\u0152\\u0153\\u0110\\u2014\\u201C\\u201D\\u2018\\u2019\\xf7\\u25CA\\uF8FF\\xa9\\u2044\\u20AC\\u2039\\u203A\\xc6\\xbb\\u2013\\xb7\\u201A\\u201E\\u2030\\xc2\\u0107\\xc1\\u010D\\xc8\\xcd\\xce\\xcf\\xcc\\xd3\\xd4\\u0111\\xd2\\xda\\xdb\\xd9\\u0131\\u02C6\\u02DC\\xaf\\u03C0\\xcb\\u02DA\\xb8\\xca\\xe6\\u02C7\",\n  'x-mac-gaelic': \"\\xc4\\xc5\\xc7\\xc9\\xd1\\xd6\\xdc\\xe1\\xe0\\xe2\\xe4\\xe3\\xe5\\xe7\\xe9\\xe8\\xea\\xeb\\xed\\xec\\xee\\xef\\xf1\\xf3\\xf2\\xf4\\xf6\\xf5\\xfa\\xf9\\xfb\\xfc\\u2020\\xb0\\xa2\\xa3\\xa7\\u2022\\xb6\\xdf\\xae\\xa9\\u2122\\xb4\\xa8\\u2260\\xc6\\xd8\\u1E02\\xb1\\u2264\\u2265\\u1E03\\u010A\\u010B\\u1E0A\\u1E0B\\u1E1E\\u1E1F\\u0120\\u0121\\u1E40\\xe6\\xf8\\u1E41\\u1E56\\u1E57\\u027C\\u0192\\u017F\\u1E60\\xab\\xbb\\u2026 \\xc0\\xc3\\xd5\\u0152\\u0153\\u2013\\u2014\\u201C\\u201D\\u2018\\u2019\\u1E61\\u1E9B\\xff\\u0178\\u1E6A\\u20AC\\u2039\\u203A\\u0176\\u0177\\u1E6B\\xb7\\u1EF2\\u1EF3\\u204A\\xc2\\xca\\xc1\\xcb\\xc8\\xcd\\xce\\xcf\\xcc\\xd3\\xd4\\u2663\\xd2\\xda\\xdb\\xd9\\u0131\\xdd\\xfd\\u0174\\u0175\\u1E84\\u1E85\\u1E80\\u1E81\\u1E82\\u1E83\",\n  'x-mac-greek': \"\\xc4\\xb9\\xb2\\xc9\\xb3\\xd6\\xdc\\u0385\\xe0\\xe2\\xe4\\u0384\\xa8\\xe7\\xe9\\xe8\\xea\\xeb\\xa3\\u2122\\xee\\xef\\u2022\\xbd\\u2030\\xf4\\xf6\\xa6\\u20AC\\xf9\\xfb\\xfc\\u2020\\u0393\\u0394\\u0398\\u039B\\u039E\\u03A0\\xdf\\xae\\xa9\\u03A3\\u03AA\\xa7\\u2260\\xb0\\xb7\\u0391\\xb1\\u2264\\u2265\\xa5\\u0392\\u0395\\u0396\\u0397\\u0399\\u039A\\u039C\\u03A6\\u03AB\\u03A8\\u03A9\\u03AC\\u039D\\xac\\u039F\\u03A1\\u2248\\u03A4\\xab\\xbb\\u2026 \\u03A5\\u03A7\\u0386\\u0388\\u0153\\u2013\\u2015\\u201C\\u201D\\u2018\\u2019\\xf7\\u0389\\u038A\\u038C\\u038E\\u03AD\\u03AE\\u03AF\\u03CC\\u038F\\u03CD\\u03B1\\u03B2\\u03C8\\u03B4\\u03B5\\u03C6\\u03B3\\u03B7\\u03B9\\u03BE\\u03BA\\u03BB\\u03BC\\u03BD\\u03BF\\u03C0\\u03CE\\u03C1\\u03C3\\u03C4\\u03B8\\u03C9\\u03C2\\u03C7\\u03C5\\u03B6\\u03CA\\u03CB\\u0390\\u03B0\\xad\",\n  'x-mac-icelandic': \"\\xc4\\xc5\\xc7\\xc9\\xd1\\xd6\\xdc\\xe1\\xe0\\xe2\\xe4\\xe3\\xe5\\xe7\\xe9\\xe8\\xea\\xeb\\xed\\xec\\xee\\xef\\xf1\\xf3\\xf2\\xf4\\xf6\\xf5\\xfa\\xf9\\xfb\\xfc\\xdd\\xb0\\xa2\\xa3\\xa7\\u2022\\xb6\\xdf\\xae\\xa9\\u2122\\xb4\\xa8\\u2260\\xc6\\xd8\\u221E\\xb1\\u2264\\u2265\\xa5\\xb5\\u2202\\u2211\\u220F\\u03C0\\u222B\\xaa\\xba\\u03A9\\xe6\\xf8\\xbf\\xa1\\xac\\u221A\\u0192\\u2248\\u2206\\xab\\xbb\\u2026 \\xc0\\xc3\\xd5\\u0152\\u0153\\u2013\\u2014\\u201C\\u201D\\u2018\\u2019\\xf7\\u25CA\\xff\\u0178\\u2044\\u20AC\\xd0\\xf0\\xde\\xfe\\xfd\\xb7\\u201A\\u201E\\u2030\\xc2\\xca\\xc1\\xcb\\xc8\\xcd\\xce\\xcf\\xcc\\xd3\\xd4\\uF8FF\\xd2\\xda\\xdb\\xd9\\u0131\\u02C6\\u02DC\\xaf\\u02D8\\u02D9\\u02DA\\xb8\\u02DD\\u02DB\\u02C7\",\n  'x-mac-inuit': \"\\u1403\\u1404\\u1405\\u1406\\u140A\\u140B\\u1431\\u1432\\u1433\\u1434\\u1438\\u1439\\u1449\\u144E\\u144F\\u1450\\u1451\\u1455\\u1456\\u1466\\u146D\\u146E\\u146F\\u1470\\u1472\\u1473\\u1483\\u148B\\u148C\\u148D\\u148E\\u1490\\u1491\\xb0\\u14A1\\u14A5\\u14A6\\u2022\\xb6\\u14A7\\xae\\xa9\\u2122\\u14A8\\u14AA\\u14AB\\u14BB\\u14C2\\u14C3\\u14C4\\u14C5\\u14C7\\u14C8\\u14D0\\u14EF\\u14F0\\u14F1\\u14F2\\u14F4\\u14F5\\u1505\\u14D5\\u14D6\\u14D7\\u14D8\\u14DA\\u14DB\\u14EA\\u1528\\u1529\\u152A\\u152B\\u152D\\u2026 \\u152E\\u153E\\u1555\\u1556\\u1557\\u2013\\u2014\\u201C\\u201D\\u2018\\u2019\\u1558\\u1559\\u155A\\u155D\\u1546\\u1547\\u1548\\u1549\\u154B\\u154C\\u1550\\u157F\\u1580\\u1581\\u1582\\u1583\\u1584\\u1585\\u158F\\u1590\\u1591\\u1592\\u1593\\u1594\\u1595\\u1671\\u1672\\u1673\\u1674\\u1675\\u1676\\u1596\\u15A0\\u15A1\\u15A2\\u15A3\\u15A4\\u15A5\\u15A6\\u157C\\u0141\\u0142\",\n  'x-mac-ce': \"\\xc4\\u0100\\u0101\\xc9\\u0104\\xd6\\xdc\\xe1\\u0105\\u010C\\xe4\\u010D\\u0106\\u0107\\xe9\\u0179\\u017A\\u010E\\xed\\u010F\\u0112\\u0113\\u0116\\xf3\\u0117\\xf4\\xf6\\xf5\\xfa\\u011A\\u011B\\xfc\\u2020\\xb0\\u0118\\xa3\\xa7\\u2022\\xb6\\xdf\\xae\\xa9\\u2122\\u0119\\xa8\\u2260\\u0123\\u012E\\u012F\\u012A\\u2264\\u2265\\u012B\\u0136\\u2202\\u2211\\u0142\\u013B\\u013C\\u013D\\u013E\\u0139\\u013A\\u0145\\u0146\\u0143\\xac\\u221A\\u0144\\u0147\\u2206\\xab\\xbb\\u2026 \\u0148\\u0150\\xd5\\u0151\\u014C\\u2013\\u2014\\u201C\\u201D\\u2018\\u2019\\xf7\\u25CA\\u014D\\u0154\\u0155\\u0158\\u2039\\u203A\\u0159\\u0156\\u0157\\u0160\\u201A\\u201E\\u0161\\u015A\\u015B\\xc1\\u0164\\u0165\\xcd\\u017D\\u017E\\u016A\\xd3\\xd4\\u016B\\u016E\\xda\\u016F\\u0170\\u0171\\u0172\\u0173\\xdd\\xfd\\u0137\\u017B\\u0141\\u017C\\u0122\\u02C7\",\n  'x-mac-romanian': \"\\xc4\\xc5\\xc7\\xc9\\xd1\\xd6\\xdc\\xe1\\xe0\\xe2\\xe4\\xe3\\xe5\\xe7\\xe9\\xe8\\xea\\xeb\\xed\\xec\\xee\\xef\\xf1\\xf3\\xf2\\xf4\\xf6\\xf5\\xfa\\xf9\\xfb\\xfc\\u2020\\xb0\\xa2\\xa3\\xa7\\u2022\\xb6\\xdf\\xae\\xa9\\u2122\\xb4\\xa8\\u2260\\u0102\\u0218\\u221E\\xb1\\u2264\\u2265\\xa5\\xb5\\u2202\\u2211\\u220F\\u03C0\\u222B\\xaa\\xba\\u03A9\\u0103\\u0219\\xbf\\xa1\\xac\\u221A\\u0192\\u2248\\u2206\\xab\\xbb\\u2026 \\xc0\\xc3\\xd5\\u0152\\u0153\\u2013\\u2014\\u201C\\u201D\\u2018\\u2019\\xf7\\u25CA\\xff\\u0178\\u2044\\u20AC\\u2039\\u203A\\u021A\\u021B\\u2021\\xb7\\u201A\\u201E\\u2030\\xc2\\xca\\xc1\\xcb\\xc8\\xcd\\xce\\xcf\\xcc\\xd3\\xd4\\uF8FF\\xd2\\xda\\xdb\\xd9\\u0131\\u02C6\\u02DC\\xaf\\u02D8\\u02D9\\u02DA\\xb8\\u02DD\\u02DB\\u02C7\",\n  'x-mac-turkish': \"\\xc4\\xc5\\xc7\\xc9\\xd1\\xd6\\xdc\\xe1\\xe0\\xe2\\xe4\\xe3\\xe5\\xe7\\xe9\\xe8\\xea\\xeb\\xed\\xec\\xee\\xef\\xf1\\xf3\\xf2\\xf4\\xf6\\xf5\\xfa\\xf9\\xfb\\xfc\\u2020\\xb0\\xa2\\xa3\\xa7\\u2022\\xb6\\xdf\\xae\\xa9\\u2122\\xb4\\xa8\\u2260\\xc6\\xd8\\u221E\\xb1\\u2264\\u2265\\xa5\\xb5\\u2202\\u2211\\u220F\\u03C0\\u222B\\xaa\\xba\\u03A9\\xe6\\xf8\\xbf\\xa1\\xac\\u221A\\u0192\\u2248\\u2206\\xab\\xbb\\u2026 \\xc0\\xc3\\xd5\\u0152\\u0153\\u2013\\u2014\\u201C\\u201D\\u2018\\u2019\\xf7\\u25CA\\xff\\u0178\\u011E\\u011F\\u0130\\u0131\\u015E\\u015F\\u2021\\xb7\\u201A\\u201E\\u2030\\xc2\\xca\\xc1\\xcb\\xc8\\xcd\\xce\\xcf\\xcc\\xd3\\xd4\\uF8FF\\xd2\\xda\\xdb\\xd9\\uF8A0\\u02C6\\u02DC\\xaf\\u02D8\\u02D9\\u02DA\\xb8\\u02DD\\u02DB\\u02C7\"\n};\nconst $e449ad78d50845fe$var$encodingCache = new Map();\n\nfunction $e449ad78d50845fe$export$1dceb3c14ed68bee(encoding) {\n  let cached = $e449ad78d50845fe$var$encodingCache.get(encoding);\n  if (cached) return cached; // These encodings aren't supported by TextDecoder.\n\n  let mapping = $e449ad78d50845fe$var$MAC_ENCODINGS[encoding];\n\n  if (mapping) {\n    let res = new Map();\n\n    for (let i = 0; i < mapping.length; i++) res.set(mapping.charCodeAt(i), 0x80 + i);\n\n    $e449ad78d50845fe$var$encodingCache.set(encoding, res);\n    return res;\n  } // Only single byte encodings can be mapped 1:1.\n\n\n  if ($e449ad78d50845fe$var$SINGLE_BYTE_ENCODINGS.has(encoding)) {\n    // TextEncoder only supports utf8, whereas TextDecoder supports legacy encodings.\n    // Use this to create a mapping of code points.\n    let decoder = new TextDecoder(encoding);\n    let mapping = new Uint8Array(0x80);\n\n    for (let i = 0; i < 0x80; i++) mapping[i] = 0x80 + i;\n\n    let res = new Map();\n    let s = decoder.decode(mapping);\n\n    for (let i = 0; i < 0x80; i++) res.set(s.charCodeAt(i), 0x80 + i);\n\n    $e449ad78d50845fe$var$encodingCache.set(encoding, res);\n    return res;\n  }\n}\n\nconst $e449ad78d50845fe$export$6fef87b7618bdf0b = [// unicode\n['utf-16be', 'utf-16be', 'utf-16be', 'utf-16be', 'utf-16be', 'utf-16be', 'utf-16be'], // macintosh\n// Mappings available at http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/\n// 0\tRoman                 17\tMalayalam\n// 1\tJapanese\t            18\tSinhalese\n// 2\tTraditional Chinese\t  19\tBurmese\n// 3\tKorean\t              20\tKhmer\n// 4\tArabic\t              21\tThai\n// 5\tHebrew\t              22\tLaotian\n// 6\tGreek\t                23\tGeorgian\n// 7\tRussian\t              24\tArmenian\n// 8\tRSymbol\t              25\tSimplified Chinese\n// 9\tDevanagari\t          26\tTibetan\n// 10\tGurmukhi\t            27\tMongolian\n// 11\tGujarati\t            28\tGeez\n// 12\tOriya\t                29\tSlavic\n// 13\tBengali\t              30\tVietnamese\n// 14\tTamil\t                31\tSindhi\n// 15\tTelugu\t              32\t(Uninterpreted)\n// 16\tKannada\n['x-mac-roman', 'shift-jis', 'big5', 'euc-kr', 'iso-8859-6', 'iso-8859-8', 'x-mac-greek', 'x-mac-cyrillic', 'x-mac-symbol', 'x-mac-devanagari', 'x-mac-gurmukhi', 'x-mac-gujarati', 'Oriya', 'Bengali', 'Tamil', 'Telugu', 'Kannada', 'Malayalam', 'Sinhalese', 'Burmese', 'Khmer', 'iso-8859-11', 'Laotian', 'Georgian', 'Armenian', 'gbk', 'Tibetan', 'Mongolian', 'Geez', 'x-mac-ce', 'Vietnamese', 'Sindhi'], // ISO (deprecated)\n['ascii', null, 'iso-8859-1'], // windows\n// Docs here: http://msdn.microsoft.com/en-us/library/system.text.encoding(v=vs.110).aspx\n['symbol', 'utf-16be', 'shift-jis', 'gb18030', 'big5', 'euc-kr', 'johab', null, null, null, 'utf-16be']];\nconst $e449ad78d50845fe$export$479e671907f486d1 = {\n  15: 'x-mac-icelandic',\n  17: 'x-mac-turkish',\n  18: 'x-mac-croatian',\n  24: 'x-mac-ce',\n  25: 'x-mac-ce',\n  26: 'x-mac-ce',\n  27: 'x-mac-ce',\n  28: 'x-mac-ce',\n  30: 'x-mac-icelandic',\n  37: 'x-mac-romanian',\n  38: 'x-mac-ce',\n  39: 'x-mac-ce',\n  40: 'x-mac-ce',\n  143: 'x-mac-inuit',\n  146: 'x-mac-gaelic'\n};\nconst $e449ad78d50845fe$export$2092376fd002e13 = [// unicode\n[], {\n  0: 'en',\n  30: 'fo',\n  60: 'ks',\n  90: 'rw',\n  1: 'fr',\n  31: 'fa',\n  61: 'ku',\n  91: 'rn',\n  2: 'de',\n  32: 'ru',\n  62: 'sd',\n  92: 'ny',\n  3: 'it',\n  33: 'zh',\n  63: 'bo',\n  93: 'mg',\n  4: 'nl',\n  34: 'nl-BE',\n  64: 'ne',\n  94: 'eo',\n  5: 'sv',\n  35: 'ga',\n  65: 'sa',\n  128: 'cy',\n  6: 'es',\n  36: 'sq',\n  66: 'mr',\n  129: 'eu',\n  7: 'da',\n  37: 'ro',\n  67: 'bn',\n  130: 'ca',\n  8: 'pt',\n  38: 'cz',\n  68: 'as',\n  131: 'la',\n  9: 'no',\n  39: 'sk',\n  69: 'gu',\n  132: 'qu',\n  10: 'he',\n  40: 'si',\n  70: 'pa',\n  133: 'gn',\n  11: 'ja',\n  41: 'yi',\n  71: 'or',\n  134: 'ay',\n  12: 'ar',\n  42: 'sr',\n  72: 'ml',\n  135: 'tt',\n  13: 'fi',\n  43: 'mk',\n  73: 'kn',\n  136: 'ug',\n  14: 'el',\n  44: 'bg',\n  74: 'ta',\n  137: 'dz',\n  15: 'is',\n  45: 'uk',\n  75: 'te',\n  138: 'jv',\n  16: 'mt',\n  46: 'be',\n  76: 'si',\n  139: 'su',\n  17: 'tr',\n  47: 'uz',\n  77: 'my',\n  140: 'gl',\n  18: 'hr',\n  48: 'kk',\n  78: 'km',\n  141: 'af',\n  19: 'zh-Hant',\n  49: 'az-Cyrl',\n  79: 'lo',\n  142: 'br',\n  20: 'ur',\n  50: 'az-Arab',\n  80: 'vi',\n  143: 'iu',\n  21: 'hi',\n  51: 'hy',\n  81: 'id',\n  144: 'gd',\n  22: 'th',\n  52: 'ka',\n  82: 'tl',\n  145: 'gv',\n  23: 'ko',\n  53: 'mo',\n  83: 'ms',\n  146: 'ga',\n  24: 'lt',\n  54: 'ky',\n  84: 'ms-Arab',\n  147: 'to',\n  25: 'pl',\n  55: 'tg',\n  85: 'am',\n  148: 'el-polyton',\n  26: 'hu',\n  56: 'tk',\n  86: 'ti',\n  149: 'kl',\n  27: 'es',\n  57: 'mn-CN',\n  87: 'om',\n  150: 'az',\n  28: 'lv',\n  58: 'mn',\n  88: 'so',\n  151: 'nn',\n  29: 'se',\n  59: 'ps',\n  89: 'sw'\n}, // ISO (deprecated)\n[], {\n  0x0436: 'af',\n  0x4009: 'en-IN',\n  0x0487: 'rw',\n  0x0432: 'tn',\n  0x041C: 'sq',\n  0x1809: 'en-IE',\n  0x0441: 'sw',\n  0x045B: 'si',\n  0x0484: 'gsw',\n  0x2009: 'en-JM',\n  0x0457: 'kok',\n  0x041B: 'sk',\n  0x045E: 'am',\n  0x4409: 'en-MY',\n  0x0412: 'ko',\n  0x0424: 'sl',\n  0x1401: 'ar-DZ',\n  0x1409: 'en-NZ',\n  0x0440: 'ky',\n  0x2C0A: 'es-AR',\n  0x3C01: 'ar-BH',\n  0x3409: 'en-PH',\n  0x0454: 'lo',\n  0x400A: 'es-BO',\n  0x0C01: 'ar',\n  0x4809: 'en-SG',\n  0x0426: 'lv',\n  0x340A: 'es-CL',\n  0x0801: 'ar-IQ',\n  0x1C09: 'en-ZA',\n  0x0427: 'lt',\n  0x240A: 'es-CO',\n  0x2C01: 'ar-JO',\n  0x2C09: 'en-TT',\n  0x082E: 'dsb',\n  0x140A: 'es-CR',\n  0x3401: 'ar-KW',\n  0x0809: 'en-GB',\n  0x046E: 'lb',\n  0x1C0A: 'es-DO',\n  0x3001: 'ar-LB',\n  0x0409: 'en',\n  0x042F: 'mk',\n  0x300A: 'es-EC',\n  0x1001: 'ar-LY',\n  0x3009: 'en-ZW',\n  0x083E: 'ms-BN',\n  0x440A: 'es-SV',\n  0x1801: 'ary',\n  0x0425: 'et',\n  0x043E: 'ms',\n  0x100A: 'es-GT',\n  0x2001: 'ar-OM',\n  0x0438: 'fo',\n  0x044C: 'ml',\n  0x480A: 'es-HN',\n  0x4001: 'ar-QA',\n  0x0464: 'fil',\n  0x043A: 'mt',\n  0x080A: 'es-MX',\n  0x0401: 'ar-SA',\n  0x040B: 'fi',\n  0x0481: 'mi',\n  0x4C0A: 'es-NI',\n  0x2801: 'ar-SY',\n  0x080C: 'fr-BE',\n  0x047A: 'arn',\n  0x180A: 'es-PA',\n  0x1C01: 'aeb',\n  0x0C0C: 'fr-CA',\n  0x044E: 'mr',\n  0x3C0A: 'es-PY',\n  0x3801: 'ar-AE',\n  0x040C: 'fr',\n  0x047C: 'moh',\n  0x280A: 'es-PE',\n  0x2401: 'ar-YE',\n  0x140C: 'fr-LU',\n  0x0450: 'mn',\n  0x500A: 'es-PR',\n  0x042B: 'hy',\n  0x180C: 'fr-MC',\n  0x0850: 'mn-CN',\n  0x0C0A: 'es',\n  0x044D: 'as',\n  0x100C: 'fr-CH',\n  0x0461: 'ne',\n  0x040A: 'es',\n  0x082C: 'az-Cyrl',\n  0x0462: 'fy',\n  0x0414: 'nb',\n  0x540A: 'es-US',\n  0x042C: 'az',\n  0x0456: 'gl',\n  0x0814: 'nn',\n  0x380A: 'es-UY',\n  0x046D: 'ba',\n  0x0437: 'ka',\n  0x0482: 'oc',\n  0x200A: 'es-VE',\n  0x042D: 'eu',\n  0x0C07: 'de-AT',\n  0x0448: 'or',\n  0x081D: 'sv-FI',\n  0x0423: 'be',\n  0x0407: 'de',\n  0x0463: 'ps',\n  0x041D: 'sv',\n  0x0845: 'bn',\n  0x1407: 'de-LI',\n  0x0415: 'pl',\n  0x045A: 'syr',\n  0x0445: 'bn-IN',\n  0x1007: 'de-LU',\n  0x0416: 'pt',\n  0x0428: 'tg',\n  0x201A: 'bs-Cyrl',\n  0x0807: 'de-CH',\n  0x0816: 'pt-PT',\n  0x085F: 'tzm',\n  0x141A: 'bs',\n  0x0408: 'el',\n  0x0446: 'pa',\n  0x0449: 'ta',\n  0x047E: 'br',\n  0x046F: 'kl',\n  0x046B: 'qu-BO',\n  0x0444: 'tt',\n  0x0402: 'bg',\n  0x0447: 'gu',\n  0x086B: 'qu-EC',\n  0x044A: 'te',\n  0x0403: 'ca',\n  0x0468: 'ha',\n  0x0C6B: 'qu',\n  0x041E: 'th',\n  0x0C04: 'zh-HK',\n  0x040D: 'he',\n  0x0418: 'ro',\n  0x0451: 'bo',\n  0x1404: 'zh-MO',\n  0x0439: 'hi',\n  0x0417: 'rm',\n  0x041F: 'tr',\n  0x0804: 'zh',\n  0x040E: 'hu',\n  0x0419: 'ru',\n  0x0442: 'tk',\n  0x1004: 'zh-SG',\n  0x040F: 'is',\n  0x243B: 'smn',\n  0x0480: 'ug',\n  0x0404: 'zh-TW',\n  0x0470: 'ig',\n  0x103B: 'smj-NO',\n  0x0422: 'uk',\n  0x0483: 'co',\n  0x0421: 'id',\n  0x143B: 'smj',\n  0x042E: 'hsb',\n  0x041A: 'hr',\n  0x045D: 'iu',\n  0x0C3B: 'se-FI',\n  0x0420: 'ur',\n  0x101A: 'hr-BA',\n  0x085D: 'iu-Latn',\n  0x043B: 'se',\n  0x0843: 'uz-Cyrl',\n  0x0405: 'cs',\n  0x083C: 'ga',\n  0x083B: 'se-SE',\n  0x0443: 'uz',\n  0x0406: 'da',\n  0x0434: 'xh',\n  0x203B: 'sms',\n  0x042A: 'vi',\n  0x048C: 'prs',\n  0x0435: 'zu',\n  0x183B: 'sma-NO',\n  0x0452: 'cy',\n  0x0465: 'dv',\n  0x0410: 'it',\n  0x1C3B: 'sms',\n  0x0488: 'wo',\n  0x0813: 'nl-BE',\n  0x0810: 'it-CH',\n  0x044F: 'sa',\n  0x0485: 'sah',\n  0x0413: 'nl',\n  0x0411: 'ja',\n  0x1C1A: 'sr-Cyrl-BA',\n  0x0478: 'ii',\n  0x0C09: 'en-AU',\n  0x044B: 'kn',\n  0x0C1A: 'sr',\n  0x046A: 'yo',\n  0x2809: 'en-BZ',\n  0x043F: 'kk',\n  0x181A: 'sr-Latn-BA',\n  0x1009: 'en-CA',\n  0x0453: 'km',\n  0x081A: 'sr-Latn',\n  0x2409: 'en-029',\n  0x0486: 'quc',\n  0x046C: 'nso'\n}];\nlet $2bcf221753ec8e32$var$NameRecord = new $6uUbQ$Struct({\n  platformID: $6uUbQ$uint16,\n  encodingID: $6uUbQ$uint16,\n  languageID: $6uUbQ$uint16,\n  nameID: $6uUbQ$uint16,\n  length: $6uUbQ$uint16,\n  string: new $6uUbQ$Pointer($6uUbQ$uint16, new $6uUbQ$String('length', t => (0, $e449ad78d50845fe$export$badc544e0651b6b1)(t.platformID, t.encodingID, t.languageID)), {\n    type: 'parent',\n    relativeTo: ctx => ctx.parent.stringOffset,\n    allowNull: false\n  })\n});\nlet $2bcf221753ec8e32$var$LangTagRecord = new $6uUbQ$Struct({\n  length: $6uUbQ$uint16,\n  tag: new $6uUbQ$Pointer($6uUbQ$uint16, new $6uUbQ$String('length', 'utf16be'), {\n    type: 'parent',\n    relativeTo: ctx => ctx.stringOffset\n  })\n});\nvar $2bcf221753ec8e32$var$NameTable = new $6uUbQ$VersionedStruct($6uUbQ$uint16, {\n  0: {\n    count: $6uUbQ$uint16,\n    stringOffset: $6uUbQ$uint16,\n    records: new $6uUbQ$Array($2bcf221753ec8e32$var$NameRecord, 'count')\n  },\n  1: {\n    count: $6uUbQ$uint16,\n    stringOffset: $6uUbQ$uint16,\n    records: new $6uUbQ$Array($2bcf221753ec8e32$var$NameRecord, 'count'),\n    langTagCount: $6uUbQ$uint16,\n    langTags: new $6uUbQ$Array($2bcf221753ec8e32$var$LangTagRecord, 'langTagCount')\n  }\n});\nvar $2bcf221753ec8e32$export$2e2bcd8739ae039 = $2bcf221753ec8e32$var$NameTable;\nconst $2bcf221753ec8e32$var$NAMES = ['copyright', 'fontFamily', 'fontSubfamily', 'uniqueSubfamily', 'fullName', 'version', 'postscriptName', 'trademark', 'manufacturer', 'designer', 'description', 'vendorURL', 'designerURL', 'license', 'licenseURL', null, 'preferredFamily', 'preferredSubfamily', 'compatibleFull', 'sampleText', 'postscriptCIDFontName', 'wwsFamilyName', 'wwsSubfamilyName'];\n\n$2bcf221753ec8e32$var$NameTable.process = function (stream) {\n  var records = {};\n\n  for (let record of this.records) {\n    // find out what language this is for\n    let language = (0, $e449ad78d50845fe$export$2092376fd002e13)[record.platformID][record.languageID];\n    if (language == null && this.langTags != null && record.languageID >= 0x8000) language = this.langTags[record.languageID - 0x8000].tag;\n    if (language == null) language = record.platformID + '-' + record.languageID; // if the nameID is >= 256, it is a font feature record (AAT)\n\n    let key = record.nameID >= 256 ? 'fontFeatures' : $2bcf221753ec8e32$var$NAMES[record.nameID] || record.nameID;\n    if (records[key] == null) records[key] = {};\n    let obj = records[key];\n    if (record.nameID >= 256) obj = obj[record.nameID] || (obj[record.nameID] = {});\n    if (typeof record.string === 'string' || typeof obj[language] !== 'string') obj[language] = record.string;\n  }\n\n  this.records = records;\n};\n\n$2bcf221753ec8e32$var$NameTable.preEncode = function () {\n  if (Array.isArray(this.records)) return;\n  this.version = 0;\n  let records = [];\n\n  for (let key in this.records) {\n    let val = this.records[key];\n    if (key === 'fontFeatures') continue;\n    records.push({\n      platformID: 3,\n      encodingID: 1,\n      languageID: 0x409,\n      nameID: $2bcf221753ec8e32$var$NAMES.indexOf(key),\n      length: val.en.length * 2,\n      string: val.en\n    });\n    if (key === 'postscriptName') records.push({\n      platformID: 1,\n      encodingID: 0,\n      languageID: 0,\n      nameID: $2bcf221753ec8e32$var$NAMES.indexOf(key),\n      length: val.en.length,\n      string: val.en\n    });\n  }\n\n  this.records = records;\n  this.count = records.length;\n  this.stringOffset = $2bcf221753ec8e32$var$NameTable.size(this, null, false);\n};\n\nvar $84b272aa31b70606$var$OS2 = new $6uUbQ$VersionedStruct($6uUbQ$uint16, {\n  header: {\n    xAvgCharWidth: $6uUbQ$int16,\n    usWeightClass: $6uUbQ$uint16,\n    usWidthClass: $6uUbQ$uint16,\n    fsType: new $6uUbQ$Bitfield($6uUbQ$uint16, [null, 'noEmbedding', 'viewOnly', 'editable', null, null, null, null, 'noSubsetting', 'bitmapOnly']),\n    ySubscriptXSize: $6uUbQ$int16,\n    ySubscriptYSize: $6uUbQ$int16,\n    ySubscriptXOffset: $6uUbQ$int16,\n    ySubscriptYOffset: $6uUbQ$int16,\n    ySuperscriptXSize: $6uUbQ$int16,\n    ySuperscriptYSize: $6uUbQ$int16,\n    ySuperscriptXOffset: $6uUbQ$int16,\n    ySuperscriptYOffset: $6uUbQ$int16,\n    yStrikeoutSize: $6uUbQ$int16,\n    yStrikeoutPosition: $6uUbQ$int16,\n    sFamilyClass: $6uUbQ$int16,\n    panose: new $6uUbQ$Array($6uUbQ$uint8, 10),\n    ulCharRange: new $6uUbQ$Array($6uUbQ$uint32, 4),\n    vendorID: new $6uUbQ$String(4),\n    fsSelection: new $6uUbQ$Bitfield($6uUbQ$uint16, ['italic', 'underscore', 'negative', 'outlined', 'strikeout', 'bold', 'regular', 'useTypoMetrics', 'wws', 'oblique']),\n    usFirstCharIndex: $6uUbQ$uint16,\n    usLastCharIndex: $6uUbQ$uint16 // The maximum Unicode index in this font\n\n  },\n  // The Apple version of this table ends here, but the Microsoft one continues on...\n  0: {},\n  1: {\n    typoAscender: $6uUbQ$int16,\n    typoDescender: $6uUbQ$int16,\n    typoLineGap: $6uUbQ$int16,\n    winAscent: $6uUbQ$uint16,\n    winDescent: $6uUbQ$uint16,\n    codePageRange: new $6uUbQ$Array($6uUbQ$uint32, 2)\n  },\n  2: {\n    // these should be common with version 1 somehow\n    typoAscender: $6uUbQ$int16,\n    typoDescender: $6uUbQ$int16,\n    typoLineGap: $6uUbQ$int16,\n    winAscent: $6uUbQ$uint16,\n    winDescent: $6uUbQ$uint16,\n    codePageRange: new $6uUbQ$Array($6uUbQ$uint32, 2),\n    xHeight: $6uUbQ$int16,\n    capHeight: $6uUbQ$int16,\n    defaultChar: $6uUbQ$uint16,\n    breakChar: $6uUbQ$uint16,\n    maxContent: $6uUbQ$uint16\n  },\n  5: {\n    typoAscender: $6uUbQ$int16,\n    typoDescender: $6uUbQ$int16,\n    typoLineGap: $6uUbQ$int16,\n    winAscent: $6uUbQ$uint16,\n    winDescent: $6uUbQ$uint16,\n    codePageRange: new $6uUbQ$Array($6uUbQ$uint32, 2),\n    xHeight: $6uUbQ$int16,\n    capHeight: $6uUbQ$int16,\n    defaultChar: $6uUbQ$uint16,\n    breakChar: $6uUbQ$uint16,\n    maxContent: $6uUbQ$uint16,\n    usLowerOpticalPointSize: $6uUbQ$uint16,\n    usUpperOpticalPointSize: $6uUbQ$uint16\n  }\n});\nlet $84b272aa31b70606$var$versions = $84b272aa31b70606$var$OS2.versions;\n$84b272aa31b70606$var$versions[3] = $84b272aa31b70606$var$versions[4] = $84b272aa31b70606$var$versions[2];\nvar $84b272aa31b70606$export$2e2bcd8739ae039 = $84b272aa31b70606$var$OS2;\nvar // PostScript information\n$32d9e2eb9565d93c$export$2e2bcd8739ae039 = new $6uUbQ$VersionedStruct($6uUbQ$fixed32, {\n  header: {\n    italicAngle: $6uUbQ$fixed32,\n    underlinePosition: $6uUbQ$int16,\n    underlineThickness: $6uUbQ$int16,\n    isFixedPitch: $6uUbQ$uint32,\n    minMemType42: $6uUbQ$uint32,\n    maxMemType42: $6uUbQ$uint32,\n    minMemType1: $6uUbQ$uint32,\n    maxMemType1: $6uUbQ$uint32 // Maximum memory usage when a TrueType font is downloaded as a Type 1 font\n\n  },\n  1: {},\n  2: {\n    numberOfGlyphs: $6uUbQ$uint16,\n    glyphNameIndex: new $6uUbQ$Array($6uUbQ$uint16, 'numberOfGlyphs'),\n    names: new $6uUbQ$Array(new $6uUbQ$String($6uUbQ$uint8))\n  },\n  2.5: {\n    numberOfGlyphs: $6uUbQ$uint16,\n    offsets: new $6uUbQ$Array($6uUbQ$uint8, 'numberOfGlyphs')\n  },\n  3: {},\n  4: {\n    map: new $6uUbQ$Array($6uUbQ$uint32, t => t.parent.maxp.numGlyphs)\n  }\n});\nvar // An array of predefined values accessible by instructions\n$5202bd9d9ad8eaac$export$2e2bcd8739ae039 = new $6uUbQ$Struct({\n  controlValues: new $6uUbQ$Array($6uUbQ$int16)\n});\nvar // A list of instructions that are executed once when a font is first used.\n// These instructions are known as the font program. The main use of this table\n// is for the definition of functions that are used in many different glyph programs.\n$5c0f37ca5ffb1850$export$2e2bcd8739ae039 = new $6uUbQ$Struct({\n  instructions: new $6uUbQ$Array($6uUbQ$uint8)\n});\nlet $2b2b260902b1c57e$var$loca = new $6uUbQ$VersionedStruct('head.indexToLocFormat', {\n  0: {\n    offsets: new $6uUbQ$Array($6uUbQ$uint16)\n  },\n  1: {\n    offsets: new $6uUbQ$Array($6uUbQ$uint32)\n  }\n});\n\n$2b2b260902b1c57e$var$loca.process = function () {\n  if (this.version === 0 && !this._processed) {\n    for (let i = 0; i < this.offsets.length; i++) this.offsets[i] <<= 1;\n\n    this._processed = true;\n  }\n};\n\n$2b2b260902b1c57e$var$loca.preEncode = function () {\n  if (this.version === 0 && this._processed !== false) {\n    for (let i = 0; i < this.offsets.length; i++) this.offsets[i] >>>= 1;\n\n    this._processed = false;\n  }\n};\n\nvar $2b2b260902b1c57e$export$2e2bcd8739ae039 = $2b2b260902b1c57e$var$loca;\nvar // Set of instructions executed whenever the point size or font transformation change\n$7afb878c7bea4f66$export$2e2bcd8739ae039 = new $6uUbQ$Struct({\n  controlValueProgram: new $6uUbQ$Array($6uUbQ$uint8)\n});\nvar // only used for encoding\n$6c92b6371bce8bd9$export$2e2bcd8739ae039 = new $6uUbQ$Array(new $6uUbQ$Buffer());\n\nclass $43e9821ef3717eec$export$2e2bcd8739ae039 {\n  getCFFVersion(ctx) {\n    while (ctx && !ctx.hdrSize) ctx = ctx.parent;\n\n    return ctx ? ctx.version : -1;\n  }\n\n  decode(stream, parent) {\n    let version = this.getCFFVersion(parent);\n    let count = version >= 2 ? stream.readUInt32BE() : stream.readUInt16BE();\n    if (count === 0) return [];\n    let offSize = stream.readUInt8();\n    let offsetType;\n    if (offSize === 1) offsetType = $6uUbQ$uint8;else if (offSize === 2) offsetType = $6uUbQ$uint16;else if (offSize === 3) offsetType = $6uUbQ$uint24;else if (offSize === 4) offsetType = $6uUbQ$uint32;else throw new Error(`Bad offset size in CFFIndex: ${offSize} ${stream.pos}`);\n    let ret = [];\n    let startPos = stream.pos + (count + 1) * offSize - 1;\n    let start = offsetType.decode(stream);\n\n    for (let i = 0; i < count; i++) {\n      let end = offsetType.decode(stream);\n\n      if (this.type != null) {\n        let pos = stream.pos;\n        stream.pos = startPos + start;\n        parent.length = end - start;\n        ret.push(this.type.decode(stream, parent));\n        stream.pos = pos;\n      } else ret.push({\n        offset: startPos + start,\n        length: end - start\n      });\n\n      start = end;\n    }\n\n    stream.pos = startPos + start;\n    return ret;\n  }\n\n  size(arr, parent) {\n    let size = 2;\n    if (arr.length === 0) return size;\n    let type = this.type || new $6uUbQ$Buffer(); // find maximum offset to detminine offset type\n\n    let offset = 1;\n\n    for (let i = 0; i < arr.length; i++) {\n      let item = arr[i];\n      offset += type.size(item, parent);\n    }\n\n    let offsetType;\n    if (offset <= 0xff) offsetType = $6uUbQ$uint8;else if (offset <= 0xffff) offsetType = $6uUbQ$uint16;else if (offset <= 0xffffff) offsetType = $6uUbQ$uint24;else if (offset <= 0xffffffff) offsetType = $6uUbQ$uint32;else throw new Error(\"Bad offset in CFFIndex\");\n    size += 1 + offsetType.size() * (arr.length + 1);\n    size += offset - 1;\n    return size;\n  }\n\n  encode(stream, arr, parent) {\n    stream.writeUInt16BE(arr.length);\n    if (arr.length === 0) return;\n    let type = this.type || new $6uUbQ$Buffer(); // find maximum offset to detminine offset type\n\n    let sizes = [];\n    let offset = 1;\n\n    for (let item of arr) {\n      let s = type.size(item, parent);\n      sizes.push(s);\n      offset += s;\n    }\n\n    let offsetType;\n    if (offset <= 0xff) offsetType = $6uUbQ$uint8;else if (offset <= 0xffff) offsetType = $6uUbQ$uint16;else if (offset <= 0xffffff) offsetType = $6uUbQ$uint24;else if (offset <= 0xffffffff) offsetType = $6uUbQ$uint32;else throw new Error(\"Bad offset in CFFIndex\"); // write offset size\n\n    stream.writeUInt8(offsetType.size()); // write elements\n\n    offset = 1;\n    offsetType.encode(stream, offset);\n\n    for (let size of sizes) {\n      offset += size;\n      offsetType.encode(stream, offset);\n    }\n\n    for (let item of arr) type.encode(stream, item, parent);\n\n    return;\n  }\n\n  constructor(type) {\n    this.type = type;\n  }\n\n}\n\nconst $c2d28e92708f99da$var$FLOAT_EOF = 0xf;\nconst $c2d28e92708f99da$var$FLOAT_LOOKUP = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.', 'E', 'E-', null, '-'];\nconst $c2d28e92708f99da$var$FLOAT_ENCODE_LOOKUP = {\n  '.': 10,\n  'E': 11,\n  'E-': 12,\n  '-': 14\n};\n\nclass $c2d28e92708f99da$export$2e2bcd8739ae039 {\n  static decode(stream, value) {\n    if (32 <= value && value <= 246) return value - 139;\n    if (247 <= value && value <= 250) return (value - 247) * 256 + stream.readUInt8() + 108;\n    if (251 <= value && value <= 254) return -(value - 251) * 256 - stream.readUInt8() - 108;\n    if (value === 28) return stream.readInt16BE();\n    if (value === 29) return stream.readInt32BE();\n\n    if (value === 30) {\n      let str = '';\n\n      while (true) {\n        let b = stream.readUInt8();\n        let n1 = b >> 4;\n        if (n1 === $c2d28e92708f99da$var$FLOAT_EOF) break;\n        str += $c2d28e92708f99da$var$FLOAT_LOOKUP[n1];\n        let n2 = b & 15;\n        if (n2 === $c2d28e92708f99da$var$FLOAT_EOF) break;\n        str += $c2d28e92708f99da$var$FLOAT_LOOKUP[n2];\n      }\n\n      return parseFloat(str);\n    }\n\n    return null;\n  }\n\n  static size(value) {\n    // if the value needs to be forced to the largest size (32 bit)\n    // e.g. for unknown pointers, set to 32768\n    if (value.forceLarge) value = 32768;\n\n    if ((value | 0) !== value) {\n      let str = '' + value;\n      return 1 + Math.ceil((str.length + 1) / 2);\n    } else if (-107 <= value && value <= 107) return 1;else if (108 <= value && value <= 1131 || -1131 <= value && value <= -108) return 2;else if (-32768 <= value && value <= 32767) return 3;else return 5;\n  }\n\n  static encode(stream, value) {\n    // if the value needs to be forced to the largest size (32 bit)\n    // e.g. for unknown pointers, save the old value and set to 32768\n    let val = Number(value);\n\n    if (value.forceLarge) {\n      stream.writeUInt8(29);\n      return stream.writeInt32BE(val);\n    } else if ((val | 0) !== val) {\n      stream.writeUInt8(30);\n      let str = '' + val;\n\n      for (let i = 0; i < str.length; i += 2) {\n        let c1 = str[i];\n        let n1 = $c2d28e92708f99da$var$FLOAT_ENCODE_LOOKUP[c1] || +c1;\n        if (i === str.length - 1) var n2 = $c2d28e92708f99da$var$FLOAT_EOF;else {\n          let c2 = str[i + 1];\n          var n2 = $c2d28e92708f99da$var$FLOAT_ENCODE_LOOKUP[c2] || +c2;\n        }\n        stream.writeUInt8(n1 << 4 | n2 & 15);\n      }\n\n      if (n2 !== $c2d28e92708f99da$var$FLOAT_EOF) return stream.writeUInt8($c2d28e92708f99da$var$FLOAT_EOF << 4);\n    } else if (-107 <= val && val <= 107) return stream.writeUInt8(val + 139);else if (108 <= val && val <= 1131) {\n      val -= 108;\n      stream.writeUInt8((val >> 8) + 247);\n      return stream.writeUInt8(val & 0xff);\n    } else if (-1131 <= val && val <= -108) {\n      val = -val - 108;\n      stream.writeUInt8((val >> 8) + 251);\n      return stream.writeUInt8(val & 0xff);\n    } else if (-32768 <= val && val <= 32767) {\n      stream.writeUInt8(28);\n      return stream.writeInt16BE(val);\n    } else {\n      stream.writeUInt8(29);\n      return stream.writeInt32BE(val);\n    }\n  }\n\n}\n\nclass $61aa549f16d58b9b$export$2e2bcd8739ae039 {\n  decodeOperands(type, stream, ret, operands) {\n    if (Array.isArray(type)) return operands.map((op, i) => this.decodeOperands(type[i], stream, ret, [op]));else if (type.decode != null) return type.decode(stream, ret, operands);else switch (type) {\n      case 'number':\n      case 'offset':\n      case 'sid':\n        return operands[0];\n\n      case 'boolean':\n        return !!operands[0];\n\n      default:\n        return operands;\n    }\n  }\n\n  encodeOperands(type, stream, ctx, operands) {\n    if (Array.isArray(type)) return operands.map((op, i) => this.encodeOperands(type[i], stream, ctx, op)[0]);else if (type.encode != null) return type.encode(stream, operands, ctx);else if (typeof operands === 'number') return [operands];else if (typeof operands === 'boolean') return [+operands];else if (Array.isArray(operands)) return operands;else return [operands];\n  }\n\n  decode(stream, parent) {\n    let end = stream.pos + parent.length;\n    let ret = {};\n    let operands = []; // define hidden properties\n\n    Object.defineProperties(ret, {\n      parent: {\n        value: parent\n      },\n      _startOffset: {\n        value: stream.pos\n      }\n    }); // fill in defaults\n\n    for (let key in this.fields) {\n      let field = this.fields[key];\n      ret[field[1]] = field[3];\n    }\n\n    while (stream.pos < end) {\n      let b = stream.readUInt8();\n\n      if (b < 28) {\n        if (b === 12) b = b << 8 | stream.readUInt8();\n        let field = this.fields[b];\n        if (!field) throw new Error(`Unknown operator ${b}`);\n        let val = this.decodeOperands(field[2], stream, ret, operands);\n\n        if (val != null) {\n          if (val instanceof (0, $6uUbQ$PropertyDescriptor)) Object.defineProperty(ret, field[1], val);else ret[field[1]] = val;\n        }\n\n        operands = [];\n      } else operands.push((0, $c2d28e92708f99da$export$2e2bcd8739ae039).decode(stream, b));\n    }\n\n    return ret;\n  }\n\n  size(dict, parent) {\n    let includePointers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    let ctx = {\n      parent: parent,\n      val: dict,\n      pointerSize: 0,\n      startOffset: parent.startOffset || 0\n    };\n    let len = 0;\n\n    for (let k in this.fields) {\n      let field = this.fields[k];\n      let val = dict[field[1]];\n      if (val == null || (0, $6uUbQ$fastdeepequal)(val, field[3])) continue;\n      let operands = this.encodeOperands(field[2], null, ctx, val);\n\n      for (let op of operands) len += (0, $c2d28e92708f99da$export$2e2bcd8739ae039).size(op);\n\n      let key = Array.isArray(field[0]) ? field[0] : [field[0]];\n      len += key.length;\n    }\n\n    if (includePointers) len += ctx.pointerSize;\n    return len;\n  }\n\n  encode(stream, dict, parent) {\n    let ctx = {\n      pointers: [],\n      startOffset: stream.pos,\n      parent: parent,\n      val: dict,\n      pointerSize: 0\n    };\n    ctx.pointerOffset = stream.pos + this.size(dict, ctx, false);\n\n    for (let field of this.ops) {\n      let val = dict[field[1]];\n      if (val == null || (0, $6uUbQ$fastdeepequal)(val, field[3])) continue;\n      let operands = this.encodeOperands(field[2], stream, ctx, val);\n\n      for (let op of operands) (0, $c2d28e92708f99da$export$2e2bcd8739ae039).encode(stream, op);\n\n      let key = Array.isArray(field[0]) ? field[0] : [field[0]];\n\n      for (let op of key) stream.writeUInt8(op);\n    }\n\n    let i = 0;\n\n    while (i < ctx.pointers.length) {\n      let ptr = ctx.pointers[i++];\n      ptr.type.encode(stream, ptr.val, ptr.parent);\n    }\n\n    return;\n  }\n\n  constructor() {\n    let ops = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    this.ops = ops;\n    this.fields = {};\n\n    for (let field of ops) {\n      let key = Array.isArray(field[0]) ? field[0][0] << 8 | field[0][1] : field[0];\n      this.fields[key] = field;\n    }\n  }\n\n}\n\nclass $0e34a43d05bde82c$export$2e2bcd8739ae039 extends $6uUbQ$Pointer {\n  decode(stream, parent, operands) {\n    this.offsetType = {\n      decode: () => operands[0]\n    };\n    return super.decode(stream, parent, operands);\n  }\n\n  encode(stream, value, ctx) {\n    if (!stream) {\n      // compute the size (so ctx.pointerSize is correct)\n      this.offsetType = {\n        size: () => 0\n      };\n      this.size(value, ctx);\n      return [new $0e34a43d05bde82c$var$Ptr(0)];\n    }\n\n    let ptr = null;\n    this.offsetType = {\n      encode: (stream, val) => ptr = val\n    };\n    super.encode(stream, value, ctx);\n    return [new $0e34a43d05bde82c$var$Ptr(ptr)];\n  }\n\n  constructor(type) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (options.type == null) options.type = 'global';\n    super(null, type, options);\n  }\n\n}\n\nclass $0e34a43d05bde82c$var$Ptr {\n  valueOf() {\n    return this.val;\n  }\n\n  constructor(val) {\n    this.val = val;\n    this.forceLarge = true;\n  }\n\n}\n\nclass $6d59db2e29cc77b3$var$CFFBlendOp {\n  static decode(stream, parent, operands) {\n    let numBlends = operands.pop(); // TODO: actually blend. For now just consume the deltas\n    // since we don't use any of the values anyway.\n\n    while (operands.length > numBlends) operands.pop();\n  }\n\n}\n\nvar $6d59db2e29cc77b3$export$2e2bcd8739ae039 = new (0, $61aa549f16d58b9b$export$2e2bcd8739ae039)([// key       name                    type                                          default\n[6, 'BlueValues', 'delta', null], [7, 'OtherBlues', 'delta', null], [8, 'FamilyBlues', 'delta', null], [9, 'FamilyOtherBlues', 'delta', null], [[12, 9], 'BlueScale', 'number', 0.039625], [[12, 10], 'BlueShift', 'number', 7], [[12, 11], 'BlueFuzz', 'number', 1], [10, 'StdHW', 'number', null], [11, 'StdVW', 'number', null], [[12, 12], 'StemSnapH', 'delta', null], [[12, 13], 'StemSnapV', 'delta', null], [[12, 14], 'ForceBold', 'boolean', false], [[12, 17], 'LanguageGroup', 'number', 0], [[12, 18], 'ExpansionFactor', 'number', 0.06], [[12, 19], 'initialRandomSeed', 'number', 0], [20, 'defaultWidthX', 'number', 0], [21, 'nominalWidthX', 'number', 0], [22, 'vsindex', 'number', 0], [23, 'blend', $6d59db2e29cc77b3$var$CFFBlendOp, null], [19, 'Subrs', new (0, $0e34a43d05bde82c$export$2e2bcd8739ae039)(new (0, $43e9821ef3717eec$export$2e2bcd8739ae039)(), {\n  type: 'local'\n}), null]]); // Automatically generated from Appendix A of the CFF specification; do\n// not edit. Length should be 391.\n\nvar $229224aec43783c5$export$2e2bcd8739ae039 = [\".notdef\", \"space\", \"exclam\", \"quotedbl\", \"numbersign\", \"dollar\", \"percent\", \"ampersand\", \"quoteright\", \"parenleft\", \"parenright\", \"asterisk\", \"plus\", \"comma\", \"hyphen\", \"period\", \"slash\", \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"colon\", \"semicolon\", \"less\", \"equal\", \"greater\", \"question\", \"at\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"bracketleft\", \"backslash\", \"bracketright\", \"asciicircum\", \"underscore\", \"quoteleft\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"braceleft\", \"bar\", \"braceright\", \"asciitilde\", \"exclamdown\", \"cent\", \"sterling\", \"fraction\", \"yen\", \"florin\", \"section\", \"currency\", \"quotesingle\", \"quotedblleft\", \"guillemotleft\", \"guilsinglleft\", \"guilsinglright\", \"fi\", \"fl\", \"endash\", \"dagger\", \"daggerdbl\", \"periodcentered\", \"paragraph\", \"bullet\", \"quotesinglbase\", \"quotedblbase\", \"quotedblright\", \"guillemotright\", \"ellipsis\", \"perthousand\", \"questiondown\", \"grave\", \"acute\", \"circumflex\", \"tilde\", \"macron\", \"breve\", \"dotaccent\", \"dieresis\", \"ring\", \"cedilla\", \"hungarumlaut\", \"ogonek\", \"caron\", \"emdash\", \"AE\", \"ordfeminine\", \"Lslash\", \"Oslash\", \"OE\", \"ordmasculine\", \"ae\", \"dotlessi\", \"lslash\", \"oslash\", \"oe\", \"germandbls\", \"onesuperior\", \"logicalnot\", \"mu\", \"trademark\", \"Eth\", \"onehalf\", \"plusminus\", \"Thorn\", \"onequarter\", \"divide\", \"brokenbar\", \"degree\", \"thorn\", \"threequarters\", \"twosuperior\", \"registered\", \"minus\", \"eth\", \"multiply\", \"threesuperior\", \"copyright\", \"Aacute\", \"Acircumflex\", \"Adieresis\", \"Agrave\", \"Aring\", \"Atilde\", \"Ccedilla\", \"Eacute\", \"Ecircumflex\", \"Edieresis\", \"Egrave\", \"Iacute\", \"Icircumflex\", \"Idieresis\", \"Igrave\", \"Ntilde\", \"Oacute\", \"Ocircumflex\", \"Odieresis\", \"Ograve\", \"Otilde\", \"Scaron\", \"Uacute\", \"Ucircumflex\", \"Udieresis\", \"Ugrave\", \"Yacute\", \"Ydieresis\", \"Zcaron\", \"aacute\", \"acircumflex\", \"adieresis\", \"agrave\", \"aring\", \"atilde\", \"ccedilla\", \"eacute\", \"ecircumflex\", \"edieresis\", \"egrave\", \"iacute\", \"icircumflex\", \"idieresis\", \"igrave\", \"ntilde\", \"oacute\", \"ocircumflex\", \"odieresis\", \"ograve\", \"otilde\", \"scaron\", \"uacute\", \"ucircumflex\", \"udieresis\", \"ugrave\", \"yacute\", \"ydieresis\", \"zcaron\", \"exclamsmall\", \"Hungarumlautsmall\", \"dollaroldstyle\", \"dollarsuperior\", \"ampersandsmall\", \"Acutesmall\", \"parenleftsuperior\", \"parenrightsuperior\", \"twodotenleader\", \"onedotenleader\", \"zerooldstyle\", \"oneoldstyle\", \"twooldstyle\", \"threeoldstyle\", \"fouroldstyle\", \"fiveoldstyle\", \"sixoldstyle\", \"sevenoldstyle\", \"eightoldstyle\", \"nineoldstyle\", \"commasuperior\", \"threequartersemdash\", \"periodsuperior\", \"questionsmall\", \"asuperior\", \"bsuperior\", \"centsuperior\", \"dsuperior\", \"esuperior\", \"isuperior\", \"lsuperior\", \"msuperior\", \"nsuperior\", \"osuperior\", \"rsuperior\", \"ssuperior\", \"tsuperior\", \"ff\", \"ffi\", \"ffl\", \"parenleftinferior\", \"parenrightinferior\", \"Circumflexsmall\", \"hyphensuperior\", \"Gravesmall\", \"Asmall\", \"Bsmall\", \"Csmall\", \"Dsmall\", \"Esmall\", \"Fsmall\", \"Gsmall\", \"Hsmall\", \"Ismall\", \"Jsmall\", \"Ksmall\", \"Lsmall\", \"Msmall\", \"Nsmall\", \"Osmall\", \"Psmall\", \"Qsmall\", \"Rsmall\", \"Ssmall\", \"Tsmall\", \"Usmall\", \"Vsmall\", \"Wsmall\", \"Xsmall\", \"Ysmall\", \"Zsmall\", \"colonmonetary\", \"onefitted\", \"rupiah\", \"Tildesmall\", \"exclamdownsmall\", \"centoldstyle\", \"Lslashsmall\", \"Scaronsmall\", \"Zcaronsmall\", \"Dieresissmall\", \"Brevesmall\", \"Caronsmall\", \"Dotaccentsmall\", \"Macronsmall\", \"figuredash\", \"hypheninferior\", \"Ogoneksmall\", \"Ringsmall\", \"Cedillasmall\", \"questiondownsmall\", \"oneeighth\", \"threeeighths\", \"fiveeighths\", \"seveneighths\", \"onethird\", \"twothirds\", \"zerosuperior\", \"foursuperior\", \"fivesuperior\", \"sixsuperior\", \"sevensuperior\", \"eightsuperior\", \"ninesuperior\", \"zeroinferior\", \"oneinferior\", \"twoinferior\", \"threeinferior\", \"fourinferior\", \"fiveinferior\", \"sixinferior\", \"seveninferior\", \"eightinferior\", \"nineinferior\", \"centinferior\", \"dollarinferior\", \"periodinferior\", \"commainferior\", \"Agravesmall\", \"Aacutesmall\", \"Acircumflexsmall\", \"Atildesmall\", \"Adieresissmall\", \"Aringsmall\", \"AEsmall\", \"Ccedillasmall\", \"Egravesmall\", \"Eacutesmall\", \"Ecircumflexsmall\", \"Edieresissmall\", \"Igravesmall\", \"Iacutesmall\", \"Icircumflexsmall\", \"Idieresissmall\", \"Ethsmall\", \"Ntildesmall\", \"Ogravesmall\", \"Oacutesmall\", \"Ocircumflexsmall\", \"Otildesmall\", \"Odieresissmall\", \"OEsmall\", \"Oslashsmall\", \"Ugravesmall\", \"Uacutesmall\", \"Ucircumflexsmall\", \"Udieresissmall\", \"Yacutesmall\", \"Thornsmall\", \"Ydieresissmall\", \"001.000\", \"001.001\", \"001.002\", \"001.003\", \"Black\", \"Bold\", \"Book\", \"Light\", \"Medium\", \"Regular\", \"Roman\", \"Semibold\"];\nlet $bc0433d9b7e41f5f$export$dee0027060fa13bd = ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore', 'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'exclamdown', 'cent', 'sterling', 'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle', 'quotedblleft', 'guillemotleft', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', '', 'endash', 'dagger', 'daggerdbl', 'periodcentered', '', 'paragraph', 'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright', 'guillemotright', 'ellipsis', 'perthousand', '', 'questiondown', '', 'grave', 'acute', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'dieresis', '', 'ring', 'cedilla', '', 'hungarumlaut', 'ogonek', 'caron', 'emdash', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'AE', '', 'ordfeminine', '', '', '', '', 'Lslash', 'Oslash', 'OE', 'ordmasculine', '', '', '', '', '', 'ae', '', '', '', 'dotlessi', '', '', 'lslash', 'oslash', 'oe', 'germandbls'];\nlet $bc0433d9b7e41f5f$export$4f58f497e14a53c3 = ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'space', 'exclamsmall', 'Hungarumlautsmall', '', 'dollaroldstyle', 'dollarsuperior', 'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', 'twodotenleader', 'onedotenleader', 'comma', 'hyphen', 'period', 'fraction', 'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle', 'fouroldstyle', 'fiveoldstyle', 'sixoldstyle', 'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'colon', 'semicolon', 'commasuperior', 'threequartersemdash', 'periodsuperior', 'questionsmall', '', 'asuperior', 'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', '', '', 'isuperior', '', '', 'lsuperior', 'msuperior', 'nsuperior', 'osuperior', '', '', 'rsuperior', 'ssuperior', 'tsuperior', '', 'ff', 'fi', 'fl', 'ffi', 'ffl', 'parenleftinferior', '', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall', 'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall', 'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall', 'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'exclamdownsmall', 'centoldstyle', 'Lslashsmall', '', '', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall', 'Brevesmall', 'Caronsmall', '', 'Dotaccentsmall', '', '', 'Macronsmall', '', '', 'figuredash', 'hypheninferior', '', '', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall', '', '', '', 'onequarter', 'onehalf', 'threequarters', 'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds', '', '', 'zerosuperior', 'onesuperior', 'twosuperior', 'threesuperior', 'foursuperior', 'fivesuperior', 'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior', 'zeroinferior', 'oneinferior', 'twoinferior', 'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior', 'eightinferior', 'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior', 'commainferior', 'Agravesmall', 'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall', 'Aringsmall', 'AEsmall', 'Ccedillasmall', 'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall', 'Igravesmall', 'Iacutesmall', 'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall', 'Oacutesmall', 'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall', 'Uacutesmall', 'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall'];\nlet $ef658f5c9a1488b2$export$c33b50336c234f16 = ['.notdef', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore', 'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', 'exclamdown', 'cent', 'sterling', 'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle', 'quotedblleft', 'guillemotleft', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'endash', 'dagger', 'daggerdbl', 'periodcentered', 'paragraph', 'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright', 'guillemotright', 'ellipsis', 'perthousand', 'questiondown', 'grave', 'acute', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'dieresis', 'ring', 'cedilla', 'hungarumlaut', 'ogonek', 'caron', 'emdash', 'AE', 'ordfeminine', 'Lslash', 'Oslash', 'OE', 'ordmasculine', 'ae', 'dotlessi', 'lslash', 'oslash', 'oe', 'germandbls', 'onesuperior', 'logicalnot', 'mu', 'trademark', 'Eth', 'onehalf', 'plusminus', 'Thorn', 'onequarter', 'divide', 'brokenbar', 'degree', 'thorn', 'threequarters', 'twosuperior', 'registered', 'minus', 'eth', 'multiply', 'threesuperior', 'copyright', 'Aacute', 'Acircumflex', 'Adieresis', 'Agrave', 'Aring', 'Atilde', 'Ccedilla', 'Eacute', 'Ecircumflex', 'Edieresis', 'Egrave', 'Iacute', 'Icircumflex', 'Idieresis', 'Igrave', 'Ntilde', 'Oacute', 'Ocircumflex', 'Odieresis', 'Ograve', 'Otilde', 'Scaron', 'Uacute', 'Ucircumflex', 'Udieresis', 'Ugrave', 'Yacute', 'Ydieresis', 'Zcaron', 'aacute', 'acircumflex', 'adieresis', 'agrave', 'aring', 'atilde', 'ccedilla', 'eacute', 'ecircumflex', 'edieresis', 'egrave', 'iacute', 'icircumflex', 'idieresis', 'igrave', 'ntilde', 'oacute', 'ocircumflex', 'odieresis', 'ograve', 'otilde', 'scaron', 'uacute', 'ucircumflex', 'udieresis', 'ugrave', 'yacute', 'ydieresis', 'zcaron'];\nlet $ef658f5c9a1488b2$export$3ed0f9e1fee8d489 = ['.notdef', 'space', 'exclamsmall', 'Hungarumlautsmall', 'dollaroldstyle', 'dollarsuperior', 'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', 'twodotenleader', 'onedotenleader', 'comma', 'hyphen', 'period', 'fraction', 'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle', 'fouroldstyle', 'fiveoldstyle', 'sixoldstyle', 'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'colon', 'semicolon', 'commasuperior', 'threequartersemdash', 'periodsuperior', 'questionsmall', 'asuperior', 'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', 'isuperior', 'lsuperior', 'msuperior', 'nsuperior', 'osuperior', 'rsuperior', 'ssuperior', 'tsuperior', 'ff', 'fi', 'fl', 'ffi', 'ffl', 'parenleftinferior', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall', 'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall', 'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall', 'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', 'exclamdownsmall', 'centoldstyle', 'Lslashsmall', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall', 'Brevesmall', 'Caronsmall', 'Dotaccentsmall', 'Macronsmall', 'figuredash', 'hypheninferior', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall', 'onequarter', 'onehalf', 'threequarters', 'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds', 'zerosuperior', 'onesuperior', 'twosuperior', 'threesuperior', 'foursuperior', 'fivesuperior', 'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior', 'zeroinferior', 'oneinferior', 'twoinferior', 'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior', 'eightinferior', 'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior', 'commainferior', 'Agravesmall', 'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall', 'Aringsmall', 'AEsmall', 'Ccedillasmall', 'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall', 'Igravesmall', 'Iacutesmall', 'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall', 'Oacutesmall', 'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall', 'Uacutesmall', 'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall'];\nlet $ef658f5c9a1488b2$export$dc28be11139d4120 = ['.notdef', 'space', 'dollaroldstyle', 'dollarsuperior', 'parenleftsuperior', 'parenrightsuperior', 'twodotenleader', 'onedotenleader', 'comma', 'hyphen', 'period', 'fraction', 'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle', 'fouroldstyle', 'fiveoldstyle', 'sixoldstyle', 'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'colon', 'semicolon', 'commasuperior', 'threequartersemdash', 'periodsuperior', 'asuperior', 'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', 'isuperior', 'lsuperior', 'msuperior', 'nsuperior', 'osuperior', 'rsuperior', 'ssuperior', 'tsuperior', 'ff', 'fi', 'fl', 'ffi', 'ffl', 'parenleftinferior', 'parenrightinferior', 'hyphensuperior', 'colonmonetary', 'onefitted', 'rupiah', 'centoldstyle', 'figuredash', 'hypheninferior', 'onequarter', 'onehalf', 'threequarters', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds', 'zerosuperior', 'onesuperior', 'twosuperior', 'threesuperior', 'foursuperior', 'fivesuperior', 'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior', 'zeroinferior', 'oneinferior', 'twoinferior', 'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior', 'eightinferior', 'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior', 'commainferior']; //########################\n// Scripts and Languages #\n//########################\n\nlet $7cbbe4e24ef3cb75$var$LangSysTable = new $6uUbQ$Struct({\n  reserved: new $6uUbQ$Reserved($6uUbQ$uint16),\n  reqFeatureIndex: $6uUbQ$uint16,\n  featureCount: $6uUbQ$uint16,\n  featureIndexes: new $6uUbQ$Array($6uUbQ$uint16, 'featureCount')\n});\nlet $7cbbe4e24ef3cb75$var$LangSysRecord = new $6uUbQ$Struct({\n  tag: new $6uUbQ$String(4),\n  langSys: new $6uUbQ$Pointer($6uUbQ$uint16, $7cbbe4e24ef3cb75$var$LangSysTable, {\n    type: 'parent'\n  })\n});\nlet $7cbbe4e24ef3cb75$var$Script = new $6uUbQ$Struct({\n  defaultLangSys: new $6uUbQ$Pointer($6uUbQ$uint16, $7cbbe4e24ef3cb75$var$LangSysTable),\n  count: $6uUbQ$uint16,\n  langSysRecords: new $6uUbQ$Array($7cbbe4e24ef3cb75$var$LangSysRecord, 'count')\n});\nlet $7cbbe4e24ef3cb75$var$ScriptRecord = new $6uUbQ$Struct({\n  tag: new $6uUbQ$String(4),\n  script: new $6uUbQ$Pointer($6uUbQ$uint16, $7cbbe4e24ef3cb75$var$Script, {\n    type: 'parent'\n  })\n});\nlet $7cbbe4e24ef3cb75$export$3e15fc05ce864229 = new $6uUbQ$Array($7cbbe4e24ef3cb75$var$ScriptRecord, $6uUbQ$uint16); //#######################\n// Features and Lookups #\n//#######################\n\nlet $7cbbe4e24ef3cb75$var$FeatureParams = new $6uUbQ$Struct({\n  version: $6uUbQ$uint16,\n  nameID: $6uUbQ$uint16\n});\nlet $7cbbe4e24ef3cb75$export$6e91cf7616333d5 = new $6uUbQ$Struct({\n  featureParams: new $6uUbQ$Pointer($6uUbQ$uint16, $7cbbe4e24ef3cb75$var$FeatureParams),\n  lookupCount: $6uUbQ$uint16,\n  lookupListIndexes: new $6uUbQ$Array($6uUbQ$uint16, 'lookupCount')\n});\nlet $7cbbe4e24ef3cb75$var$FeatureRecord = new $6uUbQ$Struct({\n  tag: new $6uUbQ$String(4),\n  feature: new $6uUbQ$Pointer($6uUbQ$uint16, $7cbbe4e24ef3cb75$export$6e91cf7616333d5, {\n    type: 'parent'\n  })\n});\nlet $7cbbe4e24ef3cb75$export$aa18130def4b6cb4 = new $6uUbQ$Array($7cbbe4e24ef3cb75$var$FeatureRecord, $6uUbQ$uint16);\nlet $7cbbe4e24ef3cb75$var$LookupFlags = new $6uUbQ$Struct({\n  markAttachmentType: $6uUbQ$uint8,\n  flags: new $6uUbQ$Bitfield($6uUbQ$uint8, ['rightToLeft', 'ignoreBaseGlyphs', 'ignoreLigatures', 'ignoreMarks', 'useMarkFilteringSet'])\n});\n\nfunction $7cbbe4e24ef3cb75$export$df0008c6ff2da22a(SubTable) {\n  let Lookup = new $6uUbQ$Struct({\n    lookupType: $6uUbQ$uint16,\n    flags: $7cbbe4e24ef3cb75$var$LookupFlags,\n    subTableCount: $6uUbQ$uint16,\n    subTables: new $6uUbQ$Array(new $6uUbQ$Pointer($6uUbQ$uint16, SubTable), 'subTableCount'),\n    markFilteringSet: new $6uUbQ$Optional($6uUbQ$uint16, t => t.flags.flags.useMarkFilteringSet)\n  });\n  return new $6uUbQ$LazyArray(new $6uUbQ$Pointer($6uUbQ$uint16, Lookup), $6uUbQ$uint16);\n} //#################\n// Coverage Table #\n//#################\n\n\nlet $7cbbe4e24ef3cb75$var$RangeRecord = new $6uUbQ$Struct({\n  start: $6uUbQ$uint16,\n  end: $6uUbQ$uint16,\n  startCoverageIndex: $6uUbQ$uint16\n});\nlet $7cbbe4e24ef3cb75$export$17608c3f81a6111 = new $6uUbQ$VersionedStruct($6uUbQ$uint16, {\n  1: {\n    glyphCount: $6uUbQ$uint16,\n    glyphs: new $6uUbQ$Array($6uUbQ$uint16, 'glyphCount')\n  },\n  2: {\n    rangeCount: $6uUbQ$uint16,\n    rangeRecords: new $6uUbQ$Array($7cbbe4e24ef3cb75$var$RangeRecord, 'rangeCount')\n  }\n}); //#########################\n// Class Definition Table #\n//#########################\n\nlet $7cbbe4e24ef3cb75$var$ClassRangeRecord = new $6uUbQ$Struct({\n  start: $6uUbQ$uint16,\n  end: $6uUbQ$uint16,\n  class: $6uUbQ$uint16\n});\nlet $7cbbe4e24ef3cb75$export$843d551fbbafef71 = new $6uUbQ$VersionedStruct($6uUbQ$uint16, {\n  1: {\n    startGlyph: $6uUbQ$uint16,\n    glyphCount: $6uUbQ$uint16,\n    classValueArray: new $6uUbQ$Array($6uUbQ$uint16, 'glyphCount')\n  },\n  2: {\n    classRangeCount: $6uUbQ$uint16,\n    classRangeRecord: new $6uUbQ$Array($7cbbe4e24ef3cb75$var$ClassRangeRecord, 'classRangeCount')\n  }\n});\nlet $7cbbe4e24ef3cb75$export$8215d14a63d9fb10 = new $6uUbQ$Struct({\n  a: $6uUbQ$uint16,\n  b: $6uUbQ$uint16,\n  deltaFormat: $6uUbQ$uint16\n}); //#############################################\n// Contextual Substitution/Positioning Tables #\n//#############################################\n\nlet $7cbbe4e24ef3cb75$var$LookupRecord = new $6uUbQ$Struct({\n  sequenceIndex: $6uUbQ$uint16,\n  lookupListIndex: $6uUbQ$uint16\n});\nlet $7cbbe4e24ef3cb75$var$Rule = new $6uUbQ$Struct({\n  glyphCount: $6uUbQ$uint16,\n  lookupCount: $6uUbQ$uint16,\n  input: new $6uUbQ$Array($6uUbQ$uint16, t => t.glyphCount - 1),\n  lookupRecords: new $6uUbQ$Array($7cbbe4e24ef3cb75$var$LookupRecord, 'lookupCount')\n});\nlet $7cbbe4e24ef3cb75$var$RuleSet = new $6uUbQ$Array(new $6uUbQ$Pointer($6uUbQ$uint16, $7cbbe4e24ef3cb75$var$Rule), $6uUbQ$uint16);\nlet $7cbbe4e24ef3cb75$var$ClassRule = new $6uUbQ$Struct({\n  glyphCount: $6uUbQ$uint16,\n  lookupCount: $6uUbQ$uint16,\n  classes: new $6uUbQ$Array($6uUbQ$uint16, t => t.glyphCount - 1),\n  lookupRecords: new $6uUbQ$Array($7cbbe4e24ef3cb75$var$LookupRecord, 'lookupCount')\n});\nlet $7cbbe4e24ef3cb75$var$ClassSet = new $6uUbQ$Array(new $6uUbQ$Pointer($6uUbQ$uint16, $7cbbe4e24ef3cb75$var$ClassRule), $6uUbQ$uint16);\nlet $7cbbe4e24ef3cb75$export$841858b892ce1f4c = new $6uUbQ$VersionedStruct($6uUbQ$uint16, {\n  1: {\n    coverage: new $6uUbQ$Pointer($6uUbQ$uint16, $7cbbe4e24ef3cb75$export$17608c3f81a6111),\n    ruleSetCount: $6uUbQ$uint16,\n    ruleSets: new $6uUbQ$Array(new $6uUbQ$Pointer($6uUbQ$uint16, $7cbbe4e24ef3cb75$var$RuleSet), 'ruleSetCount')\n  },\n  2: {\n    coverage: new $6uUbQ$Pointer($6uUbQ$uint16, $7cbbe4e24ef3cb75$export$17608c3f81a6111),\n    classDef: new $6uUbQ$Pointer($6uUbQ$uint16, $7cbbe4e24ef3cb75$export$843d551fbbafef71),\n    classSetCnt: $6uUbQ$uint16,\n    classSet: new $6uUbQ$Array(new $6uUbQ$Pointer($6uUbQ$uint16, $7cbbe4e24ef3cb75$var$ClassSet), 'classSetCnt')\n  },\n  3: {\n    glyphCount: $6uUbQ$uint16,\n    lookupCount: $6uUbQ$uint16,\n    coverages: new $6uUbQ$Array(new $6uUbQ$Pointer($6uUbQ$uint16, $7cbbe4e24ef3cb75$export$17608c3f81a6111), 'glyphCount'),\n    lookupRecords: new $6uUbQ$Array($7cbbe4e24ef3cb75$var$LookupRecord, 'lookupCount')\n  }\n}); //######################################################\n// Chaining Contextual Substitution/Positioning Tables #\n//######################################################\n\nlet $7cbbe4e24ef3cb75$var$ChainRule = new $6uUbQ$Struct({\n  backtrackGlyphCount: $6uUbQ$uint16,\n  backtrack: new $6uUbQ$Array($6uUbQ$uint16, 'backtrackGlyphCount'),\n  inputGlyphCount: $6uUbQ$uint16,\n  input: new $6uUbQ$Array($6uUbQ$uint16, t => t.inputGlyphCount - 1),\n  lookaheadGlyphCount: $6uUbQ$uint16,\n  lookahead: new $6uUbQ$Array($6uUbQ$uint16, 'lookaheadGlyphCount'),\n  lookupCount: $6uUbQ$uint16,\n  lookupRecords: new $6uUbQ$Array($7cbbe4e24ef3cb75$var$LookupRecord, 'lookupCount')\n});\nlet $7cbbe4e24ef3cb75$var$ChainRuleSet = new $6uUbQ$Array(new $6uUbQ$Pointer($6uUbQ$uint16, $7cbbe4e24ef3cb75$var$ChainRule), $6uUbQ$uint16);\nlet $7cbbe4e24ef3cb75$export$5e6d09e6861162f6 = new $6uUbQ$VersionedStruct($6uUbQ$uint16, {\n  1: {\n    coverage: new $6uUbQ$Pointer($6uUbQ$uint16, $7cbbe4e24ef3cb75$export$17608c3f81a6111),\n    chainCount: $6uUbQ$uint16,\n    chainRuleSets: new $6uUbQ$Array(new $6uUbQ$Pointer($6uUbQ$uint16, $7cbbe4e24ef3cb75$var$ChainRuleSet), 'chainCount')\n  },\n  2: {\n    coverage: new $6uUbQ$Pointer($6uUbQ$uint16, $7cbbe4e24ef3cb75$export$17608c3f81a6111),\n    backtrackClassDef: new $6uUbQ$Pointer($6uUbQ$uint16, $7cbbe4e24ef3cb75$export$843d551fbbafef71),\n    inputClassDef: new $6uUbQ$Pointer($6uUbQ$uint16, $7cbbe4e24ef3cb75$export$843d551fbbafef71),\n    lookaheadClassDef: new $6uUbQ$Pointer($6uUbQ$uint16, $7cbbe4e24ef3cb75$export$843d551fbbafef71),\n    chainCount: $6uUbQ$uint16,\n    chainClassSet: new $6uUbQ$Array(new $6uUbQ$Pointer($6uUbQ$uint16, $7cbbe4e24ef3cb75$var$ChainRuleSet), 'chainCount')\n  },\n  3: {\n    backtrackGlyphCount: $6uUbQ$uint16,\n    backtrackCoverage: new $6uUbQ$Array(new $6uUbQ$Pointer($6uUbQ$uint16, $7cbbe4e24ef3cb75$export$17608c3f81a6111), 'backtrackGlyphCount'),\n    inputGlyphCount: $6uUbQ$uint16,\n    inputCoverage: new $6uUbQ$Array(new $6uUbQ$Pointer($6uUbQ$uint16, $7cbbe4e24ef3cb75$export$17608c3f81a6111), 'inputGlyphCount'),\n    lookaheadGlyphCount: $6uUbQ$uint16,\n    lookaheadCoverage: new $6uUbQ$Array(new $6uUbQ$Pointer($6uUbQ$uint16, $7cbbe4e24ef3cb75$export$17608c3f81a6111), 'lookaheadGlyphCount'),\n    lookupCount: $6uUbQ$uint16,\n    lookupRecords: new $6uUbQ$Array($7cbbe4e24ef3cb75$var$LookupRecord, 'lookupCount')\n  }\n});\n/*******************\n * Variation Store *\n *******************/\n\nlet $1a47b0c45c1c22fe$var$F2DOT14 = new $6uUbQ$Fixed(16, 'BE', 14);\nlet $1a47b0c45c1c22fe$var$RegionAxisCoordinates = new $6uUbQ$Struct({\n  startCoord: $1a47b0c45c1c22fe$var$F2DOT14,\n  peakCoord: $1a47b0c45c1c22fe$var$F2DOT14,\n  endCoord: $1a47b0c45c1c22fe$var$F2DOT14\n});\nlet $1a47b0c45c1c22fe$var$VariationRegionList = new $6uUbQ$Struct({\n  axisCount: $6uUbQ$uint16,\n  regionCount: $6uUbQ$uint16,\n  variationRegions: new $6uUbQ$Array(new $6uUbQ$Array($1a47b0c45c1c22fe$var$RegionAxisCoordinates, 'axisCount'), 'regionCount')\n});\nlet $1a47b0c45c1c22fe$var$DeltaSet = new $6uUbQ$Struct({\n  shortDeltas: new $6uUbQ$Array($6uUbQ$int16, t => t.parent.shortDeltaCount),\n  regionDeltas: new $6uUbQ$Array($6uUbQ$int8, t => t.parent.regionIndexCount - t.parent.shortDeltaCount),\n  deltas: t => t.shortDeltas.concat(t.regionDeltas)\n});\nlet $1a47b0c45c1c22fe$var$ItemVariationData = new $6uUbQ$Struct({\n  itemCount: $6uUbQ$uint16,\n  shortDeltaCount: $6uUbQ$uint16,\n  regionIndexCount: $6uUbQ$uint16,\n  regionIndexes: new $6uUbQ$Array($6uUbQ$uint16, 'regionIndexCount'),\n  deltaSets: new $6uUbQ$Array($1a47b0c45c1c22fe$var$DeltaSet, 'itemCount')\n});\nlet $1a47b0c45c1c22fe$export$fe1b122a2710f241 = new $6uUbQ$Struct({\n  format: $6uUbQ$uint16,\n  variationRegionList: new $6uUbQ$Pointer($6uUbQ$uint32, $1a47b0c45c1c22fe$var$VariationRegionList),\n  variationDataCount: $6uUbQ$uint16,\n  itemVariationData: new $6uUbQ$Array(new $6uUbQ$Pointer($6uUbQ$uint32, $1a47b0c45c1c22fe$var$ItemVariationData), 'variationDataCount')\n});\n/**********************\n * Feature Variations *\n **********************/\n\nlet $1a47b0c45c1c22fe$var$ConditionTable = new $6uUbQ$VersionedStruct($6uUbQ$uint16, {\n  1: {\n    axisIndex: $6uUbQ$uint16,\n    axisIndex: $6uUbQ$uint16,\n    filterRangeMinValue: $1a47b0c45c1c22fe$var$F2DOT14,\n    filterRangeMaxValue: $1a47b0c45c1c22fe$var$F2DOT14\n  }\n});\nlet $1a47b0c45c1c22fe$var$ConditionSet = new $6uUbQ$Struct({\n  conditionCount: $6uUbQ$uint16,\n  conditionTable: new $6uUbQ$Array(new $6uUbQ$Pointer($6uUbQ$uint32, $1a47b0c45c1c22fe$var$ConditionTable), 'conditionCount')\n});\nlet $1a47b0c45c1c22fe$var$FeatureTableSubstitutionRecord = new $6uUbQ$Struct({\n  featureIndex: $6uUbQ$uint16,\n  alternateFeatureTable: new $6uUbQ$Pointer($6uUbQ$uint32, (0, $7cbbe4e24ef3cb75$export$6e91cf7616333d5), {\n    type: 'parent'\n  })\n});\nlet $1a47b0c45c1c22fe$var$FeatureTableSubstitution = new $6uUbQ$Struct({\n  version: $6uUbQ$fixed32,\n  substitutionCount: $6uUbQ$uint16,\n  substitutions: new $6uUbQ$Array($1a47b0c45c1c22fe$var$FeatureTableSubstitutionRecord, 'substitutionCount')\n});\nlet $1a47b0c45c1c22fe$var$FeatureVariationRecord = new $6uUbQ$Struct({\n  conditionSet: new $6uUbQ$Pointer($6uUbQ$uint32, $1a47b0c45c1c22fe$var$ConditionSet, {\n    type: 'parent'\n  }),\n  featureTableSubstitution: new $6uUbQ$Pointer($6uUbQ$uint32, $1a47b0c45c1c22fe$var$FeatureTableSubstitution, {\n    type: 'parent'\n  })\n});\nlet $1a47b0c45c1c22fe$export$441b70b7971dd419 = new $6uUbQ$Struct({\n  majorVersion: $6uUbQ$uint16,\n  minorVersion: $6uUbQ$uint16,\n  featureVariationRecordCount: $6uUbQ$uint32,\n  featureVariationRecords: new $6uUbQ$Array($1a47b0c45c1c22fe$var$FeatureVariationRecord, 'featureVariationRecordCount')\n}); // Checks if an operand is an index of a predefined value,\n// otherwise delegates to the provided type.\n\nclass $b84fd3dd9d8eddb2$var$PredefinedOp {\n  decode(stream, parent, operands) {\n    if (this.predefinedOps[operands[0]]) return this.predefinedOps[operands[0]];\n    return this.type.decode(stream, parent, operands);\n  }\n\n  size(value, ctx) {\n    return this.type.size(value, ctx);\n  }\n\n  encode(stream, value, ctx) {\n    let index = this.predefinedOps.indexOf(value);\n    if (index !== -1) return index;\n    return this.type.encode(stream, value, ctx);\n  }\n\n  constructor(predefinedOps, type) {\n    this.predefinedOps = predefinedOps;\n    this.type = type;\n  }\n\n}\n\nclass $b84fd3dd9d8eddb2$var$CFFEncodingVersion extends $6uUbQ$Number {\n  decode(stream) {\n    return $6uUbQ$uint8.decode(stream) & 0x7f;\n  }\n\n  constructor() {\n    super('UInt8');\n  }\n\n}\n\nlet $b84fd3dd9d8eddb2$var$Range1 = new $6uUbQ$Struct({\n  first: $6uUbQ$uint16,\n  nLeft: $6uUbQ$uint8\n});\nlet $b84fd3dd9d8eddb2$var$Range2 = new $6uUbQ$Struct({\n  first: $6uUbQ$uint16,\n  nLeft: $6uUbQ$uint16\n});\nlet $b84fd3dd9d8eddb2$var$CFFCustomEncoding = new $6uUbQ$VersionedStruct(new $b84fd3dd9d8eddb2$var$CFFEncodingVersion(), {\n  0: {\n    nCodes: $6uUbQ$uint8,\n    codes: new $6uUbQ$Array($6uUbQ$uint8, 'nCodes')\n  },\n  1: {\n    nRanges: $6uUbQ$uint8,\n    ranges: new $6uUbQ$Array($b84fd3dd9d8eddb2$var$Range1, 'nRanges')\n  }\n});\nlet $b84fd3dd9d8eddb2$var$CFFEncoding = new $b84fd3dd9d8eddb2$var$PredefinedOp([(0, $bc0433d9b7e41f5f$export$dee0027060fa13bd), (0, $bc0433d9b7e41f5f$export$4f58f497e14a53c3)], new (0, $0e34a43d05bde82c$export$2e2bcd8739ae039)($b84fd3dd9d8eddb2$var$CFFCustomEncoding, {\n  lazy: true\n})); // Decodes an array of ranges until the total\n// length is equal to the provided length.\n\nclass $b84fd3dd9d8eddb2$var$RangeArray extends $6uUbQ$Array {\n  decode(stream, parent) {\n    let length = (0, $6uUbQ$resolveLength)(this.length, stream, parent);\n    let count = 0;\n    let res = [];\n\n    while (count < length) {\n      let range = this.type.decode(stream, parent);\n      range.offset = count;\n      count += range.nLeft + 1;\n      res.push(range);\n    }\n\n    return res;\n  }\n\n}\n\nlet $b84fd3dd9d8eddb2$var$CFFCustomCharset = new $6uUbQ$VersionedStruct($6uUbQ$uint8, {\n  0: {\n    glyphs: new $6uUbQ$Array($6uUbQ$uint16, t => t.parent.CharStrings.length - 1)\n  },\n  1: {\n    ranges: new $b84fd3dd9d8eddb2$var$RangeArray($b84fd3dd9d8eddb2$var$Range1, t => t.parent.CharStrings.length - 1)\n  },\n  2: {\n    ranges: new $b84fd3dd9d8eddb2$var$RangeArray($b84fd3dd9d8eddb2$var$Range2, t => t.parent.CharStrings.length - 1)\n  }\n});\nlet $b84fd3dd9d8eddb2$var$CFFCharset = new $b84fd3dd9d8eddb2$var$PredefinedOp([(0, $ef658f5c9a1488b2$export$c33b50336c234f16), (0, $ef658f5c9a1488b2$export$3ed0f9e1fee8d489), (0, $ef658f5c9a1488b2$export$dc28be11139d4120)], new (0, $0e34a43d05bde82c$export$2e2bcd8739ae039)($b84fd3dd9d8eddb2$var$CFFCustomCharset, {\n  lazy: true\n}));\nlet $b84fd3dd9d8eddb2$var$FDRange3 = new $6uUbQ$Struct({\n  first: $6uUbQ$uint16,\n  fd: $6uUbQ$uint8\n});\nlet $b84fd3dd9d8eddb2$var$FDRange4 = new $6uUbQ$Struct({\n  first: $6uUbQ$uint32,\n  fd: $6uUbQ$uint16\n});\nlet $b84fd3dd9d8eddb2$var$FDSelect = new $6uUbQ$VersionedStruct($6uUbQ$uint8, {\n  0: {\n    fds: new $6uUbQ$Array($6uUbQ$uint8, t => t.parent.CharStrings.length)\n  },\n  3: {\n    nRanges: $6uUbQ$uint16,\n    ranges: new $6uUbQ$Array($b84fd3dd9d8eddb2$var$FDRange3, 'nRanges'),\n    sentinel: $6uUbQ$uint16\n  },\n  4: {\n    nRanges: $6uUbQ$uint32,\n    ranges: new $6uUbQ$Array($b84fd3dd9d8eddb2$var$FDRange4, 'nRanges'),\n    sentinel: $6uUbQ$uint32\n  }\n});\nlet $b84fd3dd9d8eddb2$var$ptr = new (0, $0e34a43d05bde82c$export$2e2bcd8739ae039)((0, $6d59db2e29cc77b3$export$2e2bcd8739ae039));\n\nclass $b84fd3dd9d8eddb2$var$CFFPrivateOp {\n  decode(stream, parent, operands) {\n    parent.length = operands[0];\n    return $b84fd3dd9d8eddb2$var$ptr.decode(stream, parent, [operands[1]]);\n  }\n\n  size(dict, ctx) {\n    return [(0, $6d59db2e29cc77b3$export$2e2bcd8739ae039).size(dict, ctx, false), $b84fd3dd9d8eddb2$var$ptr.size(dict, ctx)[0]];\n  }\n\n  encode(stream, dict, ctx) {\n    return [(0, $6d59db2e29cc77b3$export$2e2bcd8739ae039).size(dict, ctx, false), $b84fd3dd9d8eddb2$var$ptr.encode(stream, dict, ctx)[0]];\n  }\n\n}\n\nlet $b84fd3dd9d8eddb2$var$FontDict = new (0, $61aa549f16d58b9b$export$2e2bcd8739ae039)([// key       name                   type(s)                                 default\n[18, 'Private', new $b84fd3dd9d8eddb2$var$CFFPrivateOp(), null], [[12, 38], 'FontName', 'sid', null], [[12, 7], 'FontMatrix', 'array', [0.001, 0, 0, 0.001, 0, 0]], [[12, 5], 'PaintType', 'number', 0]]);\nlet $b84fd3dd9d8eddb2$var$CFFTopDict = new (0, $61aa549f16d58b9b$export$2e2bcd8739ae039)([// key       name                   type(s)                                 default\n[[12, 30], 'ROS', ['sid', 'sid', 'number'], null], [0, 'version', 'sid', null], [1, 'Notice', 'sid', null], [[12, 0], 'Copyright', 'sid', null], [2, 'FullName', 'sid', null], [3, 'FamilyName', 'sid', null], [4, 'Weight', 'sid', null], [[12, 1], 'isFixedPitch', 'boolean', false], [[12, 2], 'ItalicAngle', 'number', 0], [[12, 3], 'UnderlinePosition', 'number', -100], [[12, 4], 'UnderlineThickness', 'number', 50], [[12, 5], 'PaintType', 'number', 0], [[12, 6], 'CharstringType', 'number', 2], [[12, 7], 'FontMatrix', 'array', [0.001, 0, 0, 0.001, 0, 0]], [13, 'UniqueID', 'number', null], [5, 'FontBBox', 'array', [0, 0, 0, 0]], [[12, 8], 'StrokeWidth', 'number', 0], [14, 'XUID', 'array', null], [15, 'charset', $b84fd3dd9d8eddb2$var$CFFCharset, (0, $ef658f5c9a1488b2$export$c33b50336c234f16)], [16, 'Encoding', $b84fd3dd9d8eddb2$var$CFFEncoding, (0, $bc0433d9b7e41f5f$export$dee0027060fa13bd)], [17, 'CharStrings', new (0, $0e34a43d05bde82c$export$2e2bcd8739ae039)(new (0, $43e9821ef3717eec$export$2e2bcd8739ae039)()), null], [18, 'Private', new $b84fd3dd9d8eddb2$var$CFFPrivateOp(), null], [[12, 20], 'SyntheticBase', 'number', null], [[12, 21], 'PostScript', 'sid', null], [[12, 22], 'BaseFontName', 'sid', null], [[12, 23], 'BaseFontBlend', 'delta', null], // CID font specific\n[[12, 31], 'CIDFontVersion', 'number', 0], [[12, 32], 'CIDFontRevision', 'number', 0], [[12, 33], 'CIDFontType', 'number', 0], [[12, 34], 'CIDCount', 'number', 8720], [[12, 35], 'UIDBase', 'number', null], [[12, 37], 'FDSelect', new (0, $0e34a43d05bde82c$export$2e2bcd8739ae039)($b84fd3dd9d8eddb2$var$FDSelect), null], [[12, 36], 'FDArray', new (0, $0e34a43d05bde82c$export$2e2bcd8739ae039)(new (0, $43e9821ef3717eec$export$2e2bcd8739ae039)($b84fd3dd9d8eddb2$var$FontDict)), null], [[12, 38], 'FontName', 'sid', null]]);\nlet $b84fd3dd9d8eddb2$var$VariationStore = new $6uUbQ$Struct({\n  length: $6uUbQ$uint16,\n  itemVariationStore: (0, $1a47b0c45c1c22fe$export$fe1b122a2710f241)\n});\nlet $b84fd3dd9d8eddb2$var$CFF2TopDict = new (0, $61aa549f16d58b9b$export$2e2bcd8739ae039)([[[12, 7], 'FontMatrix', 'array', [0.001, 0, 0, 0.001, 0, 0]], [17, 'CharStrings', new (0, $0e34a43d05bde82c$export$2e2bcd8739ae039)(new (0, $43e9821ef3717eec$export$2e2bcd8739ae039)()), null], [[12, 37], 'FDSelect', new (0, $0e34a43d05bde82c$export$2e2bcd8739ae039)($b84fd3dd9d8eddb2$var$FDSelect), null], [[12, 36], 'FDArray', new (0, $0e34a43d05bde82c$export$2e2bcd8739ae039)(new (0, $43e9821ef3717eec$export$2e2bcd8739ae039)($b84fd3dd9d8eddb2$var$FontDict)), null], [24, 'vstore', new (0, $0e34a43d05bde82c$export$2e2bcd8739ae039)($b84fd3dd9d8eddb2$var$VariationStore), null], [25, 'maxstack', 'number', 193]]);\nlet $b84fd3dd9d8eddb2$var$CFFTop = new $6uUbQ$VersionedStruct($6uUbQ$fixed16, {\n  1: {\n    hdrSize: $6uUbQ$uint8,\n    offSize: $6uUbQ$uint8,\n    nameIndex: new (0, $43e9821ef3717eec$export$2e2bcd8739ae039)(new $6uUbQ$String('length')),\n    topDictIndex: new (0, $43e9821ef3717eec$export$2e2bcd8739ae039)($b84fd3dd9d8eddb2$var$CFFTopDict),\n    stringIndex: new (0, $43e9821ef3717eec$export$2e2bcd8739ae039)(new $6uUbQ$String('length')),\n    globalSubrIndex: new (0, $43e9821ef3717eec$export$2e2bcd8739ae039)()\n  },\n  2: {\n    hdrSize: $6uUbQ$uint8,\n    length: $6uUbQ$uint16,\n    topDict: $b84fd3dd9d8eddb2$var$CFF2TopDict,\n    globalSubrIndex: new (0, $43e9821ef3717eec$export$2e2bcd8739ae039)()\n  }\n});\nvar $b84fd3dd9d8eddb2$export$2e2bcd8739ae039 = $b84fd3dd9d8eddb2$var$CFFTop;\n\nclass $822ac0d589e4e237$var$CFFFont {\n  static decode(stream) {\n    return new $822ac0d589e4e237$var$CFFFont(stream);\n  }\n\n  decode() {\n    let start = this.stream.pos;\n    let top = (0, $b84fd3dd9d8eddb2$export$2e2bcd8739ae039).decode(this.stream);\n\n    for (let key in top) {\n      let val = top[key];\n      this[key] = val;\n    }\n\n    if (this.version < 2) {\n      if (this.topDictIndex.length !== 1) throw new Error(\"Only a single font is allowed in CFF\");\n      this.topDict = this.topDictIndex[0];\n    }\n\n    this.isCIDFont = this.topDict.ROS != null;\n    return this;\n  }\n\n  string(sid) {\n    if (this.version >= 2) return null;\n    if (sid < (0, $229224aec43783c5$export$2e2bcd8739ae039).length) return (0, $229224aec43783c5$export$2e2bcd8739ae039)[sid];\n    return this.stringIndex[sid - (0, $229224aec43783c5$export$2e2bcd8739ae039).length];\n  }\n\n  get postscriptName() {\n    if (this.version < 2) return this.nameIndex[0];\n    return null;\n  }\n\n  get fullName() {\n    return this.string(this.topDict.FullName);\n  }\n\n  get familyName() {\n    return this.string(this.topDict.FamilyName);\n  }\n\n  getCharString(glyph) {\n    this.stream.pos = this.topDict.CharStrings[glyph].offset;\n    return this.stream.readBuffer(this.topDict.CharStrings[glyph].length);\n  }\n\n  getGlyphName(gid) {\n    // CFF2 glyph names are in the post table.\n    if (this.version >= 2) return null; // CID-keyed fonts don't have glyph names\n\n    if (this.isCIDFont) return null;\n    let {\n      charset: charset\n    } = this.topDict;\n    if (Array.isArray(charset)) return charset[gid];\n    if (gid === 0) return '.notdef';\n    gid -= 1;\n\n    switch (charset.version) {\n      case 0:\n        return this.string(charset.glyphs[gid]);\n\n      case 1:\n      case 2:\n        for (let i = 0; i < charset.ranges.length; i++) {\n          let range = charset.ranges[i];\n          if (range.offset <= gid && gid <= range.offset + range.nLeft) return this.string(range.first + (gid - range.offset));\n        }\n\n        break;\n    }\n\n    return null;\n  }\n\n  fdForGlyph(gid) {\n    if (!this.topDict.FDSelect) return null;\n\n    switch (this.topDict.FDSelect.version) {\n      case 0:\n        return this.topDict.FDSelect.fds[gid];\n\n      case 3:\n      case 4:\n        let {\n          ranges: ranges\n        } = this.topDict.FDSelect;\n        let low = 0;\n        let high = ranges.length - 1;\n\n        while (low <= high) {\n          let mid = low + high >> 1;\n          if (gid < ranges[mid].first) high = mid - 1;else if (mid < high && gid >= ranges[mid + 1].first) low = mid + 1;else return ranges[mid].fd;\n        }\n\n      default:\n        throw new Error(`Unknown FDSelect version: ${this.topDict.FDSelect.version}`);\n    }\n  }\n\n  privateDictForGlyph(gid) {\n    if (this.topDict.FDSelect) {\n      let fd = this.fdForGlyph(gid);\n      if (this.topDict.FDArray[fd]) return this.topDict.FDArray[fd].Private;\n      return null;\n    }\n\n    if (this.version < 2) return this.topDict.Private;\n    return this.topDict.FDArray[0].Private;\n  }\n\n  constructor(stream) {\n    this.stream = stream;\n    this.decode();\n  }\n\n}\n\nvar $822ac0d589e4e237$export$2e2bcd8739ae039 = $822ac0d589e4e237$var$CFFFont;\nlet $2bbf2bc1ce37cd8f$var$VerticalOrigin = new $6uUbQ$Struct({\n  glyphIndex: $6uUbQ$uint16,\n  vertOriginY: $6uUbQ$int16\n});\nvar $2bbf2bc1ce37cd8f$export$2e2bcd8739ae039 = new $6uUbQ$Struct({\n  majorVersion: $6uUbQ$uint16,\n  minorVersion: $6uUbQ$uint16,\n  defaultVertOriginY: $6uUbQ$int16,\n  numVertOriginYMetrics: $6uUbQ$uint16,\n  metrics: new $6uUbQ$Array($2bbf2bc1ce37cd8f$var$VerticalOrigin, 'numVertOriginYMetrics')\n});\nlet $0941618dc22a946d$export$16b227cb15d716a0 = new $6uUbQ$Struct({\n  height: $6uUbQ$uint8,\n  width: $6uUbQ$uint8,\n  horiBearingX: $6uUbQ$int8,\n  horiBearingY: $6uUbQ$int8,\n  horiAdvance: $6uUbQ$uint8,\n  vertBearingX: $6uUbQ$int8,\n  vertBearingY: $6uUbQ$int8,\n  vertAdvance: $6uUbQ$uint8\n});\nlet $0941618dc22a946d$export$62c53e75f69bfe12 = new $6uUbQ$Struct({\n  height: $6uUbQ$uint8,\n  width: $6uUbQ$uint8,\n  bearingX: $6uUbQ$int8,\n  bearingY: $6uUbQ$int8,\n  advance: $6uUbQ$uint8\n});\nlet $0941618dc22a946d$var$EBDTComponent = new $6uUbQ$Struct({\n  glyph: $6uUbQ$uint16,\n  xOffset: $6uUbQ$int8,\n  yOffset: $6uUbQ$int8\n});\n\nclass $0941618dc22a946d$var$ByteAligned {}\n\nclass $0941618dc22a946d$var$BitAligned {}\n\nlet $0941618dc22a946d$export$f1f5ddeb20d14f = new $6uUbQ$VersionedStruct('version', {\n  1: {\n    metrics: $0941618dc22a946d$export$62c53e75f69bfe12,\n    data: $0941618dc22a946d$var$ByteAligned\n  },\n  2: {\n    metrics: $0941618dc22a946d$export$62c53e75f69bfe12,\n    data: $0941618dc22a946d$var$BitAligned\n  },\n  // format 3 is deprecated\n  // format 4 is not supported by Microsoft\n  5: {\n    data: $0941618dc22a946d$var$BitAligned\n  },\n  6: {\n    metrics: $0941618dc22a946d$export$16b227cb15d716a0,\n    data: $0941618dc22a946d$var$ByteAligned\n  },\n  7: {\n    metrics: $0941618dc22a946d$export$16b227cb15d716a0,\n    data: $0941618dc22a946d$var$BitAligned\n  },\n  8: {\n    metrics: $0941618dc22a946d$export$62c53e75f69bfe12,\n    pad: new $6uUbQ$Reserved($6uUbQ$uint8),\n    numComponents: $6uUbQ$uint16,\n    components: new $6uUbQ$Array($0941618dc22a946d$var$EBDTComponent, 'numComponents')\n  },\n  9: {\n    metrics: $0941618dc22a946d$export$16b227cb15d716a0,\n    pad: new $6uUbQ$Reserved($6uUbQ$uint8),\n    numComponents: $6uUbQ$uint16,\n    components: new $6uUbQ$Array($0941618dc22a946d$var$EBDTComponent, 'numComponents')\n  },\n  17: {\n    metrics: $0941618dc22a946d$export$62c53e75f69bfe12,\n    dataLen: $6uUbQ$uint32,\n    data: new $6uUbQ$Buffer('dataLen')\n  },\n  18: {\n    metrics: $0941618dc22a946d$export$16b227cb15d716a0,\n    dataLen: $6uUbQ$uint32,\n    data: new $6uUbQ$Buffer('dataLen')\n  },\n  19: {\n    dataLen: $6uUbQ$uint32,\n    data: new $6uUbQ$Buffer('dataLen')\n  }\n});\nlet $9911c4c7201c13de$var$SBitLineMetrics = new $6uUbQ$Struct({\n  ascender: $6uUbQ$int8,\n  descender: $6uUbQ$int8,\n  widthMax: $6uUbQ$uint8,\n  caretSlopeNumerator: $6uUbQ$int8,\n  caretSlopeDenominator: $6uUbQ$int8,\n  caretOffset: $6uUbQ$int8,\n  minOriginSB: $6uUbQ$int8,\n  minAdvanceSB: $6uUbQ$int8,\n  maxBeforeBL: $6uUbQ$int8,\n  minAfterBL: $6uUbQ$int8,\n  pad: new $6uUbQ$Reserved($6uUbQ$int8, 2)\n});\nlet $9911c4c7201c13de$var$CodeOffsetPair = new $6uUbQ$Struct({\n  glyphCode: $6uUbQ$uint16,\n  offset: $6uUbQ$uint16\n});\nlet $9911c4c7201c13de$var$IndexSubtable = new $6uUbQ$VersionedStruct($6uUbQ$uint16, {\n  header: {\n    imageFormat: $6uUbQ$uint16,\n    imageDataOffset: $6uUbQ$uint32\n  },\n  1: {\n    offsetArray: new $6uUbQ$Array($6uUbQ$uint32, t => t.parent.lastGlyphIndex - t.parent.firstGlyphIndex + 1)\n  },\n  2: {\n    imageSize: $6uUbQ$uint32,\n    bigMetrics: (0, $0941618dc22a946d$export$16b227cb15d716a0)\n  },\n  3: {\n    offsetArray: new $6uUbQ$Array($6uUbQ$uint16, t => t.parent.lastGlyphIndex - t.parent.firstGlyphIndex + 1)\n  },\n  4: {\n    numGlyphs: $6uUbQ$uint32,\n    glyphArray: new $6uUbQ$Array($9911c4c7201c13de$var$CodeOffsetPair, t => t.numGlyphs + 1)\n  },\n  5: {\n    imageSize: $6uUbQ$uint32,\n    bigMetrics: (0, $0941618dc22a946d$export$16b227cb15d716a0),\n    numGlyphs: $6uUbQ$uint32,\n    glyphCodeArray: new $6uUbQ$Array($6uUbQ$uint16, 'numGlyphs')\n  }\n});\nlet $9911c4c7201c13de$var$IndexSubtableArray = new $6uUbQ$Struct({\n  firstGlyphIndex: $6uUbQ$uint16,\n  lastGlyphIndex: $6uUbQ$uint16,\n  subtable: new $6uUbQ$Pointer($6uUbQ$uint32, $9911c4c7201c13de$var$IndexSubtable)\n});\nlet $9911c4c7201c13de$var$BitmapSizeTable = new $6uUbQ$Struct({\n  indexSubTableArray: new $6uUbQ$Pointer($6uUbQ$uint32, new $6uUbQ$Array($9911c4c7201c13de$var$IndexSubtableArray, 1), {\n    type: 'parent'\n  }),\n  indexTablesSize: $6uUbQ$uint32,\n  numberOfIndexSubTables: $6uUbQ$uint32,\n  colorRef: $6uUbQ$uint32,\n  hori: $9911c4c7201c13de$var$SBitLineMetrics,\n  vert: $9911c4c7201c13de$var$SBitLineMetrics,\n  startGlyphIndex: $6uUbQ$uint16,\n  endGlyphIndex: $6uUbQ$uint16,\n  ppemX: $6uUbQ$uint8,\n  ppemY: $6uUbQ$uint8,\n  bitDepth: $6uUbQ$uint8,\n  flags: new $6uUbQ$Bitfield($6uUbQ$uint8, ['horizontal', 'vertical'])\n});\nvar $9911c4c7201c13de$export$2e2bcd8739ae039 = new $6uUbQ$Struct({\n  version: $6uUbQ$uint32,\n  numSizes: $6uUbQ$uint32,\n  sizes: new $6uUbQ$Array($9911c4c7201c13de$var$BitmapSizeTable, 'numSizes')\n});\nlet $abb847051efd51b1$var$ImageTable = new $6uUbQ$Struct({\n  ppem: $6uUbQ$uint16,\n  resolution: $6uUbQ$uint16,\n  imageOffsets: new $6uUbQ$Array(new $6uUbQ$Pointer($6uUbQ$uint32, 'void'), t => t.parent.parent.maxp.numGlyphs + 1)\n});\nvar // This is the Apple sbix table, used by the \"Apple Color Emoji\" font.\n// It includes several image tables with images for each bitmap glyph\n// of several different sizes.\n$abb847051efd51b1$export$2e2bcd8739ae039 = new $6uUbQ$Struct({\n  version: $6uUbQ$uint16,\n  flags: new $6uUbQ$Bitfield($6uUbQ$uint16, ['renderOutlines']),\n  numImgTables: $6uUbQ$uint32,\n  imageTables: new $6uUbQ$Array(new $6uUbQ$Pointer($6uUbQ$uint32, $abb847051efd51b1$var$ImageTable), 'numImgTables')\n});\nlet $eb629188f3dfefdd$var$LayerRecord = new $6uUbQ$Struct({\n  gid: $6uUbQ$uint16,\n  paletteIndex: $6uUbQ$uint16 // Index value to use in the appropriate palette. This value must\n\n}); // be less than numPaletteEntries in the CPAL table, except for\n// the special case noted below. Each palette entry is 16 bits.\n// A palette index of 0xFFFF is a special case indicating that\n// the text foreground color should be used.\n\nlet $eb629188f3dfefdd$var$BaseGlyphRecord = new $6uUbQ$Struct({\n  gid: $6uUbQ$uint16,\n  // and is not rendered for color.\n  firstLayerIndex: $6uUbQ$uint16,\n  // There will be numLayers consecutive entries for this base glyph.\n  numLayers: $6uUbQ$uint16\n});\nvar $eb629188f3dfefdd$export$2e2bcd8739ae039 = new $6uUbQ$Struct({\n  version: $6uUbQ$uint16,\n  numBaseGlyphRecords: $6uUbQ$uint16,\n  baseGlyphRecord: new $6uUbQ$Pointer($6uUbQ$uint32, new $6uUbQ$Array($eb629188f3dfefdd$var$BaseGlyphRecord, 'numBaseGlyphRecords')),\n  layerRecords: new $6uUbQ$Pointer($6uUbQ$uint32, new $6uUbQ$Array($eb629188f3dfefdd$var$LayerRecord, 'numLayerRecords'), {\n    lazy: true\n  }),\n  numLayerRecords: $6uUbQ$uint16\n});\nlet $08734b8e7dc64587$var$ColorRecord = new $6uUbQ$Struct({\n  blue: $6uUbQ$uint8,\n  green: $6uUbQ$uint8,\n  red: $6uUbQ$uint8,\n  alpha: $6uUbQ$uint8\n});\nvar $08734b8e7dc64587$export$2e2bcd8739ae039 = new $6uUbQ$VersionedStruct($6uUbQ$uint16, {\n  header: {\n    numPaletteEntries: $6uUbQ$uint16,\n    numPalettes: $6uUbQ$uint16,\n    numColorRecords: $6uUbQ$uint16,\n    colorRecords: new $6uUbQ$Pointer($6uUbQ$uint32, new $6uUbQ$Array($08734b8e7dc64587$var$ColorRecord, 'numColorRecords')),\n    colorRecordIndices: new $6uUbQ$Array($6uUbQ$uint16, 'numPalettes')\n  },\n  0: {},\n  1: {\n    offsetPaletteTypeArray: new $6uUbQ$Pointer($6uUbQ$uint32, new $6uUbQ$Array($6uUbQ$uint32, 'numPalettes')),\n    offsetPaletteLabelArray: new $6uUbQ$Pointer($6uUbQ$uint32, new $6uUbQ$Array($6uUbQ$uint16, 'numPalettes')),\n    offsetPaletteEntryLabelArray: new $6uUbQ$Pointer($6uUbQ$uint32, new $6uUbQ$Array($6uUbQ$uint16, 'numPaletteEntries'))\n  }\n});\nlet $497cef411d884e34$var$BaseCoord = new $6uUbQ$VersionedStruct($6uUbQ$uint16, {\n  1: {\n    coordinate: $6uUbQ$int16 // X or Y value, in design units\n\n  },\n  2: {\n    coordinate: $6uUbQ$int16,\n    referenceGlyph: $6uUbQ$uint16,\n    baseCoordPoint: $6uUbQ$uint16 // Index of contour point on the referenceGlyph\n\n  },\n  3: {\n    coordinate: $6uUbQ$int16,\n    deviceTable: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$8215d14a63d9fb10)) // Device table for X or Y value\n\n  }\n});\nlet $497cef411d884e34$var$BaseValues = new $6uUbQ$Struct({\n  defaultIndex: $6uUbQ$uint16,\n  baseCoordCount: $6uUbQ$uint16,\n  baseCoords: new $6uUbQ$Array(new $6uUbQ$Pointer($6uUbQ$uint16, $497cef411d884e34$var$BaseCoord), 'baseCoordCount')\n});\nlet $497cef411d884e34$var$FeatMinMaxRecord = new $6uUbQ$Struct({\n  tag: new $6uUbQ$String(4),\n  minCoord: new $6uUbQ$Pointer($6uUbQ$uint16, $497cef411d884e34$var$BaseCoord, {\n    type: 'parent'\n  }),\n  maxCoord: new $6uUbQ$Pointer($6uUbQ$uint16, $497cef411d884e34$var$BaseCoord, {\n    type: 'parent'\n  }) // May be NULL\n\n});\nlet $497cef411d884e34$var$MinMax = new $6uUbQ$Struct({\n  minCoord: new $6uUbQ$Pointer($6uUbQ$uint16, $497cef411d884e34$var$BaseCoord),\n  maxCoord: new $6uUbQ$Pointer($6uUbQ$uint16, $497cef411d884e34$var$BaseCoord),\n  featMinMaxCount: $6uUbQ$uint16,\n  featMinMaxRecords: new $6uUbQ$Array($497cef411d884e34$var$FeatMinMaxRecord, 'featMinMaxCount') // In alphabetical order\n\n});\nlet $497cef411d884e34$var$BaseLangSysRecord = new $6uUbQ$Struct({\n  tag: new $6uUbQ$String(4),\n  minMax: new $6uUbQ$Pointer($6uUbQ$uint16, $497cef411d884e34$var$MinMax, {\n    type: 'parent'\n  })\n});\nlet $497cef411d884e34$var$BaseScript = new $6uUbQ$Struct({\n  baseValues: new $6uUbQ$Pointer($6uUbQ$uint16, $497cef411d884e34$var$BaseValues),\n  defaultMinMax: new $6uUbQ$Pointer($6uUbQ$uint16, $497cef411d884e34$var$MinMax),\n  baseLangSysCount: $6uUbQ$uint16,\n  baseLangSysRecords: new $6uUbQ$Array($497cef411d884e34$var$BaseLangSysRecord, 'baseLangSysCount') // in alphabetical order by BaseLangSysTag\n\n});\nlet $497cef411d884e34$var$BaseScriptRecord = new $6uUbQ$Struct({\n  tag: new $6uUbQ$String(4),\n  script: new $6uUbQ$Pointer($6uUbQ$uint16, $497cef411d884e34$var$BaseScript, {\n    type: 'parent'\n  })\n});\nlet $497cef411d884e34$var$BaseScriptList = new $6uUbQ$Array($497cef411d884e34$var$BaseScriptRecord, $6uUbQ$uint16); // Array of 4-byte baseline identification tags-must be in alphabetical order\n\nlet $497cef411d884e34$var$BaseTagList = new $6uUbQ$Array(new $6uUbQ$String(4), $6uUbQ$uint16);\nlet $497cef411d884e34$var$Axis = new $6uUbQ$Struct({\n  baseTagList: new $6uUbQ$Pointer($6uUbQ$uint16, $497cef411d884e34$var$BaseTagList),\n  baseScriptList: new $6uUbQ$Pointer($6uUbQ$uint16, $497cef411d884e34$var$BaseScriptList)\n});\nvar $497cef411d884e34$export$2e2bcd8739ae039 = new $6uUbQ$VersionedStruct($6uUbQ$uint32, {\n  header: {\n    horizAxis: new $6uUbQ$Pointer($6uUbQ$uint16, $497cef411d884e34$var$Axis),\n    vertAxis: new $6uUbQ$Pointer($6uUbQ$uint16, $497cef411d884e34$var$Axis) // May be NULL\n\n  },\n  0x00010000: {},\n  0x00010001: {\n    itemVariationStore: new $6uUbQ$Pointer($6uUbQ$uint32, (0, $1a47b0c45c1c22fe$export$fe1b122a2710f241))\n  }\n});\nlet $cf5f33c63ef209e6$var$AttachPoint = new $6uUbQ$Array($6uUbQ$uint16, $6uUbQ$uint16);\nlet $cf5f33c63ef209e6$var$AttachList = new $6uUbQ$Struct({\n  coverage: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n  glyphCount: $6uUbQ$uint16,\n  attachPoints: new $6uUbQ$Array(new $6uUbQ$Pointer($6uUbQ$uint16, $cf5f33c63ef209e6$var$AttachPoint), 'glyphCount')\n});\nlet $cf5f33c63ef209e6$var$CaretValue = new $6uUbQ$VersionedStruct($6uUbQ$uint16, {\n  1: {\n    coordinate: $6uUbQ$int16\n  },\n  2: {\n    caretValuePoint: $6uUbQ$uint16\n  },\n  3: {\n    coordinate: $6uUbQ$int16,\n    deviceTable: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$8215d14a63d9fb10))\n  }\n});\nlet $cf5f33c63ef209e6$var$LigGlyph = new $6uUbQ$Array(new $6uUbQ$Pointer($6uUbQ$uint16, $cf5f33c63ef209e6$var$CaretValue), $6uUbQ$uint16);\nlet $cf5f33c63ef209e6$var$LigCaretList = new $6uUbQ$Struct({\n  coverage: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n  ligGlyphCount: $6uUbQ$uint16,\n  ligGlyphs: new $6uUbQ$Array(new $6uUbQ$Pointer($6uUbQ$uint16, $cf5f33c63ef209e6$var$LigGlyph), 'ligGlyphCount')\n});\nlet $cf5f33c63ef209e6$var$MarkGlyphSetsDef = new $6uUbQ$Struct({\n  markSetTableFormat: $6uUbQ$uint16,\n  markSetCount: $6uUbQ$uint16,\n  coverage: new $6uUbQ$Array(new $6uUbQ$Pointer($6uUbQ$uint32, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)), 'markSetCount')\n});\nvar $cf5f33c63ef209e6$export$2e2bcd8739ae039 = new $6uUbQ$VersionedStruct($6uUbQ$uint32, {\n  header: {\n    glyphClassDef: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$843d551fbbafef71)),\n    attachList: new $6uUbQ$Pointer($6uUbQ$uint16, $cf5f33c63ef209e6$var$AttachList),\n    ligCaretList: new $6uUbQ$Pointer($6uUbQ$uint16, $cf5f33c63ef209e6$var$LigCaretList),\n    markAttachClassDef: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$843d551fbbafef71))\n  },\n  0x00010000: {},\n  0x00010002: {\n    markGlyphSetsDef: new $6uUbQ$Pointer($6uUbQ$uint16, $cf5f33c63ef209e6$var$MarkGlyphSetsDef)\n  },\n  0x00010003: {\n    markGlyphSetsDef: new $6uUbQ$Pointer($6uUbQ$uint16, $cf5f33c63ef209e6$var$MarkGlyphSetsDef),\n    itemVariationStore: new $6uUbQ$Pointer($6uUbQ$uint32, (0, $1a47b0c45c1c22fe$export$fe1b122a2710f241))\n  }\n});\nlet $47e0e8ef515d9903$var$ValueFormat = new $6uUbQ$Bitfield($6uUbQ$uint16, ['xPlacement', 'yPlacement', 'xAdvance', 'yAdvance', 'xPlaDevice', 'yPlaDevice', 'xAdvDevice', 'yAdvDevice']);\nlet $47e0e8ef515d9903$var$types = {\n  xPlacement: $6uUbQ$int16,\n  yPlacement: $6uUbQ$int16,\n  xAdvance: $6uUbQ$int16,\n  yAdvance: $6uUbQ$int16,\n  xPlaDevice: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$8215d14a63d9fb10), {\n    type: 'global',\n    relativeTo: ctx => ctx.rel\n  }),\n  yPlaDevice: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$8215d14a63d9fb10), {\n    type: 'global',\n    relativeTo: ctx => ctx.rel\n  }),\n  xAdvDevice: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$8215d14a63d9fb10), {\n    type: 'global',\n    relativeTo: ctx => ctx.rel\n  }),\n  yAdvDevice: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$8215d14a63d9fb10), {\n    type: 'global',\n    relativeTo: ctx => ctx.rel\n  })\n};\n\nclass $47e0e8ef515d9903$var$ValueRecord {\n  buildStruct(parent) {\n    let struct = parent;\n\n    while (!struct[this.key] && struct.parent) struct = struct.parent;\n\n    if (!struct[this.key]) return;\n    let fields = {};\n\n    fields.rel = () => struct._startOffset;\n\n    let format = struct[this.key];\n\n    for (let key in format) if (format[key]) fields[key] = $47e0e8ef515d9903$var$types[key];\n\n    return new $6uUbQ$Struct(fields);\n  }\n\n  size(val, ctx) {\n    return this.buildStruct(ctx).size(val, ctx);\n  }\n\n  decode(stream, parent) {\n    let res = this.buildStruct(parent).decode(stream, parent);\n    delete res.rel;\n    return res;\n  }\n\n  constructor() {\n    let key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'valueFormat';\n    this.key = key;\n  }\n\n}\n\nlet $47e0e8ef515d9903$var$PairValueRecord = new $6uUbQ$Struct({\n  secondGlyph: $6uUbQ$uint16,\n  value1: new $47e0e8ef515d9903$var$ValueRecord('valueFormat1'),\n  value2: new $47e0e8ef515d9903$var$ValueRecord('valueFormat2')\n});\nlet $47e0e8ef515d9903$var$PairSet = new $6uUbQ$Array($47e0e8ef515d9903$var$PairValueRecord, $6uUbQ$uint16);\nlet $47e0e8ef515d9903$var$Class2Record = new $6uUbQ$Struct({\n  value1: new $47e0e8ef515d9903$var$ValueRecord('valueFormat1'),\n  value2: new $47e0e8ef515d9903$var$ValueRecord('valueFormat2')\n});\nlet $47e0e8ef515d9903$var$Anchor = new $6uUbQ$VersionedStruct($6uUbQ$uint16, {\n  1: {\n    xCoordinate: $6uUbQ$int16,\n    yCoordinate: $6uUbQ$int16\n  },\n  2: {\n    xCoordinate: $6uUbQ$int16,\n    yCoordinate: $6uUbQ$int16,\n    anchorPoint: $6uUbQ$uint16\n  },\n  3: {\n    xCoordinate: $6uUbQ$int16,\n    yCoordinate: $6uUbQ$int16,\n    xDeviceTable: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$8215d14a63d9fb10)),\n    yDeviceTable: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$8215d14a63d9fb10))\n  }\n});\nlet $47e0e8ef515d9903$var$EntryExitRecord = new $6uUbQ$Struct({\n  entryAnchor: new $6uUbQ$Pointer($6uUbQ$uint16, $47e0e8ef515d9903$var$Anchor, {\n    type: 'parent'\n  }),\n  exitAnchor: new $6uUbQ$Pointer($6uUbQ$uint16, $47e0e8ef515d9903$var$Anchor, {\n    type: 'parent'\n  })\n});\nlet $47e0e8ef515d9903$var$MarkRecord = new $6uUbQ$Struct({\n  class: $6uUbQ$uint16,\n  markAnchor: new $6uUbQ$Pointer($6uUbQ$uint16, $47e0e8ef515d9903$var$Anchor, {\n    type: 'parent'\n  })\n});\nlet $47e0e8ef515d9903$var$MarkArray = new $6uUbQ$Array($47e0e8ef515d9903$var$MarkRecord, $6uUbQ$uint16);\nlet $47e0e8ef515d9903$var$BaseRecord = new $6uUbQ$Array(new $6uUbQ$Pointer($6uUbQ$uint16, $47e0e8ef515d9903$var$Anchor), t => t.parent.classCount);\nlet $47e0e8ef515d9903$var$BaseArray = new $6uUbQ$Array($47e0e8ef515d9903$var$BaseRecord, $6uUbQ$uint16);\nlet $47e0e8ef515d9903$var$ComponentRecord = new $6uUbQ$Array(new $6uUbQ$Pointer($6uUbQ$uint16, $47e0e8ef515d9903$var$Anchor), t => t.parent.parent.classCount);\nlet $47e0e8ef515d9903$var$LigatureAttach = new $6uUbQ$Array($47e0e8ef515d9903$var$ComponentRecord, $6uUbQ$uint16);\nlet $47e0e8ef515d9903$var$LigatureArray = new $6uUbQ$Array(new $6uUbQ$Pointer($6uUbQ$uint16, $47e0e8ef515d9903$var$LigatureAttach), $6uUbQ$uint16);\nlet $47e0e8ef515d9903$export$73a8cfb19cd43a0f = new $6uUbQ$VersionedStruct('lookupType', {\n  1: new $6uUbQ$VersionedStruct($6uUbQ$uint16, {\n    1: {\n      coverage: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n      valueFormat: $47e0e8ef515d9903$var$ValueFormat,\n      value: new $47e0e8ef515d9903$var$ValueRecord()\n    },\n    2: {\n      coverage: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n      valueFormat: $47e0e8ef515d9903$var$ValueFormat,\n      valueCount: $6uUbQ$uint16,\n      values: new $6uUbQ$LazyArray(new $47e0e8ef515d9903$var$ValueRecord(), 'valueCount')\n    }\n  }),\n  2: new $6uUbQ$VersionedStruct($6uUbQ$uint16, {\n    1: {\n      coverage: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n      valueFormat1: $47e0e8ef515d9903$var$ValueFormat,\n      valueFormat2: $47e0e8ef515d9903$var$ValueFormat,\n      pairSetCount: $6uUbQ$uint16,\n      pairSets: new $6uUbQ$LazyArray(new $6uUbQ$Pointer($6uUbQ$uint16, $47e0e8ef515d9903$var$PairSet), 'pairSetCount')\n    },\n    2: {\n      coverage: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n      valueFormat1: $47e0e8ef515d9903$var$ValueFormat,\n      valueFormat2: $47e0e8ef515d9903$var$ValueFormat,\n      classDef1: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$843d551fbbafef71)),\n      classDef2: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$843d551fbbafef71)),\n      class1Count: $6uUbQ$uint16,\n      class2Count: $6uUbQ$uint16,\n      classRecords: new $6uUbQ$LazyArray(new $6uUbQ$LazyArray($47e0e8ef515d9903$var$Class2Record, 'class2Count'), 'class1Count')\n    }\n  }),\n  3: {\n    format: $6uUbQ$uint16,\n    coverage: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n    entryExitCount: $6uUbQ$uint16,\n    entryExitRecords: new $6uUbQ$Array($47e0e8ef515d9903$var$EntryExitRecord, 'entryExitCount')\n  },\n  4: {\n    format: $6uUbQ$uint16,\n    markCoverage: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n    baseCoverage: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n    classCount: $6uUbQ$uint16,\n    markArray: new $6uUbQ$Pointer($6uUbQ$uint16, $47e0e8ef515d9903$var$MarkArray),\n    baseArray: new $6uUbQ$Pointer($6uUbQ$uint16, $47e0e8ef515d9903$var$BaseArray)\n  },\n  5: {\n    format: $6uUbQ$uint16,\n    markCoverage: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n    ligatureCoverage: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n    classCount: $6uUbQ$uint16,\n    markArray: new $6uUbQ$Pointer($6uUbQ$uint16, $47e0e8ef515d9903$var$MarkArray),\n    ligatureArray: new $6uUbQ$Pointer($6uUbQ$uint16, $47e0e8ef515d9903$var$LigatureArray)\n  },\n  6: {\n    format: $6uUbQ$uint16,\n    mark1Coverage: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n    mark2Coverage: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n    classCount: $6uUbQ$uint16,\n    mark1Array: new $6uUbQ$Pointer($6uUbQ$uint16, $47e0e8ef515d9903$var$MarkArray),\n    mark2Array: new $6uUbQ$Pointer($6uUbQ$uint16, $47e0e8ef515d9903$var$BaseArray)\n  },\n  7: (0, $7cbbe4e24ef3cb75$export$841858b892ce1f4c),\n  8: (0, $7cbbe4e24ef3cb75$export$5e6d09e6861162f6),\n  9: {\n    posFormat: $6uUbQ$uint16,\n    lookupType: $6uUbQ$uint16,\n    extension: new $6uUbQ$Pointer($6uUbQ$uint32, null)\n  }\n}); // Fix circular reference\n\n$47e0e8ef515d9903$export$73a8cfb19cd43a0f.versions[9].extension.type = $47e0e8ef515d9903$export$73a8cfb19cd43a0f;\nvar $47e0e8ef515d9903$export$2e2bcd8739ae039 = new $6uUbQ$VersionedStruct($6uUbQ$uint32, {\n  header: {\n    scriptList: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$3e15fc05ce864229)),\n    featureList: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$aa18130def4b6cb4)),\n    lookupList: new $6uUbQ$Pointer($6uUbQ$uint16, new (0, $7cbbe4e24ef3cb75$export$df0008c6ff2da22a)($47e0e8ef515d9903$export$73a8cfb19cd43a0f))\n  },\n  0x00010000: {},\n  0x00010001: {\n    featureVariations: new $6uUbQ$Pointer($6uUbQ$uint32, (0, $1a47b0c45c1c22fe$export$441b70b7971dd419))\n  }\n});\nlet $d3f442064af66e06$var$Sequence = new $6uUbQ$Array($6uUbQ$uint16, $6uUbQ$uint16);\nlet $d3f442064af66e06$var$AlternateSet = $d3f442064af66e06$var$Sequence;\nlet $d3f442064af66e06$var$Ligature = new $6uUbQ$Struct({\n  glyph: $6uUbQ$uint16,\n  compCount: $6uUbQ$uint16,\n  components: new $6uUbQ$Array($6uUbQ$uint16, t => t.compCount - 1)\n});\nlet $d3f442064af66e06$var$LigatureSet = new $6uUbQ$Array(new $6uUbQ$Pointer($6uUbQ$uint16, $d3f442064af66e06$var$Ligature), $6uUbQ$uint16);\nlet $d3f442064af66e06$var$GSUBLookup = new $6uUbQ$VersionedStruct('lookupType', {\n  1: new $6uUbQ$VersionedStruct($6uUbQ$uint16, {\n    1: {\n      coverage: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n      deltaGlyphID: $6uUbQ$int16\n    },\n    2: {\n      coverage: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n      glyphCount: $6uUbQ$uint16,\n      substitute: new $6uUbQ$LazyArray($6uUbQ$uint16, 'glyphCount')\n    }\n  }),\n  2: {\n    substFormat: $6uUbQ$uint16,\n    coverage: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n    count: $6uUbQ$uint16,\n    sequences: new $6uUbQ$LazyArray(new $6uUbQ$Pointer($6uUbQ$uint16, $d3f442064af66e06$var$Sequence), 'count')\n  },\n  3: {\n    substFormat: $6uUbQ$uint16,\n    coverage: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n    count: $6uUbQ$uint16,\n    alternateSet: new $6uUbQ$LazyArray(new $6uUbQ$Pointer($6uUbQ$uint16, $d3f442064af66e06$var$AlternateSet), 'count')\n  },\n  4: {\n    substFormat: $6uUbQ$uint16,\n    coverage: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n    count: $6uUbQ$uint16,\n    ligatureSets: new $6uUbQ$LazyArray(new $6uUbQ$Pointer($6uUbQ$uint16, $d3f442064af66e06$var$LigatureSet), 'count')\n  },\n  5: (0, $7cbbe4e24ef3cb75$export$841858b892ce1f4c),\n  6: (0, $7cbbe4e24ef3cb75$export$5e6d09e6861162f6),\n  7: {\n    substFormat: $6uUbQ$uint16,\n    lookupType: $6uUbQ$uint16,\n    extension: new $6uUbQ$Pointer($6uUbQ$uint32, null)\n  },\n  8: {\n    substFormat: $6uUbQ$uint16,\n    coverage: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n    backtrackCoverage: new $6uUbQ$Array(new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)), 'backtrackGlyphCount'),\n    lookaheadGlyphCount: $6uUbQ$uint16,\n    lookaheadCoverage: new $6uUbQ$Array(new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)), 'lookaheadGlyphCount'),\n    glyphCount: $6uUbQ$uint16,\n    substitutes: new $6uUbQ$Array($6uUbQ$uint16, 'glyphCount')\n  }\n}); // Fix circular reference\n\n$d3f442064af66e06$var$GSUBLookup.versions[7].extension.type = $d3f442064af66e06$var$GSUBLookup;\nvar $d3f442064af66e06$export$2e2bcd8739ae039 = new $6uUbQ$VersionedStruct($6uUbQ$uint32, {\n  header: {\n    scriptList: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$3e15fc05ce864229)),\n    featureList: new $6uUbQ$Pointer($6uUbQ$uint16, (0, $7cbbe4e24ef3cb75$export$aa18130def4b6cb4)),\n    lookupList: new $6uUbQ$Pointer($6uUbQ$uint16, new (0, $7cbbe4e24ef3cb75$export$df0008c6ff2da22a)($d3f442064af66e06$var$GSUBLookup))\n  },\n  0x00010000: {},\n  0x00010001: {\n    featureVariations: new $6uUbQ$Pointer($6uUbQ$uint32, (0, $1a47b0c45c1c22fe$export$441b70b7971dd419))\n  }\n});\nlet $71cfb3c4767fbd0c$var$JstfGSUBModList = new $6uUbQ$Array($6uUbQ$uint16, $6uUbQ$uint16);\nlet $71cfb3c4767fbd0c$var$JstfPriority = new $6uUbQ$Struct({\n  shrinkageEnableGSUB: new $6uUbQ$Pointer($6uUbQ$uint16, $71cfb3c4767fbd0c$var$JstfGSUBModList),\n  shrinkageDisableGSUB: new $6uUbQ$Pointer($6uUbQ$uint16, $71cfb3c4767fbd0c$var$JstfGSUBModList),\n  shrinkageEnableGPOS: new $6uUbQ$Pointer($6uUbQ$uint16, $71cfb3c4767fbd0c$var$JstfGSUBModList),\n  shrinkageDisableGPOS: new $6uUbQ$Pointer($6uUbQ$uint16, $71cfb3c4767fbd0c$var$JstfGSUBModList),\n  shrinkageJstfMax: new $6uUbQ$Pointer($6uUbQ$uint16, new (0, $7cbbe4e24ef3cb75$export$df0008c6ff2da22a)((0, $47e0e8ef515d9903$export$73a8cfb19cd43a0f))),\n  extensionEnableGSUB: new $6uUbQ$Pointer($6uUbQ$uint16, $71cfb3c4767fbd0c$var$JstfGSUBModList),\n  extensionDisableGSUB: new $6uUbQ$Pointer($6uUbQ$uint16, $71cfb3c4767fbd0c$var$JstfGSUBModList),\n  extensionEnableGPOS: new $6uUbQ$Pointer($6uUbQ$uint16, $71cfb3c4767fbd0c$var$JstfGSUBModList),\n  extensionDisableGPOS: new $6uUbQ$Pointer($6uUbQ$uint16, $71cfb3c4767fbd0c$var$JstfGSUBModList),\n  extensionJstfMax: new $6uUbQ$Pointer($6uUbQ$uint16, new (0, $7cbbe4e24ef3cb75$export$df0008c6ff2da22a)((0, $47e0e8ef515d9903$export$73a8cfb19cd43a0f)))\n});\nlet $71cfb3c4767fbd0c$var$JstfLangSys = new $6uUbQ$Array(new $6uUbQ$Pointer($6uUbQ$uint16, $71cfb3c4767fbd0c$var$JstfPriority), $6uUbQ$uint16);\nlet $71cfb3c4767fbd0c$var$JstfLangSysRecord = new $6uUbQ$Struct({\n  tag: new $6uUbQ$String(4),\n  jstfLangSys: new $6uUbQ$Pointer($6uUbQ$uint16, $71cfb3c4767fbd0c$var$JstfLangSys)\n});\nlet $71cfb3c4767fbd0c$var$JstfScript = new $6uUbQ$Struct({\n  extenderGlyphs: new $6uUbQ$Pointer($6uUbQ$uint16, new $6uUbQ$Array($6uUbQ$uint16, $6uUbQ$uint16)),\n  defaultLangSys: new $6uUbQ$Pointer($6uUbQ$uint16, $71cfb3c4767fbd0c$var$JstfLangSys),\n  langSysCount: $6uUbQ$uint16,\n  langSysRecords: new $6uUbQ$Array($71cfb3c4767fbd0c$var$JstfLangSysRecord, 'langSysCount')\n});\nlet $71cfb3c4767fbd0c$var$JstfScriptRecord = new $6uUbQ$Struct({\n  tag: new $6uUbQ$String(4),\n  script: new $6uUbQ$Pointer($6uUbQ$uint16, $71cfb3c4767fbd0c$var$JstfScript, {\n    type: 'parent'\n  })\n});\nvar $71cfb3c4767fbd0c$export$2e2bcd8739ae039 = new $6uUbQ$Struct({\n  version: $6uUbQ$uint32,\n  scriptCount: $6uUbQ$uint16,\n  scriptList: new $6uUbQ$Array($71cfb3c4767fbd0c$var$JstfScriptRecord, 'scriptCount')\n}); // TODO: add this to restructure\n\nclass $d059a6bd2d3b5b63$var$VariableSizeNumber {\n  decode(stream, parent) {\n    switch (this.size(0, parent)) {\n      case 1:\n        return stream.readUInt8();\n\n      case 2:\n        return stream.readUInt16BE();\n\n      case 3:\n        return stream.readUInt24BE();\n\n      case 4:\n        return stream.readUInt32BE();\n    }\n  }\n\n  size(val, parent) {\n    return (0, $6uUbQ$resolveLength)(this._size, null, parent);\n  }\n\n  constructor(size) {\n    this._size = size;\n  }\n\n}\n\nlet $d059a6bd2d3b5b63$var$MapDataEntry = new $6uUbQ$Struct({\n  entry: new $d059a6bd2d3b5b63$var$VariableSizeNumber(t => ((t.parent.entryFormat & 0x0030) >> 4) + 1),\n  outerIndex: t => t.entry >> (t.parent.entryFormat & 0x000F) + 1,\n  innerIndex: t => t.entry & (1 << (t.parent.entryFormat & 0x000F) + 1) - 1\n});\nlet $d059a6bd2d3b5b63$var$DeltaSetIndexMap = new $6uUbQ$Struct({\n  entryFormat: $6uUbQ$uint16,\n  mapCount: $6uUbQ$uint16,\n  mapData: new $6uUbQ$Array($d059a6bd2d3b5b63$var$MapDataEntry, 'mapCount')\n});\nvar $d059a6bd2d3b5b63$export$2e2bcd8739ae039 = new $6uUbQ$Struct({\n  majorVersion: $6uUbQ$uint16,\n  minorVersion: $6uUbQ$uint16,\n  itemVariationStore: new $6uUbQ$Pointer($6uUbQ$uint32, (0, $1a47b0c45c1c22fe$export$fe1b122a2710f241)),\n  advanceWidthMapping: new $6uUbQ$Pointer($6uUbQ$uint32, $d059a6bd2d3b5b63$var$DeltaSetIndexMap),\n  LSBMapping: new $6uUbQ$Pointer($6uUbQ$uint32, $d059a6bd2d3b5b63$var$DeltaSetIndexMap),\n  RSBMapping: new $6uUbQ$Pointer($6uUbQ$uint32, $d059a6bd2d3b5b63$var$DeltaSetIndexMap)\n});\nlet $dceeca3e1977ce30$var$Signature = new $6uUbQ$Struct({\n  format: $6uUbQ$uint32,\n  length: $6uUbQ$uint32,\n  offset: $6uUbQ$uint32\n});\nlet $dceeca3e1977ce30$var$SignatureBlock = new $6uUbQ$Struct({\n  reserved: new $6uUbQ$Reserved($6uUbQ$uint16, 2),\n  cbSignature: $6uUbQ$uint32,\n  signature: new $6uUbQ$Buffer('cbSignature')\n});\nvar $dceeca3e1977ce30$export$2e2bcd8739ae039 = new $6uUbQ$Struct({\n  ulVersion: $6uUbQ$uint32,\n  usNumSigs: $6uUbQ$uint16,\n  usFlag: $6uUbQ$uint16,\n  signatures: new $6uUbQ$Array($dceeca3e1977ce30$var$Signature, 'usNumSigs'),\n  signatureBlocks: new $6uUbQ$Array($dceeca3e1977ce30$var$SignatureBlock, 'usNumSigs')\n});\nlet $8acd740a9435aad0$var$GaspRange = new $6uUbQ$Struct({\n  rangeMaxPPEM: $6uUbQ$uint16,\n  rangeGaspBehavior: new $6uUbQ$Bitfield($6uUbQ$uint16, ['grayscale', 'gridfit', 'symmetricSmoothing', 'symmetricGridfit' // only in version 1, for ClearType\n  ])\n});\nvar $8acd740a9435aad0$export$2e2bcd8739ae039 = new $6uUbQ$Struct({\n  version: $6uUbQ$uint16,\n  numRanges: $6uUbQ$uint16,\n  gaspRanges: new $6uUbQ$Array($8acd740a9435aad0$var$GaspRange, 'numRanges') // Sorted by ppem\n\n});\nlet $b5f380243c34d6a0$var$DeviceRecord = new $6uUbQ$Struct({\n  pixelSize: $6uUbQ$uint8,\n  maximumWidth: $6uUbQ$uint8,\n  widths: new $6uUbQ$Array($6uUbQ$uint8, t => t.parent.parent.maxp.numGlyphs)\n});\nvar // The Horizontal Device Metrics table stores integer advance widths scaled to particular pixel sizes\n$b5f380243c34d6a0$export$2e2bcd8739ae039 = new $6uUbQ$Struct({\n  version: $6uUbQ$uint16,\n  numRecords: $6uUbQ$int16,\n  sizeDeviceRecord: $6uUbQ$int32,\n  records: new $6uUbQ$Array($b5f380243c34d6a0$var$DeviceRecord, 'numRecords')\n});\nlet $ca2df1256966e313$var$KernPair = new $6uUbQ$Struct({\n  left: $6uUbQ$uint16,\n  right: $6uUbQ$uint16,\n  value: $6uUbQ$int16\n});\nlet $ca2df1256966e313$var$ClassTable = new $6uUbQ$Struct({\n  firstGlyph: $6uUbQ$uint16,\n  nGlyphs: $6uUbQ$uint16,\n  offsets: new $6uUbQ$Array($6uUbQ$uint16, 'nGlyphs'),\n  max: t => t.offsets.length && Math.max.apply(Math, t.offsets)\n});\nlet $ca2df1256966e313$var$Kern2Array = new $6uUbQ$Struct({\n  off: t => t._startOffset - t.parent.parent._startOffset,\n  len: t => ((t.parent.leftTable.max - t.off) / t.parent.rowWidth + 1) * (t.parent.rowWidth / 2),\n  values: new $6uUbQ$LazyArray($6uUbQ$int16, 'len')\n});\nlet $ca2df1256966e313$var$KernSubtable = new $6uUbQ$VersionedStruct('format', {\n  0: {\n    nPairs: $6uUbQ$uint16,\n    searchRange: $6uUbQ$uint16,\n    entrySelector: $6uUbQ$uint16,\n    rangeShift: $6uUbQ$uint16,\n    pairs: new $6uUbQ$Array($ca2df1256966e313$var$KernPair, 'nPairs')\n  },\n  2: {\n    rowWidth: $6uUbQ$uint16,\n    leftTable: new $6uUbQ$Pointer($6uUbQ$uint16, $ca2df1256966e313$var$ClassTable, {\n      type: 'parent'\n    }),\n    rightTable: new $6uUbQ$Pointer($6uUbQ$uint16, $ca2df1256966e313$var$ClassTable, {\n      type: 'parent'\n    }),\n    array: new $6uUbQ$Pointer($6uUbQ$uint16, $ca2df1256966e313$var$Kern2Array, {\n      type: 'parent'\n    })\n  },\n  3: {\n    glyphCount: $6uUbQ$uint16,\n    kernValueCount: $6uUbQ$uint8,\n    leftClassCount: $6uUbQ$uint8,\n    rightClassCount: $6uUbQ$uint8,\n    flags: $6uUbQ$uint8,\n    kernValue: new $6uUbQ$Array($6uUbQ$int16, 'kernValueCount'),\n    leftClass: new $6uUbQ$Array($6uUbQ$uint8, 'glyphCount'),\n    rightClass: new $6uUbQ$Array($6uUbQ$uint8, 'glyphCount'),\n    kernIndex: new $6uUbQ$Array($6uUbQ$uint8, t => t.leftClassCount * t.rightClassCount)\n  }\n});\nlet $ca2df1256966e313$var$KernTable = new $6uUbQ$VersionedStruct('version', {\n  0: {\n    subVersion: $6uUbQ$uint16,\n    length: $6uUbQ$uint16,\n    format: $6uUbQ$uint8,\n    coverage: new $6uUbQ$Bitfield($6uUbQ$uint8, ['horizontal', 'minimum', 'crossStream', 'override' // If set to 1 the value in this table replaces the accumulated value\n    ]),\n    subtable: $ca2df1256966e313$var$KernSubtable,\n    padding: new $6uUbQ$Reserved($6uUbQ$uint8, t => t.length - t._currentOffset)\n  },\n  1: {\n    length: $6uUbQ$uint32,\n    coverage: new $6uUbQ$Bitfield($6uUbQ$uint8, [null, null, null, null, null, 'variation', 'crossStream', 'vertical' // Set if table has vertical kerning values\n    ]),\n    format: $6uUbQ$uint8,\n    tupleIndex: $6uUbQ$uint16,\n    subtable: $ca2df1256966e313$var$KernSubtable,\n    padding: new $6uUbQ$Reserved($6uUbQ$uint8, t => t.length - t._currentOffset)\n  }\n});\nvar $ca2df1256966e313$export$2e2bcd8739ae039 = new $6uUbQ$VersionedStruct($6uUbQ$uint16, {\n  0: {\n    nTables: $6uUbQ$uint16,\n    tables: new $6uUbQ$Array($ca2df1256966e313$var$KernTable, 'nTables')\n  },\n  1: {\n    reserved: new $6uUbQ$Reserved($6uUbQ$uint16),\n    nTables: $6uUbQ$uint32,\n    tables: new $6uUbQ$Array($ca2df1256966e313$var$KernTable, 'nTables')\n  }\n});\nvar // Linear Threshold table\n// Records the ppem for each glyph at which the scaling becomes linear again,\n// despite instructions effecting the advance width\n$7a9f92b0c46ebe33$export$2e2bcd8739ae039 = new $6uUbQ$Struct({\n  version: $6uUbQ$uint16,\n  numGlyphs: $6uUbQ$uint16,\n  yPels: new $6uUbQ$Array($6uUbQ$uint8, 'numGlyphs')\n});\nvar // PCL 5 Table\n// NOTE: The PCLT table is strongly discouraged for OpenType fonts with TrueType outlines\n$2b2ccc419d152631$export$2e2bcd8739ae039 = new $6uUbQ$Struct({\n  version: $6uUbQ$uint16,\n  fontNumber: $6uUbQ$uint32,\n  pitch: $6uUbQ$uint16,\n  xHeight: $6uUbQ$uint16,\n  style: $6uUbQ$uint16,\n  typeFamily: $6uUbQ$uint16,\n  capHeight: $6uUbQ$uint16,\n  symbolSet: $6uUbQ$uint16,\n  typeface: new $6uUbQ$String(16),\n  characterComplement: new $6uUbQ$String(8),\n  fileName: new $6uUbQ$String(6),\n  strokeWeight: new $6uUbQ$String(1),\n  widthType: new $6uUbQ$String(1),\n  serifStyle: $6uUbQ$uint8,\n  reserved: new $6uUbQ$Reserved($6uUbQ$uint8)\n}); // VDMX tables contain ascender/descender overrides for certain (usually small)\n// sizes. This is needed in order to match font metrics on Windows.\n\nlet $ca5b40b9bcda9c9b$var$Ratio = new $6uUbQ$Struct({\n  bCharSet: $6uUbQ$uint8,\n  xRatio: $6uUbQ$uint8,\n  yStartRatio: $6uUbQ$uint8,\n  yEndRatio: $6uUbQ$uint8 // Ending y-Ratio value\n\n});\nlet $ca5b40b9bcda9c9b$var$vTable = new $6uUbQ$Struct({\n  yPelHeight: $6uUbQ$uint16,\n  yMax: $6uUbQ$int16,\n  yMin: $6uUbQ$int16 // Minimum value (in pels) for this yPelHeight\n\n});\nlet $ca5b40b9bcda9c9b$var$VdmxGroup = new $6uUbQ$Struct({\n  recs: $6uUbQ$uint16,\n  startsz: $6uUbQ$uint8,\n  endsz: $6uUbQ$uint8,\n  entries: new $6uUbQ$Array($ca5b40b9bcda9c9b$var$vTable, 'recs') // The VDMX records\n\n});\nvar $ca5b40b9bcda9c9b$export$2e2bcd8739ae039 = new $6uUbQ$Struct({\n  version: $6uUbQ$uint16,\n  numRecs: $6uUbQ$uint16,\n  numRatios: $6uUbQ$uint16,\n  ratioRanges: new $6uUbQ$Array($ca5b40b9bcda9c9b$var$Ratio, 'numRatios'),\n  offsets: new $6uUbQ$Array($6uUbQ$uint16, 'numRatios'),\n  groups: new $6uUbQ$Array($ca5b40b9bcda9c9b$var$VdmxGroup, 'numRecs') // The actual VDMX groupings\n\n});\nvar // Vertical Header Table\n$69530a3c40755af0$export$2e2bcd8739ae039 = new $6uUbQ$Struct({\n  version: $6uUbQ$uint16,\n  ascent: $6uUbQ$int16,\n  descent: $6uUbQ$int16,\n  lineGap: $6uUbQ$int16,\n  advanceHeightMax: $6uUbQ$int16,\n  minTopSideBearing: $6uUbQ$int16,\n  minBottomSideBearing: $6uUbQ$int16,\n  yMaxExtent: $6uUbQ$int16,\n  caretSlopeRise: $6uUbQ$int16,\n  caretSlopeRun: $6uUbQ$int16,\n  caretOffset: $6uUbQ$int16,\n  reserved: new $6uUbQ$Reserved($6uUbQ$int16, 4),\n  metricDataFormat: $6uUbQ$int16,\n  numberOfMetrics: $6uUbQ$uint16 // Number of advance heights in the Vertical Metrics table\n\n});\nlet $344073dd270f0e62$var$VmtxEntry = new $6uUbQ$Struct({\n  advance: $6uUbQ$uint16,\n  bearing: $6uUbQ$int16 // The top sidebearing of the glyph\n\n});\nvar // Vertical Metrics Table\n$344073dd270f0e62$export$2e2bcd8739ae039 = new $6uUbQ$Struct({\n  metrics: new $6uUbQ$LazyArray($344073dd270f0e62$var$VmtxEntry, t => t.parent.vhea.numberOfMetrics),\n  bearings: new $6uUbQ$LazyArray($6uUbQ$int16, t => t.parent.maxp.numGlyphs - t.parent.vhea.numberOfMetrics)\n});\nlet $3793b781918cfced$var$shortFrac = new $6uUbQ$Fixed(16, 'BE', 14);\nlet $3793b781918cfced$var$Correspondence = new $6uUbQ$Struct({\n  fromCoord: $3793b781918cfced$var$shortFrac,\n  toCoord: $3793b781918cfced$var$shortFrac\n});\nlet $3793b781918cfced$var$Segment = new $6uUbQ$Struct({\n  pairCount: $6uUbQ$uint16,\n  correspondence: new $6uUbQ$Array($3793b781918cfced$var$Correspondence, 'pairCount')\n});\nvar $3793b781918cfced$export$2e2bcd8739ae039 = new $6uUbQ$Struct({\n  version: $6uUbQ$fixed32,\n  axisCount: $6uUbQ$uint32,\n  segment: new $6uUbQ$Array($3793b781918cfced$var$Segment, 'axisCount')\n});\n\nclass $6cb7dd5f47d82580$var$UnboundedArrayAccessor {\n  getItem(index) {\n    if (this._items[index] == null) {\n      let pos = this.stream.pos;\n      this.stream.pos = this.base + this.type.size(null, this.parent) * index;\n      this._items[index] = this.type.decode(this.stream, this.parent);\n      this.stream.pos = pos;\n    }\n\n    return this._items[index];\n  }\n\n  inspect() {\n    return `[UnboundedArray ${this.type.constructor.name}]`;\n  }\n\n  constructor(type, stream, parent) {\n    this.type = type;\n    this.stream = stream;\n    this.parent = parent;\n    this.base = this.stream.pos;\n    this._items = [];\n  }\n\n}\n\nclass $6cb7dd5f47d82580$export$c5af1eebc882e39a extends $6uUbQ$Array {\n  decode(stream, parent) {\n    return new $6cb7dd5f47d82580$var$UnboundedArrayAccessor(this.type, stream, parent);\n  }\n\n  constructor(type) {\n    super(type, 0);\n  }\n\n}\n\nlet $6cb7dd5f47d82580$export$8351f8c2ae2f103c = function () {\n  let ValueType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : $6uUbQ$uint16;\n\n  // Helper class that makes internal structures invisible to pointers\n  class Shadow {\n    decode(stream, ctx) {\n      ctx = ctx.parent.parent;\n      return this.type.decode(stream, ctx);\n    }\n\n    size(val, ctx) {\n      ctx = ctx.parent.parent;\n      return this.type.size(val, ctx);\n    }\n\n    encode(stream, val, ctx) {\n      ctx = ctx.parent.parent;\n      return this.type.encode(stream, val, ctx);\n    }\n\n    constructor(type) {\n      this.type = type;\n    }\n\n  }\n\n  ValueType = new Shadow(ValueType);\n  let BinarySearchHeader = new $6uUbQ$Struct({\n    unitSize: $6uUbQ$uint16,\n    nUnits: $6uUbQ$uint16,\n    searchRange: $6uUbQ$uint16,\n    entrySelector: $6uUbQ$uint16,\n    rangeShift: $6uUbQ$uint16\n  });\n  let LookupSegmentSingle = new $6uUbQ$Struct({\n    lastGlyph: $6uUbQ$uint16,\n    firstGlyph: $6uUbQ$uint16,\n    value: ValueType\n  });\n  let LookupSegmentArray = new $6uUbQ$Struct({\n    lastGlyph: $6uUbQ$uint16,\n    firstGlyph: $6uUbQ$uint16,\n    values: new $6uUbQ$Pointer($6uUbQ$uint16, new $6uUbQ$Array(ValueType, t => t.lastGlyph - t.firstGlyph + 1), {\n      type: 'parent'\n    })\n  });\n  let LookupSingle = new $6uUbQ$Struct({\n    glyph: $6uUbQ$uint16,\n    value: ValueType\n  });\n  return new $6uUbQ$VersionedStruct($6uUbQ$uint16, {\n    0: {\n      values: new $6cb7dd5f47d82580$export$c5af1eebc882e39a(ValueType) // length == number of glyphs maybe?\n\n    },\n    2: {\n      binarySearchHeader: BinarySearchHeader,\n      segments: new $6uUbQ$Array(LookupSegmentSingle, t => t.binarySearchHeader.nUnits)\n    },\n    4: {\n      binarySearchHeader: BinarySearchHeader,\n      segments: new $6uUbQ$Array(LookupSegmentArray, t => t.binarySearchHeader.nUnits)\n    },\n    6: {\n      binarySearchHeader: BinarySearchHeader,\n      segments: new $6uUbQ$Array(LookupSingle, t => t.binarySearchHeader.nUnits)\n    },\n    8: {\n      firstGlyph: $6uUbQ$uint16,\n      count: $6uUbQ$uint16,\n      values: new $6uUbQ$Array(ValueType, 'count')\n    }\n  });\n};\n\nfunction $6cb7dd5f47d82580$export$79f7d93d790934ba() {\n  let entryData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let lookupType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : $6uUbQ$uint16;\n  let entry = Object.assign({\n    newState: $6uUbQ$uint16,\n    flags: $6uUbQ$uint16\n  }, entryData);\n  let Entry = new $6uUbQ$Struct(entry);\n  let StateArray = new $6cb7dd5f47d82580$export$c5af1eebc882e39a(new $6uUbQ$Array($6uUbQ$uint16, t => t.nClasses));\n  let StateHeader = new $6uUbQ$Struct({\n    nClasses: $6uUbQ$uint32,\n    classTable: new $6uUbQ$Pointer($6uUbQ$uint32, new $6cb7dd5f47d82580$export$8351f8c2ae2f103c(lookupType)),\n    stateArray: new $6uUbQ$Pointer($6uUbQ$uint32, StateArray),\n    entryTable: new $6uUbQ$Pointer($6uUbQ$uint32, new $6cb7dd5f47d82580$export$c5af1eebc882e39a(Entry))\n  });\n  return StateHeader;\n}\n\nfunction $6cb7dd5f47d82580$export$105027425199cc51() {\n  let entryData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let lookupType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : $6uUbQ$uint16;\n  let ClassLookupTable = new $6uUbQ$Struct({\n    version() {\n      return 8;\n    },\n\n    firstGlyph: $6uUbQ$uint16,\n    values: new $6uUbQ$Array($6uUbQ$uint8, $6uUbQ$uint16)\n  });\n  let entry = Object.assign({\n    newStateOffset: $6uUbQ$uint16,\n    // convert offset to stateArray index\n    newState: t => (t.newStateOffset - (t.parent.stateArray.base - t.parent._startOffset)) / t.parent.nClasses,\n    flags: $6uUbQ$uint16\n  }, entryData);\n  let Entry = new $6uUbQ$Struct(entry);\n  let StateArray = new $6cb7dd5f47d82580$export$c5af1eebc882e39a(new $6uUbQ$Array($6uUbQ$uint8, t => t.nClasses));\n  let StateHeader1 = new $6uUbQ$Struct({\n    nClasses: $6uUbQ$uint16,\n    classTable: new $6uUbQ$Pointer($6uUbQ$uint16, ClassLookupTable),\n    stateArray: new $6uUbQ$Pointer($6uUbQ$uint16, StateArray),\n    entryTable: new $6uUbQ$Pointer($6uUbQ$uint16, new $6cb7dd5f47d82580$export$c5af1eebc882e39a(Entry))\n  });\n  return StateHeader1;\n}\n\nlet $6a3746e8c708f5a3$var$BslnSubtable = new $6uUbQ$VersionedStruct('format', {\n  0: {\n    deltas: new $6uUbQ$Array($6uUbQ$int16, 32)\n  },\n  1: {\n    deltas: new $6uUbQ$Array($6uUbQ$int16, 32),\n    mappingData: new (0, $6cb7dd5f47d82580$export$8351f8c2ae2f103c)($6uUbQ$uint16)\n  },\n  2: {\n    standardGlyph: $6uUbQ$uint16,\n    controlPoints: new $6uUbQ$Array($6uUbQ$uint16, 32)\n  },\n  3: {\n    standardGlyph: $6uUbQ$uint16,\n    controlPoints: new $6uUbQ$Array($6uUbQ$uint16, 32),\n    mappingData: new (0, $6cb7dd5f47d82580$export$8351f8c2ae2f103c)($6uUbQ$uint16)\n  }\n});\nvar $6a3746e8c708f5a3$export$2e2bcd8739ae039 = new $6uUbQ$Struct({\n  version: $6uUbQ$fixed32,\n  format: $6uUbQ$uint16,\n  defaultBaseline: $6uUbQ$uint16,\n  subtable: $6a3746e8c708f5a3$var$BslnSubtable\n});\nlet $d0c76fac617b308a$var$Setting = new $6uUbQ$Struct({\n  setting: $6uUbQ$uint16,\n  nameIndex: $6uUbQ$int16,\n  name: t => t.parent.parent.parent.name.records.fontFeatures[t.nameIndex]\n});\nlet $d0c76fac617b308a$var$FeatureName = new $6uUbQ$Struct({\n  feature: $6uUbQ$uint16,\n  nSettings: $6uUbQ$uint16,\n  settingTable: new $6uUbQ$Pointer($6uUbQ$uint32, new $6uUbQ$Array($d0c76fac617b308a$var$Setting, 'nSettings'), {\n    type: 'parent'\n  }),\n  featureFlags: new $6uUbQ$Bitfield($6uUbQ$uint8, [null, null, null, null, null, null, 'hasDefault', 'exclusive']),\n  defaultSetting: $6uUbQ$uint8,\n  nameIndex: $6uUbQ$int16,\n  name: t => t.parent.parent.name.records.fontFeatures[t.nameIndex]\n});\nvar $d0c76fac617b308a$export$2e2bcd8739ae039 = new $6uUbQ$Struct({\n  version: $6uUbQ$fixed32,\n  featureNameCount: $6uUbQ$uint16,\n  reserved1: new $6uUbQ$Reserved($6uUbQ$uint16),\n  reserved2: new $6uUbQ$Reserved($6uUbQ$uint32),\n  featureNames: new $6uUbQ$Array($d0c76fac617b308a$var$FeatureName, 'featureNameCount')\n});\nlet $e83fd065f00fcd01$var$Axis = new $6uUbQ$Struct({\n  axisTag: new $6uUbQ$String(4),\n  minValue: $6uUbQ$fixed32,\n  defaultValue: $6uUbQ$fixed32,\n  maxValue: $6uUbQ$fixed32,\n  flags: $6uUbQ$uint16,\n  nameID: $6uUbQ$uint16,\n  name: t => t.parent.parent.name.records.fontFeatures[t.nameID]\n});\nlet $e83fd065f00fcd01$var$Instance = new $6uUbQ$Struct({\n  nameID: $6uUbQ$uint16,\n  name: t => t.parent.parent.name.records.fontFeatures[t.nameID],\n  flags: $6uUbQ$uint16,\n  coord: new $6uUbQ$Array($6uUbQ$fixed32, t => t.parent.axisCount),\n  postscriptNameID: new $6uUbQ$Optional($6uUbQ$uint16, t => t.parent.instanceSize - t._currentOffset > 0)\n});\nvar $e83fd065f00fcd01$export$2e2bcd8739ae039 = new $6uUbQ$Struct({\n  version: $6uUbQ$fixed32,\n  offsetToData: $6uUbQ$uint16,\n  countSizePairs: $6uUbQ$uint16,\n  axisCount: $6uUbQ$uint16,\n  axisSize: $6uUbQ$uint16,\n  instanceCount: $6uUbQ$uint16,\n  instanceSize: $6uUbQ$uint16,\n  axis: new $6uUbQ$Array($e83fd065f00fcd01$var$Axis, 'axisCount'),\n  instance: new $6uUbQ$Array($e83fd065f00fcd01$var$Instance, 'instanceCount')\n});\nlet $dbe33c8d3a7f131c$var$shortFrac = new $6uUbQ$Fixed(16, 'BE', 14);\n\nclass $dbe33c8d3a7f131c$var$Offset {\n  static decode(stream, parent) {\n    // In short format, offsets are multiplied by 2.\n    // This doesn't seem to be documented by Apple, but it\n    // is implemented this way in Freetype.\n    return parent.flags ? stream.readUInt32BE() : stream.readUInt16BE() * 2;\n  }\n\n}\n\nlet $dbe33c8d3a7f131c$var$gvar = new $6uUbQ$Struct({\n  version: $6uUbQ$uint16,\n  reserved: new $6uUbQ$Reserved($6uUbQ$uint16),\n  axisCount: $6uUbQ$uint16,\n  globalCoordCount: $6uUbQ$uint16,\n  globalCoords: new $6uUbQ$Pointer($6uUbQ$uint32, new $6uUbQ$Array(new $6uUbQ$Array($dbe33c8d3a7f131c$var$shortFrac, 'axisCount'), 'globalCoordCount')),\n  glyphCount: $6uUbQ$uint16,\n  flags: $6uUbQ$uint16,\n  offsetToData: $6uUbQ$uint32,\n  offsets: new $6uUbQ$Array(new $6uUbQ$Pointer($dbe33c8d3a7f131c$var$Offset, 'void', {\n    relativeTo: ctx => ctx.offsetToData,\n    allowNull: false\n  }), t => t.glyphCount + 1)\n});\nvar $dbe33c8d3a7f131c$export$2e2bcd8739ae039 = $dbe33c8d3a7f131c$var$gvar;\nlet $05b01887df96c4ee$var$ClassTable = new $6uUbQ$Struct({\n  length: $6uUbQ$uint16,\n  coverage: $6uUbQ$uint16,\n  subFeatureFlags: $6uUbQ$uint32,\n  stateTable: new (0, $6cb7dd5f47d82580$export$105027425199cc51)()\n});\nlet $05b01887df96c4ee$var$WidthDeltaRecord = new $6uUbQ$Struct({\n  justClass: $6uUbQ$uint32,\n  beforeGrowLimit: $6uUbQ$fixed32,\n  beforeShrinkLimit: $6uUbQ$fixed32,\n  afterGrowLimit: $6uUbQ$fixed32,\n  afterShrinkLimit: $6uUbQ$fixed32,\n  growFlags: $6uUbQ$uint16,\n  shrinkFlags: $6uUbQ$uint16\n});\nlet $05b01887df96c4ee$var$WidthDeltaCluster = new $6uUbQ$Array($05b01887df96c4ee$var$WidthDeltaRecord, $6uUbQ$uint32);\nlet $05b01887df96c4ee$var$ActionData = new $6uUbQ$VersionedStruct('actionType', {\n  0: {\n    lowerLimit: $6uUbQ$fixed32,\n    upperLimit: $6uUbQ$fixed32,\n    order: $6uUbQ$uint16,\n    glyphs: new $6uUbQ$Array($6uUbQ$uint16, $6uUbQ$uint16)\n  },\n  1: {\n    addGlyph: $6uUbQ$uint16\n  },\n  2: {\n    substThreshold: $6uUbQ$fixed32,\n    addGlyph: $6uUbQ$uint16,\n    substGlyph: $6uUbQ$uint16\n  },\n  3: {},\n  4: {\n    variationAxis: $6uUbQ$uint32,\n    minimumLimit: $6uUbQ$fixed32,\n    noStretchValue: $6uUbQ$fixed32,\n    maximumLimit: $6uUbQ$fixed32\n  },\n  5: {\n    flags: $6uUbQ$uint16,\n    glyph: $6uUbQ$uint16\n  }\n});\nlet $05b01887df96c4ee$var$Action = new $6uUbQ$Struct({\n  actionClass: $6uUbQ$uint16,\n  actionType: $6uUbQ$uint16,\n  actionLength: $6uUbQ$uint32,\n  actionData: $05b01887df96c4ee$var$ActionData,\n  padding: new $6uUbQ$Reserved($6uUbQ$uint8, t => t.actionLength - t._currentOffset)\n});\nlet $05b01887df96c4ee$var$PostcompensationAction = new $6uUbQ$Array($05b01887df96c4ee$var$Action, $6uUbQ$uint32);\nlet $05b01887df96c4ee$var$PostCompensationTable = new $6uUbQ$Struct({\n  lookupTable: new (0, $6cb7dd5f47d82580$export$8351f8c2ae2f103c)(new $6uUbQ$Pointer($6uUbQ$uint16, $05b01887df96c4ee$var$PostcompensationAction))\n});\nlet $05b01887df96c4ee$var$JustificationTable = new $6uUbQ$Struct({\n  classTable: new $6uUbQ$Pointer($6uUbQ$uint16, $05b01887df96c4ee$var$ClassTable, {\n    type: 'parent'\n  }),\n  wdcOffset: $6uUbQ$uint16,\n  postCompensationTable: new $6uUbQ$Pointer($6uUbQ$uint16, $05b01887df96c4ee$var$PostCompensationTable, {\n    type: 'parent'\n  }),\n  widthDeltaClusters: new (0, $6cb7dd5f47d82580$export$8351f8c2ae2f103c)(new $6uUbQ$Pointer($6uUbQ$uint16, $05b01887df96c4ee$var$WidthDeltaCluster, {\n    type: 'parent',\n    relativeTo: ctx => ctx.wdcOffset\n  }))\n});\nvar $05b01887df96c4ee$export$2e2bcd8739ae039 = new $6uUbQ$Struct({\n  version: $6uUbQ$uint32,\n  format: $6uUbQ$uint16,\n  horizontal: new $6uUbQ$Pointer($6uUbQ$uint16, $05b01887df96c4ee$var$JustificationTable),\n  vertical: new $6uUbQ$Pointer($6uUbQ$uint16, $05b01887df96c4ee$var$JustificationTable)\n});\nlet $03ee6ebd54db1053$var$LigatureData = {\n  action: $6uUbQ$uint16\n};\nlet $03ee6ebd54db1053$var$ContextualData = {\n  markIndex: $6uUbQ$uint16,\n  currentIndex: $6uUbQ$uint16\n};\nlet $03ee6ebd54db1053$var$InsertionData = {\n  currentInsertIndex: $6uUbQ$uint16,\n  markedInsertIndex: $6uUbQ$uint16\n};\nlet $03ee6ebd54db1053$var$SubstitutionTable = new $6uUbQ$Struct({\n  items: new (0, $6cb7dd5f47d82580$export$c5af1eebc882e39a)(new $6uUbQ$Pointer($6uUbQ$uint32, new (0, $6cb7dd5f47d82580$export$8351f8c2ae2f103c)()))\n});\nlet $03ee6ebd54db1053$var$SubtableData = new $6uUbQ$VersionedStruct('type', {\n  0: {\n    stateTable: new (0, $6cb7dd5f47d82580$export$79f7d93d790934ba)()\n  },\n  1: {\n    stateTable: new (0, $6cb7dd5f47d82580$export$79f7d93d790934ba)($03ee6ebd54db1053$var$ContextualData),\n    substitutionTable: new $6uUbQ$Pointer($6uUbQ$uint32, $03ee6ebd54db1053$var$SubstitutionTable)\n  },\n  2: {\n    stateTable: new (0, $6cb7dd5f47d82580$export$79f7d93d790934ba)($03ee6ebd54db1053$var$LigatureData),\n    ligatureActions: new $6uUbQ$Pointer($6uUbQ$uint32, new (0, $6cb7dd5f47d82580$export$c5af1eebc882e39a)($6uUbQ$uint32)),\n    components: new $6uUbQ$Pointer($6uUbQ$uint32, new (0, $6cb7dd5f47d82580$export$c5af1eebc882e39a)($6uUbQ$uint16)),\n    ligatureList: new $6uUbQ$Pointer($6uUbQ$uint32, new (0, $6cb7dd5f47d82580$export$c5af1eebc882e39a)($6uUbQ$uint16))\n  },\n  4: {\n    lookupTable: new (0, $6cb7dd5f47d82580$export$8351f8c2ae2f103c)()\n  },\n  5: {\n    stateTable: new (0, $6cb7dd5f47d82580$export$79f7d93d790934ba)($03ee6ebd54db1053$var$InsertionData),\n    insertionActions: new $6uUbQ$Pointer($6uUbQ$uint32, new (0, $6cb7dd5f47d82580$export$c5af1eebc882e39a)($6uUbQ$uint16))\n  }\n});\nlet $03ee6ebd54db1053$var$Subtable = new $6uUbQ$Struct({\n  length: $6uUbQ$uint32,\n  coverage: $6uUbQ$uint24,\n  type: $6uUbQ$uint8,\n  subFeatureFlags: $6uUbQ$uint32,\n  table: $03ee6ebd54db1053$var$SubtableData,\n  padding: new $6uUbQ$Reserved($6uUbQ$uint8, t => t.length - t._currentOffset)\n});\nlet $03ee6ebd54db1053$var$FeatureEntry = new $6uUbQ$Struct({\n  featureType: $6uUbQ$uint16,\n  featureSetting: $6uUbQ$uint16,\n  enableFlags: $6uUbQ$uint32,\n  disableFlags: $6uUbQ$uint32\n});\nlet $03ee6ebd54db1053$var$MorxChain = new $6uUbQ$Struct({\n  defaultFlags: $6uUbQ$uint32,\n  chainLength: $6uUbQ$uint32,\n  nFeatureEntries: $6uUbQ$uint32,\n  nSubtables: $6uUbQ$uint32,\n  features: new $6uUbQ$Array($03ee6ebd54db1053$var$FeatureEntry, 'nFeatureEntries'),\n  subtables: new $6uUbQ$Array($03ee6ebd54db1053$var$Subtable, 'nSubtables')\n});\nvar $03ee6ebd54db1053$export$2e2bcd8739ae039 = new $6uUbQ$Struct({\n  version: $6uUbQ$uint16,\n  unused: new $6uUbQ$Reserved($6uUbQ$uint16),\n  nChains: $6uUbQ$uint32,\n  chains: new $6uUbQ$Array($03ee6ebd54db1053$var$MorxChain, 'nChains')\n});\nlet $b7492a80b0d1a056$var$OpticalBounds = new $6uUbQ$Struct({\n  left: $6uUbQ$int16,\n  top: $6uUbQ$int16,\n  right: $6uUbQ$int16,\n  bottom: $6uUbQ$int16\n});\nvar $b7492a80b0d1a056$export$2e2bcd8739ae039 = new $6uUbQ$Struct({\n  version: $6uUbQ$fixed32,\n  format: $6uUbQ$uint16,\n  lookupTable: new (0, $6cb7dd5f47d82580$export$8351f8c2ae2f103c)($b7492a80b0d1a056$var$OpticalBounds)\n});\nlet $c3395722bea751e2$var$tables = {};\nvar $c3395722bea751e2$export$2e2bcd8739ae039 = $c3395722bea751e2$var$tables;\n$c3395722bea751e2$var$tables.cmap = (0, $26a62205ad06574e$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.head = (0, $f2612a29f92ac062$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.hhea = (0, $2c179dd593583073$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.hmtx = (0, $bdc9060542264b85$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.maxp = (0, $dbf51cb3d3fe409d$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.name = (0, $2bcf221753ec8e32$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables['OS/2'] = (0, $84b272aa31b70606$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.post = (0, $32d9e2eb9565d93c$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.fpgm = (0, $5c0f37ca5ffb1850$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.loca = (0, $2b2b260902b1c57e$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.prep = (0, $7afb878c7bea4f66$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables['cvt '] = (0, $5202bd9d9ad8eaac$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.glyf = (0, $6c92b6371bce8bd9$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables['CFF '] = (0, $822ac0d589e4e237$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables['CFF2'] = (0, $822ac0d589e4e237$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.VORG = (0, $2bbf2bc1ce37cd8f$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.EBLC = (0, $9911c4c7201c13de$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.CBLC = $c3395722bea751e2$var$tables.EBLC;\n$c3395722bea751e2$var$tables.sbix = (0, $abb847051efd51b1$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.COLR = (0, $eb629188f3dfefdd$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.CPAL = (0, $08734b8e7dc64587$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.BASE = (0, $497cef411d884e34$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.GDEF = (0, $cf5f33c63ef209e6$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.GPOS = (0, $47e0e8ef515d9903$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.GSUB = (0, $d3f442064af66e06$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.JSTF = (0, $71cfb3c4767fbd0c$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.HVAR = (0, $d059a6bd2d3b5b63$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.DSIG = (0, $dceeca3e1977ce30$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.gasp = (0, $8acd740a9435aad0$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.hdmx = (0, $b5f380243c34d6a0$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.kern = (0, $ca2df1256966e313$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.LTSH = (0, $7a9f92b0c46ebe33$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.PCLT = (0, $2b2ccc419d152631$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.VDMX = (0, $ca5b40b9bcda9c9b$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.vhea = (0, $69530a3c40755af0$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.vmtx = (0, $344073dd270f0e62$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.avar = (0, $3793b781918cfced$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.bsln = (0, $6a3746e8c708f5a3$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.feat = (0, $d0c76fac617b308a$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.fvar = (0, $e83fd065f00fcd01$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.gvar = (0, $dbe33c8d3a7f131c$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.just = (0, $05b01887df96c4ee$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.morx = (0, $03ee6ebd54db1053$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.opbd = (0, $b7492a80b0d1a056$export$2e2bcd8739ae039);\nlet $816c07a04b6dba87$var$TableEntry = new $6uUbQ$Struct({\n  tag: new $6uUbQ$String(4),\n  checkSum: $6uUbQ$uint32,\n  offset: new $6uUbQ$Pointer($6uUbQ$uint32, 'void', {\n    type: 'global'\n  }),\n  length: $6uUbQ$uint32\n});\nlet $816c07a04b6dba87$var$Directory = new $6uUbQ$Struct({\n  tag: new $6uUbQ$String(4),\n  numTables: $6uUbQ$uint16,\n  searchRange: $6uUbQ$uint16,\n  entrySelector: $6uUbQ$uint16,\n  rangeShift: $6uUbQ$uint16,\n  tables: new $6uUbQ$Array($816c07a04b6dba87$var$TableEntry, 'numTables')\n});\n\n$816c07a04b6dba87$var$Directory.process = function () {\n  let tables = {};\n\n  for (let table of this.tables) tables[table.tag] = table;\n\n  this.tables = tables;\n};\n\n$816c07a04b6dba87$var$Directory.preEncode = function () {\n  if (!Array.isArray(this.tables)) {\n    let tables = [];\n\n    for (let tag in this.tables) {\n      let table = this.tables[tag];\n      if (table) tables.push({\n        tag: tag,\n        checkSum: 0,\n        offset: new $6uUbQ$VoidPointer((0, $c3395722bea751e2$export$2e2bcd8739ae039)[tag], table),\n        length: (0, $c3395722bea751e2$export$2e2bcd8739ae039)[tag].size(table)\n      });\n    }\n\n    this.tables = tables;\n  }\n\n  this.tag = 'true';\n  this.numTables = this.tables.length;\n  let maxExponentFor2 = Math.floor(Math.log(this.numTables) / Math.LN2);\n  let maxPowerOf2 = Math.pow(2, maxExponentFor2);\n  this.searchRange = maxPowerOf2 * 16;\n  this.entrySelector = Math.log(maxPowerOf2) / Math.LN2;\n  this.rangeShift = this.numTables * 16 - this.searchRange;\n};\n\nvar $816c07a04b6dba87$export$2e2bcd8739ae039 = $816c07a04b6dba87$var$Directory;\n\nfunction $12727730ddfc8bfe$export$2e0ae67339d5f1ac(arr, cmp) {\n  let min = 0;\n  let max = arr.length - 1;\n\n  while (min <= max) {\n    let mid = min + max >> 1;\n    let res = cmp(arr[mid]);\n    if (res < 0) max = mid - 1;else if (res > 0) min = mid + 1;else return mid;\n  }\n\n  return -1;\n}\n\nfunction $12727730ddfc8bfe$export$d02631cccf789723(index, end) {\n  let range = [];\n\n  while (index < end) range.push(index++);\n\n  return range;\n}\n\nconst $12727730ddfc8bfe$export$3d28c1996ced1f14 = new TextDecoder('ascii'); // Based on https://github.com/niklasvh/base64-arraybuffer. MIT license.\n\nconst $12727730ddfc8bfe$var$CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\nconst $12727730ddfc8bfe$var$LOOKUP = new Uint8Array(256);\n\nfor (let i = 0; i < $12727730ddfc8bfe$var$CHARS.length; i++) $12727730ddfc8bfe$var$LOOKUP[$12727730ddfc8bfe$var$CHARS.charCodeAt(i)] = i;\n\nfunction $12727730ddfc8bfe$export$94fdf11bafc8de6b(base64) {\n  let bufferLength = base64.length * 0.75;\n\n  if (base64[base64.length - 1] === '=') {\n    bufferLength--;\n    if (base64[base64.length - 2] === '=') bufferLength--;\n  }\n\n  let bytes = new Uint8Array(bufferLength);\n  let p = 0;\n\n  for (let i = 0, len = base64.length; i < len; i += 4) {\n    let encoded1 = $12727730ddfc8bfe$var$LOOKUP[base64.charCodeAt(i)];\n    let encoded2 = $12727730ddfc8bfe$var$LOOKUP[base64.charCodeAt(i + 1)];\n    let encoded3 = $12727730ddfc8bfe$var$LOOKUP[base64.charCodeAt(i + 2)];\n    let encoded4 = $12727730ddfc8bfe$var$LOOKUP[base64.charCodeAt(i + 3)];\n    bytes[p++] = encoded1 << 2 | encoded2 >> 4;\n    bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;\n    bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;\n  }\n\n  return bytes;\n}\n\nclass $f08dd41ef10b694c$export$2e2bcd8739ae039 {\n  findSubtable(cmapTable, pairs) {\n    for (let [platformID, encodingID] of pairs) for (let cmap of cmapTable.tables) {\n      if (cmap.platformID === platformID && cmap.encodingID === encodingID) return cmap.table;\n    }\n\n    return null;\n  }\n\n  lookup(codepoint, variationSelector) {\n    // If there is no Unicode cmap in this font, we need to re-encode\n    // the codepoint in the encoding that the cmap supports.\n    if (this.encoding) codepoint = this.encoding.get(codepoint) || codepoint;else if (variationSelector) {\n      let gid = this.getVariationSelector(codepoint, variationSelector);\n      if (gid) return gid;\n    }\n    let cmap = this.cmap;\n\n    switch (cmap.version) {\n      case 0:\n        return cmap.codeMap.get(codepoint) || 0;\n\n      case 4:\n        {\n          let min = 0;\n          let max = cmap.segCount - 1;\n\n          while (min <= max) {\n            let mid = min + max >> 1;\n            if (codepoint < cmap.startCode.get(mid)) max = mid - 1;else if (codepoint > cmap.endCode.get(mid)) min = mid + 1;else {\n              let rangeOffset = cmap.idRangeOffset.get(mid);\n              let gid;\n              if (rangeOffset === 0) gid = codepoint + cmap.idDelta.get(mid);else {\n                let index = rangeOffset / 2 + (codepoint - cmap.startCode.get(mid)) - (cmap.segCount - mid);\n                gid = cmap.glyphIndexArray.get(index) || 0;\n                if (gid !== 0) gid += cmap.idDelta.get(mid);\n              }\n              return gid & 0xffff;\n            }\n          }\n\n          return 0;\n        }\n\n      case 8:\n        throw new Error('TODO: cmap format 8');\n\n      case 6:\n      case 10:\n        return cmap.glyphIndices.get(codepoint - cmap.firstCode) || 0;\n\n      case 12:\n      case 13:\n        {\n          let min = 0;\n          let max = cmap.nGroups - 1;\n\n          while (min <= max) {\n            let mid = min + max >> 1;\n            let group = cmap.groups.get(mid);\n            if (codepoint < group.startCharCode) max = mid - 1;else if (codepoint > group.endCharCode) min = mid + 1;else {\n              if (cmap.version === 12) return group.glyphID + (codepoint - group.startCharCode);else return group.glyphID;\n            }\n          }\n\n          return 0;\n        }\n\n      case 14:\n        throw new Error('TODO: cmap format 14');\n\n      default:\n        throw new Error(`Unknown cmap format ${cmap.version}`);\n    }\n  }\n\n  getVariationSelector(codepoint, variationSelector) {\n    if (!this.uvs) return 0;\n    let selectors = this.uvs.varSelectors.toArray();\n    let i = (0, $12727730ddfc8bfe$export$2e0ae67339d5f1ac)(selectors, x => variationSelector - x.varSelector);\n    let sel = selectors[i];\n    if (i !== -1 && sel.defaultUVS) i = (0, $12727730ddfc8bfe$export$2e0ae67339d5f1ac)(sel.defaultUVS, x => codepoint < x.startUnicodeValue ? -1 : codepoint > x.startUnicodeValue + x.additionalCount ? 1 : 0);\n\n    if (i !== -1 && sel.nonDefaultUVS) {\n      i = (0, $12727730ddfc8bfe$export$2e0ae67339d5f1ac)(sel.nonDefaultUVS, x => codepoint - x.unicodeValue);\n      if (i !== -1) return sel.nonDefaultUVS[i].glyphID;\n    }\n\n    return 0;\n  }\n\n  getCharacterSet() {\n    let cmap = this.cmap;\n\n    switch (cmap.version) {\n      case 0:\n        return (0, $12727730ddfc8bfe$export$d02631cccf789723)(0, cmap.codeMap.length);\n\n      case 4:\n        {\n          let res = [];\n          let endCodes = cmap.endCode.toArray();\n\n          for (let i = 0; i < endCodes.length; i++) {\n            let tail = endCodes[i] + 1;\n            let start = cmap.startCode.get(i);\n            res.push(...(0, $12727730ddfc8bfe$export$d02631cccf789723)(start, tail));\n          }\n\n          return res;\n        }\n\n      case 8:\n        throw new Error('TODO: cmap format 8');\n\n      case 6:\n      case 10:\n        return (0, $12727730ddfc8bfe$export$d02631cccf789723)(cmap.firstCode, cmap.firstCode + cmap.glyphIndices.length);\n\n      case 12:\n      case 13:\n        {\n          let res = [];\n\n          for (let group of cmap.groups.toArray()) res.push(...(0, $12727730ddfc8bfe$export$d02631cccf789723)(group.startCharCode, group.endCharCode + 1));\n\n          return res;\n        }\n\n      case 14:\n        throw new Error('TODO: cmap format 14');\n\n      default:\n        throw new Error(`Unknown cmap format ${cmap.version}`);\n    }\n  }\n\n  codePointsForGlyph(gid) {\n    let cmap = this.cmap;\n\n    switch (cmap.version) {\n      case 0:\n        {\n          let res = [];\n\n          for (let i = 0; i < 256; i++) if (cmap.codeMap.get(i) === gid) res.push(i);\n\n          return res;\n        }\n\n      case 4:\n        {\n          let res = [];\n\n          for (let i = 0; i < cmap.segCount; i++) {\n            let end = cmap.endCode.get(i);\n            let start = cmap.startCode.get(i);\n            let rangeOffset = cmap.idRangeOffset.get(i);\n            let delta = cmap.idDelta.get(i);\n\n            for (var c = start; c <= end; c++) {\n              let g = 0;\n              if (rangeOffset === 0) g = c + delta;else {\n                let index = rangeOffset / 2 + (c - start) - (cmap.segCount - i);\n                g = cmap.glyphIndexArray.get(index) || 0;\n                if (g !== 0) g += delta;\n              }\n              if (g === gid) res.push(c);\n            }\n          }\n\n          return res;\n        }\n\n      case 12:\n        {\n          let res = [];\n\n          for (let group of cmap.groups.toArray()) if (gid >= group.glyphID && gid <= group.glyphID + (group.endCharCode - group.startCharCode)) res.push(group.startCharCode + (gid - group.glyphID));\n\n          return res;\n        }\n\n      case 13:\n        {\n          let res = [];\n\n          for (let group of cmap.groups.toArray()) if (gid === group.glyphID) res.push(...(0, $12727730ddfc8bfe$export$d02631cccf789723)(group.startCharCode, group.endCharCode + 1));\n\n          return res;\n        }\n\n      default:\n        throw new Error(`Unknown cmap format ${cmap.version}`);\n    }\n  }\n\n  constructor(cmapTable) {\n    // Attempt to find a Unicode cmap first\n    this.encoding = null;\n    this.cmap = this.findSubtable(cmapTable, [// 32-bit subtables\n    [3, 10], [0, 6], [0, 4], // 16-bit subtables\n    [3, 1], [0, 3], [0, 2], [0, 1], [0, 0]]); // If not unicode cmap was found, take the first table with a supported encoding.\n\n    if (!this.cmap) for (let cmap of cmapTable.tables) {\n      let encoding = (0, $e449ad78d50845fe$export$badc544e0651b6b1)(cmap.platformID, cmap.encodingID, cmap.table.language - 1);\n      let mapping = (0, $e449ad78d50845fe$export$1dceb3c14ed68bee)(encoding);\n\n      if (mapping) {\n        this.cmap = cmap.table;\n        this.encoding = mapping;\n      }\n    }\n    if (!this.cmap) throw new Error(\"Could not find a supported cmap table\");\n    this.uvs = this.findSubtable(cmapTable, [[0, 5]]);\n    if (this.uvs && this.uvs.version !== 14) this.uvs = null;\n  }\n\n}\n\n(0, $6uUbQ$_1)([(0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)], $f08dd41ef10b694c$export$2e2bcd8739ae039.prototype, \"getCharacterSet\", null);\n(0, $6uUbQ$_1)([(0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)], $f08dd41ef10b694c$export$2e2bcd8739ae039.prototype, \"codePointsForGlyph\", null);\n\nclass $0bba3a9db57637f3$export$2e2bcd8739ae039 {\n  process(glyphs, positions) {\n    for (let glyphIndex = 0; glyphIndex < glyphs.length - 1; glyphIndex++) {\n      let left = glyphs[glyphIndex].id;\n      let right = glyphs[glyphIndex + 1].id;\n      positions[glyphIndex].xAdvance += this.getKerning(left, right);\n    }\n  }\n\n  getKerning(left, right) {\n    let res = 0;\n\n    for (let table of this.kern.tables) {\n      if (table.coverage.crossStream) continue;\n\n      switch (table.version) {\n        case 0:\n          if (!table.coverage.horizontal) continue;\n          break;\n\n        case 1:\n          if (table.coverage.vertical || table.coverage.variation) continue;\n          break;\n\n        default:\n          throw new Error(`Unsupported kerning table version ${table.version}`);\n      }\n\n      let val = 0;\n      let s = table.subtable;\n\n      switch (table.format) {\n        case 0:\n          let pairIdx = (0, $12727730ddfc8bfe$export$2e0ae67339d5f1ac)(s.pairs, function (pair) {\n            return left - pair.left || right - pair.right;\n          });\n          if (pairIdx >= 0) val = s.pairs[pairIdx].value;\n          break;\n\n        case 2:\n          let leftOffset = 0,\n              rightOffset = 0;\n          if (left >= s.leftTable.firstGlyph && left < s.leftTable.firstGlyph + s.leftTable.nGlyphs) leftOffset = s.leftTable.offsets[left - s.leftTable.firstGlyph];else leftOffset = s.array.off;\n          if (right >= s.rightTable.firstGlyph && right < s.rightTable.firstGlyph + s.rightTable.nGlyphs) rightOffset = s.rightTable.offsets[right - s.rightTable.firstGlyph];\n          let index = (leftOffset + rightOffset - s.array.off) / 2;\n          val = s.array.values.get(index);\n          break;\n\n        case 3:\n          if (left >= s.glyphCount || right >= s.glyphCount) return 0;\n          val = s.kernValue[s.kernIndex[s.leftClass[left] * s.rightClassCount + s.rightClass[right]]];\n          break;\n\n        default:\n          throw new Error(`Unsupported kerning sub-table format ${table.format}`);\n      } // Microsoft supports the override flag, which resets the result\n      // Otherwise, the sum of the results from all subtables is returned\n\n\n      if (table.coverage.override) res = val;else res += val;\n    }\n\n    return res;\n  }\n\n  constructor(font) {\n    this.kern = font.kern;\n  }\n\n}\n\nclass $0a4bdfeb6dfd6f5e$export$2e2bcd8739ae039 {\n  positionGlyphs(glyphs, positions) {\n    // find each base + mark cluster, and position the marks relative to the base\n    let clusterStart = 0;\n    let clusterEnd = 0;\n\n    for (let index = 0; index < glyphs.length; index++) {\n      let glyph = glyphs[index];\n      if (glyph.isMark) clusterEnd = index;else {\n        if (clusterStart !== clusterEnd) this.positionCluster(glyphs, positions, clusterStart, clusterEnd);\n        clusterStart = clusterEnd = index;\n      }\n    }\n\n    if (clusterStart !== clusterEnd) this.positionCluster(glyphs, positions, clusterStart, clusterEnd);\n    return positions;\n  }\n\n  positionCluster(glyphs, positions, clusterStart, clusterEnd) {\n    let base = glyphs[clusterStart];\n    let baseBox = base.cbox.copy(); // adjust bounding box for ligature glyphs\n\n    if (base.codePoints.length > 1) // LTR. TODO: RTL support.\n      baseBox.minX += (base.codePoints.length - 1) * baseBox.width / base.codePoints.length;\n    let xOffset = -positions[clusterStart].xAdvance;\n    let yOffset = 0;\n    let yGap = this.font.unitsPerEm / 16; // position each of the mark glyphs relative to the base glyph\n\n    for (let index = clusterStart + 1; index <= clusterEnd; index++) {\n      let mark = glyphs[index];\n      let markBox = mark.cbox;\n      let position = positions[index];\n      let combiningClass = this.getCombiningClass(mark.codePoints[0]);\n\n      if (combiningClass !== 'Not_Reordered') {\n        position.xOffset = position.yOffset = 0; // x positioning\n\n        switch (combiningClass) {\n          case 'Double_Above':\n          case 'Double_Below':\n            // LTR. TODO: RTL support.\n            position.xOffset += baseBox.minX - markBox.width / 2 - markBox.minX;\n            break;\n\n          case 'Attached_Below_Left':\n          case 'Below_Left':\n          case 'Above_Left':\n            // left align\n            position.xOffset += baseBox.minX - markBox.minX;\n            break;\n\n          case 'Attached_Above_Right':\n          case 'Below_Right':\n          case 'Above_Right':\n            // right align\n            position.xOffset += baseBox.maxX - markBox.width - markBox.minX;\n            break;\n\n          default:\n            // center align\n            position.xOffset += baseBox.minX + (baseBox.width - markBox.width) / 2 - markBox.minX;\n        } // y positioning\n\n\n        switch (combiningClass) {\n          case 'Double_Below':\n          case 'Below_Left':\n          case 'Below':\n          case 'Below_Right':\n          case 'Attached_Below_Left':\n          case 'Attached_Below':\n            // add a small gap between the glyphs if they are not attached\n            if (combiningClass === 'Attached_Below_Left' || combiningClass === 'Attached_Below') baseBox.minY += yGap;\n            position.yOffset = -baseBox.minY - markBox.maxY;\n            baseBox.minY += markBox.height;\n            break;\n\n          case 'Double_Above':\n          case 'Above_Left':\n          case 'Above':\n          case 'Above_Right':\n          case 'Attached_Above':\n          case 'Attached_Above_Right':\n            // add a small gap between the glyphs if they are not attached\n            if (combiningClass === 'Attached_Above' || combiningClass === 'Attached_Above_Right') baseBox.maxY += yGap;\n            position.yOffset = baseBox.maxY - markBox.minY;\n            baseBox.maxY += markBox.height;\n            break;\n        }\n\n        position.xAdvance = position.yAdvance = 0;\n        position.xOffset += xOffset;\n        position.yOffset += yOffset;\n      } else {\n        xOffset -= position.xAdvance;\n        yOffset -= position.yAdvance;\n      }\n    }\n\n    return;\n  }\n\n  getCombiningClass(codePoint) {\n    let combiningClass = (0, $6uUbQ$getCombiningClass)(codePoint); // Thai / Lao need some per-character work\n\n    if ((codePoint & -256) === 0x0e00) {\n      if (combiningClass === 'Not_Reordered') switch (codePoint) {\n        case 0x0e31:\n        case 0x0e34:\n        case 0x0e35:\n        case 0x0e36:\n        case 0x0e37:\n        case 0x0e47:\n        case 0x0e4c:\n        case 0x0e3d:\n        case 0x0e4e:\n          return 'Above_Right';\n\n        case 0x0eb1:\n        case 0x0eb4:\n        case 0x0eb5:\n        case 0x0eb6:\n        case 0x0eb7:\n        case 0x0ebb:\n        case 0x0ecc:\n        case 0x0ecd:\n          return 'Above';\n\n        case 0x0ebc:\n          return 'Below';\n      } else if (codePoint === 0x0e3a) return 'Below_Right';\n    }\n\n    switch (combiningClass) {\n      // Hebrew\n      case 'CCC10':\n      case 'CCC11':\n      case 'CCC12':\n      case 'CCC13':\n      case 'CCC14':\n      case 'CCC15':\n      case 'CCC16':\n      case 'CCC17':\n      case 'CCC18':\n      case 'CCC20':\n      case 'CCC22':\n        return 'Below';\n\n      case 'CCC23':\n        return 'Attached_Above';\n\n      case 'CCC24':\n        return 'Above_Right';\n\n      case 'CCC25':\n      case 'CCC19':\n        return 'Above_Left';\n\n      case 'CCC26':\n        return 'Above';\n\n      case 'CCC21':\n        break;\n      // Arabic and Syriac\n\n      case 'CCC27':\n      case 'CCC28':\n      case 'CCC30':\n      case 'CCC31':\n      case 'CCC33':\n      case 'CCC34':\n      case 'CCC35':\n      case 'CCC36':\n        return 'Above';\n\n      case 'CCC29':\n      case 'CCC32':\n        return 'Below';\n      // Thai\n\n      case 'CCC103':\n        return 'Below_Right';\n\n      case 'CCC107':\n        return 'Above_Right';\n      // Lao\n\n      case 'CCC118':\n        return 'Below';\n\n      case 'CCC122':\n        return 'Above';\n      // Tibetan\n\n      case 'CCC129':\n      case 'CCC132':\n        return 'Below';\n\n      case 'CCC130':\n        return 'Above';\n    }\n\n    return combiningClass;\n  }\n\n  constructor(font) {\n    this.font = font;\n  }\n\n}\n/**\n * Represents a glyph bounding box\n */\n\n\nclass $f34600ab9d7f70d8$export$2e2bcd8739ae039 {\n  /**\n  * The width of the bounding box\n  * @type {number}\n  */\n  get width() {\n    return this.maxX - this.minX;\n  }\n  /**\n  * The height of the bounding box\n  * @type {number}\n  */\n\n\n  get height() {\n    return this.maxY - this.minY;\n  }\n\n  addPoint(x, y) {\n    if (Math.abs(x) !== Infinity) {\n      if (x < this.minX) this.minX = x;\n      if (x > this.maxX) this.maxX = x;\n    }\n\n    if (Math.abs(y) !== Infinity) {\n      if (y < this.minY) this.minY = y;\n      if (y > this.maxY) this.maxY = y;\n    }\n  }\n\n  copy() {\n    return new $f34600ab9d7f70d8$export$2e2bcd8739ae039(this.minX, this.minY, this.maxX, this.maxY);\n  }\n\n  constructor() {\n    let minX = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Infinity;\n    let minY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;\n    let maxX = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -Infinity;\n    let maxY = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -Infinity;\n\n    /**\n    * The minimum X position in the bounding box\n    * @type {number}\n    */\n    this.minX = minX;\n    /**\n    * The minimum Y position in the bounding box\n    * @type {number}\n    */\n\n    this.minY = minY;\n    /**\n    * The maxmimum X position in the bounding box\n    * @type {number}\n    */\n\n    this.maxX = maxX;\n    /**\n    * The maxmimum Y position in the bounding box\n    * @type {number}\n    */\n\n    this.maxY = maxY;\n  }\n\n} // This maps the Unicode Script property to an OpenType script tag\n// Data from http://www.microsoft.com/typography/otspec/scripttags.htm\n// and http://www.unicode.org/Public/UNIDATA/PropertyValueAliases.txt.\n\n\nconst $130d1a642ebcd2b7$var$UNICODE_SCRIPTS = {\n  Caucasian_Albanian: 'aghb',\n  Arabic: 'arab',\n  Imperial_Aramaic: 'armi',\n  Armenian: 'armn',\n  Avestan: 'avst',\n  Balinese: 'bali',\n  Bamum: 'bamu',\n  Bassa_Vah: 'bass',\n  Batak: 'batk',\n  Bengali: ['bng2', 'beng'],\n  Bopomofo: 'bopo',\n  Brahmi: 'brah',\n  Braille: 'brai',\n  Buginese: 'bugi',\n  Buhid: 'buhd',\n  Chakma: 'cakm',\n  Canadian_Aboriginal: 'cans',\n  Carian: 'cari',\n  Cham: 'cham',\n  Cherokee: 'cher',\n  Coptic: 'copt',\n  Cypriot: 'cprt',\n  Cyrillic: 'cyrl',\n  Devanagari: ['dev2', 'deva'],\n  Deseret: 'dsrt',\n  Duployan: 'dupl',\n  Egyptian_Hieroglyphs: 'egyp',\n  Elbasan: 'elba',\n  Ethiopic: 'ethi',\n  Georgian: 'geor',\n  Glagolitic: 'glag',\n  Gothic: 'goth',\n  Grantha: 'gran',\n  Greek: 'grek',\n  Gujarati: ['gjr2', 'gujr'],\n  Gurmukhi: ['gur2', 'guru'],\n  Hangul: 'hang',\n  Han: 'hani',\n  Hanunoo: 'hano',\n  Hebrew: 'hebr',\n  Hiragana: 'hira',\n  Pahawh_Hmong: 'hmng',\n  Katakana_Or_Hiragana: 'hrkt',\n  Old_Italic: 'ital',\n  Javanese: 'java',\n  Kayah_Li: 'kali',\n  Katakana: 'kana',\n  Kharoshthi: 'khar',\n  Khmer: 'khmr',\n  Khojki: 'khoj',\n  Kannada: ['knd2', 'knda'],\n  Kaithi: 'kthi',\n  Tai_Tham: 'lana',\n  Lao: 'lao ',\n  Latin: 'latn',\n  Lepcha: 'lepc',\n  Limbu: 'limb',\n  Linear_A: 'lina',\n  Linear_B: 'linb',\n  Lisu: 'lisu',\n  Lycian: 'lyci',\n  Lydian: 'lydi',\n  Mahajani: 'mahj',\n  Mandaic: 'mand',\n  Manichaean: 'mani',\n  Mende_Kikakui: 'mend',\n  Meroitic_Cursive: 'merc',\n  Meroitic_Hieroglyphs: 'mero',\n  Malayalam: ['mlm2', 'mlym'],\n  Modi: 'modi',\n  Mongolian: 'mong',\n  Mro: 'mroo',\n  Meetei_Mayek: 'mtei',\n  Myanmar: ['mym2', 'mymr'],\n  Old_North_Arabian: 'narb',\n  Nabataean: 'nbat',\n  Nko: 'nko ',\n  Ogham: 'ogam',\n  Ol_Chiki: 'olck',\n  Old_Turkic: 'orkh',\n  Oriya: ['ory2', 'orya'],\n  Osmanya: 'osma',\n  Palmyrene: 'palm',\n  Pau_Cin_Hau: 'pauc',\n  Old_Permic: 'perm',\n  Phags_Pa: 'phag',\n  Inscriptional_Pahlavi: 'phli',\n  Psalter_Pahlavi: 'phlp',\n  Phoenician: 'phnx',\n  Miao: 'plrd',\n  Inscriptional_Parthian: 'prti',\n  Rejang: 'rjng',\n  Runic: 'runr',\n  Samaritan: 'samr',\n  Old_South_Arabian: 'sarb',\n  Saurashtra: 'saur',\n  Shavian: 'shaw',\n  Sharada: 'shrd',\n  Siddham: 'sidd',\n  Khudawadi: 'sind',\n  Sinhala: 'sinh',\n  Sora_Sompeng: 'sora',\n  Sundanese: 'sund',\n  Syloti_Nagri: 'sylo',\n  Syriac: 'syrc',\n  Tagbanwa: 'tagb',\n  Takri: 'takr',\n  Tai_Le: 'tale',\n  New_Tai_Lue: 'talu',\n  Tamil: ['tml2', 'taml'],\n  Tai_Viet: 'tavt',\n  Telugu: ['tel2', 'telu'],\n  Tifinagh: 'tfng',\n  Tagalog: 'tglg',\n  Thaana: 'thaa',\n  Thai: 'thai',\n  Tibetan: 'tibt',\n  Tirhuta: 'tirh',\n  Ugaritic: 'ugar',\n  Vai: 'vai ',\n  Warang_Citi: 'wara',\n  Old_Persian: 'xpeo',\n  Cuneiform: 'xsux',\n  Yi: 'yi  ',\n  Inherited: 'zinh',\n  Common: 'zyyy',\n  Unknown: 'zzzz'\n};\nconst $130d1a642ebcd2b7$var$OPENTYPE_SCRIPTS = {};\n\nfor (let script in $130d1a642ebcd2b7$var$UNICODE_SCRIPTS) {\n  let tag = $130d1a642ebcd2b7$var$UNICODE_SCRIPTS[script];\n  if (Array.isArray(tag)) for (let t of tag) $130d1a642ebcd2b7$var$OPENTYPE_SCRIPTS[t] = script;else $130d1a642ebcd2b7$var$OPENTYPE_SCRIPTS[tag] = script;\n}\n\nfunction $130d1a642ebcd2b7$export$b32f0b5f69d65e51(script) {\n  return $130d1a642ebcd2b7$var$UNICODE_SCRIPTS[script];\n}\n\nfunction $130d1a642ebcd2b7$export$ce50e82f12a827a4(tag) {\n  return $130d1a642ebcd2b7$var$OPENTYPE_SCRIPTS[tag];\n}\n\nfunction $130d1a642ebcd2b7$export$e5cb25e204fb8450(string) {\n  let len = string.length;\n  let idx = 0;\n\n  while (idx < len) {\n    let code = string.charCodeAt(idx++); // Check if this is a high surrogate\n\n    if (0xd800 <= code && code <= 0xdbff && idx < len) {\n      let next = string.charCodeAt(idx); // Check if this is a low surrogate\n\n      if (0xdc00 <= next && next <= 0xdfff) {\n        idx++;\n        code = ((code & 0x3FF) << 10) + (next & 0x3FF) + 0x10000;\n      }\n    }\n\n    let script = (0, $6uUbQ$getScript)(code);\n    if (script !== 'Common' && script !== 'Inherited' && script !== 'Unknown') return $130d1a642ebcd2b7$var$UNICODE_SCRIPTS[script];\n  }\n\n  return $130d1a642ebcd2b7$var$UNICODE_SCRIPTS.Unknown;\n}\n\nfunction $130d1a642ebcd2b7$export$16fab0757cfc223d(codePoints) {\n  for (let i = 0; i < codePoints.length; i++) {\n    let codePoint = codePoints[i];\n    let script = (0, $6uUbQ$getScript)(codePoint);\n    if (script !== 'Common' && script !== 'Inherited' && script !== 'Unknown') return $130d1a642ebcd2b7$var$UNICODE_SCRIPTS[script];\n  }\n\n  return $130d1a642ebcd2b7$var$UNICODE_SCRIPTS.Unknown;\n} // The scripts in this map are written from right to left\n\n\nconst $130d1a642ebcd2b7$var$RTL = {\n  arab: true,\n  hebr: true,\n  syrc: true,\n  thaa: true,\n  cprt: true,\n  khar: true,\n  phnx: true,\n  'nko ': true,\n  lydi: true,\n  avst: true,\n  armi: true,\n  phli: true,\n  prti: true,\n  sarb: true,\n  orkh: true,\n  samr: true,\n  mand: true,\n  merc: true,\n  mero: true,\n  // Unicode 7.0 (not listed on http://www.microsoft.com/typography/otspec/scripttags.htm)\n  mani: true,\n  mend: true,\n  nbat: true,\n  narb: true,\n  palm: true,\n  phlp: true // Psalter Pahlavi\n\n};\n\nfunction $130d1a642ebcd2b7$export$9fddb9d0dd7d8a54(script) {\n  if ($130d1a642ebcd2b7$var$RTL[script]) return 'rtl';\n  return 'ltr';\n}\n\nclass $be07b3e97a42687a$export$2e2bcd8739ae039 {\n  /**\n  * The total advance width of the run.\n  * @type {number}\n  */\n  get advanceWidth() {\n    let width = 0;\n\n    for (let position of this.positions) width += position.xAdvance;\n\n    return width;\n  }\n  /**\n  * The total advance height of the run.\n  * @type {number}\n  */\n\n\n  get advanceHeight() {\n    let height = 0;\n\n    for (let position of this.positions) height += position.yAdvance;\n\n    return height;\n  }\n  /**\n  * The bounding box containing all glyphs in the run.\n  * @type {BBox}\n  */\n\n\n  get bbox() {\n    let bbox = new (0, $f34600ab9d7f70d8$export$2e2bcd8739ae039)();\n    let x = 0;\n    let y = 0;\n\n    for (let index = 0; index < this.glyphs.length; index++) {\n      let glyph = this.glyphs[index];\n      let p = this.positions[index];\n      let b = glyph.bbox;\n      bbox.addPoint(b.minX + x + p.xOffset, b.minY + y + p.yOffset);\n      bbox.addPoint(b.maxX + x + p.xOffset, b.maxY + y + p.yOffset);\n      x += p.xAdvance;\n      y += p.yAdvance;\n    }\n\n    return bbox;\n  }\n\n  constructor(glyphs, features, script, language, direction) {\n    /**\n    * An array of Glyph objects in the run\n    * @type {Glyph[]}\n    */\n    this.glyphs = glyphs;\n    /**\n    * An array of GlyphPosition objects for each glyph in the run\n    * @type {GlyphPosition[]}\n    */\n\n    this.positions = null;\n    /**\n    * The script that was requested for shaping. This was either passed in or detected automatically.\n    * @type {string}\n    */\n\n    this.script = script;\n    /**\n    * The language requested for shaping, as passed in. If `null`, the default language for the\n    * script was used.\n    * @type {string}\n    */\n\n    this.language = language || null;\n    /**\n    * The direction requested for shaping, as passed in (either ltr or rtl).\n    * If `null`, the default direction of the script is used.\n    * @type {string}\n    */\n\n    this.direction = direction || $130d1a642ebcd2b7$export$9fddb9d0dd7d8a54(script);\n    /**\n    * The features requested during shaping. This is a combination of user\n    * specified features and features chosen by the shaper.\n    * @type {object}\n    */\n\n    this.features = {}; // Convert features to an object\n\n    if (Array.isArray(features)) for (let tag of features) this.features[tag] = true;else if (typeof features === 'object') this.features = features;\n  }\n\n}\n/**\n * Represents positioning information for a glyph in a GlyphRun.\n */\n\n\nclass $1ac75d9a55b67f01$export$2e2bcd8739ae039 {\n  constructor() {\n    let xAdvance = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let yAdvance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let xOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let yOffset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n    /**\n    * The amount to move the virtual pen in the X direction after rendering this glyph.\n    * @type {number}\n    */\n    this.xAdvance = xAdvance;\n    /**\n    * The amount to move the virtual pen in the Y direction after rendering this glyph.\n    * @type {number}\n    */\n\n    this.yAdvance = yAdvance;\n    /**\n    * The offset from the pen position in the X direction at which to render this glyph.\n    * @type {number}\n    */\n\n    this.xOffset = xOffset;\n    /**\n    * The offset from the pen position in the Y direction at which to render this glyph.\n    * @type {number}\n    */\n\n    this.yOffset = yOffset;\n  }\n\n} // see https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html\n// and /System/Library/Frameworks/CoreText.framework/Versions/A/Headers/SFNTLayoutTypes.h on a Mac\n\n\nconst $3b6302b64eccc32c$var$features = {\n  allTypographicFeatures: {\n    code: 0,\n    exclusive: false,\n    allTypeFeatures: 0\n  },\n  ligatures: {\n    code: 1,\n    exclusive: false,\n    requiredLigatures: 0,\n    commonLigatures: 2,\n    rareLigatures: 4,\n    // logos: 6\n    rebusPictures: 8,\n    diphthongLigatures: 10,\n    squaredLigatures: 12,\n    abbrevSquaredLigatures: 14,\n    symbolLigatures: 16,\n    contextualLigatures: 18,\n    historicalLigatures: 20\n  },\n  cursiveConnection: {\n    code: 2,\n    exclusive: true,\n    unconnected: 0,\n    partiallyConnected: 1,\n    cursive: 2\n  },\n  letterCase: {\n    code: 3,\n    exclusive: true\n  },\n  // upperAndLowerCase: 0          # deprecated\n  // allCaps: 1                    # deprecated\n  // allLowerCase: 2               # deprecated\n  // smallCaps: 3                  # deprecated\n  // initialCaps: 4                # deprecated\n  // initialCapsAndSmallCaps: 5    # deprecated\n  verticalSubstitution: {\n    code: 4,\n    exclusive: false,\n    substituteVerticalForms: 0\n  },\n  linguisticRearrangement: {\n    code: 5,\n    exclusive: false,\n    linguisticRearrangement: 0\n  },\n  numberSpacing: {\n    code: 6,\n    exclusive: true,\n    monospacedNumbers: 0,\n    proportionalNumbers: 1,\n    thirdWidthNumbers: 2,\n    quarterWidthNumbers: 3\n  },\n  smartSwash: {\n    code: 8,\n    exclusive: false,\n    wordInitialSwashes: 0,\n    wordFinalSwashes: 2,\n    // lineInitialSwashes: 4\n    // lineFinalSwashes: 6\n    nonFinalSwashes: 8\n  },\n  diacritics: {\n    code: 9,\n    exclusive: true,\n    showDiacritics: 0,\n    hideDiacritics: 1,\n    decomposeDiacritics: 2\n  },\n  verticalPosition: {\n    code: 10,\n    exclusive: true,\n    normalPosition: 0,\n    superiors: 1,\n    inferiors: 2,\n    ordinals: 3,\n    scientificInferiors: 4\n  },\n  fractions: {\n    code: 11,\n    exclusive: true,\n    noFractions: 0,\n    verticalFractions: 1,\n    diagonalFractions: 2\n  },\n  overlappingCharacters: {\n    code: 13,\n    exclusive: false,\n    preventOverlap: 0\n  },\n  typographicExtras: {\n    code: 14,\n    exclusive: false,\n    // hyphensToEmDash: 0\n    // hyphenToEnDash: 2\n    slashedZero: 4\n  },\n  // formInterrobang: 6\n  // smartQuotes: 8\n  // periodsToEllipsis: 10\n  mathematicalExtras: {\n    code: 15,\n    exclusive: false,\n    // hyphenToMinus: 0\n    // asteristoMultiply: 2\n    // slashToDivide: 4\n    // inequalityLigatures: 6\n    // exponents: 8\n    mathematicalGreek: 10\n  },\n  ornamentSets: {\n    code: 16,\n    exclusive: true,\n    noOrnaments: 0,\n    dingbats: 1,\n    piCharacters: 2,\n    fleurons: 3,\n    decorativeBorders: 4,\n    internationalSymbols: 5,\n    mathSymbols: 6\n  },\n  characterAlternatives: {\n    code: 17,\n    exclusive: true,\n    noAlternates: 0\n  },\n  // user defined options\n  designComplexity: {\n    code: 18,\n    exclusive: true,\n    designLevel1: 0,\n    designLevel2: 1,\n    designLevel3: 2,\n    designLevel4: 3,\n    designLevel5: 4\n  },\n  styleOptions: {\n    code: 19,\n    exclusive: true,\n    noStyleOptions: 0,\n    displayText: 1,\n    engravedText: 2,\n    illuminatedCaps: 3,\n    titlingCaps: 4,\n    tallCaps: 5\n  },\n  characterShape: {\n    code: 20,\n    exclusive: true,\n    traditionalCharacters: 0,\n    simplifiedCharacters: 1,\n    JIS1978Characters: 2,\n    JIS1983Characters: 3,\n    JIS1990Characters: 4,\n    traditionalAltOne: 5,\n    traditionalAltTwo: 6,\n    traditionalAltThree: 7,\n    traditionalAltFour: 8,\n    traditionalAltFive: 9,\n    expertCharacters: 10,\n    JIS2004Characters: 11,\n    hojoCharacters: 12,\n    NLCCharacters: 13,\n    traditionalNamesCharacters: 14\n  },\n  numberCase: {\n    code: 21,\n    exclusive: true,\n    lowerCaseNumbers: 0,\n    upperCaseNumbers: 1\n  },\n  textSpacing: {\n    code: 22,\n    exclusive: true,\n    proportionalText: 0,\n    monospacedText: 1,\n    halfWidthText: 2,\n    thirdWidthText: 3,\n    quarterWidthText: 4,\n    altProportionalText: 5,\n    altHalfWidthText: 6\n  },\n  transliteration: {\n    code: 23,\n    exclusive: true,\n    noTransliteration: 0\n  },\n  // hanjaToHangul: 1\n  // hiraganaToKatakana: 2\n  // katakanaToHiragana: 3\n  // kanaToRomanization: 4\n  // romanizationToHiragana: 5\n  // romanizationToKatakana: 6\n  // hanjaToHangulAltOne: 7\n  // hanjaToHangulAltTwo: 8\n  // hanjaToHangulAltThree: 9\n  annotation: {\n    code: 24,\n    exclusive: true,\n    noAnnotation: 0,\n    boxAnnotation: 1,\n    roundedBoxAnnotation: 2,\n    circleAnnotation: 3,\n    invertedCircleAnnotation: 4,\n    parenthesisAnnotation: 5,\n    periodAnnotation: 6,\n    romanNumeralAnnotation: 7,\n    diamondAnnotation: 8,\n    invertedBoxAnnotation: 9,\n    invertedRoundedBoxAnnotation: 10\n  },\n  kanaSpacing: {\n    code: 25,\n    exclusive: true,\n    fullWidthKana: 0,\n    proportionalKana: 1\n  },\n  ideographicSpacing: {\n    code: 26,\n    exclusive: true,\n    fullWidthIdeographs: 0,\n    proportionalIdeographs: 1,\n    halfWidthIdeographs: 2\n  },\n  unicodeDecomposition: {\n    code: 27,\n    exclusive: false,\n    canonicalComposition: 0,\n    compatibilityComposition: 2,\n    transcodingComposition: 4\n  },\n  rubyKana: {\n    code: 28,\n    exclusive: false,\n    // noRubyKana: 0     # deprecated - use rubyKanaOff instead\n    // rubyKana: 1     # deprecated - use rubyKanaOn instead\n    rubyKana: 2\n  },\n  CJKSymbolAlternatives: {\n    code: 29,\n    exclusive: true,\n    noCJKSymbolAlternatives: 0,\n    CJKSymbolAltOne: 1,\n    CJKSymbolAltTwo: 2,\n    CJKSymbolAltThree: 3,\n    CJKSymbolAltFour: 4,\n    CJKSymbolAltFive: 5\n  },\n  ideographicAlternatives: {\n    code: 30,\n    exclusive: true,\n    noIdeographicAlternatives: 0,\n    ideographicAltOne: 1,\n    ideographicAltTwo: 2,\n    ideographicAltThree: 3,\n    ideographicAltFour: 4,\n    ideographicAltFive: 5\n  },\n  CJKVerticalRomanPlacement: {\n    code: 31,\n    exclusive: true,\n    CJKVerticalRomanCentered: 0,\n    CJKVerticalRomanHBaseline: 1\n  },\n  italicCJKRoman: {\n    code: 32,\n    exclusive: false,\n    // noCJKItalicRoman: 0     # deprecated - use CJKItalicRomanOff instead\n    // CJKItalicRoman: 1     # deprecated - use CJKItalicRomanOn instead\n    CJKItalicRoman: 2\n  },\n  caseSensitiveLayout: {\n    code: 33,\n    exclusive: false,\n    caseSensitiveLayout: 0,\n    caseSensitiveSpacing: 2\n  },\n  alternateKana: {\n    code: 34,\n    exclusive: false,\n    alternateHorizKana: 0,\n    alternateVertKana: 2\n  },\n  stylisticAlternatives: {\n    code: 35,\n    exclusive: false,\n    noStylisticAlternates: 0,\n    stylisticAltOne: 2,\n    stylisticAltTwo: 4,\n    stylisticAltThree: 6,\n    stylisticAltFour: 8,\n    stylisticAltFive: 10,\n    stylisticAltSix: 12,\n    stylisticAltSeven: 14,\n    stylisticAltEight: 16,\n    stylisticAltNine: 18,\n    stylisticAltTen: 20,\n    stylisticAltEleven: 22,\n    stylisticAltTwelve: 24,\n    stylisticAltThirteen: 26,\n    stylisticAltFourteen: 28,\n    stylisticAltFifteen: 30,\n    stylisticAltSixteen: 32,\n    stylisticAltSeventeen: 34,\n    stylisticAltEighteen: 36,\n    stylisticAltNineteen: 38,\n    stylisticAltTwenty: 40\n  },\n  contextualAlternates: {\n    code: 36,\n    exclusive: false,\n    contextualAlternates: 0,\n    swashAlternates: 2,\n    contextualSwashAlternates: 4\n  },\n  lowerCase: {\n    code: 37,\n    exclusive: true,\n    defaultLowerCase: 0,\n    lowerCaseSmallCaps: 1,\n    lowerCasePetiteCaps: 2\n  },\n  upperCase: {\n    code: 38,\n    exclusive: true,\n    defaultUpperCase: 0,\n    upperCaseSmallCaps: 1,\n    upperCasePetiteCaps: 2\n  },\n  languageTag: {\n    code: 39,\n    exclusive: true\n  },\n  CJKRomanSpacing: {\n    code: 103,\n    exclusive: true,\n    halfWidthCJKRoman: 0,\n    proportionalCJKRoman: 1,\n    defaultCJKRoman: 2,\n    fullWidthCJKRoman: 3\n  }\n};\n\nconst $3b6302b64eccc32c$var$feature = (name, selector) => [$3b6302b64eccc32c$var$features[name].code, $3b6302b64eccc32c$var$features[name][selector]];\n\nconst $3b6302b64eccc32c$var$OTMapping = {\n  rlig: $3b6302b64eccc32c$var$feature('ligatures', 'requiredLigatures'),\n  clig: $3b6302b64eccc32c$var$feature('ligatures', 'contextualLigatures'),\n  dlig: $3b6302b64eccc32c$var$feature('ligatures', 'rareLigatures'),\n  hlig: $3b6302b64eccc32c$var$feature('ligatures', 'historicalLigatures'),\n  liga: $3b6302b64eccc32c$var$feature('ligatures', 'commonLigatures'),\n  hist: $3b6302b64eccc32c$var$feature('ligatures', 'historicalLigatures'),\n  smcp: $3b6302b64eccc32c$var$feature('lowerCase', 'lowerCaseSmallCaps'),\n  pcap: $3b6302b64eccc32c$var$feature('lowerCase', 'lowerCasePetiteCaps'),\n  frac: $3b6302b64eccc32c$var$feature('fractions', 'diagonalFractions'),\n  dnom: $3b6302b64eccc32c$var$feature('fractions', 'diagonalFractions'),\n  numr: $3b6302b64eccc32c$var$feature('fractions', 'diagonalFractions'),\n  afrc: $3b6302b64eccc32c$var$feature('fractions', 'verticalFractions'),\n  // aalt\n  // abvf, abvm, abvs, akhn, blwf, blwm, blws, cfar, cjct, cpsp, falt, isol, jalt, ljmo, mset?\n  // ltra, ltrm, nukt, pref, pres, pstf, psts, rand, rkrf, rphf, rtla, rtlm, size, tjmo, tnum?\n  // unic, vatu, vhal, vjmo, vpal, vrt2\n  // dist -> trak table?\n  // kern, vkrn -> kern table\n  // lfbd + opbd + rtbd -> opbd table?\n  // mark, mkmk -> acnt table?\n  // locl -> languageTag + ltag table\n  case: $3b6302b64eccc32c$var$feature('caseSensitiveLayout', 'caseSensitiveLayout'),\n  ccmp: $3b6302b64eccc32c$var$feature('unicodeDecomposition', 'canonicalComposition'),\n  cpct: $3b6302b64eccc32c$var$feature('CJKVerticalRomanPlacement', 'CJKVerticalRomanCentered'),\n  valt: $3b6302b64eccc32c$var$feature('CJKVerticalRomanPlacement', 'CJKVerticalRomanCentered'),\n  swsh: $3b6302b64eccc32c$var$feature('contextualAlternates', 'swashAlternates'),\n  cswh: $3b6302b64eccc32c$var$feature('contextualAlternates', 'contextualSwashAlternates'),\n  curs: $3b6302b64eccc32c$var$feature('cursiveConnection', 'cursive'),\n  c2pc: $3b6302b64eccc32c$var$feature('upperCase', 'upperCasePetiteCaps'),\n  c2sc: $3b6302b64eccc32c$var$feature('upperCase', 'upperCaseSmallCaps'),\n  init: $3b6302b64eccc32c$var$feature('smartSwash', 'wordInitialSwashes'),\n  fin2: $3b6302b64eccc32c$var$feature('smartSwash', 'wordFinalSwashes'),\n  medi: $3b6302b64eccc32c$var$feature('smartSwash', 'nonFinalSwashes'),\n  med2: $3b6302b64eccc32c$var$feature('smartSwash', 'nonFinalSwashes'),\n  fin3: $3b6302b64eccc32c$var$feature('smartSwash', 'wordFinalSwashes'),\n  fina: $3b6302b64eccc32c$var$feature('smartSwash', 'wordFinalSwashes'),\n  pkna: $3b6302b64eccc32c$var$feature('kanaSpacing', 'proportionalKana'),\n  half: $3b6302b64eccc32c$var$feature('textSpacing', 'halfWidthText'),\n  halt: $3b6302b64eccc32c$var$feature('textSpacing', 'altHalfWidthText'),\n  hkna: $3b6302b64eccc32c$var$feature('alternateKana', 'alternateHorizKana'),\n  vkna: $3b6302b64eccc32c$var$feature('alternateKana', 'alternateVertKana'),\n  // hngl: feature 'transliteration', 'hanjaToHangulSelector' # deprecated\n  ital: $3b6302b64eccc32c$var$feature('italicCJKRoman', 'CJKItalicRoman'),\n  lnum: $3b6302b64eccc32c$var$feature('numberCase', 'upperCaseNumbers'),\n  onum: $3b6302b64eccc32c$var$feature('numberCase', 'lowerCaseNumbers'),\n  mgrk: $3b6302b64eccc32c$var$feature('mathematicalExtras', 'mathematicalGreek'),\n  // nalt: not enough info. what type of annotation?\n  // ornm: ditto, which ornament style?\n  calt: $3b6302b64eccc32c$var$feature('contextualAlternates', 'contextualAlternates'),\n  vrt2: $3b6302b64eccc32c$var$feature('verticalSubstitution', 'substituteVerticalForms'),\n  vert: $3b6302b64eccc32c$var$feature('verticalSubstitution', 'substituteVerticalForms'),\n  tnum: $3b6302b64eccc32c$var$feature('numberSpacing', 'monospacedNumbers'),\n  pnum: $3b6302b64eccc32c$var$feature('numberSpacing', 'proportionalNumbers'),\n  sups: $3b6302b64eccc32c$var$feature('verticalPosition', 'superiors'),\n  subs: $3b6302b64eccc32c$var$feature('verticalPosition', 'inferiors'),\n  ordn: $3b6302b64eccc32c$var$feature('verticalPosition', 'ordinals'),\n  pwid: $3b6302b64eccc32c$var$feature('textSpacing', 'proportionalText'),\n  hwid: $3b6302b64eccc32c$var$feature('textSpacing', 'halfWidthText'),\n  qwid: $3b6302b64eccc32c$var$feature('textSpacing', 'quarterWidthText'),\n  twid: $3b6302b64eccc32c$var$feature('textSpacing', 'thirdWidthText'),\n  fwid: $3b6302b64eccc32c$var$feature('textSpacing', 'proportionalText'),\n  palt: $3b6302b64eccc32c$var$feature('textSpacing', 'altProportionalText'),\n  trad: $3b6302b64eccc32c$var$feature('characterShape', 'traditionalCharacters'),\n  smpl: $3b6302b64eccc32c$var$feature('characterShape', 'simplifiedCharacters'),\n  jp78: $3b6302b64eccc32c$var$feature('characterShape', 'JIS1978Characters'),\n  jp83: $3b6302b64eccc32c$var$feature('characterShape', 'JIS1983Characters'),\n  jp90: $3b6302b64eccc32c$var$feature('characterShape', 'JIS1990Characters'),\n  jp04: $3b6302b64eccc32c$var$feature('characterShape', 'JIS2004Characters'),\n  expt: $3b6302b64eccc32c$var$feature('characterShape', 'expertCharacters'),\n  hojo: $3b6302b64eccc32c$var$feature('characterShape', 'hojoCharacters'),\n  nlck: $3b6302b64eccc32c$var$feature('characterShape', 'NLCCharacters'),\n  tnam: $3b6302b64eccc32c$var$feature('characterShape', 'traditionalNamesCharacters'),\n  ruby: $3b6302b64eccc32c$var$feature('rubyKana', 'rubyKana'),\n  titl: $3b6302b64eccc32c$var$feature('styleOptions', 'titlingCaps'),\n  zero: $3b6302b64eccc32c$var$feature('typographicExtras', 'slashedZero'),\n  ss01: $3b6302b64eccc32c$var$feature('stylisticAlternatives', 'stylisticAltOne'),\n  ss02: $3b6302b64eccc32c$var$feature('stylisticAlternatives', 'stylisticAltTwo'),\n  ss03: $3b6302b64eccc32c$var$feature('stylisticAlternatives', 'stylisticAltThree'),\n  ss04: $3b6302b64eccc32c$var$feature('stylisticAlternatives', 'stylisticAltFour'),\n  ss05: $3b6302b64eccc32c$var$feature('stylisticAlternatives', 'stylisticAltFive'),\n  ss06: $3b6302b64eccc32c$var$feature('stylisticAlternatives', 'stylisticAltSix'),\n  ss07: $3b6302b64eccc32c$var$feature('stylisticAlternatives', 'stylisticAltSeven'),\n  ss08: $3b6302b64eccc32c$var$feature('stylisticAlternatives', 'stylisticAltEight'),\n  ss09: $3b6302b64eccc32c$var$feature('stylisticAlternatives', 'stylisticAltNine'),\n  ss10: $3b6302b64eccc32c$var$feature('stylisticAlternatives', 'stylisticAltTen'),\n  ss11: $3b6302b64eccc32c$var$feature('stylisticAlternatives', 'stylisticAltEleven'),\n  ss12: $3b6302b64eccc32c$var$feature('stylisticAlternatives', 'stylisticAltTwelve'),\n  ss13: $3b6302b64eccc32c$var$feature('stylisticAlternatives', 'stylisticAltThirteen'),\n  ss14: $3b6302b64eccc32c$var$feature('stylisticAlternatives', 'stylisticAltFourteen'),\n  ss15: $3b6302b64eccc32c$var$feature('stylisticAlternatives', 'stylisticAltFifteen'),\n  ss16: $3b6302b64eccc32c$var$feature('stylisticAlternatives', 'stylisticAltSixteen'),\n  ss17: $3b6302b64eccc32c$var$feature('stylisticAlternatives', 'stylisticAltSeventeen'),\n  ss18: $3b6302b64eccc32c$var$feature('stylisticAlternatives', 'stylisticAltEighteen'),\n  ss19: $3b6302b64eccc32c$var$feature('stylisticAlternatives', 'stylisticAltNineteen'),\n  ss20: $3b6302b64eccc32c$var$feature('stylisticAlternatives', 'stylisticAltTwenty')\n}; // salt: feature 'stylisticAlternatives', 'stylisticAltOne' # hmm, which one to choose\n// Add cv01-cv99 features\n\nfor (let i = 1; i <= 99; i++) $3b6302b64eccc32c$var$OTMapping[`cv${`00${i}`.slice(-2)}`] = [$3b6302b64eccc32c$var$features.characterAlternatives.code, i]; // create inverse mapping\n\n\nlet $3b6302b64eccc32c$var$AATMapping = {};\n\nfor (let ot in $3b6302b64eccc32c$var$OTMapping) {\n  let aat = $3b6302b64eccc32c$var$OTMapping[ot];\n  if ($3b6302b64eccc32c$var$AATMapping[aat[0]] == null) $3b6302b64eccc32c$var$AATMapping[aat[0]] = {};\n  $3b6302b64eccc32c$var$AATMapping[aat[0]][aat[1]] = ot;\n}\n\nfunction $3b6302b64eccc32c$export$b813f7d2a1677c16(features) {\n  let res = {};\n\n  for (let k in features) {\n    let r;\n\n    if (r = $3b6302b64eccc32c$var$OTMapping[k]) {\n      if (res[r[0]] == null) res[r[0]] = {};\n      res[r[0]][r[1]] = features[k];\n    }\n  }\n\n  return res;\n} // Maps strings in a [featureType, featureSetting]\n// to their equivalent number codes\n\n\nfunction $3b6302b64eccc32c$var$mapFeatureStrings(f) {\n  let [type, setting] = f;\n  if (isNaN(type)) var typeCode = $3b6302b64eccc32c$var$features[type] && $3b6302b64eccc32c$var$features[type].code;else var typeCode = type;\n  if (isNaN(setting)) var settingCode = $3b6302b64eccc32c$var$features[type] && $3b6302b64eccc32c$var$features[type][setting];else var settingCode = setting;\n  return [typeCode, settingCode];\n}\n\nfunction $3b6302b64eccc32c$export$bd6df347a4f391c4(features) {\n  let res = {};\n  if (Array.isArray(features)) for (let k = 0; k < features.length; k++) {\n    let r;\n    let f = $3b6302b64eccc32c$var$mapFeatureStrings(features[k]);\n    if (r = $3b6302b64eccc32c$var$AATMapping[f[0]] && $3b6302b64eccc32c$var$AATMapping[f[0]][f[1]]) res[r] = true;\n  } else if (typeof features === 'object') for (let type in features) {\n    let feature = features[type];\n\n    for (let setting in feature) {\n      let r;\n      let f = $3b6302b64eccc32c$var$mapFeatureStrings([type, setting]);\n      if (feature[setting] && (r = $3b6302b64eccc32c$var$AATMapping[f[0]] && $3b6302b64eccc32c$var$AATMapping[f[0]][f[1]])) res[r] = true;\n    }\n  }\n  return Object.keys(res);\n}\n\nclass $ff5ce077dae0f144$export$2e2bcd8739ae039 {\n  lookup(glyph) {\n    switch (this.table.version) {\n      case 0:\n        return this.table.values.getItem(glyph);\n\n      case 2:\n      case 4:\n        {\n          let min = 0;\n          let max = this.table.binarySearchHeader.nUnits - 1;\n\n          while (min <= max) {\n            var mid = min + max >> 1;\n            var seg = this.table.segments[mid]; // special end of search value\n\n            if (seg.firstGlyph === 0xffff) return null;\n            if (glyph < seg.firstGlyph) max = mid - 1;else if (glyph > seg.lastGlyph) min = mid + 1;else {\n              if (this.table.version === 2) return seg.value;else return seg.values[glyph - seg.firstGlyph];\n            }\n          }\n\n          return null;\n        }\n\n      case 6:\n        {\n          let min = 0;\n          let max = this.table.binarySearchHeader.nUnits - 1;\n\n          while (min <= max) {\n            var mid = min + max >> 1;\n            var seg = this.table.segments[mid]; // special end of search value\n\n            if (seg.glyph === 0xffff) return null;\n            if (glyph < seg.glyph) max = mid - 1;else if (glyph > seg.glyph) min = mid + 1;else return seg.value;\n          }\n\n          return null;\n        }\n\n      case 8:\n        return this.table.values[glyph - this.table.firstGlyph];\n\n      default:\n        throw new Error(`Unknown lookup table format: ${this.table.version}`);\n    }\n  }\n\n  glyphsForValue(classValue) {\n    let res = [];\n\n    switch (this.table.version) {\n      case 2:\n      case 4:\n        for (let segment of this.table.segments) if (this.table.version === 2 && segment.value === classValue) res.push(...(0, $12727730ddfc8bfe$export$d02631cccf789723)(segment.firstGlyph, segment.lastGlyph + 1));else {\n          for (let index = 0; index < segment.values.length; index++) if (segment.values[index] === classValue) res.push(segment.firstGlyph + index);\n        }\n\n        break;\n\n      case 6:\n        for (let segment of this.table.segments) if (segment.value === classValue) res.push(segment.glyph);\n\n        break;\n\n      case 8:\n        for (let i = 0; i < this.table.values.length; i++) if (this.table.values[i] === classValue) res.push(this.table.firstGlyph + i);\n\n        break;\n\n      default:\n        throw new Error(`Unknown lookup table format: ${this.table.version}`);\n    }\n\n    return res;\n  }\n\n  constructor(table) {\n    this.table = table;\n  }\n\n}\n\n(0, $6uUbQ$_1)([(0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)], $ff5ce077dae0f144$export$2e2bcd8739ae039.prototype, \"glyphsForValue\", null);\nconst $50c7aac9316f2948$var$START_OF_TEXT_STATE = 0;\nconst $50c7aac9316f2948$var$START_OF_LINE_STATE = 1;\nconst $50c7aac9316f2948$var$END_OF_TEXT_CLASS = 0;\nconst $50c7aac9316f2948$var$OUT_OF_BOUNDS_CLASS = 1;\nconst $50c7aac9316f2948$var$DELETED_GLYPH_CLASS = 2;\nconst $50c7aac9316f2948$var$END_OF_LINE_CLASS = 3;\nconst $50c7aac9316f2948$var$DONT_ADVANCE = 0x4000;\n\nclass $50c7aac9316f2948$export$2e2bcd8739ae039 {\n  process(glyphs, reverse, processEntry) {\n    let currentState = $50c7aac9316f2948$var$START_OF_TEXT_STATE; // START_OF_LINE_STATE is used for kashida glyph insertions sometimes I think?\n\n    let index = reverse ? glyphs.length - 1 : 0;\n    let dir = reverse ? -1 : 1;\n\n    while (dir === 1 && index <= glyphs.length || dir === -1 && index >= -1) {\n      let glyph = null;\n      let classCode = $50c7aac9316f2948$var$OUT_OF_BOUNDS_CLASS;\n      let shouldAdvance = true;\n      if (index === glyphs.length || index === -1) classCode = $50c7aac9316f2948$var$END_OF_TEXT_CLASS;else {\n        glyph = glyphs[index];\n        if (glyph.id === 0xffff) classCode = $50c7aac9316f2948$var$DELETED_GLYPH_CLASS;else {\n          classCode = this.lookupTable.lookup(glyph.id);\n          if (classCode == null) classCode = $50c7aac9316f2948$var$OUT_OF_BOUNDS_CLASS;\n        }\n      }\n      let row = this.stateTable.stateArray.getItem(currentState);\n      let entryIndex = row[classCode];\n      let entry = this.stateTable.entryTable.getItem(entryIndex);\n\n      if (classCode !== $50c7aac9316f2948$var$END_OF_TEXT_CLASS && classCode !== $50c7aac9316f2948$var$DELETED_GLYPH_CLASS) {\n        processEntry(glyph, entry, index);\n        shouldAdvance = !(entry.flags & $50c7aac9316f2948$var$DONT_ADVANCE);\n      }\n\n      currentState = entry.newState;\n      if (shouldAdvance) index += dir;\n    }\n\n    return glyphs;\n  }\n  /**\n  * Performs a depth-first traversal of the glyph strings\n  * represented by the state machine.\n  */\n\n\n  traverse(opts) {\n    let state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let visited = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Set();\n    if (visited.has(state)) return;\n    visited.add(state);\n    let {\n      nClasses: nClasses,\n      stateArray: stateArray,\n      entryTable: entryTable\n    } = this.stateTable;\n    let row = stateArray.getItem(state); // Skip predefined classes\n\n    for (let classCode = 4; classCode < nClasses; classCode++) {\n      let entryIndex = row[classCode];\n      let entry = entryTable.getItem(entryIndex); // Try all glyphs in the class\n\n      for (let glyph of this.lookupTable.glyphsForValue(classCode)) {\n        if (opts.enter) opts.enter(glyph, entry);\n        if (entry.newState !== 0) this.traverse(opts, entry.newState, visited);\n        if (opts.exit) opts.exit(glyph, entry);\n      }\n    }\n  }\n\n  constructor(stateTable) {\n    this.stateTable = stateTable;\n    this.lookupTable = new (0, $ff5ce077dae0f144$export$2e2bcd8739ae039)(stateTable.classTable);\n  }\n\n} // indic replacement flags\n\n\nconst $55f71433a605c87d$var$MARK_FIRST = 0x8000;\nconst $55f71433a605c87d$var$MARK_LAST = 0x2000;\nconst $55f71433a605c87d$var$VERB = 0x000F; // contextual substitution and glyph insertion flag\n\nconst $55f71433a605c87d$var$SET_MARK = 0x8000; // ligature entry flags\n\nconst $55f71433a605c87d$var$SET_COMPONENT = 0x8000;\nconst $55f71433a605c87d$var$PERFORM_ACTION = 0x2000; // ligature action masks\n\nconst $55f71433a605c87d$var$LAST_MASK = 0x80000000;\nconst $55f71433a605c87d$var$STORE_MASK = 0x40000000;\nconst $55f71433a605c87d$var$OFFSET_MASK = 0x3FFFFFFF;\nconst $55f71433a605c87d$var$VERTICAL_ONLY = 0x800000;\nconst $55f71433a605c87d$var$REVERSE_DIRECTION = 0x400000;\nconst $55f71433a605c87d$var$HORIZONTAL_AND_VERTICAL = 0x200000; // glyph insertion flags\n\nconst $55f71433a605c87d$var$CURRENT_IS_KASHIDA_LIKE = 0x2000;\nconst $55f71433a605c87d$var$MARKED_IS_KASHIDA_LIKE = 0x1000;\nconst $55f71433a605c87d$var$CURRENT_INSERT_BEFORE = 0x0800;\nconst $55f71433a605c87d$var$MARKED_INSERT_BEFORE = 0x0400;\nconst $55f71433a605c87d$var$CURRENT_INSERT_COUNT = 0x03E0;\nconst $55f71433a605c87d$var$MARKED_INSERT_COUNT = 0x001F;\n\nclass $55f71433a605c87d$export$2e2bcd8739ae039 {\n  // Processes an array of glyphs and applies the specified features\n  // Features should be in the form of {featureType:{featureSetting:boolean}}\n  process(glyphs) {\n    let features = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    for (let chain of this.morx.chains) {\n      let flags = chain.defaultFlags; // enable/disable the requested features\n\n      for (let feature of chain.features) {\n        let f;\n\n        if (f = features[feature.featureType]) {\n          if (f[feature.featureSetting]) {\n            flags &= feature.disableFlags;\n            flags |= feature.enableFlags;\n          } else if (f[feature.featureSetting] === false) {\n            flags |= ~feature.disableFlags;\n            flags &= ~feature.enableFlags;\n          }\n        }\n      }\n\n      for (let subtable of chain.subtables) if (subtable.subFeatureFlags & flags) this.processSubtable(subtable, glyphs);\n    } // remove deleted glyphs\n\n\n    let index = glyphs.length - 1;\n\n    while (index >= 0) {\n      if (glyphs[index].id === 0xffff) glyphs.splice(index, 1);\n      index--;\n    }\n\n    return glyphs;\n  }\n\n  processSubtable(subtable, glyphs) {\n    this.subtable = subtable;\n    this.glyphs = glyphs;\n\n    if (this.subtable.type === 4) {\n      this.processNoncontextualSubstitutions(this.subtable, this.glyphs);\n      return;\n    }\n\n    this.ligatureStack = [];\n    this.markedGlyph = null;\n    this.firstGlyph = null;\n    this.lastGlyph = null;\n    this.markedIndex = null;\n    let stateMachine = this.getStateMachine(subtable);\n    let process = this.getProcessor();\n    let reverse = !!(this.subtable.coverage & $55f71433a605c87d$var$REVERSE_DIRECTION);\n    return stateMachine.process(this.glyphs, reverse, process);\n  }\n\n  getStateMachine(subtable) {\n    return new (0, $50c7aac9316f2948$export$2e2bcd8739ae039)(subtable.table.stateTable);\n  }\n\n  getProcessor() {\n    switch (this.subtable.type) {\n      case 0:\n        return this.processIndicRearragement;\n\n      case 1:\n        return this.processContextualSubstitution;\n\n      case 2:\n        return this.processLigature;\n\n      case 4:\n        return this.processNoncontextualSubstitutions;\n\n      case 5:\n        return this.processGlyphInsertion;\n\n      default:\n        throw new Error(`Invalid morx subtable type: ${this.subtable.type}`);\n    }\n  }\n\n  processIndicRearragement(glyph, entry, index) {\n    if (entry.flags & $55f71433a605c87d$var$MARK_FIRST) this.firstGlyph = index;\n    if (entry.flags & $55f71433a605c87d$var$MARK_LAST) this.lastGlyph = index;\n    $55f71433a605c87d$var$reorderGlyphs(this.glyphs, entry.flags & $55f71433a605c87d$var$VERB, this.firstGlyph, this.lastGlyph);\n  }\n\n  processContextualSubstitution(glyph, entry, index) {\n    let subsitutions = this.subtable.table.substitutionTable.items;\n\n    if (entry.markIndex !== 0xffff) {\n      let lookup = subsitutions.getItem(entry.markIndex);\n      let lookupTable = new (0, $ff5ce077dae0f144$export$2e2bcd8739ae039)(lookup);\n      glyph = this.glyphs[this.markedGlyph];\n      var gid = lookupTable.lookup(glyph.id);\n      if (gid) this.glyphs[this.markedGlyph] = this.font.getGlyph(gid, glyph.codePoints);\n    }\n\n    if (entry.currentIndex !== 0xffff) {\n      let lookup = subsitutions.getItem(entry.currentIndex);\n      let lookupTable = new (0, $ff5ce077dae0f144$export$2e2bcd8739ae039)(lookup);\n      glyph = this.glyphs[index];\n      var gid = lookupTable.lookup(glyph.id);\n      if (gid) this.glyphs[index] = this.font.getGlyph(gid, glyph.codePoints);\n    }\n\n    if (entry.flags & $55f71433a605c87d$var$SET_MARK) this.markedGlyph = index;\n  }\n\n  processLigature(glyph, entry, index) {\n    if (entry.flags & $55f71433a605c87d$var$SET_COMPONENT) this.ligatureStack.push(index);\n\n    if (entry.flags & $55f71433a605c87d$var$PERFORM_ACTION) {\n      let actions = this.subtable.table.ligatureActions;\n      let components = this.subtable.table.components;\n      let ligatureList = this.subtable.table.ligatureList;\n      let actionIndex = entry.action;\n      let last = false;\n      let ligatureIndex = 0;\n      let codePoints = [];\n      let ligatureGlyphs = [];\n\n      while (!last) {\n        let componentGlyph = this.ligatureStack.pop();\n        codePoints.unshift(...this.glyphs[componentGlyph].codePoints);\n        let action = actions.getItem(actionIndex++);\n        last = !!(action & $55f71433a605c87d$var$LAST_MASK);\n        let store = !!(action & $55f71433a605c87d$var$STORE_MASK);\n        let offset = (action & $55f71433a605c87d$var$OFFSET_MASK) << 2 >> 2; // sign extend 30 to 32 bits\n\n        offset += this.glyphs[componentGlyph].id;\n        let component = components.getItem(offset);\n        ligatureIndex += component;\n\n        if (last || store) {\n          let ligatureEntry = ligatureList.getItem(ligatureIndex);\n          this.glyphs[componentGlyph] = this.font.getGlyph(ligatureEntry, codePoints);\n          ligatureGlyphs.push(componentGlyph);\n          ligatureIndex = 0;\n          codePoints = [];\n        } else this.glyphs[componentGlyph] = this.font.getGlyph(0xffff);\n      } // Put ligature glyph indexes back on the stack\n\n\n      this.ligatureStack.push(...ligatureGlyphs);\n    }\n  }\n\n  processNoncontextualSubstitutions(subtable, glyphs, index) {\n    let lookupTable = new (0, $ff5ce077dae0f144$export$2e2bcd8739ae039)(subtable.table.lookupTable);\n\n    for (index = 0; index < glyphs.length; index++) {\n      let glyph = glyphs[index];\n\n      if (glyph.id !== 0xffff) {\n        let gid = lookupTable.lookup(glyph.id);\n        if (gid) glyphs[index] = this.font.getGlyph(gid, glyph.codePoints);\n      }\n    }\n  }\n\n  _insertGlyphs(glyphIndex, insertionActionIndex, count, isBefore) {\n    let insertions = [];\n\n    while (count--) {\n      let gid = this.subtable.table.insertionActions.getItem(insertionActionIndex++);\n      insertions.push(this.font.getGlyph(gid));\n    }\n\n    if (!isBefore) glyphIndex++;\n    this.glyphs.splice(glyphIndex, 0, ...insertions);\n  }\n\n  processGlyphInsertion(glyph, entry, index) {\n    if (entry.flags & $55f71433a605c87d$var$SET_MARK) this.markedIndex = index;\n\n    if (entry.markedInsertIndex !== 0xffff) {\n      let count = (entry.flags & $55f71433a605c87d$var$MARKED_INSERT_COUNT) >>> 5;\n      let isBefore = !!(entry.flags & $55f71433a605c87d$var$MARKED_INSERT_BEFORE);\n\n      this._insertGlyphs(this.markedIndex, entry.markedInsertIndex, count, isBefore);\n    }\n\n    if (entry.currentInsertIndex !== 0xffff) {\n      let count = (entry.flags & $55f71433a605c87d$var$CURRENT_INSERT_COUNT) >>> 5;\n      let isBefore = !!(entry.flags & $55f71433a605c87d$var$CURRENT_INSERT_BEFORE);\n\n      this._insertGlyphs(index, entry.currentInsertIndex, count, isBefore);\n    }\n  }\n\n  getSupportedFeatures() {\n    let features = [];\n\n    for (let chain of this.morx.chains) for (let feature of chain.features) features.push([feature.featureType, feature.featureSetting]);\n\n    return features;\n  }\n\n  generateInputs(gid) {\n    if (!this.inputCache) this.generateInputCache();\n    return this.inputCache[gid] || [];\n  }\n\n  generateInputCache() {\n    this.inputCache = {};\n\n    for (let chain of this.morx.chains) {\n      let flags = chain.defaultFlags;\n\n      for (let subtable of chain.subtables) if (subtable.subFeatureFlags & flags) this.generateInputsForSubtable(subtable);\n    }\n  }\n\n  generateInputsForSubtable(subtable) {\n    // Currently, only supporting ligature subtables.\n    if (subtable.type !== 2) return;\n    let reverse = !!(subtable.coverage & $55f71433a605c87d$var$REVERSE_DIRECTION);\n    if (reverse) throw new Error('Reverse subtable, not supported.');\n    this.subtable = subtable;\n    this.ligatureStack = [];\n    let stateMachine = this.getStateMachine(subtable);\n    let process = this.getProcessor();\n    let input = [];\n    let stack = [];\n    this.glyphs = [];\n    stateMachine.traverse({\n      enter: (glyph, entry) => {\n        let glyphs = this.glyphs;\n        stack.push({\n          glyphs: glyphs.slice(),\n          ligatureStack: this.ligatureStack.slice()\n        }); // Add glyph to input and glyphs to process.\n\n        let g = this.font.getGlyph(glyph);\n        input.push(g);\n        glyphs.push(input[input.length - 1]); // Process ligature substitution\n\n        process(glyphs[glyphs.length - 1], entry, glyphs.length - 1); // Add input to result if only one matching (non-deleted) glyph remains.\n\n        let count = 0;\n        let found = 0;\n\n        for (let i = 0; i < glyphs.length && count <= 1; i++) if (glyphs[i].id !== 0xffff) {\n          count++;\n          found = glyphs[i].id;\n        }\n\n        if (count === 1) {\n          let result = input.map(g => g.id);\n          let cache = this.inputCache[found];\n          if (cache) cache.push(result);else this.inputCache[found] = [result];\n        }\n      },\n      exit: () => {\n        ({\n          glyphs: this.glyphs,\n          ligatureStack: this.ligatureStack\n        } = stack.pop());\n        input.pop();\n      }\n    });\n  }\n\n  constructor(font) {\n    this.processIndicRearragement = this.processIndicRearragement.bind(this);\n    this.processContextualSubstitution = this.processContextualSubstitution.bind(this);\n    this.processLigature = this.processLigature.bind(this);\n    this.processNoncontextualSubstitutions = this.processNoncontextualSubstitutions.bind(this);\n    this.processGlyphInsertion = this.processGlyphInsertion.bind(this);\n    this.font = font;\n    this.morx = font.morx;\n    this.inputCache = null;\n  }\n\n}\n\n(0, $6uUbQ$_1)([(0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)], $55f71433a605c87d$export$2e2bcd8739ae039.prototype, \"getStateMachine\", null); // swaps the glyphs in rangeA with those in rangeB\n// reverse the glyphs inside those ranges if specified\n// ranges are in [offset, length] format\n\nfunction $55f71433a605c87d$var$swap(glyphs, rangeA, rangeB) {\n  let reverseA = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  let reverseB = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  let end = glyphs.splice(rangeB[0] - (rangeB[1] - 1), rangeB[1]);\n  if (reverseB) end.reverse();\n  let start = glyphs.splice(rangeA[0], rangeA[1], ...end);\n  if (reverseA) start.reverse();\n  glyphs.splice(rangeB[0] - (rangeA[1] - 1), 0, ...start);\n  return glyphs;\n}\n\nfunction $55f71433a605c87d$var$reorderGlyphs(glyphs, verb, firstGlyph, lastGlyph) {\n  let length = lastGlyph - firstGlyph + 1;\n\n  switch (verb) {\n    case 0:\n      return glyphs;\n\n    case 1:\n      return $55f71433a605c87d$var$swap(glyphs, [firstGlyph, 1], [lastGlyph, 0]);\n\n    case 2:\n      return $55f71433a605c87d$var$swap(glyphs, [firstGlyph, 0], [lastGlyph, 1]);\n\n    case 3:\n      return $55f71433a605c87d$var$swap(glyphs, [firstGlyph, 1], [lastGlyph, 1]);\n\n    case 4:\n      return $55f71433a605c87d$var$swap(glyphs, [firstGlyph, 2], [lastGlyph, 0]);\n\n    case 5:\n      return $55f71433a605c87d$var$swap(glyphs, [firstGlyph, 2], [lastGlyph, 0], true, false);\n\n    case 6:\n      return $55f71433a605c87d$var$swap(glyphs, [firstGlyph, 0], [lastGlyph, 2]);\n\n    case 7:\n      return $55f71433a605c87d$var$swap(glyphs, [firstGlyph, 0], [lastGlyph, 2], false, true);\n\n    case 8:\n      return $55f71433a605c87d$var$swap(glyphs, [firstGlyph, 1], [lastGlyph, 2]);\n\n    case 9:\n      return $55f71433a605c87d$var$swap(glyphs, [firstGlyph, 1], [lastGlyph, 2], false, true);\n\n    case 10:\n      return $55f71433a605c87d$var$swap(glyphs, [firstGlyph, 2], [lastGlyph, 1]);\n\n    case 11:\n      return $55f71433a605c87d$var$swap(glyphs, [firstGlyph, 2], [lastGlyph, 1], true, false);\n\n    case 12:\n      return $55f71433a605c87d$var$swap(glyphs, [firstGlyph, 2], [lastGlyph, 2]);\n\n    case 13:\n      return $55f71433a605c87d$var$swap(glyphs, [firstGlyph, 2], [lastGlyph, 2], true, false);\n\n    case 14:\n      return $55f71433a605c87d$var$swap(glyphs, [firstGlyph, 2], [lastGlyph, 2], false, true);\n\n    case 15:\n      return $55f71433a605c87d$var$swap(glyphs, [firstGlyph, 2], [lastGlyph, 2], true, true);\n\n    default:\n      throw new Error(`Unknown verb: ${verb}`);\n  }\n}\n\nclass $ba6dd74203be8728$export$2e2bcd8739ae039 {\n  substitute(glyphRun) {\n    // AAT expects the glyphs to be in visual order prior to morx processing,\n    // so reverse the glyphs if the script is right-to-left.\n    if (glyphRun.direction === 'rtl') glyphRun.glyphs.reverse();\n    this.morxProcessor.process(glyphRun.glyphs, $3b6302b64eccc32c$export$b813f7d2a1677c16(glyphRun.features));\n  }\n\n  getAvailableFeatures(script, language) {\n    return $3b6302b64eccc32c$export$bd6df347a4f391c4(this.morxProcessor.getSupportedFeatures());\n  }\n\n  stringsForGlyph(gid) {\n    let glyphStrings = this.morxProcessor.generateInputs(gid);\n    let result = new Set();\n\n    for (let glyphs of glyphStrings) this._addStrings(glyphs, 0, result, '');\n\n    return result;\n  }\n\n  _addStrings(glyphs, index, strings, string) {\n    let codePoints = this.font._cmapProcessor.codePointsForGlyph(glyphs[index]);\n\n    for (let codePoint of codePoints) {\n      let s = string + String.fromCodePoint(codePoint);\n      if (index < glyphs.length - 1) this._addStrings(glyphs, index + 1, strings, s);else strings.add(s);\n    }\n  }\n\n  constructor(font) {\n    this.font = font;\n    this.morxProcessor = new (0, $55f71433a605c87d$export$2e2bcd8739ae039)(font);\n    this.fallbackPosition = false;\n  }\n\n}\n\nclass $94d7a73bd2edfc9a$export$2e2bcd8739ae039 {\n  /**\n  * Adds the given features to the last stage.\n  * Ignores features that have already been applied.\n  */\n  _addFeatures(features, global) {\n    let stageIndex = this.stages.length - 1;\n    let stage = this.stages[stageIndex];\n\n    for (let feature of features) if (this.allFeatures[feature] == null) {\n      stage.push(feature);\n      this.allFeatures[feature] = stageIndex;\n      if (global) this.globalFeatures[feature] = true;\n    }\n  }\n  /**\n  * Add features to the last stage\n  */\n\n\n  add(arg) {\n    let global = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    if (this.stages.length === 0) this.stages.push([]);\n    if (typeof arg === 'string') arg = [arg];\n    if (Array.isArray(arg)) this._addFeatures(arg, global);else if (typeof arg === 'object') {\n      this._addFeatures(arg.global || [], true);\n\n      this._addFeatures(arg.local || [], false);\n    } else throw new Error(\"Unsupported argument to ShapingPlan#add\");\n  }\n  /**\n  * Add a new stage\n  */\n\n\n  addStage(arg, global) {\n    if (typeof arg === 'function') this.stages.push(arg, []);else {\n      this.stages.push([]);\n      this.add(arg, global);\n    }\n  }\n\n  setFeatureOverrides(features) {\n    if (Array.isArray(features)) this.add(features);else if (typeof features === 'object') for (let tag in features) {\n      if (features[tag]) this.add(tag);else if (this.allFeatures[tag] != null) {\n        let stage = this.stages[this.allFeatures[tag]];\n        stage.splice(stage.indexOf(tag), 1);\n        delete this.allFeatures[tag];\n        delete this.globalFeatures[tag];\n      }\n    }\n  }\n  /**\n  * Assigns the global features to the given glyphs\n  */\n\n\n  assignGlobalFeatures(glyphs) {\n    for (let glyph of glyphs) for (let feature in this.globalFeatures) glyph.features[feature] = true;\n  }\n  /**\n  * Executes the planned stages using the given OTProcessor\n  */\n\n\n  process(processor, glyphs, positions) {\n    for (let stage of this.stages) {\n      if (typeof stage === 'function') {\n        if (!positions) stage(this.font, glyphs, this);\n      } else if (stage.length > 0) processor.applyFeatures(stage, glyphs, positions);\n    }\n  }\n\n  constructor(font, script, direction) {\n    this.font = font;\n    this.script = script;\n    this.direction = direction;\n    this.stages = [];\n    this.globalFeatures = {};\n    this.allFeatures = {};\n  }\n\n}\n\nconst $649970d87335b30f$var$VARIATION_FEATURES = ['rvrn'];\nconst $649970d87335b30f$var$COMMON_FEATURES = ['ccmp', 'locl', 'rlig', 'mark', 'mkmk'];\nconst $649970d87335b30f$var$FRACTIONAL_FEATURES = ['frac', 'numr', 'dnom'];\nconst $649970d87335b30f$var$HORIZONTAL_FEATURES = ['calt', 'clig', 'liga', 'rclt', 'curs', 'kern'];\nconst $649970d87335b30f$var$VERTICAL_FEATURES = ['vert'];\nconst $649970d87335b30f$var$DIRECTIONAL_FEATURES = {\n  ltr: ['ltra', 'ltrm'],\n  rtl: ['rtla', 'rtlm']\n};\n\nclass $649970d87335b30f$export$2e2bcd8739ae039 {\n  static plan(plan, glyphs, features) {\n    // Plan the features we want to apply\n    this.planPreprocessing(plan);\n    this.planFeatures(plan);\n    this.planPostprocessing(plan, features); // Assign the global features to all the glyphs\n\n    plan.assignGlobalFeatures(glyphs); // Assign local features to glyphs\n\n    this.assignFeatures(plan, glyphs);\n  }\n\n  static planPreprocessing(plan) {\n    plan.add({\n      global: [...$649970d87335b30f$var$VARIATION_FEATURES, ...$649970d87335b30f$var$DIRECTIONAL_FEATURES[plan.direction]],\n      local: $649970d87335b30f$var$FRACTIONAL_FEATURES\n    });\n  }\n\n  static planFeatures(plan) {// Do nothing by default. Let subclasses override this.\n  }\n\n  static planPostprocessing(plan, userFeatures) {\n    plan.add([...$649970d87335b30f$var$COMMON_FEATURES, ...$649970d87335b30f$var$HORIZONTAL_FEATURES]);\n    plan.setFeatureOverrides(userFeatures);\n  }\n\n  static assignFeatures(plan, glyphs) {\n    // Enable contextual fractions\n    for (let i = 0; i < glyphs.length; i++) {\n      let glyph = glyphs[i];\n\n      if (glyph.codePoints[0] === 0x2044) {\n        let start = i;\n        let end = i + 1; // Apply numerator\n\n        while (start > 0 && (0, $6uUbQ$isDigit)(glyphs[start - 1].codePoints[0])) {\n          glyphs[start - 1].features.numr = true;\n          glyphs[start - 1].features.frac = true;\n          start--;\n        } // Apply denominator\n\n\n        while (end < glyphs.length && (0, $6uUbQ$isDigit)(glyphs[end].codePoints[0])) {\n          glyphs[end].features.dnom = true;\n          glyphs[end].features.frac = true;\n          end++;\n        } // Apply fraction slash\n\n\n        glyph.features.frac = true;\n        i = end - 1;\n      }\n    }\n  }\n\n}\n\n(0, $6uUbQ$_)($649970d87335b30f$export$2e2bcd8739ae039, \"zeroMarkWidths\", 'AFTER_GPOS');\nconst $764eb544bbe1ccf0$var$trie = new (0, $6uUbQ$unicodetrie)((0, $12727730ddfc8bfe$export$94fdf11bafc8de6b)(\"APABAAAAAAAAOAAAAf0BAv7tmi1MxDAUx7vtvjhAgcDgkEgEAnmXEBIMCYaEcygEiqBQ4FAkCE4ikUgMiiBJSAgSiUQSDMn9L9eSl6bddddug9t7yS/trevre+3r27pcNxZiG+yCfdCVv/9LeQxOwRm4AJegD27ALbgD9+ABPJF+z+BN/h7yDj5k/VOWX6SdmU5+wLWknggxDxaS8u0qiiX4uiz9XamQ3wzDMAzDMAzDMAzDVI/h959V/v7BMAzDMAzDMLlyNTNiMSdewVxbiA44B4/guz1qW58VYlMI0WsJ0W+N6kXw0spvPtdwhtkwnGM6uLaV4Xyzg3v3PM9DPfQ/sOg4xPWjipy31P8LTqbU304c/cLCUmWJLNB2Uz2U1KTeRKNmKHVMfbJC+/0loTZRH/W5cvEvBJPMbREkWt3FD1NcqXZBSpuE2Ad0PBehPtNrPtIEdYP+hiRt/V1jIiE69X4NT/uVZI3PUHE9bm5M7ePGdZWy951v7Nn6j8v1WWKP3mt6ttnsigx6VN7Vc0VomSSGqW2mGNP1muZPl7LfjNUaKNFtDGVf2fvE9O7VlBS5j333c5p/eeoOqcs1R/hIqDWLJ7TTlksirVT1SI7l8k4Yp+g3jafGcrU1RM6l9th80XOpnlN97bDNY4i4s61B0Si/ipa0uHMl6zqEjlFfCZm/TM8KmzQDjmuTAQ==\"));\nconst $764eb544bbe1ccf0$var$FEATURES = ['isol', 'fina', 'fin2', 'fin3', 'medi', 'med2', 'init'];\nconst $764eb544bbe1ccf0$var$ShapingClasses = {\n  Non_Joining: 0,\n  Left_Joining: 1,\n  Right_Joining: 2,\n  Dual_Joining: 3,\n  Join_Causing: 3,\n  ALAPH: 4,\n  'DALATH RISH': 5,\n  Transparent: 6\n};\nconst $764eb544bbe1ccf0$var$ISOL = 'isol';\nconst $764eb544bbe1ccf0$var$FINA = 'fina';\nconst $764eb544bbe1ccf0$var$FIN2 = 'fin2';\nconst $764eb544bbe1ccf0$var$FIN3 = 'fin3';\nconst $764eb544bbe1ccf0$var$MEDI = 'medi';\nconst $764eb544bbe1ccf0$var$MED2 = 'med2';\nconst $764eb544bbe1ccf0$var$INIT = 'init';\nconst $764eb544bbe1ccf0$var$NONE = null; // Each entry is [prevAction, curAction, nextState]\n\nconst $764eb544bbe1ccf0$var$STATE_TABLE = [//   Non_Joining,        Left_Joining,       Right_Joining,     Dual_Joining,           ALAPH,            DALATH RISH\n// State 0: prev was U,  not willing to join.\n[[$764eb544bbe1ccf0$var$NONE, $764eb544bbe1ccf0$var$NONE, 0], [$764eb544bbe1ccf0$var$NONE, $764eb544bbe1ccf0$var$ISOL, 2], [$764eb544bbe1ccf0$var$NONE, $764eb544bbe1ccf0$var$ISOL, 1], [$764eb544bbe1ccf0$var$NONE, $764eb544bbe1ccf0$var$ISOL, 2], [$764eb544bbe1ccf0$var$NONE, $764eb544bbe1ccf0$var$ISOL, 1], [$764eb544bbe1ccf0$var$NONE, $764eb544bbe1ccf0$var$ISOL, 6]], // State 1: prev was R or ISOL/ALAPH,  not willing to join.\n[[$764eb544bbe1ccf0$var$NONE, $764eb544bbe1ccf0$var$NONE, 0], [$764eb544bbe1ccf0$var$NONE, $764eb544bbe1ccf0$var$ISOL, 2], [$764eb544bbe1ccf0$var$NONE, $764eb544bbe1ccf0$var$ISOL, 1], [$764eb544bbe1ccf0$var$NONE, $764eb544bbe1ccf0$var$ISOL, 2], [$764eb544bbe1ccf0$var$NONE, $764eb544bbe1ccf0$var$FIN2, 5], [$764eb544bbe1ccf0$var$NONE, $764eb544bbe1ccf0$var$ISOL, 6]], // State 2: prev was D/L in ISOL form,  willing to join.\n[[$764eb544bbe1ccf0$var$NONE, $764eb544bbe1ccf0$var$NONE, 0], [$764eb544bbe1ccf0$var$NONE, $764eb544bbe1ccf0$var$ISOL, 2], [$764eb544bbe1ccf0$var$INIT, $764eb544bbe1ccf0$var$FINA, 1], [$764eb544bbe1ccf0$var$INIT, $764eb544bbe1ccf0$var$FINA, 3], [$764eb544bbe1ccf0$var$INIT, $764eb544bbe1ccf0$var$FINA, 4], [$764eb544bbe1ccf0$var$INIT, $764eb544bbe1ccf0$var$FINA, 6]], // State 3: prev was D in FINA form,  willing to join.\n[[$764eb544bbe1ccf0$var$NONE, $764eb544bbe1ccf0$var$NONE, 0], [$764eb544bbe1ccf0$var$NONE, $764eb544bbe1ccf0$var$ISOL, 2], [$764eb544bbe1ccf0$var$MEDI, $764eb544bbe1ccf0$var$FINA, 1], [$764eb544bbe1ccf0$var$MEDI, $764eb544bbe1ccf0$var$FINA, 3], [$764eb544bbe1ccf0$var$MEDI, $764eb544bbe1ccf0$var$FINA, 4], [$764eb544bbe1ccf0$var$MEDI, $764eb544bbe1ccf0$var$FINA, 6]], // State 4: prev was FINA ALAPH,  not willing to join.\n[[$764eb544bbe1ccf0$var$NONE, $764eb544bbe1ccf0$var$NONE, 0], [$764eb544bbe1ccf0$var$NONE, $764eb544bbe1ccf0$var$ISOL, 2], [$764eb544bbe1ccf0$var$MED2, $764eb544bbe1ccf0$var$ISOL, 1], [$764eb544bbe1ccf0$var$MED2, $764eb544bbe1ccf0$var$ISOL, 2], [$764eb544bbe1ccf0$var$MED2, $764eb544bbe1ccf0$var$FIN2, 5], [$764eb544bbe1ccf0$var$MED2, $764eb544bbe1ccf0$var$ISOL, 6]], // State 5: prev was FIN2/FIN3 ALAPH,  not willing to join.\n[[$764eb544bbe1ccf0$var$NONE, $764eb544bbe1ccf0$var$NONE, 0], [$764eb544bbe1ccf0$var$NONE, $764eb544bbe1ccf0$var$ISOL, 2], [$764eb544bbe1ccf0$var$ISOL, $764eb544bbe1ccf0$var$ISOL, 1], [$764eb544bbe1ccf0$var$ISOL, $764eb544bbe1ccf0$var$ISOL, 2], [$764eb544bbe1ccf0$var$ISOL, $764eb544bbe1ccf0$var$FIN2, 5], [$764eb544bbe1ccf0$var$ISOL, $764eb544bbe1ccf0$var$ISOL, 6]], // State 6: prev was DALATH/RISH,  not willing to join.\n[[$764eb544bbe1ccf0$var$NONE, $764eb544bbe1ccf0$var$NONE, 0], [$764eb544bbe1ccf0$var$NONE, $764eb544bbe1ccf0$var$ISOL, 2], [$764eb544bbe1ccf0$var$NONE, $764eb544bbe1ccf0$var$ISOL, 1], [$764eb544bbe1ccf0$var$NONE, $764eb544bbe1ccf0$var$ISOL, 2], [$764eb544bbe1ccf0$var$NONE, $764eb544bbe1ccf0$var$FIN3, 5], [$764eb544bbe1ccf0$var$NONE, $764eb544bbe1ccf0$var$ISOL, 6]]];\n\nclass $764eb544bbe1ccf0$export$2e2bcd8739ae039 extends (0, $649970d87335b30f$export$2e2bcd8739ae039) {\n  static planFeatures(plan) {\n    plan.add(['ccmp', 'locl']);\n\n    for (let i = 0; i < $764eb544bbe1ccf0$var$FEATURES.length; i++) {\n      let feature = $764eb544bbe1ccf0$var$FEATURES[i];\n      plan.addStage(feature, false);\n    }\n\n    plan.addStage('mset');\n  }\n\n  static assignFeatures(plan, glyphs) {\n    super.assignFeatures(plan, glyphs);\n    let prev = -1;\n    let state = 0;\n    let actions = []; // Apply the state machine to map glyphs to features\n\n    for (let i = 0; i < glyphs.length; i++) {\n      let curAction, prevAction;\n      var glyph = glyphs[i];\n      let type = $764eb544bbe1ccf0$var$getShapingClass(glyph.codePoints[0]);\n\n      if (type === $764eb544bbe1ccf0$var$ShapingClasses.Transparent) {\n        actions[i] = $764eb544bbe1ccf0$var$NONE;\n        continue;\n      }\n\n      [prevAction, curAction, state] = $764eb544bbe1ccf0$var$STATE_TABLE[state][type];\n      if (prevAction !== $764eb544bbe1ccf0$var$NONE && prev !== -1) actions[prev] = prevAction;\n      actions[i] = curAction;\n      prev = i;\n    } // Apply the chosen features to their respective glyphs\n\n\n    for (let index = 0; index < glyphs.length; index++) {\n      let feature;\n      var glyph = glyphs[index];\n      if (feature = actions[index]) glyph.features[feature] = true;\n    }\n  }\n\n}\n\nfunction $764eb544bbe1ccf0$var$getShapingClass(codePoint) {\n  let res = $764eb544bbe1ccf0$var$trie.get(codePoint);\n  if (res) return res - 1;\n  let category = (0, $6uUbQ$getCategory)(codePoint);\n  if (category === 'Mn' || category === 'Me' || category === 'Cf') return $764eb544bbe1ccf0$var$ShapingClasses.Transparent;\n  return $764eb544bbe1ccf0$var$ShapingClasses.Non_Joining;\n}\n\nclass $85d408632270248b$export$2e2bcd8739ae039 {\n  reset() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this.options = options;\n    this.flags = options.flags || {};\n    this.markAttachmentType = options.markAttachmentType || 0;\n    this.index = index;\n  }\n\n  get cur() {\n    return this.glyphs[this.index] || null;\n  }\n\n  shouldIgnore(glyph) {\n    return this.flags.ignoreMarks && glyph.isMark || this.flags.ignoreBaseGlyphs && glyph.isBase || this.flags.ignoreLigatures && glyph.isLigature || this.markAttachmentType && glyph.isMark && glyph.markAttachmentType !== this.markAttachmentType;\n  }\n\n  move(dir) {\n    this.index += dir;\n\n    while (0 <= this.index && this.index < this.glyphs.length && this.shouldIgnore(this.glyphs[this.index])) this.index += dir;\n\n    if (0 > this.index || this.index >= this.glyphs.length) return null;\n    return this.glyphs[this.index];\n  }\n\n  next() {\n    return this.move(1);\n  }\n\n  prev() {\n    return this.move(-1);\n  }\n\n  peek() {\n    let count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let idx = this.index;\n    let res = this.increment(count);\n    this.index = idx;\n    return res;\n  }\n\n  peekIndex() {\n    let count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let idx = this.index;\n    this.increment(count);\n    let res = this.index;\n    this.index = idx;\n    return res;\n  }\n\n  increment() {\n    let count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let dir = count < 0 ? -1 : 1;\n    count = Math.abs(count);\n\n    while (count--) this.move(dir);\n\n    return this.glyphs[this.index];\n  }\n\n  constructor(glyphs, options) {\n    this.glyphs = glyphs;\n    this.reset(options);\n  }\n\n}\n\nconst $a83b9c36aaa94fd3$var$DEFAULT_SCRIPTS = ['DFLT', 'dflt', 'latn'];\n\nclass $a83b9c36aaa94fd3$export$2e2bcd8739ae039 {\n  findScript(script) {\n    if (this.table.scriptList == null) return null;\n    if (!Array.isArray(script)) script = [script];\n\n    for (let s of script) for (let entry of this.table.scriptList) {\n      if (entry.tag === s) return entry;\n    }\n\n    return null;\n  }\n\n  selectScript(script, language, direction) {\n    let changed = false;\n    let entry;\n\n    if (!this.script || script !== this.scriptTag) {\n      entry = this.findScript(script);\n      if (!entry) entry = this.findScript($a83b9c36aaa94fd3$var$DEFAULT_SCRIPTS);\n      if (!entry) return this.scriptTag;\n      this.scriptTag = entry.tag;\n      this.script = entry.script;\n      this.language = null;\n      this.languageTag = null;\n      changed = true;\n    }\n\n    if (!direction || direction !== this.direction) this.direction = direction || $130d1a642ebcd2b7$export$9fddb9d0dd7d8a54(script);\n    if (language && language.length < 4) language += ' '.repeat(4 - language.length);\n\n    if (!language || language !== this.languageTag) {\n      this.language = null;\n\n      for (let lang of this.script.langSysRecords) if (lang.tag === language) {\n        this.language = lang.langSys;\n        this.languageTag = lang.tag;\n        break;\n      }\n\n      if (!this.language) {\n        this.language = this.script.defaultLangSys;\n        this.languageTag = null;\n      }\n\n      changed = true;\n    } // Build a feature lookup table\n\n\n    if (changed) {\n      this.features = {};\n      if (this.language) for (let featureIndex of this.language.featureIndexes) {\n        let record = this.table.featureList[featureIndex];\n        let substituteFeature = this.substituteFeatureForVariations(featureIndex);\n        this.features[record.tag] = substituteFeature || record.feature;\n      }\n    }\n\n    return this.scriptTag;\n  }\n\n  lookupsForFeatures() {\n    let userFeatures = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let exclude = arguments.length > 1 ? arguments[1] : undefined;\n    let lookups = [];\n\n    for (let tag of userFeatures) {\n      let feature = this.features[tag];\n      if (!feature) continue;\n\n      for (let lookupIndex of feature.lookupListIndexes) {\n        if (exclude && exclude.indexOf(lookupIndex) !== -1) continue;\n        lookups.push({\n          feature: tag,\n          index: lookupIndex,\n          lookup: this.table.lookupList.get(lookupIndex)\n        });\n      }\n    }\n\n    lookups.sort((a, b) => a.index - b.index);\n    return lookups;\n  }\n\n  substituteFeatureForVariations(featureIndex) {\n    if (this.variationsIndex === -1) return null;\n    let record = this.table.featureVariations.featureVariationRecords[this.variationsIndex];\n    let substitutions = record.featureTableSubstitution.substitutions;\n\n    for (let substitution of substitutions) {\n      if (substitution.featureIndex === featureIndex) return substitution.alternateFeatureTable;\n    }\n\n    return null;\n  }\n\n  findVariationsIndex(coords) {\n    let variations = this.table.featureVariations;\n    if (!variations) return -1;\n    let records = variations.featureVariationRecords;\n\n    for (let i = 0; i < records.length; i++) {\n      let conditions = records[i].conditionSet.conditionTable;\n      if (this.variationConditionsMatch(conditions, coords)) return i;\n    }\n\n    return -1;\n  }\n\n  variationConditionsMatch(conditions, coords) {\n    return conditions.every(condition => {\n      let coord = condition.axisIndex < coords.length ? coords[condition.axisIndex] : 0;\n      return condition.filterRangeMinValue <= coord && coord <= condition.filterRangeMaxValue;\n    });\n  }\n\n  applyFeatures(userFeatures, glyphs, advances) {\n    let lookups = this.lookupsForFeatures(userFeatures);\n    this.applyLookups(lookups, glyphs, advances);\n  }\n\n  applyLookups(lookups, glyphs, positions) {\n    this.glyphs = glyphs;\n    this.positions = positions;\n    this.glyphIterator = new (0, $85d408632270248b$export$2e2bcd8739ae039)(glyphs);\n\n    for (let {\n      feature: feature,\n      lookup: lookup\n    } of lookups) {\n      this.currentFeature = feature;\n      this.glyphIterator.reset(lookup.flags);\n\n      while (this.glyphIterator.index < glyphs.length) {\n        if (!(feature in this.glyphIterator.cur.features)) {\n          this.glyphIterator.next();\n          continue;\n        }\n\n        for (let table of lookup.subTables) {\n          let res = this.applyLookup(lookup.lookupType, table);\n          if (res) break;\n        }\n\n        this.glyphIterator.next();\n      }\n    }\n  }\n\n  applyLookup(lookup, table) {\n    throw new Error(\"applyLookup must be implemented by subclasses\");\n  }\n\n  applyLookupList(lookupRecords) {\n    let options = this.glyphIterator.options;\n    let glyphIndex = this.glyphIterator.index;\n\n    for (let lookupRecord of lookupRecords) {\n      // Reset flags and find glyph index for this lookup record\n      this.glyphIterator.reset(options, glyphIndex);\n      this.glyphIterator.increment(lookupRecord.sequenceIndex); // Get the lookup and setup flags for subtables\n\n      let lookup = this.table.lookupList.get(lookupRecord.lookupListIndex);\n      this.glyphIterator.reset(lookup.flags, this.glyphIterator.index); // Apply lookup subtables until one matches\n\n      for (let table of lookup.subTables) {\n        if (this.applyLookup(lookup.lookupType, table)) break;\n      }\n    }\n\n    this.glyphIterator.reset(options, glyphIndex);\n    return true;\n  }\n\n  coverageIndex(coverage, glyph) {\n    if (glyph == null) glyph = this.glyphIterator.cur.id;\n\n    switch (coverage.version) {\n      case 1:\n        return coverage.glyphs.indexOf(glyph);\n\n      case 2:\n        for (let range of coverage.rangeRecords) {\n          if (range.start <= glyph && glyph <= range.end) return range.startCoverageIndex + glyph - range.start;\n        }\n\n        break;\n    }\n\n    return -1;\n  }\n\n  match(sequenceIndex, sequence, fn, matched) {\n    let pos = this.glyphIterator.index;\n    let glyph = this.glyphIterator.increment(sequenceIndex);\n    let idx = 0;\n\n    while (idx < sequence.length && glyph && fn(sequence[idx], glyph)) {\n      if (matched) matched.push(this.glyphIterator.index);\n      idx++;\n      glyph = this.glyphIterator.next();\n    }\n\n    this.glyphIterator.index = pos;\n    if (idx < sequence.length) return false;\n    return matched || true;\n  }\n\n  sequenceMatches(sequenceIndex, sequence) {\n    return this.match(sequenceIndex, sequence, (component, glyph) => component === glyph.id);\n  }\n\n  sequenceMatchIndices(sequenceIndex, sequence) {\n    return this.match(sequenceIndex, sequence, (component, glyph) => {\n      // If the current feature doesn't apply to this glyph,\n      if (!(this.currentFeature in glyph.features)) return false;\n      return component === glyph.id;\n    }, []);\n  }\n\n  coverageSequenceMatches(sequenceIndex, sequence) {\n    return this.match(sequenceIndex, sequence, (coverage, glyph) => this.coverageIndex(coverage, glyph.id) >= 0);\n  }\n\n  getClassID(glyph, classDef) {\n    switch (classDef.version) {\n      case 1:\n        let i = glyph - classDef.startGlyph;\n        if (i >= 0 && i < classDef.classValueArray.length) return classDef.classValueArray[i];\n        break;\n\n      case 2:\n        for (let range of classDef.classRangeRecord) {\n          if (range.start <= glyph && glyph <= range.end) return range.class;\n        }\n\n        break;\n    }\n\n    return 0;\n  }\n\n  classSequenceMatches(sequenceIndex, sequence, classDef) {\n    return this.match(sequenceIndex, sequence, (classID, glyph) => classID === this.getClassID(glyph.id, classDef));\n  }\n\n  applyContext(table) {\n    let index, set;\n\n    switch (table.version) {\n      case 1:\n        index = this.coverageIndex(table.coverage);\n        if (index === -1) return false;\n        set = table.ruleSets[index];\n\n        for (let rule of set) {\n          if (this.sequenceMatches(1, rule.input)) return this.applyLookupList(rule.lookupRecords);\n        }\n\n        break;\n\n      case 2:\n        if (this.coverageIndex(table.coverage) === -1) return false;\n        index = this.getClassID(this.glyphIterator.cur.id, table.classDef);\n        if (index === -1) return false;\n        set = table.classSet[index];\n\n        for (let rule of set) {\n          if (this.classSequenceMatches(1, rule.classes, table.classDef)) return this.applyLookupList(rule.lookupRecords);\n        }\n\n        break;\n\n      case 3:\n        if (this.coverageSequenceMatches(0, table.coverages)) return this.applyLookupList(table.lookupRecords);\n        break;\n    }\n\n    return false;\n  }\n\n  applyChainingContext(table) {\n    let index;\n\n    switch (table.version) {\n      case 1:\n        index = this.coverageIndex(table.coverage);\n        if (index === -1) return false;\n        let set = table.chainRuleSets[index];\n\n        for (let rule of set) {\n          if (this.sequenceMatches(-rule.backtrack.length, rule.backtrack) && this.sequenceMatches(1, rule.input) && this.sequenceMatches(1 + rule.input.length, rule.lookahead)) return this.applyLookupList(rule.lookupRecords);\n        }\n\n        break;\n\n      case 2:\n        if (this.coverageIndex(table.coverage) === -1) return false;\n        index = this.getClassID(this.glyphIterator.cur.id, table.inputClassDef);\n        let rules = table.chainClassSet[index];\n        if (!rules) return false;\n\n        for (let rule of rules) {\n          if (this.classSequenceMatches(-rule.backtrack.length, rule.backtrack, table.backtrackClassDef) && this.classSequenceMatches(1, rule.input, table.inputClassDef) && this.classSequenceMatches(1 + rule.input.length, rule.lookahead, table.lookaheadClassDef)) return this.applyLookupList(rule.lookupRecords);\n        }\n\n        break;\n\n      case 3:\n        if (this.coverageSequenceMatches(-table.backtrackGlyphCount, table.backtrackCoverage) && this.coverageSequenceMatches(0, table.inputCoverage) && this.coverageSequenceMatches(table.inputGlyphCount, table.lookaheadCoverage)) return this.applyLookupList(table.lookupRecords);\n        break;\n    }\n\n    return false;\n  }\n\n  constructor(font, table) {\n    this.font = font;\n    this.table = table;\n    this.script = null;\n    this.scriptTag = null;\n    this.language = null;\n    this.languageTag = null;\n    this.features = {};\n    this.lookups = {}; // Setup variation substitutions\n\n    this.variationsIndex = font._variationProcessor ? this.findVariationsIndex(font._variationProcessor.normalizedCoords) : -1; // initialize to default script + language\n\n    this.selectScript(); // current context (set by applyFeatures)\n\n    this.glyphs = [];\n    this.positions = []; // only used by GPOS\n\n    this.ligatureID = 1;\n    this.currentFeature = null;\n  }\n\n}\n\nclass $10e7b257e1a9a756$export$2e2bcd8739ae039 {\n  get id() {\n    return this._id;\n  }\n\n  set id(id) {\n    this._id = id;\n    this.substituted = true;\n    let GDEF = this._font.GDEF;\n\n    if (GDEF && GDEF.glyphClassDef) {\n      // TODO: clean this up\n      let classID = (0, $a83b9c36aaa94fd3$export$2e2bcd8739ae039).prototype.getClassID(id, GDEF.glyphClassDef);\n      this.isBase = classID === 1;\n      this.isLigature = classID === 2;\n      this.isMark = classID === 3;\n      this.markAttachmentType = GDEF.markAttachClassDef ? (0, $a83b9c36aaa94fd3$export$2e2bcd8739ae039).prototype.getClassID(id, GDEF.markAttachClassDef) : 0;\n    } else {\n      this.isMark = this.codePoints.length > 0 && this.codePoints.every((0, $6uUbQ$isMark));\n      this.isBase = !this.isMark;\n      this.isLigature = this.codePoints.length > 1;\n      this.markAttachmentType = 0;\n    }\n  }\n\n  copy() {\n    return new $10e7b257e1a9a756$export$2e2bcd8739ae039(this._font, this.id, this.codePoints, this.features);\n  }\n\n  constructor(font, id) {\n    let codePoints = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    let features = arguments.length > 3 ? arguments[3] : undefined;\n    this._font = font;\n    this.codePoints = codePoints;\n    this.id = id;\n    this.features = {};\n    if (Array.isArray(features)) for (let i = 0; i < features.length; i++) {\n      let feature = features[i];\n      this.features[feature] = true;\n    } else if (typeof features === 'object') Object.assign(this.features, features);\n    this.ligatureID = null;\n    this.ligatureComponent = null;\n    this.isLigated = false;\n    this.cursiveAttachment = null;\n    this.markAttachment = null;\n    this.shaperInfo = null;\n    this.substituted = false;\n    this.isMultiplied = false;\n  }\n\n}\n\nclass $e1c6bbc8cb416f8c$export$2e2bcd8739ae039 extends (0, $649970d87335b30f$export$2e2bcd8739ae039) {\n  static planFeatures(plan) {\n    plan.add(['ljmo', 'vjmo', 'tjmo'], false);\n  }\n\n  static assignFeatures(plan, glyphs) {\n    let state = 0;\n    let i = 0;\n\n    while (i < glyphs.length) {\n      let action;\n      let glyph = glyphs[i];\n      let code = glyph.codePoints[0];\n      let type = $e1c6bbc8cb416f8c$var$getType(code);\n      [action, state] = $e1c6bbc8cb416f8c$var$STATE_TABLE[state][type];\n\n      switch (action) {\n        case $e1c6bbc8cb416f8c$var$DECOMPOSE:\n          // Decompose the composed syllable if it is not supported by the font.\n          if (!plan.font.hasGlyphForCodePoint(code)) i = $e1c6bbc8cb416f8c$var$decompose(glyphs, i, plan.font);\n          break;\n\n        case $e1c6bbc8cb416f8c$var$COMPOSE:\n          // Found a decomposed syllable. Try to compose if supported by the font.\n          i = $e1c6bbc8cb416f8c$var$compose(glyphs, i, plan.font);\n          break;\n\n        case $e1c6bbc8cb416f8c$var$TONE_MARK:\n          // Got a valid syllable, followed by a tone mark. Move the tone mark to the beginning of the syllable.\n          $e1c6bbc8cb416f8c$var$reorderToneMark(glyphs, i, plan.font);\n          break;\n\n        case $e1c6bbc8cb416f8c$var$INVALID:\n          // Tone mark has no valid syllable to attach to, so insert a dotted circle\n          i = $e1c6bbc8cb416f8c$var$insertDottedCircle(glyphs, i, plan.font);\n          break;\n      }\n\n      i++;\n    }\n  }\n\n}\n\n(0, $6uUbQ$_)($e1c6bbc8cb416f8c$export$2e2bcd8739ae039, \"zeroMarkWidths\", 'NONE');\nconst $e1c6bbc8cb416f8c$var$HANGUL_BASE = 0xac00;\nconst $e1c6bbc8cb416f8c$var$HANGUL_END = 0xd7a4;\nconst $e1c6bbc8cb416f8c$var$HANGUL_COUNT = $e1c6bbc8cb416f8c$var$HANGUL_END - $e1c6bbc8cb416f8c$var$HANGUL_BASE + 1;\nconst $e1c6bbc8cb416f8c$var$L_BASE = 0x1100; // lead\n\nconst $e1c6bbc8cb416f8c$var$V_BASE = 0x1161; // vowel\n\nconst $e1c6bbc8cb416f8c$var$T_BASE = 0x11a7; // trail\n\nconst $e1c6bbc8cb416f8c$var$L_COUNT = 19;\nconst $e1c6bbc8cb416f8c$var$V_COUNT = 21;\nconst $e1c6bbc8cb416f8c$var$T_COUNT = 28;\nconst $e1c6bbc8cb416f8c$var$L_END = $e1c6bbc8cb416f8c$var$L_BASE + $e1c6bbc8cb416f8c$var$L_COUNT - 1;\nconst $e1c6bbc8cb416f8c$var$V_END = $e1c6bbc8cb416f8c$var$V_BASE + $e1c6bbc8cb416f8c$var$V_COUNT - 1;\nconst $e1c6bbc8cb416f8c$var$T_END = $e1c6bbc8cb416f8c$var$T_BASE + $e1c6bbc8cb416f8c$var$T_COUNT - 1;\nconst $e1c6bbc8cb416f8c$var$DOTTED_CIRCLE = 0x25cc;\n\nconst $e1c6bbc8cb416f8c$var$isL = code => 0x1100 <= code && code <= 0x115f || 0xa960 <= code && code <= 0xa97c;\n\nconst $e1c6bbc8cb416f8c$var$isV = code => 0x1160 <= code && code <= 0x11a7 || 0xd7b0 <= code && code <= 0xd7c6;\n\nconst $e1c6bbc8cb416f8c$var$isT = code => 0x11a8 <= code && code <= 0x11ff || 0xd7cb <= code && code <= 0xd7fb;\n\nconst $e1c6bbc8cb416f8c$var$isTone = code => 0x302e <= code && code <= 0x302f;\n\nconst $e1c6bbc8cb416f8c$var$isLVT = code => $e1c6bbc8cb416f8c$var$HANGUL_BASE <= code && code <= $e1c6bbc8cb416f8c$var$HANGUL_END;\n\nconst $e1c6bbc8cb416f8c$var$isLV = code => code - $e1c6bbc8cb416f8c$var$HANGUL_BASE < $e1c6bbc8cb416f8c$var$HANGUL_COUNT && (code - $e1c6bbc8cb416f8c$var$HANGUL_BASE) % $e1c6bbc8cb416f8c$var$T_COUNT === 0;\n\nconst $e1c6bbc8cb416f8c$var$isCombiningL = code => $e1c6bbc8cb416f8c$var$L_BASE <= code && code <= $e1c6bbc8cb416f8c$var$L_END;\n\nconst $e1c6bbc8cb416f8c$var$isCombiningV = code => $e1c6bbc8cb416f8c$var$V_BASE <= code && code <= $e1c6bbc8cb416f8c$var$V_END;\n\nconst $e1c6bbc8cb416f8c$var$isCombiningT = code => $e1c6bbc8cb416f8c$var$T_BASE + 1 && 1 <= code && code <= $e1c6bbc8cb416f8c$var$T_END; // Character categories\n\n\nconst $e1c6bbc8cb416f8c$var$X = 0; // Other character\n\nconst $e1c6bbc8cb416f8c$var$L = 1; // Leading consonant\n\nconst $e1c6bbc8cb416f8c$var$V = 2; // Medial vowel\n\nconst $e1c6bbc8cb416f8c$var$T = 3; // Trailing consonant\n\nconst $e1c6bbc8cb416f8c$var$LV = 4; // Composed <LV> syllable\n\nconst $e1c6bbc8cb416f8c$var$LVT = 5; // Composed <LVT> syllable\n\nconst $e1c6bbc8cb416f8c$var$M = 6; // Tone mark\n// This function classifies a character using the above categories.\n\nfunction $e1c6bbc8cb416f8c$var$getType(code) {\n  if ($e1c6bbc8cb416f8c$var$isL(code)) return $e1c6bbc8cb416f8c$var$L;\n  if ($e1c6bbc8cb416f8c$var$isV(code)) return $e1c6bbc8cb416f8c$var$V;\n  if ($e1c6bbc8cb416f8c$var$isT(code)) return $e1c6bbc8cb416f8c$var$T;\n  if ($e1c6bbc8cb416f8c$var$isLV(code)) return $e1c6bbc8cb416f8c$var$LV;\n  if ($e1c6bbc8cb416f8c$var$isLVT(code)) return $e1c6bbc8cb416f8c$var$LVT;\n  if ($e1c6bbc8cb416f8c$var$isTone(code)) return $e1c6bbc8cb416f8c$var$M;\n  return $e1c6bbc8cb416f8c$var$X;\n} // State machine actions\n\n\nconst $e1c6bbc8cb416f8c$var$NO_ACTION = 0;\nconst $e1c6bbc8cb416f8c$var$DECOMPOSE = 1;\nconst $e1c6bbc8cb416f8c$var$COMPOSE = 2;\nconst $e1c6bbc8cb416f8c$var$TONE_MARK = 4;\nconst $e1c6bbc8cb416f8c$var$INVALID = 5; // Build a state machine that accepts valid syllables, and applies actions along the way.\n// The logic this is implementing is documented at the top of the file.\n\nconst $e1c6bbc8cb416f8c$var$STATE_TABLE = [//       X                 L                 V                T                  LV                LVT               M\n// State 0: start state\n[[$e1c6bbc8cb416f8c$var$NO_ACTION, 0], [$e1c6bbc8cb416f8c$var$NO_ACTION, 1], [$e1c6bbc8cb416f8c$var$NO_ACTION, 0], [$e1c6bbc8cb416f8c$var$NO_ACTION, 0], [$e1c6bbc8cb416f8c$var$DECOMPOSE, 2], [$e1c6bbc8cb416f8c$var$DECOMPOSE, 3], [$e1c6bbc8cb416f8c$var$INVALID, 0]], // State 1: <L>\n[[$e1c6bbc8cb416f8c$var$NO_ACTION, 0], [$e1c6bbc8cb416f8c$var$NO_ACTION, 1], [$e1c6bbc8cb416f8c$var$COMPOSE, 2], [$e1c6bbc8cb416f8c$var$NO_ACTION, 0], [$e1c6bbc8cb416f8c$var$DECOMPOSE, 2], [$e1c6bbc8cb416f8c$var$DECOMPOSE, 3], [$e1c6bbc8cb416f8c$var$INVALID, 0]], // State 2: <L,V> or <LV>\n[[$e1c6bbc8cb416f8c$var$NO_ACTION, 0], [$e1c6bbc8cb416f8c$var$NO_ACTION, 1], [$e1c6bbc8cb416f8c$var$NO_ACTION, 0], [$e1c6bbc8cb416f8c$var$COMPOSE, 3], [$e1c6bbc8cb416f8c$var$DECOMPOSE, 2], [$e1c6bbc8cb416f8c$var$DECOMPOSE, 3], [$e1c6bbc8cb416f8c$var$TONE_MARK, 0]], // State 3: <L,V,T> or <LVT>\n[[$e1c6bbc8cb416f8c$var$NO_ACTION, 0], [$e1c6bbc8cb416f8c$var$NO_ACTION, 1], [$e1c6bbc8cb416f8c$var$NO_ACTION, 0], [$e1c6bbc8cb416f8c$var$NO_ACTION, 0], [$e1c6bbc8cb416f8c$var$DECOMPOSE, 2], [$e1c6bbc8cb416f8c$var$DECOMPOSE, 3], [$e1c6bbc8cb416f8c$var$TONE_MARK, 0]]];\n\nfunction $e1c6bbc8cb416f8c$var$getGlyph(font, code, features) {\n  return new (0, $10e7b257e1a9a756$export$2e2bcd8739ae039)(font, font.glyphForCodePoint(code).id, [code], features);\n}\n\nfunction $e1c6bbc8cb416f8c$var$decompose(glyphs, i, font) {\n  let glyph = glyphs[i];\n  let code = glyph.codePoints[0];\n  let s = code - $e1c6bbc8cb416f8c$var$HANGUL_BASE;\n  let t = $e1c6bbc8cb416f8c$var$T_BASE + s % $e1c6bbc8cb416f8c$var$T_COUNT;\n  s = s / $e1c6bbc8cb416f8c$var$T_COUNT | 0;\n  let l = $e1c6bbc8cb416f8c$var$L_BASE + s / $e1c6bbc8cb416f8c$var$V_COUNT | 0;\n  let v = $e1c6bbc8cb416f8c$var$V_BASE + s % $e1c6bbc8cb416f8c$var$V_COUNT; // Don't decompose if all of the components are not available\n\n  if (!font.hasGlyphForCodePoint(l) || !font.hasGlyphForCodePoint(v) || t !== $e1c6bbc8cb416f8c$var$T_BASE && !font.hasGlyphForCodePoint(t)) return i; // Replace the current glyph with decomposed L, V, and T glyphs,\n  // and apply the proper OpenType features to each component.\n\n  let ljmo = $e1c6bbc8cb416f8c$var$getGlyph(font, l, glyph.features);\n  ljmo.features.ljmo = true;\n  let vjmo = $e1c6bbc8cb416f8c$var$getGlyph(font, v, glyph.features);\n  vjmo.features.vjmo = true;\n  let insert = [ljmo, vjmo];\n\n  if (t > $e1c6bbc8cb416f8c$var$T_BASE) {\n    let tjmo = $e1c6bbc8cb416f8c$var$getGlyph(font, t, glyph.features);\n    tjmo.features.tjmo = true;\n    insert.push(tjmo);\n  }\n\n  glyphs.splice(i, 1, ...insert);\n  return i + insert.length - 1;\n}\n\nfunction $e1c6bbc8cb416f8c$var$compose(glyphs, i, font) {\n  let glyph = glyphs[i];\n  let code = glyphs[i].codePoints[0];\n  let type = $e1c6bbc8cb416f8c$var$getType(code);\n  let prev = glyphs[i - 1].codePoints[0];\n  let prevType = $e1c6bbc8cb416f8c$var$getType(prev); // Figure out what type of syllable we're dealing with\n\n  let lv, ljmo, vjmo, tjmo;\n\n  if (prevType === $e1c6bbc8cb416f8c$var$LV && type === $e1c6bbc8cb416f8c$var$T) {\n    // <LV,T>\n    lv = prev;\n    tjmo = glyph;\n  } else {\n    if (type === $e1c6bbc8cb416f8c$var$V) {\n      // <L,V>\n      ljmo = glyphs[i - 1];\n      vjmo = glyph;\n    } else {\n      // <L,V,T>\n      ljmo = glyphs[i - 2];\n      vjmo = glyphs[i - 1];\n      tjmo = glyph;\n    }\n\n    let l = ljmo.codePoints[0];\n    let v = vjmo.codePoints[0]; // Make sure L and V are combining characters\n\n    if ($e1c6bbc8cb416f8c$var$isCombiningL(l) && $e1c6bbc8cb416f8c$var$isCombiningV(v)) lv = $e1c6bbc8cb416f8c$var$HANGUL_BASE + ((l - $e1c6bbc8cb416f8c$var$L_BASE) * $e1c6bbc8cb416f8c$var$V_COUNT + (v - $e1c6bbc8cb416f8c$var$V_BASE)) * $e1c6bbc8cb416f8c$var$T_COUNT;\n  }\n\n  let t = tjmo && tjmo.codePoints[0] || $e1c6bbc8cb416f8c$var$T_BASE;\n\n  if (lv != null && (t === $e1c6bbc8cb416f8c$var$T_BASE || $e1c6bbc8cb416f8c$var$isCombiningT(t))) {\n    let s = lv + (t - $e1c6bbc8cb416f8c$var$T_BASE); // Replace with a composed glyph if supported by the font,\n    // otherwise apply the proper OpenType features to each component.\n\n    if (font.hasGlyphForCodePoint(s)) {\n      let del = prevType === $e1c6bbc8cb416f8c$var$V ? 3 : 2;\n      glyphs.splice(i - del + 1, del, $e1c6bbc8cb416f8c$var$getGlyph(font, s, glyph.features));\n      return i - del + 1;\n    }\n  } // Didn't compose (either a non-combining component or unsupported by font).\n\n\n  if (ljmo) ljmo.features.ljmo = true;\n  if (vjmo) vjmo.features.vjmo = true;\n  if (tjmo) tjmo.features.tjmo = true;\n\n  if (prevType === $e1c6bbc8cb416f8c$var$LV) {\n    // Sequence was originally <L,V>, which got combined earlier.\n    // Either the T was non-combining, or the LVT glyph wasn't supported.\n    // Decompose the glyph again and apply OT features.\n    $e1c6bbc8cb416f8c$var$decompose(glyphs, i - 1, font);\n    return i + 1;\n  }\n\n  return i;\n}\n\nfunction $e1c6bbc8cb416f8c$var$getLength(code) {\n  switch ($e1c6bbc8cb416f8c$var$getType(code)) {\n    case $e1c6bbc8cb416f8c$var$LV:\n    case $e1c6bbc8cb416f8c$var$LVT:\n      return 1;\n\n    case $e1c6bbc8cb416f8c$var$V:\n      return 2;\n\n    case $e1c6bbc8cb416f8c$var$T:\n      return 3;\n  }\n}\n\nfunction $e1c6bbc8cb416f8c$var$reorderToneMark(glyphs, i, font) {\n  let glyph = glyphs[i];\n  let code = glyphs[i].codePoints[0]; // Move tone mark to the beginning of the previous syllable, unless it is zero width\n\n  if (font.glyphForCodePoint(code).advanceWidth === 0) return;\n  let prev = glyphs[i - 1].codePoints[0];\n  let len = $e1c6bbc8cb416f8c$var$getLength(prev);\n  glyphs.splice(i, 1);\n  return glyphs.splice(i - len, 0, glyph);\n}\n\nfunction $e1c6bbc8cb416f8c$var$insertDottedCircle(glyphs, i, font) {\n  let glyph = glyphs[i];\n  let code = glyphs[i].codePoints[0];\n\n  if (font.hasGlyphForCodePoint($e1c6bbc8cb416f8c$var$DOTTED_CIRCLE)) {\n    let dottedCircle = $e1c6bbc8cb416f8c$var$getGlyph(font, $e1c6bbc8cb416f8c$var$DOTTED_CIRCLE, glyph.features); // If the tone mark is zero width, insert the dotted circle before, otherwise after\n\n    let idx = font.glyphForCodePoint(code).advanceWidth === 0 ? i : i + 1;\n    glyphs.splice(idx, 0, dottedCircle);\n    i++;\n  }\n\n  return i;\n}\n\nvar $4b0735ca6c692ea5$exports = {};\n$4b0735ca6c692ea5$exports = JSON.parse(\"{\\\"stateTable\\\":[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,2,3,4,5,6,7,8,9,0,10,11,11,12,13,14,15,16,17],[0,0,0,18,19,20,21,22,23,0,24,0,0,25,26,0,0,27,0],[0,0,0,28,29,30,31,32,33,0,34,0,0,35,36,0,0,37,0],[0,0,0,38,5,7,7,8,9,0,10,0,0,0,13,0,0,16,0],[0,39,0,0,0,40,41,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,43,44,44,8,9,0,0,0,0,12,43,0,0,0,0],[0,0,0,0,43,44,44,8,9,0,0,0,0,0,43,0,0,0,0],[0,0,0,45,46,47,48,49,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,50,0,0,51,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,52,0,0,0,0,0,0,0,0],[0,0,0,53,54,55,56,57,58,0,59,0,0,60,61,0,0,62,0],[0,0,0,4,5,7,7,8,9,0,10,0,0,0,13,0,0,16,0],[0,63,64,0,0,40,41,0,9,0,10,0,0,0,42,0,63,0,0],[0,2,3,4,5,6,7,8,9,0,10,11,11,12,13,0,2,16,0],[0,0,0,18,65,20,21,22,23,0,24,0,0,25,26,0,0,27,0],[0,0,0,0,66,67,67,8,9,0,10,0,0,0,68,0,0,0,0],[0,0,0,69,0,70,70,0,71,0,72,0,0,0,0,0,0,0,0],[0,0,0,73,19,74,74,22,23,0,24,0,0,0,26,0,0,27,0],[0,75,0,0,0,76,77,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,79,80,80,22,23,0,0,0,0,25,79,0,0,0,0],[0,0,0,18,19,20,74,22,23,0,24,0,0,25,26,0,0,27,0],[0,0,0,81,82,83,84,85,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,86,0,0,87,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,88,0,0,0,0,0,0,0,0],[0,0,0,18,19,74,74,22,23,0,24,0,0,0,26,0,0,27,0],[0,89,90,0,0,76,77,0,23,0,24,0,0,0,78,0,89,0,0],[0,0,0,0,91,92,92,22,23,0,24,0,0,0,93,0,0,0,0],[0,0,0,94,29,95,31,32,33,0,34,0,0,0,36,0,0,37,0],[0,96,0,0,0,97,98,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,100,101,101,32,33,0,0,0,0,35,100,0,0,0,0],[0,0,0,0,100,101,101,32,33,0,0,0,0,0,100,0,0,0,0],[0,0,0,102,103,104,105,106,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,107,0,0,108,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,109,0,0,0,0,0,0,0,0],[0,0,0,28,29,95,31,32,33,0,34,0,0,0,36,0,0,37,0],[0,110,111,0,0,97,98,0,33,0,34,0,0,0,99,0,110,0,0],[0,0,0,0,112,113,113,32,33,0,34,0,0,0,114,0,0,0,0],[0,0,0,0,5,7,7,8,9,0,10,0,0,0,13,0,0,16,0],[0,0,0,115,116,117,118,8,9,0,10,0,0,119,120,0,0,16,0],[0,0,0,0,0,121,121,0,9,0,10,0,0,0,42,0,0,0,0],[0,39,0,122,0,123,123,8,9,0,10,0,0,0,42,0,39,0,0],[0,124,64,0,0,0,0,0,0,0,0,0,0,0,0,0,124,0,0],[0,39,0,0,0,121,125,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,0,126,126,8,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,46,47,48,49,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,47,47,49,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,127,127,49,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,128,127,127,49,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,129,130,131,132,133,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,50,0,0,0,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,134,0,0,0,0,0,0,0,0],[0,0,0,135,54,56,56,57,58,0,59,0,0,0,61,0,0,62,0],[0,136,0,0,0,137,138,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,140,141,141,57,58,0,0,0,0,60,140,0,0,0,0],[0,0,0,0,140,141,141,57,58,0,0,0,0,0,140,0,0,0,0],[0,0,0,142,143,144,145,146,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,147,0,0,148,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,149,0,0,0,0,0,0,0,0],[0,0,0,53,54,56,56,57,58,0,59,0,0,0,61,0,0,62,0],[0,150,151,0,0,137,138,0,58,0,59,0,0,0,139,0,150,0,0],[0,0,0,0,152,153,153,57,58,0,59,0,0,0,154,0,0,0,0],[0,0,0,155,116,156,157,8,9,0,10,0,0,158,120,0,0,16,0],[0,0,0,0,0,121,121,0,9,0,10,0,0,0,0,0,0,0,0],[0,75,3,4,5,159,160,8,161,0,162,0,11,12,163,0,75,16,0],[0,0,0,0,0,40,164,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,165,44,44,8,9,0,0,0,0,0,165,0,0,0,0],[0,124,64,0,0,40,164,0,9,0,10,0,0,0,42,0,124,0,0],[0,0,0,0,0,70,70,0,71,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,71,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,166,0,0,167,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,168,0,0,0,0,0,0,0,0],[0,0,0,0,19,74,74,22,23,0,24,0,0,0,26,0,0,27,0],[0,0,0,0,79,80,80,22,23,0,0,0,0,0,79,0,0,0,0],[0,0,0,169,170,171,172,22,23,0,24,0,0,173,174,0,0,27,0],[0,0,0,0,0,175,175,0,23,0,24,0,0,0,78,0,0,0,0],[0,75,0,176,0,177,177,22,23,0,24,0,0,0,78,0,75,0,0],[0,178,90,0,0,0,0,0,0,0,0,0,0,0,0,0,178,0,0],[0,75,0,0,0,175,179,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,0,180,180,22,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,82,83,84,85,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,83,83,85,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,181,181,85,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,182,181,181,85,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,183,184,185,186,187,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,86,0,0,0,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,188,0,0,0,0,0,0,0,0],[0,0,0,189,170,190,191,22,23,0,24,0,0,192,174,0,0,27,0],[0,0,0,0,0,175,175,0,23,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,76,193,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,194,80,80,22,23,0,0,0,0,0,194,0,0,0,0],[0,178,90,0,0,76,193,0,23,0,24,0,0,0,78,0,178,0,0],[0,0,0,0,29,95,31,32,33,0,34,0,0,0,36,0,0,37,0],[0,0,0,0,100,101,101,32,33,0,0,0,0,0,100,0,0,0,0],[0,0,0,195,196,197,198,32,33,0,34,0,0,199,200,0,0,37,0],[0,0,0,0,0,201,201,0,33,0,34,0,0,0,99,0,0,0,0],[0,96,0,202,0,203,203,32,33,0,34,0,0,0,99,0,96,0,0],[0,204,111,0,0,0,0,0,0,0,0,0,0,0,0,0,204,0,0],[0,96,0,0,0,201,205,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,0,206,206,32,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,103,104,105,106,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,104,104,106,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,207,207,106,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,208,207,207,106,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,209,210,211,212,213,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,107,0,0,0,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,214,0,0,0,0,0,0,0,0],[0,0,0,215,196,216,217,32,33,0,34,0,0,218,200,0,0,37,0],[0,0,0,0,0,201,201,0,33,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,97,219,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,220,101,101,32,33,0,0,0,0,0,220,0,0,0,0],[0,204,111,0,0,97,219,0,33,0,34,0,0,0,99,0,204,0,0],[0,0,0,221,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,223,0,0,0,40,224,0,9,0,10,0,0,0,42,0,223,0,0],[0,0,0,0,225,44,44,8,9,0,0,0,0,119,225,0,0,0,0],[0,0,0,115,116,117,222,8,9,0,10,0,0,119,120,0,0,16,0],[0,0,0,115,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,226,64,0,0,40,224,0,9,0,10,0,0,0,42,0,226,0,0],[0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0],[0,39,0,0,0,121,121,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,0,44,44,8,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,227,0,228,229,0,9,0,10,0,0,230,0,0,0,0,0],[0,39,0,122,0,121,121,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,231,231,49,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,232,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,130,131,132,133,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,131,131,133,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,233,233,133,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,234,233,233,133,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,235,236,237,238,239,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,54,56,56,57,58,0,59,0,0,0,61,0,0,62,0],[0,0,0,240,241,242,243,57,58,0,59,0,0,244,245,0,0,62,0],[0,0,0,0,0,246,246,0,58,0,59,0,0,0,139,0,0,0,0],[0,136,0,247,0,248,248,57,58,0,59,0,0,0,139,0,136,0,0],[0,249,151,0,0,0,0,0,0,0,0,0,0,0,0,0,249,0,0],[0,136,0,0,0,246,250,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,0,251,251,57,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,143,144,145,146,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,144,144,146,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,252,252,146,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,253,252,252,146,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,254,255,256,257,258,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,147,0,0,0,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,259,0,0,0,0,0,0,0,0],[0,0,0,260,241,261,262,57,58,0,59,0,0,263,245,0,0,62,0],[0,0,0,0,0,246,246,0,58,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,137,264,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,265,141,141,57,58,0,0,0,0,0,265,0,0,0,0],[0,249,151,0,0,137,264,0,58,0,59,0,0,0,139,0,249,0,0],[0,0,0,221,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,9,0,0,0,0,158,225,0,0,0,0],[0,0,0,155,116,156,222,8,9,0,10,0,0,158,120,0,0,16,0],[0,0,0,155,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,0,0,0,43,266,266,8,161,0,24,0,0,12,267,0,0,0,0],[0,75,0,176,43,268,268,269,161,0,24,0,0,0,267,0,75,0,0],[0,0,0,0,0,270,0,0,271,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,272,0,0,0,0,0,0,0,0],[0,273,274,0,0,40,41,0,9,0,10,0,0,0,42,0,273,0,0],[0,0,0,40,0,123,123,8,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,121,275,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,166,0,0,0,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,276,0,0,0,0,0,0,0,0],[0,0,0,277,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,279,0,0,0,76,280,0,23,0,24,0,0,0,78,0,279,0,0],[0,0,0,0,281,80,80,22,23,0,0,0,0,173,281,0,0,0,0],[0,0,0,169,170,171,278,22,23,0,24,0,0,173,174,0,0,27,0],[0,0,0,169,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,282,90,0,0,76,280,0,23,0,24,0,0,0,78,0,282,0,0],[0,0,0,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0],[0,75,0,0,0,175,175,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,0,80,80,22,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,283,0,284,285,0,23,0,24,0,0,286,0,0,0,0,0],[0,75,0,176,0,175,175,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,0,0,0,22,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,287,287,85,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,288,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,184,185,186,187,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,185,185,187,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,289,289,187,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,290,289,289,187,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,291,292,293,294,295,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,277,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,0,0,0,281,80,80,22,23,0,0,0,0,192,281,0,0,0,0],[0,0,0,189,170,190,278,22,23,0,24,0,0,192,174,0,0,27,0],[0,0,0,189,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,0,0,76,0,177,177,22,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,175,296,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,297,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,299,0,0,0,97,300,0,33,0,34,0,0,0,99,0,299,0,0],[0,0,0,0,301,101,101,32,33,0,0,0,0,199,301,0,0,0,0],[0,0,0,195,196,197,298,32,33,0,34,0,0,199,200,0,0,37,0],[0,0,0,195,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,302,111,0,0,97,300,0,33,0,34,0,0,0,99,0,302,0,0],[0,0,0,0,0,0,0,0,33,0,0,0,0,0,0,0,0,0,0],[0,96,0,0,0,201,201,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,0,101,101,32,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,303,0,304,305,0,33,0,34,0,0,306,0,0,0,0,0],[0,96,0,202,0,201,201,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,307,307,106,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,308,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,210,211,212,213,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,211,211,213,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,309,309,213,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,310,309,309,213,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,311,312,313,314,315,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,297,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,0,0,0,301,101,101,32,33,0,0,0,0,218,301,0,0,0,0],[0,0,0,215,196,216,298,32,33,0,34,0,0,218,200,0,0,37,0],[0,0,0,215,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,0,0,97,0,203,203,32,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,201,316,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,9,0,0,0,0,0,225,0,0,0,0],[0,0,0,317,318,319,320,8,9,0,10,0,0,321,322,0,0,16,0],[0,223,0,323,0,123,123,8,9,0,10,0,0,0,42,0,223,0,0],[0,223,0,0,0,121,324,0,9,0,10,0,0,0,42,0,223,0,0],[0,0,0,325,318,326,327,8,9,0,10,0,0,328,322,0,0,16,0],[0,0,0,64,0,121,121,0,9,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,9,0,0,0,0,230,0,0,0,0,0],[0,0,0,227,0,228,121,0,9,0,10,0,0,230,0,0,0,0,0],[0,0,0,227,0,121,121,0,9,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,0,0],[0,0,0,0,0,329,329,133,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,330,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,236,237,238,239,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,237,237,239,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,331,331,239,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,332,331,331,239,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,333,40,121,334,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,335,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,337,0,0,0,137,338,0,58,0,59,0,0,0,139,0,337,0,0],[0,0,0,0,339,141,141,57,58,0,0,0,0,244,339,0,0,0,0],[0,0,0,240,241,242,336,57,58,0,59,0,0,244,245,0,0,62,0],[0,0,0,240,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,340,151,0,0,137,338,0,58,0,59,0,0,0,139,0,340,0,0],[0,0,0,0,0,0,0,0,58,0,0,0,0,0,0,0,0,0,0],[0,136,0,0,0,246,246,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,0,141,141,57,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,341,0,342,343,0,58,0,59,0,0,344,0,0,0,0,0],[0,136,0,247,0,246,246,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,0,0,0,57,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,345,345,146,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,346,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,255,256,257,258,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,256,256,258,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,347,347,258,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,348,347,347,258,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,349,350,351,352,353,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,335,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,0,0,0,339,141,141,57,58,0,0,0,0,263,339,0,0,0,0],[0,0,0,260,241,261,336,57,58,0,59,0,0,263,245,0,0,62,0],[0,0,0,260,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,0,0,137,0,248,248,57,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,246,354,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,126,126,8,23,0,0,0,0,0,0,0,0,0,0],[0,355,90,0,0,121,125,0,9,0,10,0,0,0,42,0,355,0,0],[0,0,0,0,0,356,356,269,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,357,358,359,360,361,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,270,0,0,0,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,0,0,0,0],[0,0,0,364,116,365,366,8,161,0,162,0,0,367,120,0,0,16,0],[0,0,0,0,0,368,368,0,161,0,162,0,0,0,0,0,0,0,0],[0,0,0,40,0,121,121,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,0,0,0,281,80,80,22,23,0,0,0,0,0,281,0,0,0,0],[0,0,0,369,370,371,372,22,23,0,24,0,0,373,374,0,0,27,0],[0,279,0,375,0,177,177,22,23,0,24,0,0,0,78,0,279,0,0],[0,279,0,0,0,175,376,0,23,0,24,0,0,0,78,0,279,0,0],[0,0,0,377,370,378,379,22,23,0,24,0,0,380,374,0,0,27,0],[0,0,0,90,0,175,175,0,23,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,23,0,0,0,0,286,0,0,0,0,0],[0,0,0,283,0,284,175,0,23,0,24,0,0,286,0,0,0,0,0],[0,0,0,283,0,175,175,0,23,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,85,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,0,0],[0,0,0,0,0,381,381,187,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,382,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,292,293,294,295,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,293,293,295,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,383,383,295,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,384,383,383,295,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,385,76,175,386,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,76,0,175,175,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,0,0,0,301,101,101,32,33,0,0,0,0,0,301,0,0,0,0],[0,0,0,387,388,389,390,32,33,0,34,0,0,391,392,0,0,37,0],[0,299,0,393,0,203,203,32,33,0,34,0,0,0,99,0,299,0,0],[0,299,0,0,0,201,394,0,33,0,34,0,0,0,99,0,299,0,0],[0,0,0,395,388,396,397,32,33,0,34,0,0,398,392,0,0,37,0],[0,0,0,111,0,201,201,0,33,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,33,0,0,0,0,306,0,0,0,0,0],[0,0,0,303,0,304,201,0,33,0,34,0,0,306,0,0,0,0,0],[0,0,0,303,0,201,201,0,33,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,0,0],[0,0,0,0,0,399,399,213,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,400,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,312,313,314,315,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,313,313,315,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,401,401,315,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,402,401,401,315,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,403,97,201,404,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,97,0,201,201,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,405,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,407,0,0,0,40,408,0,9,0,10,0,0,0,42,0,407,0,0],[0,0,0,0,409,44,44,8,9,0,0,0,0,321,409,0,0,0,0],[0,0,0,317,318,319,406,8,9,0,10,0,0,321,322,0,0,16,0],[0,0,0,317,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,410,64,0,0,40,408,0,9,0,10,0,0,0,42,0,410,0,0],[0,223,0,0,0,121,121,0,9,0,10,0,0,0,42,0,223,0,0],[0,223,0,323,0,121,121,0,9,0,10,0,0,0,42,0,223,0,0],[0,0,0,405,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,0,0,0,409,44,44,8,9,0,0,0,0,328,409,0,0,0,0],[0,0,0,325,318,326,406,8,9,0,10,0,0,328,322,0,0,16,0],[0,0,0,325,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,0,0,0,0,0,0,133,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,130,0,0],[0,0,0,0,0,411,411,239,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,412,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,40,121,334,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,413,0,0,0,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,0,0,0,339,141,141,57,58,0,0,0,0,0,339,0,0,0,0],[0,0,0,414,415,416,417,57,58,0,59,0,0,418,419,0,0,62,0],[0,337,0,420,0,248,248,57,58,0,59,0,0,0,139,0,337,0,0],[0,337,0,0,0,246,421,0,58,0,59,0,0,0,139,0,337,0,0],[0,0,0,422,415,423,424,57,58,0,59,0,0,425,419,0,0,62,0],[0,0,0,151,0,246,246,0,58,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,58,0,0,0,0,344,0,0,0,0,0],[0,0,0,341,0,342,246,0,58,0,59,0,0,344,0,0,0,0,0],[0,0,0,341,0,246,246,0,58,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,146,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,143,0,0],[0,0,0,0,0,426,426,258,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,427,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,350,351,352,353,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,351,351,353,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,428,428,353,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,429,428,428,353,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,430,137,246,431,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,137,0,246,246,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,432,116,433,434,8,161,0,162,0,0,435,120,0,0,16,0],[0,0,0,0,0,180,180,269,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,358,359,360,361,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,359,359,361,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,436,436,361,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,437,436,436,361,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,438,439,440,441,442,161,0,162,0,0,0,362,0,0,0,0],[0,443,274,0,0,0,0,0,0,0,0,0,0,0,0,0,443,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,444,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,161,0,0,0,0,367,225,0,0,0,0],[0,0,0,364,116,365,445,8,161,0,162,0,0,367,120,0,0,16,0],[0,0,0,364,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,0,0,0,0,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,446,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,448,0,0,0,76,449,0,23,0,24,0,0,0,78,0,448,0,0],[0,0,0,0,450,80,80,22,23,0,0,0,0,373,450,0,0,0,0],[0,0,0,369,370,371,447,22,23,0,24,0,0,373,374,0,0,27,0],[0,0,0,369,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,451,90,0,0,76,449,0,23,0,24,0,0,0,78,0,451,0,0],[0,279,0,0,0,175,175,0,23,0,24,0,0,0,78,0,279,0,0],[0,279,0,375,0,175,175,0,23,0,24,0,0,0,78,0,279,0,0],[0,0,0,446,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,0,0,0,450,80,80,22,23,0,0,0,0,380,450,0,0,0,0],[0,0,0,377,370,378,447,22,23,0,24,0,0,380,374,0,0,27,0],[0,0,0,377,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,0,0,0,0,0,0,187,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,0,0],[0,0,0,0,0,452,452,295,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,453,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,76,175,386,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,454,0,0,0,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,455,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,457,0,0,0,97,458,0,33,0,34,0,0,0,99,0,457,0,0],[0,0,0,0,459,101,101,32,33,0,0,0,0,391,459,0,0,0,0],[0,0,0,387,388,389,456,32,33,0,34,0,0,391,392,0,0,37,0],[0,0,0,387,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,460,111,0,0,97,458,0,33,0,34,0,0,0,99,0,460,0,0],[0,299,0,0,0,201,201,0,33,0,34,0,0,0,99,0,299,0,0],[0,299,0,393,0,201,201,0,33,0,34,0,0,0,99,0,299,0,0],[0,0,0,455,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,0,0,0,459,101,101,32,33,0,0,0,0,398,459,0,0,0,0],[0,0,0,395,388,396,456,32,33,0,34,0,0,398,392,0,0,37,0],[0,0,0,395,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,0,0,0,0,0,0,213,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,210,0,0],[0,0,0,0,0,461,461,315,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,462,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,97,201,404,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,463,0,0,0,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,0,0,0,409,44,44,8,9,0,0,0,0,0,409,0,0,0,0],[0,0,0,464,465,466,467,8,9,0,10,0,0,468,469,0,0,16,0],[0,407,0,470,0,123,123,8,9,0,10,0,0,0,42,0,407,0,0],[0,407,0,0,0,121,471,0,9,0,10,0,0,0,42,0,407,0,0],[0,0,0,472,465,473,474,8,9,0,10,0,0,475,469,0,0,16,0],[0,0,0,0,0,0,0,239,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,236,0,0],[0,0,0,0,0,0,476,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,477,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,479,0,0,0,137,480,0,58,0,59,0,0,0,139,0,479,0,0],[0,0,0,0,481,141,141,57,58,0,0,0,0,418,481,0,0,0,0],[0,0,0,414,415,416,478,57,58,0,59,0,0,418,419,0,0,62,0],[0,0,0,414,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,482,151,0,0,137,480,0,58,0,59,0,0,0,139,0,482,0,0],[0,337,0,0,0,246,246,0,58,0,59,0,0,0,139,0,337,0,0],[0,337,0,420,0,246,246,0,58,0,59,0,0,0,139,0,337,0,0],[0,0,0,477,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,0,0,0,481,141,141,57,58,0,0,0,0,425,481,0,0,0,0],[0,0,0,422,415,423,478,57,58,0,59,0,0,425,419,0,0,62,0],[0,0,0,422,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,0,0,0,0,0,0,258,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0],[0,0,0,0,0,483,483,353,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,484,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,137,246,431,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,485,0,0,0,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,444,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,161,0,0,0,0,435,225,0,0,0,0],[0,0,0,432,116,433,445,8,161,0,162,0,0,435,120,0,0,16,0],[0,0,0,432,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,0,486,486,361,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,487,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,439,440,441,442,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,440,440,442,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,488,488,442,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,489,488,488,442,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,490,491,492,493,494,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,495,0,496,497,0,161,0,162,0,0,498,0,0,0,0,0],[0,0,0,0,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,161,0,0,0,0,0,225,0,0,0,0],[0,0,0,0,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,0,0,0,450,80,80,22,23,0,0,0,0,0,450,0,0,0,0],[0,0,0,499,500,501,502,22,23,0,24,0,0,503,504,0,0,27,0],[0,448,0,505,0,177,177,22,23,0,24,0,0,0,78,0,448,0,0],[0,448,0,0,0,175,506,0,23,0,24,0,0,0,78,0,448,0,0],[0,0,0,507,500,508,509,22,23,0,24,0,0,510,504,0,0,27,0],[0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,292,0,0],[0,0,0,0,0,0,511,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,0,0,0,459,101,101,32,33,0,0,0,0,0,459,0,0,0,0],[0,0,0,512,513,514,515,32,33,0,34,0,0,516,517,0,0,37,0],[0,457,0,518,0,203,203,32,33,0,34,0,0,0,99,0,457,0,0],[0,457,0,0,0,201,519,0,33,0,34,0,0,0,99,0,457,0,0],[0,0,0,520,513,521,522,32,33,0,34,0,0,523,517,0,0,37,0],[0,0,0,0,0,0,0,315,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,312,0,0],[0,0,0,0,0,0,524,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,525,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,527,0,0,0,40,528,0,9,0,10,0,0,0,42,0,527,0,0],[0,0,0,0,529,44,44,8,9,0,0,0,0,468,529,0,0,0,0],[0,0,0,464,465,466,526,8,9,0,10,0,0,468,469,0,0,16,0],[0,0,0,464,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,530,64,0,0,40,528,0,9,0,10,0,0,0,42,0,530,0,0],[0,407,0,0,0,121,121,0,9,0,10,0,0,0,42,0,407,0,0],[0,407,0,470,0,121,121,0,9,0,10,0,0,0,42,0,407,0,0],[0,0,0,525,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,0,0,0,529,44,44,8,9,0,0,0,0,475,529,0,0,0,0],[0,0,0,472,465,473,526,8,9,0,10,0,0,475,469,0,0,16,0],[0,0,0,472,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,0,0],[0,0,0,0,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,0,0,0,481,141,141,57,58,0,0,0,0,0,481,0,0,0,0],[0,0,0,531,532,533,534,57,58,0,59,0,0,535,536,0,0,62,0],[0,479,0,537,0,248,248,57,58,0,59,0,0,0,139,0,479,0,0],[0,479,0,0,0,246,538,0,58,0,59,0,0,0,139,0,479,0,0],[0,0,0,539,532,540,541,57,58,0,59,0,0,542,536,0,0,62,0],[0,0,0,0,0,0,0,353,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,350,0,0],[0,0,0,0,0,0,543,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,361,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,358,0,0],[0,0,0,0,0,544,544,442,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,545,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,491,492,493,494,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,492,492,494,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,546,546,494,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,547,546,546,494,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,548,549,368,550,0,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,274,0,368,368,0,161,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,161,0,0,0,0,498,0,0,0,0,0],[0,0,0,495,0,496,368,0,161,0,162,0,0,498,0,0,0,0,0],[0,0,0,495,0,368,368,0,161,0,162,0,0,0,0,0,0,0,0],[0,0,0,551,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,553,0,0,0,76,554,0,23,0,24,0,0,0,78,0,553,0,0],[0,0,0,0,555,80,80,22,23,0,0,0,0,503,555,0,0,0,0],[0,0,0,499,500,501,552,22,23,0,24,0,0,503,504,0,0,27,0],[0,0,0,499,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,556,90,0,0,76,554,0,23,0,24,0,0,0,78,0,556,0,0],[0,448,0,0,0,175,175,0,23,0,24,0,0,0,78,0,448,0,0],[0,448,0,505,0,175,175,0,23,0,24,0,0,0,78,0,448,0,0],[0,0,0,551,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,0,0,0,555,80,80,22,23,0,0,0,0,510,555,0,0,0,0],[0,0,0,507,500,508,552,22,23,0,24,0,0,510,504,0,0,27,0],[0,0,0,507,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,0,0],[0,0,0,557,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,559,0,0,0,97,560,0,33,0,34,0,0,0,99,0,559,0,0],[0,0,0,0,561,101,101,32,33,0,0,0,0,516,561,0,0,0,0],[0,0,0,512,513,514,558,32,33,0,34,0,0,516,517,0,0,37,0],[0,0,0,512,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,562,111,0,0,97,560,0,33,0,34,0,0,0,99,0,562,0,0],[0,457,0,0,0,201,201,0,33,0,34,0,0,0,99,0,457,0,0],[0,457,0,518,0,201,201,0,33,0,34,0,0,0,99,0,457,0,0],[0,0,0,557,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,0,0,0,561,101,101,32,33,0,0,0,0,523,561,0,0,0,0],[0,0,0,520,513,521,558,32,33,0,34,0,0,523,517,0,0,37,0],[0,0,0,520,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,0,0],[0,0,0,0,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,0,0,0,529,44,44,8,9,0,0,0,0,0,529,0,0,0,0],[0,0,0,563,66,564,565,8,9,0,10,0,0,566,68,0,0,16,0],[0,527,0,567,0,123,123,8,9,0,10,0,0,0,42,0,527,0,0],[0,527,0,0,0,121,568,0,9,0,10,0,0,0,42,0,527,0,0],[0,0,0,569,66,570,571,8,9,0,10,0,0,572,68,0,0,16,0],[0,0,0,573,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,575,0,0,0,137,576,0,58,0,59,0,0,0,139,0,575,0,0],[0,0,0,0,577,141,141,57,58,0,0,0,0,535,577,0,0,0,0],[0,0,0,531,532,533,574,57,58,0,59,0,0,535,536,0,0,62,0],[0,0,0,531,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,578,151,0,0,137,576,0,58,0,59,0,0,0,139,0,578,0,0],[0,479,0,0,0,246,246,0,58,0,59,0,0,0,139,0,479,0,0],[0,479,0,537,0,246,246,0,58,0,59,0,0,0,139,0,479,0,0],[0,0,0,573,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,0,0,0,577,141,141,57,58,0,0,0,0,542,577,0,0,0,0],[0,0,0,539,532,540,574,57,58,0,59,0,0,542,536,0,0,62,0],[0,0,0,539,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,137,0,0],[0,0,0,0,0,0,0,442,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,439,0,0],[0,0,0,0,0,579,579,494,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,580,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,549,368,550,0,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,368,368,0,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,581,0,0,0,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,0,0,0,555,80,80,22,23,0,0,0,0,0,555,0,0,0,0],[0,0,0,582,91,583,584,22,23,0,24,0,0,585,93,0,0,27,0],[0,553,0,586,0,177,177,22,23,0,24,0,0,0,78,0,553,0,0],[0,553,0,0,0,175,587,0,23,0,24,0,0,0,78,0,553,0,0],[0,0,0,588,91,589,590,22,23,0,24,0,0,591,93,0,0,27,0],[0,0,0,0,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,0,0,0,561,101,101,32,33,0,0,0,0,0,561,0,0,0,0],[0,0,0,592,112,593,594,32,33,0,34,0,0,595,114,0,0,37,0],[0,559,0,596,0,203,203,32,33,0,34,0,0,0,99,0,559,0,0],[0,559,0,0,0,201,597,0,33,0,34,0,0,0,99,0,559,0,0],[0,0,0,598,112,599,600,32,33,0,34,0,0,601,114,0,0,37,0],[0,0,0,602,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,0,165,44,44,8,9,0,0,0,0,566,165,0,0,0,0],[0,0,0,563,66,564,67,8,9,0,10,0,0,566,68,0,0,16,0],[0,0,0,563,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,527,0,0,0,121,121,0,9,0,10,0,0,0,42,0,527,0,0],[0,527,0,567,0,121,121,0,9,0,10,0,0,0,42,0,527,0,0],[0,0,0,602,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,0,165,44,44,8,9,0,0,0,0,572,165,0,0,0,0],[0,0,0,569,66,570,67,8,9,0,10,0,0,572,68,0,0,16,0],[0,0,0,569,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,0,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,0,0,0,577,141,141,57,58,0,0,0,0,0,577,0,0,0,0],[0,0,0,603,152,604,605,57,58,0,59,0,0,606,154,0,0,62,0],[0,575,0,607,0,248,248,57,58,0,59,0,0,0,139,0,575,0,0],[0,575,0,0,0,246,608,0,58,0,59,0,0,0,139,0,575,0,0],[0,0,0,609,152,610,611,57,58,0,59,0,0,612,154,0,0,62,0],[0,0,0,0,0,0,0,494,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,491,0,0],[0,0,0,0,0,0,613,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,614,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,0,194,80,80,22,23,0,0,0,0,585,194,0,0,0,0],[0,0,0,582,91,583,92,22,23,0,24,0,0,585,93,0,0,27,0],[0,0,0,582,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,553,0,0,0,175,175,0,23,0,24,0,0,0,78,0,553,0,0],[0,553,0,586,0,175,175,0,23,0,24,0,0,0,78,0,553,0,0],[0,0,0,614,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,0,194,80,80,22,23,0,0,0,0,591,194,0,0,0,0],[0,0,0,588,91,589,92,22,23,0,24,0,0,591,93,0,0,27,0],[0,0,0,588,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,615,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,220,101,101,32,33,0,0,0,0,595,220,0,0,0,0],[0,0,0,592,112,593,113,32,33,0,34,0,0,595,114,0,0,37,0],[0,0,0,592,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,559,0,0,0,201,201,0,33,0,34,0,0,0,99,0,559,0,0],[0,559,0,596,0,201,201,0,33,0,34,0,0,0,99,0,559,0,0],[0,0,0,615,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,220,101,101,32,33,0,0,0,0,601,220,0,0,0,0],[0,0,0,598,112,599,113,32,33,0,34,0,0,601,114,0,0,37,0],[0,0,0,598,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,616,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,0,0,0,265,141,141,57,58,0,0,0,0,606,265,0,0,0,0],[0,0,0,603,152,604,153,57,58,0,59,0,0,606,154,0,0,62,0],[0,0,0,603,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,575,0,0,0,246,246,0,58,0,59,0,0,0,139,0,575,0,0],[0,575,0,607,0,246,246,0,58,0,59,0,0,0,139,0,575,0,0],[0,0,0,616,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,0,0,0,265,141,141,57,58,0,0,0,0,612,265,0,0,0,0],[0,0,0,609,152,610,153,57,58,0,59,0,0,612,154,0,0,62,0],[0,0,0,609,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,549,0,0],[0,0,0,0,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,0,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0]],\\\"accepting\\\":[false,true,true,true,true,true,false,false,true,true,true,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,true,true,true,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,false,false,true,true,true,true,true,true,true,true,true,true,false,true,true,false,true,true,true,false,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,true,false,true,true,false,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,true,false,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,true,false,true,true,false,true,true,true,true,true,true,true,true,true,true,true,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,false,true,false,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,false,true,true,false,false,true,false,true,true,false,true,true,false,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,false,true,true,true,true,false,false,false,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,false,true,true,false,false,true,true,false,false,true,true,true,false,true,false,true,true,true,true,false,false,false,true,false,true,true,true,true,false,false,false,true,true,false,true,true,true,true,true,true,false,true,true,false,true,false,true,true,true,true,false,false,false,false,false,false,false,true,true,false,false,true,true,false,true,true,true,true,false,true,true,true,true,true,true,false,true,true,false,true,true,false,true,true,true,true,true,true,false,true,true,false,true,false,true,true,true,true,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,false,true,true,false,true,false,true,true,true,true,true,false,true,true,true,true,true,false,true,true,true,true,true,false,true,true,true,false,true,true,true,true,false,false,false,true,false,true,true,true,true,true,false,true,true,true,false,true,true,true,true,true,false,true,true,true,true,false,true,true,true,true,true,false,true,true,false,true,true,true],\\\"tags\\\":[[],[\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[],[],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\"],[\\\"broken_cluster\\\"],[\\\"symbol_cluster\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[],[\\\"broken_cluster\\\"],[],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[],[],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[],[\\\"broken_cluster\\\"],[\\\"symbol_cluster\\\"],[],[\\\"symbol_cluster\\\"],[\\\"symbol_cluster\\\"],[\\\"consonant_syllable\\\"],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[],[\\\"consonant_syllable\\\"],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[],[\\\"consonant_syllable\\\"],[\\\"vowel_syllable\\\"],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[],[\\\"vowel_syllable\\\"],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[],[\\\"vowel_syllable\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[],[\\\"broken_cluster\\\"],[],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[],[],[],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[],[],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[\\\"standalone_cluster\\\"],[],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[\\\"standalone_cluster\\\"],[\\\"broken_cluster\\\"],[],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"symbol_cluster\\\"],[\\\"symbol_cluster\\\"],[\\\"symbol_cluster\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[],[\\\"consonant_syllable\\\"],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[],[],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[],[\\\"vowel_syllable\\\"],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[],[],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"broken_cluster\\\"],[],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[],[],[],[],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[],[],[\\\"broken_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[\\\"standalone_cluster\\\"],[],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[],[],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[\\\"broken_cluster\\\"],[],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"symbol_cluster\\\"],[\\\"consonant_syllable\\\"],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[],[],[],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"vowel_syllable\\\"],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[],[],[],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[],[],[],[],[\\\"broken_cluster\\\"],[],[\\\"standalone_cluster\\\"],[],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[],[],[],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[],[],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[],[],[],[],[\\\"consonant_syllable\\\"],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[],[],[],[],[\\\"vowel_syllable\\\"],[],[\\\"broken_cluster\\\"],[],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[],[],[],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[],[],[],[\\\"standalone_cluster\\\"],[],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[],[],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[],[],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[],[\\\"consonant_syllable\\\"],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[],[],[],[\\\"vowel_syllable\\\"],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[],[],[],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[],[\\\"standalone_cluster\\\"],[],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[],[],[],[],[],[],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[],[],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[],[\\\"broken_cluster\\\"],[],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[],[],[],[],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[],[\\\"consonant_syllable\\\"],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"vowel_syllable\\\"],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"broken_cluster\\\"],[],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"standalone_cluster\\\"],[],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[],[],[\\\"consonant_syllable\\\"],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"vowel_syllable\\\"],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"broken_cluster\\\"],[\\\"standalone_cluster\\\"],[],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[\\\"consonant_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"standalone_cluster\\\"]]}\");\nvar $aa333a9607471296$exports = {};\n$aa333a9607471296$exports = JSON.parse(\"{\\\"categories\\\":[\\\"O\\\",\\\"IND\\\",\\\"S\\\",\\\"GB\\\",\\\"B\\\",\\\"FM\\\",\\\"CGJ\\\",\\\"VMAbv\\\",\\\"VMPst\\\",\\\"VAbv\\\",\\\"VPst\\\",\\\"CMBlw\\\",\\\"VPre\\\",\\\"VBlw\\\",\\\"H\\\",\\\"VMBlw\\\",\\\"CMAbv\\\",\\\"MBlw\\\",\\\"CS\\\",\\\"R\\\",\\\"SUB\\\",\\\"MPst\\\",\\\"MPre\\\",\\\"FAbv\\\",\\\"FPst\\\",\\\"FBlw\\\",\\\"null\\\",\\\"SMAbv\\\",\\\"SMBlw\\\",\\\"VMPre\\\",\\\"ZWNJ\\\",\\\"ZWJ\\\",\\\"WJ\\\",\\\"M\\\",\\\"VS\\\",\\\"N\\\",\\\"HN\\\",\\\"MAbv\\\"],\\\"decompositions\\\":{\\\"2507\\\":[2503,2494],\\\"2508\\\":[2503,2519],\\\"2888\\\":[2887,2902],\\\"2891\\\":[2887,2878],\\\"2892\\\":[2887,2903],\\\"3018\\\":[3014,3006],\\\"3019\\\":[3015,3006],\\\"3020\\\":[3014,3031],\\\"3144\\\":[3142,3158],\\\"3264\\\":[3263,3285],\\\"3271\\\":[3270,3285],\\\"3272\\\":[3270,3286],\\\"3274\\\":[3270,3266],\\\"3275\\\":[3270,3266,3285],\\\"3402\\\":[3398,3390],\\\"3403\\\":[3399,3390],\\\"3404\\\":[3398,3415],\\\"3546\\\":[3545,3530],\\\"3548\\\":[3545,3535],\\\"3549\\\":[3545,3535,3530],\\\"3550\\\":[3545,3551],\\\"3635\\\":[3661,3634],\\\"3763\\\":[3789,3762],\\\"3955\\\":[3953,3954],\\\"3957\\\":[3953,3956],\\\"3958\\\":[4018,3968],\\\"3959\\\":[4018,3953,3968],\\\"3960\\\":[4019,3968],\\\"3961\\\":[4019,3953,3968],\\\"3969\\\":[3953,3968],\\\"6971\\\":[6970,6965],\\\"6973\\\":[6972,6965],\\\"6976\\\":[6974,6965],\\\"6977\\\":[6975,6965],\\\"6979\\\":[6978,6965],\\\"69934\\\":[69937,69927],\\\"69935\\\":[69938,69927],\\\"70475\\\":[70471,70462],\\\"70476\\\":[70471,70487],\\\"70843\\\":[70841,70842],\\\"70844\\\":[70841,70832],\\\"70846\\\":[70841,70845],\\\"71098\\\":[71096,71087],\\\"71099\\\":[71097,71087]},\\\"stateTable\\\":[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[2,2,3,4,4,5,0,6,7,8,9,10,11,12,13,14,15,16,0,17,18,11,19,20,21,22,0,0,0,23,0,0,2,0,0,24,0,25],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,28,0,0,0,0,0,27,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,34,35,36,37,38,39,40,0,0,41,35,42,43,44,45,0,0,0,46,0,0,0,0,39,0,0,47],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,0,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,0,0,12,0,14,0,0,0,0,0,0,0,20,21,22,0,0,0,23,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,9,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,0,23,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,10,11,12,13,14,0,16,0,0,18,11,19,20,21,22,0,0,0,23,0,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,0,0,0,0,0,0,20,21,22,0,0,0,23,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,9,0,0,12,0,14,0,0,0,0,0,0,0,20,21,22,0,0,0,23,0,0,0,0,0,0,0,0],[0,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,7,0,0,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,10,11,12,13,14,15,16,0,0,18,11,19,20,21,22,0,0,0,23,0,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,0,0,0,0,11,0,20,21,22,0,0,0,23,0,0,0,0,0,0,0,0],[0,0,0,4,4,5,0,6,7,8,9,10,11,12,13,14,15,16,0,0,18,11,19,20,21,22,0,0,0,23,0,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,48,11,12,13,14,48,16,0,0,18,11,19,20,21,22,0,0,0,23,0,0,0,0,49,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,16,0,0,0,11,0,20,21,22,0,0,0,23,0,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,22,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,0,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,0,23,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,51,0],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,16,0,0,0,11,0,20,21,22,0,0,0,23,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,28,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,0,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,0,0,36,0,38,0,0,0,0,0,0,0,43,44,45,0,0,0,46,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,33,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,0,46,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,34,35,36,37,38,0,40,0,0,41,35,42,43,44,45,0,0,0,46,0,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,0,0,0,0,0,0,43,44,45,0,0,0,46,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,33,0,0,36,0,38,0,0,0,0,0,0,0,43,44,45,0,0,0,46,0,0,0,0,0,0,0,0],[0,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,31,0,0,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,34,35,36,37,38,39,40,0,0,41,35,42,43,44,45,0,0,0,46,0,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,0,0,0,0,35,0,43,44,45,0,0,0,46,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,52,35,36,37,38,52,40,0,0,41,35,42,43,44,45,0,0,0,46,0,0,0,0,53,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,40,0,0,0,35,0,43,44,45,0,0,0,46,0,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,45,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,0,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,0,46,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,40,0,0,0,35,0,43,44,45,0,0,0,46,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,48,11,12,13,14,0,16,0,0,18,11,19,20,21,22,0,0,0,23,0,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,48,11,12,13,14,48,16,0,0,18,11,19,20,21,22,0,0,0,23,0,0,0,0,0,0,0,25],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,0,0],[0,0,0,0,0,29,0,30,31,32,33,52,35,36,37,38,0,40,0,0,41,35,42,43,44,45,0,0,0,46,0,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,52,35,36,37,38,52,40,0,0,41,35,42,43,44,45,0,0,0,46,0,0,0,0,0,0,0,47],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,51,0]],\\\"accepting\\\":[false,true,true,true,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],\\\"tags\\\":[[],[\\\"broken_cluster\\\"],[\\\"independent_cluster\\\"],[\\\"symbol_cluster\\\"],[\\\"standard_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"numeral_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"independent_cluster\\\"],[\\\"symbol_cluster\\\"],[\\\"symbol_cluster\\\"],[\\\"standard_cluster\\\"],[\\\"standard_cluster\\\"],[\\\"standard_cluster\\\"],[\\\"standard_cluster\\\"],[\\\"standard_cluster\\\"],[\\\"standard_cluster\\\"],[\\\"standard_cluster\\\"],[\\\"standard_cluster\\\"],[\\\"virama_terminated_cluster\\\"],[\\\"standard_cluster\\\"],[\\\"standard_cluster\\\"],[\\\"standard_cluster\\\"],[\\\"standard_cluster\\\"],[\\\"standard_cluster\\\"],[\\\"standard_cluster\\\"],[\\\"standard_cluster\\\"],[\\\"standard_cluster\\\"],[\\\"standard_cluster\\\"],[\\\"standard_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"numeral_cluster\\\"],[\\\"number_joiner_terminated_cluster\\\"],[\\\"standard_cluster\\\"],[\\\"standard_cluster\\\"],[\\\"numeral_cluster\\\"]]}\"); // Cateories used in the OpenType spec:\n// https://www.microsoft.com/typography/otfntdev/devanot/shaping.aspx\n\nconst $90a9d3398ee54fe5$export$a513ea61a7bee91c = {\n  X: 1,\n  C: 2,\n  V: 4,\n  N: 8,\n  H: 16,\n  ZWNJ: 32,\n  ZWJ: 64,\n  M: 128,\n  SM: 256,\n  VD: 512,\n  A: 1024,\n  Placeholder: 2048,\n  Dotted_Circle: 4096,\n  RS: 8192,\n  Coeng: 16384,\n  Repha: 32768,\n  Ra: 65536,\n  CM: 131072,\n  Symbol: 262144 // Avagraha, etc that take marks (SM,A,VD).\n\n};\nconst $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0 = {\n  Start: 1,\n  Ra_To_Become_Reph: 2,\n  Pre_M: 4,\n  Pre_C: 8,\n  Base_C: 16,\n  After_Main: 32,\n  Above_C: 64,\n  Before_Sub: 128,\n  Below_C: 256,\n  After_Sub: 512,\n  Before_Post: 1024,\n  Post_C: 2048,\n  After_Post: 4096,\n  Final_C: 8192,\n  SMVD: 16384,\n  End: 32768\n};\nconst $90a9d3398ee54fe5$export$8519deaa7de2b07 = $90a9d3398ee54fe5$export$a513ea61a7bee91c.C | $90a9d3398ee54fe5$export$a513ea61a7bee91c.Ra | $90a9d3398ee54fe5$export$a513ea61a7bee91c.CM | $90a9d3398ee54fe5$export$a513ea61a7bee91c.V | $90a9d3398ee54fe5$export$a513ea61a7bee91c.Placeholder | $90a9d3398ee54fe5$export$a513ea61a7bee91c.Dotted_Circle;\nconst $90a9d3398ee54fe5$export$bbcd928767338e0d = $90a9d3398ee54fe5$export$a513ea61a7bee91c.ZWJ | $90a9d3398ee54fe5$export$a513ea61a7bee91c.ZWNJ;\nconst $90a9d3398ee54fe5$export$ca9599b2a300afc = $90a9d3398ee54fe5$export$a513ea61a7bee91c.H | $90a9d3398ee54fe5$export$a513ea61a7bee91c.Coeng;\nconst $90a9d3398ee54fe5$export$e99d119da76a0fc5 = {\n  Default: {\n    hasOldSpec: false,\n    virama: 0,\n    basePos: 'Last',\n    rephPos: $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0.Before_Post,\n    rephMode: 'Implicit',\n    blwfMode: 'Pre_And_Post'\n  },\n  Devanagari: {\n    hasOldSpec: true,\n    virama: 0x094D,\n    basePos: 'Last',\n    rephPos: $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0.Before_Post,\n    rephMode: 'Implicit',\n    blwfMode: 'Pre_And_Post'\n  },\n  Bengali: {\n    hasOldSpec: true,\n    virama: 0x09CD,\n    basePos: 'Last',\n    rephPos: $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0.After_Sub,\n    rephMode: 'Implicit',\n    blwfMode: 'Pre_And_Post'\n  },\n  Gurmukhi: {\n    hasOldSpec: true,\n    virama: 0x0A4D,\n    basePos: 'Last',\n    rephPos: $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0.Before_Sub,\n    rephMode: 'Implicit',\n    blwfMode: 'Pre_And_Post'\n  },\n  Gujarati: {\n    hasOldSpec: true,\n    virama: 0x0ACD,\n    basePos: 'Last',\n    rephPos: $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0.Before_Post,\n    rephMode: 'Implicit',\n    blwfMode: 'Pre_And_Post'\n  },\n  Oriya: {\n    hasOldSpec: true,\n    virama: 0x0B4D,\n    basePos: 'Last',\n    rephPos: $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0.After_Main,\n    rephMode: 'Implicit',\n    blwfMode: 'Pre_And_Post'\n  },\n  Tamil: {\n    hasOldSpec: true,\n    virama: 0x0BCD,\n    basePos: 'Last',\n    rephPos: $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0.After_Post,\n    rephMode: 'Implicit',\n    blwfMode: 'Pre_And_Post'\n  },\n  Telugu: {\n    hasOldSpec: true,\n    virama: 0x0C4D,\n    basePos: 'Last',\n    rephPos: $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0.After_Post,\n    rephMode: 'Explicit',\n    blwfMode: 'Post_Only'\n  },\n  Kannada: {\n    hasOldSpec: true,\n    virama: 0x0CCD,\n    basePos: 'Last',\n    rephPos: $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0.After_Post,\n    rephMode: 'Implicit',\n    blwfMode: 'Post_Only'\n  },\n  Malayalam: {\n    hasOldSpec: true,\n    virama: 0x0D4D,\n    basePos: 'Last',\n    rephPos: $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0.After_Main,\n    rephMode: 'Log_Repha',\n    blwfMode: 'Pre_And_Post'\n  },\n  // Handled by UniversalShaper\n  // Sinhala: {\n  //   hasOldSpec: false,\n  //   virama: 0x0DCA,\n  //   basePos: 'Last_Sinhala',\n  //   rephPos: POSITIONS.After_Main,\n  //   rephMode: 'Explicit',\n  //   blwfMode: 'Pre_And_Post'\n  // },\n  Khmer: {\n    hasOldSpec: false,\n    virama: 0x17D2,\n    basePos: 'First',\n    rephPos: $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0.Ra_To_Become_Reph,\n    rephMode: 'Vis_Repha',\n    blwfMode: 'Pre_And_Post'\n  }\n};\nconst $90a9d3398ee54fe5$export$f647c9cfdd77d95a = {\n  // Khmer\n  0x17BE: [0x17C1, 0x17BE],\n  0x17BF: [0x17C1, 0x17BF],\n  0x17C0: [0x17C1, 0x17C0],\n  0x17C4: [0x17C1, 0x17C4],\n  0x17C5: [0x17C1, 0x17C5]\n};\nconst {\n  decompositions: $7826f90f6f0cecc9$var$decompositions\n} = (0, /*@__PURE__*/$parcel$interopDefault($aa333a9607471296$exports));\nconst $7826f90f6f0cecc9$var$trie = new (0, $6uUbQ$unicodetrie)((0, $12727730ddfc8bfe$export$94fdf11bafc8de6b)(\"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\"));\nconst $7826f90f6f0cecc9$var$stateMachine = new (0, $6uUbQ$dfa)((0, /*@__PURE__*/$parcel$interopDefault($4b0735ca6c692ea5$exports)));\n\nclass $7826f90f6f0cecc9$export$2e2bcd8739ae039 extends (0, $649970d87335b30f$export$2e2bcd8739ae039) {\n  static planFeatures(plan) {\n    plan.addStage($7826f90f6f0cecc9$var$setupSyllables);\n    plan.addStage(['locl', 'ccmp']);\n    plan.addStage($7826f90f6f0cecc9$var$initialReordering);\n    plan.addStage('nukt');\n    plan.addStage('akhn');\n    plan.addStage('rphf', false);\n    plan.addStage('rkrf');\n    plan.addStage('pref', false);\n    plan.addStage('blwf', false);\n    plan.addStage('abvf', false);\n    plan.addStage('half', false);\n    plan.addStage('pstf', false);\n    plan.addStage('vatu');\n    plan.addStage('cjct');\n    plan.addStage('cfar', false);\n    plan.addStage($7826f90f6f0cecc9$var$finalReordering);\n    plan.addStage({\n      local: ['init'],\n      global: ['pres', 'abvs', 'blws', 'psts', 'haln', 'dist', 'abvm', 'blwm', 'calt', 'clig']\n    }); // Setup the indic config for the selected script\n\n    plan.unicodeScript = $130d1a642ebcd2b7$export$ce50e82f12a827a4(plan.script);\n    plan.indicConfig = (0, $90a9d3398ee54fe5$export$e99d119da76a0fc5)[plan.unicodeScript] || (0, $90a9d3398ee54fe5$export$e99d119da76a0fc5).Default;\n    plan.isOldSpec = plan.indicConfig.hasOldSpec && plan.script[plan.script.length - 1] !== '2'; // TODO: turn off kern (Khmer) and liga features.\n  }\n\n  static assignFeatures(plan, glyphs) {\n    // Decompose split matras\n    // TODO: do this in a more general unicode normalizer\n    for (let i = glyphs.length - 1; i >= 0; i--) {\n      let codepoint = glyphs[i].codePoints[0];\n      let d = (0, $90a9d3398ee54fe5$export$f647c9cfdd77d95a)[codepoint] || $7826f90f6f0cecc9$var$decompositions[codepoint];\n\n      if (d) {\n        let decomposed = d.map(c => {\n          let g = plan.font.glyphForCodePoint(c);\n          return new (0, $10e7b257e1a9a756$export$2e2bcd8739ae039)(plan.font, g.id, [c], glyphs[i].features);\n        });\n        glyphs.splice(i, 1, ...decomposed);\n      }\n    }\n  }\n\n}\n\n(0, $6uUbQ$_)($7826f90f6f0cecc9$export$2e2bcd8739ae039, \"zeroMarkWidths\", 'NONE');\n\nfunction $7826f90f6f0cecc9$var$indicCategory(glyph) {\n  return $7826f90f6f0cecc9$var$trie.get(glyph.codePoints[0]) >> 8;\n}\n\nfunction $7826f90f6f0cecc9$var$indicPosition(glyph) {\n  return 1 << ($7826f90f6f0cecc9$var$trie.get(glyph.codePoints[0]) & 0xff);\n}\n\nclass $7826f90f6f0cecc9$var$IndicInfo {\n  constructor(category, position, syllableType, syllable) {\n    this.category = category;\n    this.position = position;\n    this.syllableType = syllableType;\n    this.syllable = syllable;\n  }\n\n}\n\nfunction $7826f90f6f0cecc9$var$setupSyllables(font, glyphs) {\n  let syllable = 0;\n  let last = 0;\n\n  for (let [start, end, tags] of $7826f90f6f0cecc9$var$stateMachine.match(glyphs.map($7826f90f6f0cecc9$var$indicCategory))) {\n    if (start > last) {\n      ++syllable;\n\n      for (let i = last; i < start; i++) glyphs[i].shaperInfo = new $7826f90f6f0cecc9$var$IndicInfo((0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).X, (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).End, 'non_indic_cluster', syllable);\n    }\n\n    ++syllable; // Create shaper info\n\n    for (let i = start; i <= end; i++) glyphs[i].shaperInfo = new $7826f90f6f0cecc9$var$IndicInfo(1 << $7826f90f6f0cecc9$var$indicCategory(glyphs[i]), $7826f90f6f0cecc9$var$indicPosition(glyphs[i]), tags[0], syllable);\n\n    last = end + 1;\n  }\n\n  if (last < glyphs.length) {\n    ++syllable;\n\n    for (let i = last; i < glyphs.length; i++) glyphs[i].shaperInfo = new $7826f90f6f0cecc9$var$IndicInfo((0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).X, (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).End, 'non_indic_cluster', syllable);\n  }\n}\n\nfunction $7826f90f6f0cecc9$var$isConsonant(glyph) {\n  return glyph.shaperInfo.category & (0, $90a9d3398ee54fe5$export$8519deaa7de2b07);\n}\n\nfunction $7826f90f6f0cecc9$var$isJoiner(glyph) {\n  return glyph.shaperInfo.category & (0, $90a9d3398ee54fe5$export$bbcd928767338e0d);\n}\n\nfunction $7826f90f6f0cecc9$var$isHalantOrCoeng(glyph) {\n  return glyph.shaperInfo.category & (0, $90a9d3398ee54fe5$export$ca9599b2a300afc);\n}\n\nfunction $7826f90f6f0cecc9$var$wouldSubstitute(glyphs, feature) {\n  for (let glyph of glyphs) glyph.features = {\n    [feature]: true\n  };\n\n  let GSUB = glyphs[0]._font._layoutEngine.engine.GSUBProcessor;\n  GSUB.applyFeatures([feature], glyphs);\n  return glyphs.length === 1;\n}\n\nfunction $7826f90f6f0cecc9$var$consonantPosition(font, consonant, virama) {\n  let glyphs = [virama, consonant, virama];\n  if ($7826f90f6f0cecc9$var$wouldSubstitute(glyphs.slice(0, 2), 'blwf') || $7826f90f6f0cecc9$var$wouldSubstitute(glyphs.slice(1, 3), 'blwf')) return (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Below_C;else if ($7826f90f6f0cecc9$var$wouldSubstitute(glyphs.slice(0, 2), 'pstf') || $7826f90f6f0cecc9$var$wouldSubstitute(glyphs.slice(1, 3), 'pstf')) return (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Post_C;else if ($7826f90f6f0cecc9$var$wouldSubstitute(glyphs.slice(0, 2), 'pref') || $7826f90f6f0cecc9$var$wouldSubstitute(glyphs.slice(1, 3), 'pref')) return (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Post_C;\n  return (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Base_C;\n}\n\nfunction $7826f90f6f0cecc9$var$initialReordering(font, glyphs, plan) {\n  let indicConfig = plan.indicConfig;\n  let features = font._layoutEngine.engine.GSUBProcessor.features;\n  let dottedCircle = font.glyphForCodePoint(0x25cc).id;\n  let virama = font.glyphForCodePoint(indicConfig.virama).id;\n\n  if (virama) {\n    let info = new (0, $10e7b257e1a9a756$export$2e2bcd8739ae039)(font, virama, [indicConfig.virama]);\n\n    for (let i = 0; i < glyphs.length; i++) if (glyphs[i].shaperInfo.position === (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Base_C) glyphs[i].shaperInfo.position = $7826f90f6f0cecc9$var$consonantPosition(font, glyphs[i].copy(), info);\n  }\n\n  for (let start = 0, end = $7826f90f6f0cecc9$var$nextSyllable(glyphs, 0); start < glyphs.length; start = end, end = $7826f90f6f0cecc9$var$nextSyllable(glyphs, start)) {\n    let {\n      category: category,\n      syllableType: syllableType\n    } = glyphs[start].shaperInfo;\n    if (syllableType === 'symbol_cluster' || syllableType === 'non_indic_cluster') continue;\n\n    if (syllableType === 'broken_cluster' && dottedCircle) {\n      let g = new (0, $10e7b257e1a9a756$export$2e2bcd8739ae039)(font, dottedCircle, [0x25cc]);\n      g.shaperInfo = new $7826f90f6f0cecc9$var$IndicInfo(1 << $7826f90f6f0cecc9$var$indicCategory(g), $7826f90f6f0cecc9$var$indicPosition(g), glyphs[start].shaperInfo.syllableType, glyphs[start].shaperInfo.syllable); // Insert after possible Repha.\n\n      let i = start;\n\n      while (i < end && glyphs[i].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).Repha) i++;\n\n      glyphs.splice(i++, 0, g);\n      end++;\n    } // 1. Find base consonant:\n    //\n    // The shaping engine finds the base consonant of the syllable, using the\n    // following algorithm: starting from the end of the syllable, move backwards\n    // until a consonant is found that does not have a below-base or post-base\n    // form (post-base forms have to follow below-base forms), or that is not a\n    // pre-base reordering Ra, or arrive at the first consonant. The consonant\n    // stopped at will be the base.\n\n\n    let base = end;\n    let limit = start;\n    let hasReph = false; // If the syllable starts with Ra + Halant (in a script that has Reph)\n    // and has more than one consonant, Ra is excluded from candidates for\n    // base consonants.\n\n    if (indicConfig.rephPos !== (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Ra_To_Become_Reph && features.rphf && start + 3 <= end && (indicConfig.rephMode === 'Implicit' && !$7826f90f6f0cecc9$var$isJoiner(glyphs[start + 2]) || indicConfig.rephMode === 'Explicit' && glyphs[start + 2].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).ZWJ)) {\n      // See if it matches the 'rphf' feature.\n      let g = [glyphs[start].copy(), glyphs[start + 1].copy(), glyphs[start + 2].copy()];\n\n      if ($7826f90f6f0cecc9$var$wouldSubstitute(g.slice(0, 2), 'rphf') || indicConfig.rephMode === 'Explicit' && $7826f90f6f0cecc9$var$wouldSubstitute(g, 'rphf')) {\n        limit += 2;\n\n        while (limit < end && $7826f90f6f0cecc9$var$isJoiner(glyphs[limit])) limit++;\n\n        base = start;\n        hasReph = true;\n      }\n    } else if (indicConfig.rephMode === 'Log_Repha' && glyphs[start].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).Repha) {\n      limit++;\n\n      while (limit < end && $7826f90f6f0cecc9$var$isJoiner(glyphs[limit])) limit++;\n\n      base = start;\n      hasReph = true;\n    }\n\n    switch (indicConfig.basePos) {\n      case 'Last':\n        {\n          // starting from the end of the syllable, move backwards\n          let i = end;\n          let seenBelow = false;\n\n          do {\n            let info = glyphs[--i].shaperInfo; // until a consonant is found\n\n            if ($7826f90f6f0cecc9$var$isConsonant(glyphs[i])) {\n              // that does not have a below-base or post-base form\n              // (post-base forms have to follow below-base forms),\n              if (info.position !== (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Below_C && (info.position !== (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Post_C || seenBelow)) {\n                base = i;\n                break;\n              } // or that is not a pre-base reordering Ra,\n              //\n              // IMPLEMENTATION NOTES:\n              //\n              // Our pre-base reordering Ra's are marked POS_POST_C, so will be skipped\n              // by the logic above already.\n              //\n              // or arrive at the first consonant. The consonant stopped at will\n              // be the base.\n\n\n              if (info.position === (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Below_C) seenBelow = true;\n              base = i;\n            } else if (start < i && info.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).ZWJ && glyphs[i - 1].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).H) break;\n          } while (i > limit);\n\n          break;\n        }\n\n      case 'First':\n        // The first consonant is always the base.\n        base = start; // Mark all subsequent consonants as below.\n\n        for (let i = base + 1; i < end; i++) if ($7826f90f6f0cecc9$var$isConsonant(glyphs[i])) glyphs[i].shaperInfo.position = (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Below_C;\n\n    } // If the syllable starts with Ra + Halant (in a script that has Reph)\n    // and has more than one consonant, Ra is excluded from candidates for\n    // base consonants.\n    //\n    //  Only do this for unforced Reph. (ie. not for Ra,H,ZWJ)\n\n\n    if (hasReph && base === start && limit - base <= 2) hasReph = false; // 2. Decompose and reorder Matras:\n    //\n    // Each matra and any syllable modifier sign in the cluster are moved to the\n    // appropriate position relative to the consonant(s) in the cluster. The\n    // shaping engine decomposes two- or three-part matras into their constituent\n    // parts before any repositioning. Matra characters are classified by which\n    // consonant in a conjunct they have affinity for and are reordered to the\n    // following positions:\n    //\n    //   o Before first half form in the syllable\n    //   o After subjoined consonants\n    //   o After post-form consonant\n    //   o After main consonant (for above marks)\n    //\n    // IMPLEMENTATION NOTES:\n    //\n    // The normalize() routine has already decomposed matras for us, so we don't\n    // need to worry about that.\n    // 3.  Reorder marks to canonical order:\n    //\n    // Adjacent nukta and halant or nukta and vedic sign are always repositioned\n    // if necessary, so that the nukta is first.\n    //\n    // IMPLEMENTATION NOTES:\n    //\n    // We don't need to do this: the normalize() routine already did this for us.\n    // Reorder characters\n\n    for (let i = start; i < base; i++) {\n      let info = glyphs[i].shaperInfo;\n      info.position = Math.min((0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Pre_C, info.position);\n    }\n\n    if (base < end) glyphs[base].shaperInfo.position = (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Base_C; // Mark final consonants.  A final consonant is one appearing after a matra,\n    // like in Khmer.\n\n    for (let i = base + 1; i < end; i++) if (glyphs[i].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).M) {\n      for (let j = i + 1; j < end; j++) if ($7826f90f6f0cecc9$var$isConsonant(glyphs[j])) {\n        glyphs[j].shaperInfo.position = (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Final_C;\n        break;\n      }\n\n      break;\n    } // Handle beginning Ra\n\n\n    if (hasReph) glyphs[start].shaperInfo.position = (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Ra_To_Become_Reph; // For old-style Indic script tags, move the first post-base Halant after\n    // last consonant.\n    //\n    // Reports suggest that in some scripts Uniscribe does this only if there\n    // is *not* a Halant after last consonant already (eg. Kannada), while it\n    // does it unconditionally in other scripts (eg. Malayalam).  We don't\n    // currently know about other scripts, so we single out Malayalam for now.\n    //\n    // Kannada test case:\n    // U+0C9A,U+0CCD,U+0C9A,U+0CCD\n    // With some versions of Lohit Kannada.\n    // https://bugs.freedesktop.org/show_bug.cgi?id=59118\n    //\n    // Malayalam test case:\n    // U+0D38,U+0D4D,U+0D31,U+0D4D,U+0D31,U+0D4D\n    // With lohit-ttf-20121122/Lohit-Malayalam.ttf\n\n    if (plan.isOldSpec) {\n      let disallowDoubleHalants = plan.unicodeScript !== 'Malayalam';\n\n      for (let i = base + 1; i < end; i++) if (glyphs[i].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).H) {\n        let j;\n\n        for (j = end - 1; j > i; j--) {\n          if ($7826f90f6f0cecc9$var$isConsonant(glyphs[j]) || disallowDoubleHalants && glyphs[j].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).H) break;\n        }\n\n        if (glyphs[j].shaperInfo.category !== (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).H && j > i) {\n          // Move Halant to after last consonant.\n          let t = glyphs[i];\n          glyphs.splice(i, 0, ...glyphs.splice(i + 1, j - i));\n          glyphs[j] = t;\n        }\n\n        break;\n      }\n    } // Attach misc marks to previous char to move with them.\n\n\n    let lastPos = (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Start;\n\n    for (let i = start; i < end; i++) {\n      let info = glyphs[i].shaperInfo;\n\n      if (info.category & ((0, $90a9d3398ee54fe5$export$bbcd928767338e0d) | (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).N | (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).RS | (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).CM | (0, $90a9d3398ee54fe5$export$ca9599b2a300afc) & info.category)) {\n        info.position = lastPos;\n\n        if (info.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).H && info.position === (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Pre_M) {\n          // Uniscribe doesn't move the Halant with Left Matra.\n          // TEST: U+092B,U+093F,U+094DE\n          // We follow.  This is important for the Sinhala\n          // U+0DDA split matra since it decomposes to U+0DD9,U+0DCA\n          // where U+0DD9 is a left matra and U+0DCA is the virama.\n          // We don't want to move the virama with the left matra.\n          // TEST: U+0D9A,U+0DDA\n          for (let j = i; j > start; j--) if (glyphs[j - 1].shaperInfo.position !== (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Pre_M) {\n            info.position = glyphs[j - 1].shaperInfo.position;\n            break;\n          }\n        }\n      } else if (info.position !== (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).SMVD) lastPos = info.position;\n    } // For post-base consonants let them own anything before them\n    // since the last consonant or matra.\n\n\n    let last = base;\n\n    for (let i = base + 1; i < end; i++) {\n      if ($7826f90f6f0cecc9$var$isConsonant(glyphs[i])) {\n        for (let j = last + 1; j < i; j++) if (glyphs[j].shaperInfo.position < (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).SMVD) glyphs[j].shaperInfo.position = glyphs[i].shaperInfo.position;\n\n        last = i;\n      } else if (glyphs[i].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).M) last = i;\n    }\n\n    let arr = glyphs.slice(start, end);\n    arr.sort((a, b) => a.shaperInfo.position - b.shaperInfo.position);\n    glyphs.splice(start, arr.length, ...arr); // Find base again\n\n    for (let i = start; i < end; i++) if (glyphs[i].shaperInfo.position === (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Base_C) {\n      base = i;\n      break;\n    } // Setup features now\n    // Reph\n\n\n    for (let i = start; i < end && glyphs[i].shaperInfo.position === (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Ra_To_Become_Reph; i++) glyphs[i].features.rphf = true; // Pre-base\n\n\n    let blwf = !plan.isOldSpec && indicConfig.blwfMode === 'Pre_And_Post';\n\n    for (let i = start; i < base; i++) {\n      glyphs[i].features.half = true;\n      if (blwf) glyphs[i].features.blwf = true;\n    } // Post-base\n\n\n    for (let i = base + 1; i < end; i++) {\n      glyphs[i].features.abvf = true;\n      glyphs[i].features.pstf = true;\n      glyphs[i].features.blwf = true;\n    }\n\n    if (plan.isOldSpec && plan.unicodeScript === 'Devanagari') {\n      // Old-spec eye-lash Ra needs special handling.  From the\n      // spec:\n      //\n      // \"The feature 'below-base form' is applied to consonants\n      // having below-base forms and following the base consonant.\n      // The exception is vattu, which may appear below half forms\n      // as well as below the base glyph. The feature 'below-base\n      // form' will be applied to all such occurrences of Ra as well.\"\n      //\n      // Test case: U+0924,U+094D,U+0930,U+094d,U+0915\n      // with Sanskrit 2003 font.\n      //\n      // However, note that Ra,Halant,ZWJ is the correct way to\n      // request eyelash form of Ra, so we wouldbn't inhibit it\n      // in that sequence.\n      //\n      // Test case: U+0924,U+094D,U+0930,U+094d,U+200D,U+0915\n      for (let i = start; i + 1 < base; i++) if (glyphs[i].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).Ra && glyphs[i + 1].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).H && (i + 1 === base || glyphs[i + 2].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).ZWJ)) {\n        glyphs[i].features.blwf = true;\n        glyphs[i + 1].features.blwf = true;\n      }\n    }\n\n    let prefLen = 2;\n    if (features.pref && base + prefLen < end) // Find a Halant,Ra sequence and mark it for pre-base reordering processing.\n      for (let i = base + 1; i + prefLen - 1 < end; i++) {\n        let g = [glyphs[i].copy(), glyphs[i + 1].copy()];\n\n        if ($7826f90f6f0cecc9$var$wouldSubstitute(g, 'pref')) {\n          for (let j = 0; j < prefLen; j++) glyphs[i++].features.pref = true; // Mark the subsequent stuff with 'cfar'.  Used in Khmer.\n          // Read the feature spec.\n          // This allows distinguishing the following cases with MS Khmer fonts:\n          // U+1784,U+17D2,U+179A,U+17D2,U+1782\n          // U+1784,U+17D2,U+1782,U+17D2,U+179A\n\n\n          if (features.cfar) for (; i < end; i++) glyphs[i].features.cfar = true;\n          break;\n        }\n      } // Apply ZWJ/ZWNJ effects\n\n    for (let i = start + 1; i < end; i++) if ($7826f90f6f0cecc9$var$isJoiner(glyphs[i])) {\n      let nonJoiner = glyphs[i].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).ZWNJ;\n      let j = i;\n\n      do {\n        j--; // ZWJ/ZWNJ should disable CJCT.  They do that by simply\n        // being there, since we don't skip them for the CJCT\n        // feature (ie. F_MANUAL_ZWJ)\n        // A ZWNJ disables HALF.\n\n        if (nonJoiner) delete glyphs[j].features.half;\n      } while (j > start && !$7826f90f6f0cecc9$var$isConsonant(glyphs[j]));\n    }\n  }\n}\n\nfunction $7826f90f6f0cecc9$var$finalReordering(font, glyphs, plan) {\n  let indicConfig = plan.indicConfig;\n  let features = font._layoutEngine.engine.GSUBProcessor.features;\n\n  for (let start = 0, end = $7826f90f6f0cecc9$var$nextSyllable(glyphs, 0); start < glyphs.length; start = end, end = $7826f90f6f0cecc9$var$nextSyllable(glyphs, start)) {\n    // 4. Final reordering:\n    //\n    // After the localized forms and basic shaping forms GSUB features have been\n    // applied (see below), the shaping engine performs some final glyph\n    // reordering before applying all the remaining font features to the entire\n    // cluster.\n    let tryPref = !!features.pref; // Find base again\n\n    let base = start;\n\n    for (; base < end; base++) if (glyphs[base].shaperInfo.position >= (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Base_C) {\n      if (tryPref && base + 1 < end) {\n        for (let i = base + 1; i < end; i++) if (glyphs[i].features.pref) {\n          if (!(glyphs[i].substituted && glyphs[i].isLigated && !glyphs[i].isMultiplied)) {\n            // Ok, this was a 'pref' candidate but didn't form any.\n            // Base is around here...\n            base = i;\n\n            while (base < end && $7826f90f6f0cecc9$var$isHalantOrCoeng(glyphs[base])) base++;\n\n            glyphs[base].shaperInfo.position = (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).BASE_C;\n            tryPref = false;\n          }\n\n          break;\n        }\n      } // For Malayalam, skip over unformed below- (but NOT post-) forms.\n\n\n      if (plan.unicodeScript === 'Malayalam') for (let i = base + 1; i < end; i++) {\n        while (i < end && $7826f90f6f0cecc9$var$isJoiner(glyphs[i])) i++;\n\n        if (i === end || !$7826f90f6f0cecc9$var$isHalantOrCoeng(glyphs[i])) break;\n        i++; // Skip halant.\n\n        while (i < end && $7826f90f6f0cecc9$var$isJoiner(glyphs[i])) i++;\n\n        if (i < end && $7826f90f6f0cecc9$var$isConsonant(glyphs[i]) && glyphs[i].shaperInfo.position === (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Below_C) {\n          base = i;\n          glyphs[base].shaperInfo.position = (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Base_C;\n        }\n      }\n      if (start < base && glyphs[base].shaperInfo.position > (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Base_C) base--;\n      break;\n    }\n\n    if (base === end && start < base && glyphs[base - 1].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).ZWJ) base--;\n    if (base < end) while (start < base && glyphs[base].shaperInfo.category & ((0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).N | (0, $90a9d3398ee54fe5$export$ca9599b2a300afc))) base--; // o Reorder matras:\n    //\n    // If a pre-base matra character had been reordered before applying basic\n    // features, the glyph can be moved closer to the main consonant based on\n    // whether half-forms had been formed. Actual position for the matra is\n    // defined as “after last standalone halant glyph, after initial matra\n    // position and before the main consonant”. If ZWJ or ZWNJ follow this\n    // halant, position is moved after it.\n    //\n\n    if (start + 1 < end && start < base) {\n      // If we lost track of base, alas, position before last thingy.\n      let newPos = base === end ? base - 2 : base - 1; // Malayalam / Tamil do not have \"half\" forms or explicit virama forms.\n      // The glyphs formed by 'half' are Chillus or ligated explicit viramas.\n      // We want to position matra after them.\n\n      if (plan.unicodeScript !== 'Malayalam' && plan.unicodeScript !== 'Tamil') {\n        while (newPos > start && !(glyphs[newPos].shaperInfo.category & ((0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).M | (0, $90a9d3398ee54fe5$export$ca9599b2a300afc)))) newPos--; // If we found no Halant we are done.\n        // Otherwise only proceed if the Halant does\n        // not belong to the Matra itself!\n\n\n        if ($7826f90f6f0cecc9$var$isHalantOrCoeng(glyphs[newPos]) && glyphs[newPos].shaperInfo.position !== (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Pre_M) // If ZWJ or ZWNJ follow this halant, position is moved after it.\n          {\n            if (newPos + 1 < end && $7826f90f6f0cecc9$var$isJoiner(glyphs[newPos + 1])) newPos++;\n          } else newPos = start; // No move.\n\n      }\n\n      if (start < newPos && glyphs[newPos].shaperInfo.position !== (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Pre_M) {\n        // Now go see if there's actually any matras...\n        for (let i = newPos; i > start; i--) if (glyphs[i - 1].shaperInfo.position === (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Pre_M) {\n          let oldPos = i - 1;\n          if (oldPos < base && base <= newPos) base--;\n          let tmp = glyphs[oldPos];\n          glyphs.splice(oldPos, 0, ...glyphs.splice(oldPos + 1, newPos - oldPos));\n          glyphs[newPos] = tmp;\n          newPos--;\n        }\n      }\n    } // o Reorder reph:\n    //\n    // Reph’s original position is always at the beginning of the syllable,\n    // (i.e. it is not reordered at the character reordering stage). However,\n    // it will be reordered according to the basic-forms shaping results.\n    // Possible positions for reph, depending on the script, are; after main,\n    // before post-base consonant forms, and after post-base consonant forms.\n    // Two cases:\n    //\n    // - If repha is encoded as a sequence of characters (Ra,H or Ra,H,ZWJ), then\n    //   we should only move it if the sequence ligated to the repha form.\n    //\n    // - If repha is encoded separately and in the logical position, we should only\n    //   move it if it did NOT ligate.  If it ligated, it's probably the font trying\n    //   to make it work without the reordering.\n\n\n    if (start + 1 < end && glyphs[start].shaperInfo.position === (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Ra_To_Become_Reph && glyphs[start].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).Repha !== (glyphs[start].isLigated && !glyphs[start].isMultiplied)) {\n      let newRephPos;\n      let rephPos = indicConfig.rephPos;\n      let found = false; // 1. If reph should be positioned after post-base consonant forms,\n      //    proceed to step 5.\n\n      if (rephPos !== (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).After_Post) {\n        //  2. If the reph repositioning class is not after post-base: target\n        //     position is after the first explicit halant glyph between the\n        //     first post-reph consonant and last main consonant. If ZWJ or ZWNJ\n        //     are following this halant, position is moved after it. If such\n        //     position is found, this is the target position. Otherwise,\n        //     proceed to the next step.\n        //\n        //     Note: in old-implementation fonts, where classifications were\n        //     fixed in shaping engine, there was no case where reph position\n        //     will be found on this step.\n        newRephPos = start + 1;\n\n        while (newRephPos < base && !$7826f90f6f0cecc9$var$isHalantOrCoeng(glyphs[newRephPos])) newRephPos++;\n\n        if (newRephPos < base && $7826f90f6f0cecc9$var$isHalantOrCoeng(glyphs[newRephPos])) {\n          // ->If ZWJ or ZWNJ are following this halant, position is moved after it.\n          if (newRephPos + 1 < base && $7826f90f6f0cecc9$var$isJoiner(glyphs[newRephPos + 1])) newRephPos++;\n          found = true;\n        } // 3. If reph should be repositioned after the main consonant: find the\n        //    first consonant not ligated with main, or find the first\n        //    consonant that is not a potential pre-base reordering Ra.\n\n\n        if (!found && rephPos === (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).After_Main) {\n          newRephPos = base;\n\n          while (newRephPos + 1 < end && glyphs[newRephPos + 1].shaperInfo.position <= (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).After_Main) newRephPos++;\n\n          found = newRephPos < end;\n        } // 4. If reph should be positioned before post-base consonant, find\n        //    first post-base classified consonant not ligated with main. If no\n        //    consonant is found, the target position should be before the\n        //    first matra, syllable modifier sign or vedic sign.\n        //\n        // This is our take on what step 4 is trying to say (and failing, BADLY).\n\n\n        if (!found && rephPos === (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).After_Sub) {\n          newRephPos = base;\n\n          while (newRephPos + 1 < end && !(glyphs[newRephPos + 1].shaperInfo.position & ((0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Post_C | (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).After_Post | (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).SMVD))) newRephPos++;\n\n          found = newRephPos < end;\n        }\n      } //  5. If no consonant is found in steps 3 or 4, move reph to a position\n      //     immediately before the first post-base matra, syllable modifier\n      //     sign or vedic sign that has a reordering class after the intended\n      //     reph position. For example, if the reordering position for reph\n      //     is post-main, it will skip above-base matras that also have a\n      //     post-main position.\n\n\n      if (!found) {\n        // Copied from step 2.\n        newRephPos = start + 1;\n\n        while (newRephPos < base && !$7826f90f6f0cecc9$var$isHalantOrCoeng(glyphs[newRephPos])) newRephPos++;\n\n        if (newRephPos < base && $7826f90f6f0cecc9$var$isHalantOrCoeng(glyphs[newRephPos])) {\n          // ->If ZWJ or ZWNJ are following this halant, position is moved after it.\n          if (newRephPos + 1 < base && $7826f90f6f0cecc9$var$isJoiner(glyphs[newRephPos + 1])) newRephPos++;\n          found = true;\n        }\n      } // 6. Otherwise, reorder reph to the end of the syllable.\n\n\n      if (!found) {\n        newRephPos = end - 1;\n\n        while (newRephPos > start && glyphs[newRephPos].shaperInfo.position === (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).SMVD) newRephPos--; // If the Reph is to be ending up after a Matra,Halant sequence,\n        // position it before that Halant so it can interact with the Matra.\n        // However, if it's a plain Consonant,Halant we shouldn't do that.\n        // Uniscribe doesn't do this.\n        // TEST: U+0930,U+094D,U+0915,U+094B,U+094D\n\n\n        if ($7826f90f6f0cecc9$var$isHalantOrCoeng(glyphs[newRephPos])) {\n          for (let i = base + 1; i < newRephPos; i++) if (glyphs[i].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).M) newRephPos--;\n        }\n      }\n\n      let reph = glyphs[start];\n      glyphs.splice(start, 0, ...glyphs.splice(start + 1, newRephPos - start));\n      glyphs[newRephPos] = reph;\n      if (start < base && base <= newRephPos) base--;\n    } // o Reorder pre-base reordering consonants:\n    //\n    // If a pre-base reordering consonant is found, reorder it according to\n    // the following rules:\n\n\n    if (tryPref && base + 1 < end) {\n      for (let i = base + 1; i < end; i++) if (glyphs[i].features.pref) {\n        // 1. Only reorder a glyph produced by substitution during application\n        //    of the <pref> feature. (Note that a font may shape a Ra consonant with\n        //    the feature generally but block it in certain contexts.)\n        // Note: We just check that something got substituted.  We don't check that\n        // the <pref> feature actually did it...\n        //\n        // Reorder pref only if it ligated.\n        if (glyphs[i].isLigated && !glyphs[i].isMultiplied) {\n          // 2. Try to find a target position the same way as for pre-base matra.\n          //    If it is found, reorder pre-base consonant glyph.\n          //\n          // 3. If position is not found, reorder immediately before main\n          //    consonant.\n          let newPos = base; // Malayalam / Tamil do not have \"half\" forms or explicit virama forms.\n          // The glyphs formed by 'half' are Chillus or ligated explicit viramas.\n          // We want to position matra after them.\n\n          if (plan.unicodeScript !== 'Malayalam' && plan.unicodeScript !== 'Tamil') {\n            while (newPos > start && !(glyphs[newPos - 1].shaperInfo.category & ((0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).M | (0, $90a9d3398ee54fe5$export$ca9599b2a300afc)))) newPos--; // In Khmer coeng model, a H,Ra can go *after* matras.  If it goes after a\n            // split matra, it should be reordered to *before* the left part of such matra.\n\n\n            if (newPos > start && glyphs[newPos - 1].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).M) {\n              let oldPos = i;\n\n              for (let j = base + 1; j < oldPos; j++) if (glyphs[j].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).M) {\n                newPos--;\n                break;\n              }\n            }\n          }\n\n          if (newPos > start && $7826f90f6f0cecc9$var$isHalantOrCoeng(glyphs[newPos - 1])) // -> If ZWJ or ZWNJ follow this halant, position is moved after it.\n            {\n              if (newPos < end && $7826f90f6f0cecc9$var$isJoiner(glyphs[newPos])) newPos++;\n            }\n\n          let oldPos = i;\n          let tmp = glyphs[oldPos];\n          glyphs.splice(newPos + 1, 0, ...glyphs.splice(newPos, oldPos - newPos));\n          glyphs[newPos] = tmp;\n          if (newPos <= base && base < oldPos) base++;\n        }\n\n        break;\n      }\n    } // Apply 'init' to the Left Matra if it's a word start.\n\n\n    if (glyphs[start].shaperInfo.position === (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Pre_M && (!start || !/Cf|Mn/.test((0, $6uUbQ$getCategory)(glyphs[start - 1].codePoints[0])))) glyphs[start].features.init = true;\n  }\n}\n\nfunction $7826f90f6f0cecc9$var$nextSyllable(glyphs, start) {\n  if (start >= glyphs.length) return start;\n  let syllable = glyphs[start].shaperInfo.syllable;\n\n  while (++start < glyphs.length && glyphs[start].shaperInfo.syllable === syllable);\n\n  return start;\n}\n\nconst {\n  categories: $7ab494fe977143c6$var$categories,\n  decompositions: $7ab494fe977143c6$var$decompositions\n} = (0, /*@__PURE__*/$parcel$interopDefault($aa333a9607471296$exports));\nconst $7ab494fe977143c6$var$trie = new (0, $6uUbQ$unicodetrie)((0, $12727730ddfc8bfe$export$94fdf11bafc8de6b)(\"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\"));\nconst $7ab494fe977143c6$var$stateMachine = new (0, $6uUbQ$dfa)((0, /*@__PURE__*/$parcel$interopDefault($aa333a9607471296$exports)));\n\nclass $7ab494fe977143c6$export$2e2bcd8739ae039 extends (0, $649970d87335b30f$export$2e2bcd8739ae039) {\n  static planFeatures(plan) {\n    plan.addStage($7ab494fe977143c6$var$setupSyllables); // Default glyph pre-processing group\n\n    plan.addStage(['locl', 'ccmp', 'nukt', 'akhn']); // Reordering group\n\n    plan.addStage($7ab494fe977143c6$var$clearSubstitutionFlags);\n    plan.addStage(['rphf'], false);\n    plan.addStage($7ab494fe977143c6$var$recordRphf);\n    plan.addStage($7ab494fe977143c6$var$clearSubstitutionFlags);\n    plan.addStage(['pref']);\n    plan.addStage($7ab494fe977143c6$var$recordPref); // Orthographic unit shaping group\n\n    plan.addStage(['rkrf', 'abvf', 'blwf', 'half', 'pstf', 'vatu', 'cjct']);\n    plan.addStage($7ab494fe977143c6$var$reorder); // Topographical features\n    // Scripts that need this are handled by the Arabic shaper, not implemented here for now.\n    // plan.addStage(['isol', 'init', 'medi', 'fina', 'med2', 'fin2', 'fin3'], false);\n    // Standard topographic presentation and positional feature application\n\n    plan.addStage(['abvs', 'blws', 'pres', 'psts', 'dist', 'abvm', 'blwm']);\n  }\n\n  static assignFeatures(plan, glyphs) {\n    // Decompose split vowels\n    // TODO: do this in a more general unicode normalizer\n    for (let i = glyphs.length - 1; i >= 0; i--) {\n      let codepoint = glyphs[i].codePoints[0];\n\n      if ($7ab494fe977143c6$var$decompositions[codepoint]) {\n        let decomposed = $7ab494fe977143c6$var$decompositions[codepoint].map(c => {\n          let g = plan.font.glyphForCodePoint(c);\n          return new (0, $10e7b257e1a9a756$export$2e2bcd8739ae039)(plan.font, g.id, [c], glyphs[i].features);\n        });\n        glyphs.splice(i, 1, ...decomposed);\n      }\n    }\n  }\n\n}\n\n(0, $6uUbQ$_)($7ab494fe977143c6$export$2e2bcd8739ae039, \"zeroMarkWidths\", 'BEFORE_GPOS');\n\nfunction $7ab494fe977143c6$var$useCategory(glyph) {\n  return $7ab494fe977143c6$var$trie.get(glyph.codePoints[0]);\n}\n\nclass $7ab494fe977143c6$var$USEInfo {\n  constructor(category, syllableType, syllable) {\n    this.category = category;\n    this.syllableType = syllableType;\n    this.syllable = syllable;\n  }\n\n}\n\nfunction $7ab494fe977143c6$var$setupSyllables(font, glyphs) {\n  let syllable = 0;\n\n  for (let [start, end, tags] of $7ab494fe977143c6$var$stateMachine.match(glyphs.map($7ab494fe977143c6$var$useCategory))) {\n    ++syllable; // Create shaper info\n\n    for (let i = start; i <= end; i++) glyphs[i].shaperInfo = new $7ab494fe977143c6$var$USEInfo($7ab494fe977143c6$var$categories[$7ab494fe977143c6$var$useCategory(glyphs[i])], tags[0], syllable); // Assign rphf feature\n\n\n    let limit = glyphs[start].shaperInfo.category === 'R' ? 1 : Math.min(3, end - start);\n\n    for (let i = start; i < start + limit; i++) glyphs[i].features.rphf = true;\n  }\n}\n\nfunction $7ab494fe977143c6$var$clearSubstitutionFlags(font, glyphs) {\n  for (let glyph of glyphs) glyph.substituted = false;\n}\n\nfunction $7ab494fe977143c6$var$recordRphf(font, glyphs) {\n  for (let glyph of glyphs) if (glyph.substituted && glyph.features.rphf) // Mark a substituted repha.\n    glyph.shaperInfo.category = 'R';\n}\n\nfunction $7ab494fe977143c6$var$recordPref(font, glyphs) {\n  for (let glyph of glyphs) if (glyph.substituted) // Mark a substituted pref as VPre, as they behave the same way.\n    glyph.shaperInfo.category = 'VPre';\n}\n\nfunction $7ab494fe977143c6$var$reorder(font, glyphs) {\n  let dottedCircle = font.glyphForCodePoint(0x25cc).id;\n\n  for (let start = 0, end = $7ab494fe977143c6$var$nextSyllable(glyphs, 0); start < glyphs.length; start = end, end = $7ab494fe977143c6$var$nextSyllable(glyphs, start)) {\n    let i, j;\n    let info = glyphs[start].shaperInfo;\n    let type = info.syllableType; // Only a few syllable types need reordering.\n\n    if (type !== 'virama_terminated_cluster' && type !== 'standard_cluster' && type !== 'broken_cluster') continue; // Insert a dotted circle glyph in broken clusters.\n\n    if (type === 'broken_cluster' && dottedCircle) {\n      let g = new (0, $10e7b257e1a9a756$export$2e2bcd8739ae039)(font, dottedCircle, [0x25cc]);\n      g.shaperInfo = info; // Insert after possible Repha.\n\n      for (i = start; i < end && glyphs[i].shaperInfo.category === 'R'; i++);\n\n      glyphs.splice(++i, 0, g);\n      end++;\n    } // Move things forward.\n\n\n    if (info.category === 'R' && end - start > 1) // Got a repha. Reorder it to after first base, before first halant.\n      for (i = start + 1; i < end; i++) {\n        info = glyphs[i].shaperInfo;\n\n        if ($7ab494fe977143c6$var$isBase(info) || $7ab494fe977143c6$var$isHalant(glyphs[i])) {\n          // If we hit a halant, move before it; otherwise it's a base: move to it's\n          // place, and shift things in between backward.\n          if ($7ab494fe977143c6$var$isHalant(glyphs[i])) i--;\n          glyphs.splice(start, 0, ...glyphs.splice(start + 1, i - start), glyphs[i]);\n          break;\n        }\n      } // Move things back.\n\n    for (i = start, j = end; i < end; i++) {\n      info = glyphs[i].shaperInfo;\n      if ($7ab494fe977143c6$var$isBase(info) || $7ab494fe977143c6$var$isHalant(glyphs[i])) // If we hit a halant, move after it; otherwise it's a base: move to it's\n        // place, and shift things in between backward.\n        j = $7ab494fe977143c6$var$isHalant(glyphs[i]) ? i + 1 : i;else if ((info.category === 'VPre' || info.category === 'VMPre') && j < i) glyphs.splice(j, 1, glyphs[i], ...glyphs.splice(j, i - j));\n    }\n  }\n}\n\nfunction $7ab494fe977143c6$var$nextSyllable(glyphs, start) {\n  if (start >= glyphs.length) return start;\n  let syllable = glyphs[start].shaperInfo.syllable;\n\n  while (++start < glyphs.length && glyphs[start].shaperInfo.syllable === syllable);\n\n  return start;\n}\n\nfunction $7ab494fe977143c6$var$isHalant(glyph) {\n  return glyph.shaperInfo.category === 'H' && !glyph.isLigated;\n}\n\nfunction $7ab494fe977143c6$var$isBase(info) {\n  return info.category === 'B' || info.category === 'GB';\n}\n\nconst $102b6fe50f1d50b4$var$SHAPERS = {\n  arab: (0, $764eb544bbe1ccf0$export$2e2bcd8739ae039),\n  mong: (0, $764eb544bbe1ccf0$export$2e2bcd8739ae039),\n  syrc: (0, $764eb544bbe1ccf0$export$2e2bcd8739ae039),\n  'nko ': (0, $764eb544bbe1ccf0$export$2e2bcd8739ae039),\n  phag: (0, $764eb544bbe1ccf0$export$2e2bcd8739ae039),\n  mand: (0, $764eb544bbe1ccf0$export$2e2bcd8739ae039),\n  mani: (0, $764eb544bbe1ccf0$export$2e2bcd8739ae039),\n  phlp: (0, $764eb544bbe1ccf0$export$2e2bcd8739ae039),\n  hang: (0, $e1c6bbc8cb416f8c$export$2e2bcd8739ae039),\n  bng2: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n  beng: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n  dev2: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n  deva: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n  gjr2: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n  gujr: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n  guru: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n  gur2: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n  knda: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n  knd2: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n  mlm2: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n  mlym: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n  ory2: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n  orya: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n  taml: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n  tml2: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n  telu: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n  tel2: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n  khmr: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n  bali: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  batk: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  brah: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  bugi: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  buhd: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  cakm: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  cham: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  dupl: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  egyp: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  gran: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  hano: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  java: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  kthi: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  kali: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  khar: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  khoj: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  sind: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  lepc: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  limb: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  mahj: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  // mand: UniversalShaper, // Mandaic\n  // mani: UniversalShaper, // Manichaean\n  mtei: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  modi: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  // mong: UniversalShaper, // Mongolian\n  // 'nko ': UniversalShaper, // N’Ko\n  hmng: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  // phag: UniversalShaper, // Phags-pa\n  // phlp: UniversalShaper, // Psalter Pahlavi\n  rjng: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  saur: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  shrd: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  sidd: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  sinh: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n  sund: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  sylo: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  tglg: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  tagb: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  tale: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  lana: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  tavt: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  takr: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  tibt: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  tfng: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  tirh: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n  latn: (0, $649970d87335b30f$export$2e2bcd8739ae039),\n  DFLT: (0, $649970d87335b30f$export$2e2bcd8739ae039 // Default\n  )\n};\n\nfunction $102b6fe50f1d50b4$export$7877a478dd30fd3d(script) {\n  if (!Array.isArray(script)) script = [script];\n\n  for (let s of script) {\n    let shaper = $102b6fe50f1d50b4$var$SHAPERS[s];\n    if (shaper) return shaper;\n  }\n\n  return 0, $649970d87335b30f$export$2e2bcd8739ae039;\n}\n\nclass $0a876c45f1f7c41c$export$2e2bcd8739ae039 extends (0, $a83b9c36aaa94fd3$export$2e2bcd8739ae039) {\n  applyLookup(lookupType, table) {\n    switch (lookupType) {\n      case 1:\n        {\n          let index = this.coverageIndex(table.coverage);\n          if (index === -1) return false;\n          let glyph = this.glyphIterator.cur;\n\n          switch (table.version) {\n            case 1:\n              glyph.id = glyph.id + table.deltaGlyphID & 0xffff;\n              break;\n\n            case 2:\n              glyph.id = table.substitute.get(index);\n              break;\n          }\n\n          return true;\n        }\n\n      case 2:\n        {\n          let index = this.coverageIndex(table.coverage);\n\n          if (index !== -1) {\n            let sequence = table.sequences.get(index);\n\n            if (sequence.length === 0) {\n              // If the sequence length is zero, delete the glyph.\n              // The OpenType spec disallows this, but seems like Harfbuzz and Uniscribe allow it.\n              this.glyphs.splice(this.glyphIterator.index, 1);\n              return true;\n            }\n\n            this.glyphIterator.cur.id = sequence[0];\n            this.glyphIterator.cur.ligatureComponent = 0;\n            let features = this.glyphIterator.cur.features;\n            let curGlyph = this.glyphIterator.cur;\n            let replacement = sequence.slice(1).map((gid, i) => {\n              let glyph = new (0, $10e7b257e1a9a756$export$2e2bcd8739ae039)(this.font, gid, undefined, features);\n              glyph.shaperInfo = curGlyph.shaperInfo;\n              glyph.isLigated = curGlyph.isLigated;\n              glyph.ligatureComponent = i + 1;\n              glyph.substituted = true;\n              glyph.isMultiplied = true;\n              return glyph;\n            });\n            this.glyphs.splice(this.glyphIterator.index + 1, 0, ...replacement);\n            return true;\n          }\n\n          return false;\n        }\n\n      case 3:\n        {\n          let index = this.coverageIndex(table.coverage);\n\n          if (index !== -1) {\n            let USER_INDEX = 0; // TODO\n\n            this.glyphIterator.cur.id = table.alternateSet.get(index)[USER_INDEX];\n            return true;\n          }\n\n          return false;\n        }\n\n      case 4:\n        {\n          let index = this.coverageIndex(table.coverage);\n          if (index === -1) return false;\n\n          for (let ligature of table.ligatureSets.get(index)) {\n            let matched = this.sequenceMatchIndices(1, ligature.components);\n            if (!matched) continue;\n            let curGlyph = this.glyphIterator.cur; // Concatenate all of the characters the new ligature will represent\n\n            let characters = curGlyph.codePoints.slice();\n\n            for (let index of matched) characters.push(...this.glyphs[index].codePoints); // Create the replacement ligature glyph\n\n\n            let ligatureGlyph = new (0, $10e7b257e1a9a756$export$2e2bcd8739ae039)(this.font, ligature.glyph, characters, curGlyph.features);\n            ligatureGlyph.shaperInfo = curGlyph.shaperInfo;\n            ligatureGlyph.isLigated = true;\n            ligatureGlyph.substituted = true; // From Harfbuzz:\n            // - If it *is* a mark ligature, we don't allocate a new ligature id, and leave\n            //   the ligature to keep its old ligature id.  This will allow it to attach to\n            //   a base ligature in GPOS.  Eg. if the sequence is: LAM,LAM,SHADDA,FATHA,HEH,\n            //   and LAM,LAM,HEH for a ligature, they will leave SHADDA and FATHA with a\n            //   ligature id and component value of 2.  Then if SHADDA,FATHA form a ligature\n            //   later, we don't want them to lose their ligature id/component, otherwise\n            //   GPOS will fail to correctly position the mark ligature on top of the\n            //   LAM,LAM,HEH ligature. See https://bugzilla.gnome.org/show_bug.cgi?id=676343\n            //\n            // - If a ligature is formed of components that some of which are also ligatures\n            //   themselves, and those ligature components had marks attached to *their*\n            //   components, we have to attach the marks to the new ligature component\n            //   positions!  Now *that*'s tricky!  And these marks may be following the\n            //   last component of the whole sequence, so we should loop forward looking\n            //   for them and update them.\n            //\n            //   Eg. the sequence is LAM,LAM,SHADDA,FATHA,HEH, and the font first forms a\n            //   'calt' ligature of LAM,HEH, leaving the SHADDA and FATHA with a ligature\n            //   id and component == 1.  Now, during 'liga', the LAM and the LAM-HEH ligature\n            //   form a LAM-LAM-HEH ligature.  We need to reassign the SHADDA and FATHA to\n            //   the new ligature with a component value of 2.\n            //\n            //   This in fact happened to a font...  See https://bugzilla.gnome.org/show_bug.cgi?id=437633\n\n            let isMarkLigature = curGlyph.isMark;\n\n            for (let i = 0; i < matched.length && isMarkLigature; i++) isMarkLigature = this.glyphs[matched[i]].isMark;\n\n            ligatureGlyph.ligatureID = isMarkLigature ? null : this.ligatureID++;\n            let lastLigID = curGlyph.ligatureID;\n            let lastNumComps = curGlyph.codePoints.length;\n            let curComps = lastNumComps;\n            let idx = this.glyphIterator.index + 1; // Set ligatureID and ligatureComponent on glyphs that were skipped in the matched sequence.\n            // This allows GPOS to attach marks to the correct ligature components.\n\n            for (let matchIndex of matched) {\n              // Don't assign new ligature components for mark ligatures (see above)\n              if (isMarkLigature) idx = matchIndex;else while (idx < matchIndex) {\n                var ligatureComponent = curComps - lastNumComps + Math.min(this.glyphs[idx].ligatureComponent || 1, lastNumComps);\n                this.glyphs[idx].ligatureID = ligatureGlyph.ligatureID;\n                this.glyphs[idx].ligatureComponent = ligatureComponent;\n                idx++;\n              }\n              lastLigID = this.glyphs[idx].ligatureID;\n              lastNumComps = this.glyphs[idx].codePoints.length;\n              curComps += lastNumComps;\n              idx++; // skip base glyph\n            } // Adjust ligature components for any marks following\n\n\n            if (lastLigID && !isMarkLigature) for (let i = idx; i < this.glyphs.length; i++) {\n              if (this.glyphs[i].ligatureID === lastLigID) {\n                var ligatureComponent = curComps - lastNumComps + Math.min(this.glyphs[i].ligatureComponent || 1, lastNumComps);\n                this.glyphs[i].ligatureComponent = ligatureComponent;\n              } else break;\n            } // Delete the matched glyphs, and replace the current glyph with the ligature glyph\n\n            for (let i = matched.length - 1; i >= 0; i--) this.glyphs.splice(matched[i], 1);\n\n            this.glyphs[this.glyphIterator.index] = ligatureGlyph;\n            return true;\n          }\n\n          return false;\n        }\n\n      case 5:\n        return this.applyContext(table);\n\n      case 6:\n        return this.applyChainingContext(table);\n\n      case 7:\n        return this.applyLookup(table.lookupType, table.extension);\n\n      default:\n        throw new Error(`GSUB lookupType ${lookupType} is not supported`);\n    }\n  }\n\n}\n\nclass $c96c93587d49c14d$export$2e2bcd8739ae039 extends (0, $a83b9c36aaa94fd3$export$2e2bcd8739ae039) {\n  applyPositionValue(sequenceIndex, value) {\n    let position = this.positions[this.glyphIterator.peekIndex(sequenceIndex)];\n    if (value.xAdvance != null) position.xAdvance += value.xAdvance;\n    if (value.yAdvance != null) position.yAdvance += value.yAdvance;\n    if (value.xPlacement != null) position.xOffset += value.xPlacement;\n    if (value.yPlacement != null) position.yOffset += value.yPlacement; // Adjustments for font variations\n\n    let variationProcessor = this.font._variationProcessor;\n    let variationStore = this.font.GDEF && this.font.GDEF.itemVariationStore;\n\n    if (variationProcessor && variationStore) {\n      if (value.xPlaDevice) position.xOffset += variationProcessor.getDelta(variationStore, value.xPlaDevice.a, value.xPlaDevice.b);\n      if (value.yPlaDevice) position.yOffset += variationProcessor.getDelta(variationStore, value.yPlaDevice.a, value.yPlaDevice.b);\n      if (value.xAdvDevice) position.xAdvance += variationProcessor.getDelta(variationStore, value.xAdvDevice.a, value.xAdvDevice.b);\n      if (value.yAdvDevice) position.yAdvance += variationProcessor.getDelta(variationStore, value.yAdvDevice.a, value.yAdvDevice.b);\n    } // TODO: device tables\n\n  }\n\n  applyLookup(lookupType, table) {\n    switch (lookupType) {\n      case 1:\n        {\n          let index = this.coverageIndex(table.coverage);\n          if (index === -1) return false;\n\n          switch (table.version) {\n            case 1:\n              this.applyPositionValue(0, table.value);\n              break;\n\n            case 2:\n              this.applyPositionValue(0, table.values.get(index));\n              break;\n          }\n\n          return true;\n        }\n\n      case 2:\n        {\n          let nextGlyph = this.glyphIterator.peek();\n          if (!nextGlyph) return false;\n          let index = this.coverageIndex(table.coverage);\n          if (index === -1) return false;\n\n          switch (table.version) {\n            case 1:\n              let set = table.pairSets.get(index);\n\n              for (let pair of set) if (pair.secondGlyph === nextGlyph.id) {\n                this.applyPositionValue(0, pair.value1);\n                this.applyPositionValue(1, pair.value2);\n                return true;\n              }\n\n              return false;\n\n            case 2:\n              let class1 = this.getClassID(this.glyphIterator.cur.id, table.classDef1);\n              let class2 = this.getClassID(nextGlyph.id, table.classDef2);\n              if (class1 === -1 || class2 === -1) return false;\n              var pair = table.classRecords.get(class1).get(class2);\n              this.applyPositionValue(0, pair.value1);\n              this.applyPositionValue(1, pair.value2);\n              return true;\n          }\n        }\n\n      case 3:\n        {\n          let nextIndex = this.glyphIterator.peekIndex();\n          let nextGlyph = this.glyphs[nextIndex];\n          if (!nextGlyph) return false;\n          let curRecord = table.entryExitRecords[this.coverageIndex(table.coverage)];\n          if (!curRecord || !curRecord.exitAnchor) return false;\n          let nextRecord = table.entryExitRecords[this.coverageIndex(table.coverage, nextGlyph.id)];\n          if (!nextRecord || !nextRecord.entryAnchor) return false;\n          let entry = this.getAnchor(nextRecord.entryAnchor);\n          let exit = this.getAnchor(curRecord.exitAnchor);\n          let cur = this.positions[this.glyphIterator.index];\n          let next = this.positions[nextIndex];\n          let d;\n\n          switch (this.direction) {\n            case 'ltr':\n              cur.xAdvance = exit.x + cur.xOffset;\n              d = entry.x + next.xOffset;\n              next.xAdvance -= d;\n              next.xOffset -= d;\n              break;\n\n            case 'rtl':\n              d = exit.x + cur.xOffset;\n              cur.xAdvance -= d;\n              cur.xOffset -= d;\n              next.xAdvance = entry.x + next.xOffset;\n              break;\n          }\n\n          if (this.glyphIterator.flags.rightToLeft) {\n            this.glyphIterator.cur.cursiveAttachment = nextIndex;\n            cur.yOffset = entry.y - exit.y;\n          } else {\n            nextGlyph.cursiveAttachment = this.glyphIterator.index;\n            cur.yOffset = exit.y - entry.y;\n          }\n\n          return true;\n        }\n\n      case 4:\n        {\n          let markIndex = this.coverageIndex(table.markCoverage);\n          if (markIndex === -1) return false; // search backward for a base glyph\n\n          let baseGlyphIndex = this.glyphIterator.index;\n\n          while (--baseGlyphIndex >= 0 && (this.glyphs[baseGlyphIndex].isMark || this.glyphs[baseGlyphIndex].ligatureComponent > 0));\n\n          if (baseGlyphIndex < 0) return false;\n          let baseIndex = this.coverageIndex(table.baseCoverage, this.glyphs[baseGlyphIndex].id);\n          if (baseIndex === -1) return false;\n          let markRecord = table.markArray[markIndex];\n          let baseAnchor = table.baseArray[baseIndex][markRecord.class];\n          this.applyAnchor(markRecord, baseAnchor, baseGlyphIndex);\n          return true;\n        }\n\n      case 5:\n        {\n          let markIndex = this.coverageIndex(table.markCoverage);\n          if (markIndex === -1) return false; // search backward for a base glyph\n\n          let baseGlyphIndex = this.glyphIterator.index;\n\n          while (--baseGlyphIndex >= 0 && this.glyphs[baseGlyphIndex].isMark);\n\n          if (baseGlyphIndex < 0) return false;\n          let ligIndex = this.coverageIndex(table.ligatureCoverage, this.glyphs[baseGlyphIndex].id);\n          if (ligIndex === -1) return false;\n          let ligAttach = table.ligatureArray[ligIndex];\n          let markGlyph = this.glyphIterator.cur;\n          let ligGlyph = this.glyphs[baseGlyphIndex];\n          let compIndex = ligGlyph.ligatureID && ligGlyph.ligatureID === markGlyph.ligatureID && markGlyph.ligatureComponent > 0 ? Math.min(markGlyph.ligatureComponent, ligGlyph.codePoints.length) - 1 : ligGlyph.codePoints.length - 1;\n          let markRecord = table.markArray[markIndex];\n          let baseAnchor = ligAttach[compIndex][markRecord.class];\n          this.applyAnchor(markRecord, baseAnchor, baseGlyphIndex);\n          return true;\n        }\n\n      case 6:\n        {\n          let mark1Index = this.coverageIndex(table.mark1Coverage);\n          if (mark1Index === -1) return false; // get the previous mark to attach to\n\n          let prevIndex = this.glyphIterator.peekIndex(-1);\n          let prev = this.glyphs[prevIndex];\n          if (!prev || !prev.isMark) return false;\n          let cur = this.glyphIterator.cur; // The following logic was borrowed from Harfbuzz\n\n          let good = false;\n\n          if (cur.ligatureID === prev.ligatureID) {\n            if (!cur.ligatureID) good = true;else if (cur.ligatureComponent === prev.ligatureComponent) good = true;\n          } else // If ligature ids don't match, it may be the case that one of the marks\n            // itself is a ligature, in which case match.\n            if (cur.ligatureID && !cur.ligatureComponent || prev.ligatureID && !prev.ligatureComponent) good = true;\n\n          if (!good) return false;\n          let mark2Index = this.coverageIndex(table.mark2Coverage, prev.id);\n          if (mark2Index === -1) return false;\n          let markRecord = table.mark1Array[mark1Index];\n          let baseAnchor = table.mark2Array[mark2Index][markRecord.class];\n          this.applyAnchor(markRecord, baseAnchor, prevIndex);\n          return true;\n        }\n\n      case 7:\n        return this.applyContext(table);\n\n      case 8:\n        return this.applyChainingContext(table);\n\n      case 9:\n        return this.applyLookup(table.lookupType, table.extension);\n\n      default:\n        throw new Error(`Unsupported GPOS table: ${lookupType}`);\n    }\n  }\n\n  applyAnchor(markRecord, baseAnchor, baseGlyphIndex) {\n    let baseCoords = this.getAnchor(baseAnchor);\n    let markCoords = this.getAnchor(markRecord.markAnchor);\n    let basePos = this.positions[baseGlyphIndex];\n    let markPos = this.positions[this.glyphIterator.index];\n    markPos.xOffset = baseCoords.x - markCoords.x;\n    markPos.yOffset = baseCoords.y - markCoords.y;\n    this.glyphIterator.cur.markAttachment = baseGlyphIndex;\n  }\n\n  getAnchor(anchor) {\n    // TODO: contour point, device tables\n    let x = anchor.xCoordinate;\n    let y = anchor.yCoordinate; // Adjustments for font variations\n\n    let variationProcessor = this.font._variationProcessor;\n    let variationStore = this.font.GDEF && this.font.GDEF.itemVariationStore;\n\n    if (variationProcessor && variationStore) {\n      if (anchor.xDeviceTable) x += variationProcessor.getDelta(variationStore, anchor.xDeviceTable.a, anchor.xDeviceTable.b);\n      if (anchor.yDeviceTable) y += variationProcessor.getDelta(variationStore, anchor.yDeviceTable.a, anchor.yDeviceTable.b);\n    }\n\n    return {\n      x: x,\n      y: y\n    };\n  }\n\n  applyFeatures(userFeatures, glyphs, advances) {\n    super.applyFeatures(userFeatures, glyphs, advances);\n\n    for (var i = 0; i < this.glyphs.length; i++) this.fixCursiveAttachment(i);\n\n    this.fixMarkAttachment();\n  }\n\n  fixCursiveAttachment(i) {\n    let glyph = this.glyphs[i];\n\n    if (glyph.cursiveAttachment != null) {\n      let j = glyph.cursiveAttachment;\n      glyph.cursiveAttachment = null;\n      this.fixCursiveAttachment(j);\n      this.positions[i].yOffset += this.positions[j].yOffset;\n    }\n  }\n\n  fixMarkAttachment() {\n    for (let i = 0; i < this.glyphs.length; i++) {\n      let glyph = this.glyphs[i];\n\n      if (glyph.markAttachment != null) {\n        let j = glyph.markAttachment;\n        this.positions[i].xOffset += this.positions[j].xOffset;\n        this.positions[i].yOffset += this.positions[j].yOffset;\n        if (this.direction === 'ltr') for (let k = j; k < i; k++) {\n          this.positions[i].xOffset -= this.positions[k].xAdvance;\n          this.positions[i].yOffset -= this.positions[k].yAdvance;\n        } else for (let k = j + 1; k < i + 1; k++) {\n          this.positions[i].xOffset += this.positions[k].xAdvance;\n          this.positions[i].yOffset += this.positions[k].yAdvance;\n        }\n      }\n    }\n  }\n\n}\n\nclass $a62492810de27e3d$export$2e2bcd8739ae039 {\n  setup(glyphRun) {\n    // Map glyphs to GlyphInfo objects so data can be passed between\n    // GSUB and GPOS without mutating the real (shared) Glyph objects.\n    this.glyphInfos = glyphRun.glyphs.map(glyph => new (0, $10e7b257e1a9a756$export$2e2bcd8739ae039)(this.font, glyph.id, [...glyph.codePoints])); // Select a script based on what is available in GSUB/GPOS.\n\n    let script = null;\n    if (this.GPOSProcessor) script = this.GPOSProcessor.selectScript(glyphRun.script, glyphRun.language, glyphRun.direction);\n    if (this.GSUBProcessor) script = this.GSUBProcessor.selectScript(glyphRun.script, glyphRun.language, glyphRun.direction); // Choose a shaper based on the script, and setup a shaping plan.\n    // This determines which features to apply to which glyphs.\n\n    this.shaper = $102b6fe50f1d50b4$export$7877a478dd30fd3d(script);\n    this.plan = new (0, $94d7a73bd2edfc9a$export$2e2bcd8739ae039)(this.font, script, glyphRun.direction);\n    this.shaper.plan(this.plan, this.glyphInfos, glyphRun.features); // Assign chosen features to output glyph run\n\n    for (let key in this.plan.allFeatures) glyphRun.features[key] = true;\n  }\n\n  substitute(glyphRun) {\n    if (this.GSUBProcessor) {\n      this.plan.process(this.GSUBProcessor, this.glyphInfos); // Map glyph infos back to normal Glyph objects\n\n      glyphRun.glyphs = this.glyphInfos.map(glyphInfo => this.font.getGlyph(glyphInfo.id, glyphInfo.codePoints));\n    }\n  }\n\n  position(glyphRun) {\n    if (this.shaper.zeroMarkWidths === 'BEFORE_GPOS') this.zeroMarkAdvances(glyphRun.positions);\n    if (this.GPOSProcessor) this.plan.process(this.GPOSProcessor, this.glyphInfos, glyphRun.positions);\n    if (this.shaper.zeroMarkWidths === 'AFTER_GPOS') this.zeroMarkAdvances(glyphRun.positions); // Reverse the glyphs and positions if the script is right-to-left\n\n    if (glyphRun.direction === 'rtl') {\n      glyphRun.glyphs.reverse();\n      glyphRun.positions.reverse();\n    }\n\n    return this.GPOSProcessor && this.GPOSProcessor.features;\n  }\n\n  zeroMarkAdvances(positions) {\n    for (let i = 0; i < this.glyphInfos.length; i++) if (this.glyphInfos[i].isMark) {\n      positions[i].xAdvance = 0;\n      positions[i].yAdvance = 0;\n    }\n  }\n\n  cleanup() {\n    this.glyphInfos = null;\n    this.plan = null;\n    this.shaper = null;\n  }\n\n  getAvailableFeatures(script, language) {\n    let features = [];\n\n    if (this.GSUBProcessor) {\n      this.GSUBProcessor.selectScript(script, language);\n      features.push(...Object.keys(this.GSUBProcessor.features));\n    }\n\n    if (this.GPOSProcessor) {\n      this.GPOSProcessor.selectScript(script, language);\n      features.push(...Object.keys(this.GPOSProcessor.features));\n    }\n\n    return features;\n  }\n\n  constructor(font) {\n    this.font = font;\n    this.glyphInfos = null;\n    this.plan = null;\n    this.GSUBProcessor = null;\n    this.GPOSProcessor = null;\n    this.fallbackPosition = true;\n    if (font.GSUB) this.GSUBProcessor = new (0, $0a876c45f1f7c41c$export$2e2bcd8739ae039)(font, font.GSUB);\n    if (font.GPOS) this.GPOSProcessor = new (0, $c96c93587d49c14d$export$2e2bcd8739ae039)(font, font.GPOS);\n  }\n\n}\n\nclass $4c0a7fa5df7a9ab1$export$2e2bcd8739ae039 {\n  layout(string, features, script, language, direction) {\n    // Make the features parameter optional\n    if (typeof features === 'string') {\n      direction = language;\n      language = script;\n      script = features;\n      features = [];\n    } // Map string to glyphs if needed\n\n\n    if (typeof string === 'string') {\n      // Attempt to detect the script from the string if not provided.\n      if (script == null) script = $130d1a642ebcd2b7$export$e5cb25e204fb8450(string);\n      var glyphs = this.font.glyphsForString(string);\n    } else {\n      // Attempt to detect the script from the glyph code points if not provided.\n      if (script == null) {\n        let codePoints = [];\n\n        for (let glyph of string) codePoints.push(...glyph.codePoints);\n\n        script = $130d1a642ebcd2b7$export$16fab0757cfc223d(codePoints);\n      }\n\n      var glyphs = string;\n    }\n\n    let glyphRun = new (0, $be07b3e97a42687a$export$2e2bcd8739ae039)(glyphs, features, script, language, direction); // Return early if there are no glyphs\n\n    if (glyphs.length === 0) {\n      glyphRun.positions = [];\n      return glyphRun;\n    } // Setup the advanced layout engine\n\n\n    if (this.engine && this.engine.setup) this.engine.setup(glyphRun); // Substitute and position the glyphs\n\n    this.substitute(glyphRun);\n    this.position(glyphRun);\n    this.hideDefaultIgnorables(glyphRun.glyphs, glyphRun.positions); // Let the layout engine clean up any state it might have\n\n    if (this.engine && this.engine.cleanup) this.engine.cleanup();\n    return glyphRun;\n  }\n\n  substitute(glyphRun) {\n    // Call the advanced layout engine to make substitutions\n    if (this.engine && this.engine.substitute) this.engine.substitute(glyphRun);\n  }\n\n  position(glyphRun) {\n    // Get initial glyph positions\n    glyphRun.positions = glyphRun.glyphs.map(glyph => new (0, $1ac75d9a55b67f01$export$2e2bcd8739ae039)(glyph.advanceWidth));\n    let positioned = null; // Call the advanced layout engine. Returns the features applied.\n\n    if (this.engine && this.engine.position) positioned = this.engine.position(glyphRun); // if there is no GPOS table, use unicode properties to position marks.\n\n    if (!positioned && (!this.engine || this.engine.fallbackPosition)) {\n      if (!this.unicodeLayoutEngine) this.unicodeLayoutEngine = new (0, $0a4bdfeb6dfd6f5e$export$2e2bcd8739ae039)(this.font);\n      this.unicodeLayoutEngine.positionGlyphs(glyphRun.glyphs, glyphRun.positions);\n    } // if kerning is not supported by GPOS, do kerning with the TrueType/AAT kern table\n\n\n    if ((!positioned || !positioned.kern) && glyphRun.features.kern !== false && this.font.kern) {\n      if (!this.kernProcessor) this.kernProcessor = new (0, $0bba3a9db57637f3$export$2e2bcd8739ae039)(this.font);\n      this.kernProcessor.process(glyphRun.glyphs, glyphRun.positions);\n      glyphRun.features.kern = true;\n    }\n  }\n\n  hideDefaultIgnorables(glyphs, positions) {\n    let space = this.font.glyphForCodePoint(0x20);\n\n    for (let i = 0; i < glyphs.length; i++) if (this.isDefaultIgnorable(glyphs[i].codePoints[0])) {\n      glyphs[i] = space;\n      positions[i].xAdvance = 0;\n      positions[i].yAdvance = 0;\n    }\n  }\n\n  isDefaultIgnorable(ch) {\n    // From DerivedCoreProperties.txt in the Unicode database,\n    // minus U+115F, U+1160, U+3164 and U+FFA0, which is what\n    // Harfbuzz and Uniscribe do.\n    let plane = ch >> 16;\n    if (plane === 0) // BMP\n      switch (ch >> 8) {\n        case 0x00:\n          return ch === 0x00AD;\n\n        case 0x03:\n          return ch === 0x034F;\n\n        case 0x06:\n          return ch === 0x061C;\n\n        case 0x17:\n          return 0x17B4 <= ch && ch <= 0x17B5;\n\n        case 0x18:\n          return 0x180B <= ch && ch <= 0x180E;\n\n        case 0x20:\n          return 0x200B <= ch && ch <= 0x200F || 0x202A <= ch && ch <= 0x202E || 0x2060 <= ch && ch <= 0x206F;\n\n        case 0xFE:\n          return 0xFE00 <= ch && ch <= 0xFE0F || ch === 0xFEFF;\n\n        case 0xFF:\n          return 0xFFF0 <= ch && ch <= 0xFFF8;\n\n        default:\n          return false;\n      } else // Other planes\n      switch (plane) {\n        case 0x01:\n          return 0x1BCA0 <= ch && ch <= 0x1BCA3 || 0x1D173 <= ch && ch <= 0x1D17A;\n\n        case 0x0E:\n          return 0xE0000 <= ch && ch <= 0xE0FFF;\n\n        default:\n          return false;\n      }\n  }\n\n  getAvailableFeatures(script, language) {\n    let features = [];\n    if (this.engine) features.push(...this.engine.getAvailableFeatures(script, language));\n    if (this.font.kern && features.indexOf('kern') === -1) features.push('kern');\n    return features;\n  }\n\n  stringsForGlyph(gid) {\n    let result = new Set();\n\n    let codePoints = this.font._cmapProcessor.codePointsForGlyph(gid);\n\n    for (let codePoint of codePoints) result.add(String.fromCodePoint(codePoint));\n\n    if (this.engine && this.engine.stringsForGlyph) for (let string of this.engine.stringsForGlyph(gid)) result.add(string);\n    return Array.from(result);\n  }\n\n  constructor(font) {\n    this.font = font;\n    this.unicodeLayoutEngine = null;\n    this.kernProcessor = null; // Choose an advanced layout engine. We try the AAT morx table first since more\n    // scripts are currently supported because the shaping logic is built into the font.\n\n    if (this.font.morx) this.engine = new (0, $ba6dd74203be8728$export$2e2bcd8739ae039)(this.font);else if (this.font.GSUB || this.font.GPOS) this.engine = new (0, $a62492810de27e3d$export$2e2bcd8739ae039)(this.font);\n  }\n\n}\n\nconst $f43aec954cdfdf21$var$SVG_COMMANDS = {\n  moveTo: 'M',\n  lineTo: 'L',\n  quadraticCurveTo: 'Q',\n  bezierCurveTo: 'C',\n  closePath: 'Z'\n};\n\nclass $f43aec954cdfdf21$export$2e2bcd8739ae039 {\n  /**\n  * Compiles the path to a JavaScript function that can be applied with\n  * a graphics context in order to render the path.\n  * @return {string}\n  */\n  toFunction() {\n    return ctx => {\n      this.commands.forEach(c => {\n        return ctx[c.command].apply(ctx, c.args);\n      });\n    };\n  }\n  /**\n  * Converts the path to an SVG path data string\n  * @return {string}\n  */\n\n\n  toSVG() {\n    let cmds = this.commands.map(c => {\n      let args = c.args.map(arg => Math.round(arg * 100) / 100);\n      return `${$f43aec954cdfdf21$var$SVG_COMMANDS[c.command]}${args.join(' ')}`;\n    });\n    return cmds.join('');\n  }\n  /**\n  * Gets the \"control box\" of a path.\n  * This is like the bounding box, but it includes all points including\n  * control points of bezier segments and is much faster to compute than\n  * the real bounding box.\n  * @type {BBox}\n  */\n\n\n  get cbox() {\n    if (!this._cbox) {\n      let cbox = new (0, $f34600ab9d7f70d8$export$2e2bcd8739ae039)();\n\n      for (let command of this.commands) for (let i = 0; i < command.args.length; i += 2) cbox.addPoint(command.args[i], command.args[i + 1]);\n\n      this._cbox = Object.freeze(cbox);\n    }\n\n    return this._cbox;\n  }\n  /**\n  * Gets the exact bounding box of the path by evaluating curve segments.\n  * Slower to compute than the control box, but more accurate.\n  * @type {BBox}\n  */\n\n\n  get bbox() {\n    if (this._bbox) return this._bbox;\n    let bbox = new (0, $f34600ab9d7f70d8$export$2e2bcd8739ae039)();\n    let cx = 0,\n        cy = 0;\n\n    let f = t => Math.pow(1 - t, 3) * p0[i] + 3 * Math.pow(1 - t, 2) * t * p1[i] + 3 * (1 - t) * Math.pow(t, 2) * p2[i] + Math.pow(t, 3) * p3[i];\n\n    for (let c of this.commands) switch (c.command) {\n      case 'moveTo':\n      case 'lineTo':\n        let [x, y] = c.args;\n        bbox.addPoint(x, y);\n        cx = x;\n        cy = y;\n        break;\n\n      case 'quadraticCurveTo':\n      case 'bezierCurveTo':\n        if (c.command === 'quadraticCurveTo') {\n          // http://fontforge.org/bezier.html\n          var [qp1x, qp1y, p3x, p3y] = c.args;\n          var cp1x = cx + 2 / 3 * (qp1x - cx); // CP1 = QP0 + 2/3 * (QP1-QP0)\n\n          var cp1y = cy + 2 / 3 * (qp1y - cy);\n          var cp2x = p3x + 2 / 3 * (qp1x - p3x); // CP2 = QP2 + 2/3 * (QP1-QP2)\n\n          var cp2y = p3y + 2 / 3 * (qp1y - p3y);\n        } else var [cp1x, cp1y, cp2x, cp2y, p3x, p3y] = c.args; // http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html\n\n\n        bbox.addPoint(p3x, p3y);\n        var p0 = [cx, cy];\n        var p1 = [cp1x, cp1y];\n        var p2 = [cp2x, cp2y];\n        var p3 = [p3x, p3y];\n\n        for (var i = 0; i <= 1; i++) {\n          let b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];\n          let a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];\n          c = 3 * p1[i] - 3 * p0[i];\n\n          if (a === 0) {\n            if (b === 0) continue;\n            let t = -c / b;\n\n            if (0 < t && t < 1) {\n              if (i === 0) bbox.addPoint(f(t), bbox.maxY);else if (i === 1) bbox.addPoint(bbox.maxX, f(t));\n            }\n\n            continue;\n          }\n\n          let b2ac = Math.pow(b, 2) - 4 * c * a;\n          if (b2ac < 0) continue;\n          let t1 = (-b + Math.sqrt(b2ac)) / (2 * a);\n\n          if (0 < t1 && t1 < 1) {\n            if (i === 0) bbox.addPoint(f(t1), bbox.maxY);else if (i === 1) bbox.addPoint(bbox.maxX, f(t1));\n          }\n\n          let t2 = (-b - Math.sqrt(b2ac)) / (2 * a);\n\n          if (0 < t2 && t2 < 1) {\n            if (i === 0) bbox.addPoint(f(t2), bbox.maxY);else if (i === 1) bbox.addPoint(bbox.maxX, f(t2));\n          }\n        }\n\n        cx = p3x;\n        cy = p3y;\n        break;\n    }\n\n    return this._bbox = Object.freeze(bbox);\n  }\n  /**\n  * Applies a mapping function to each point in the path.\n  * @param {function} fn\n  * @return {Path}\n  */\n\n\n  mapPoints(fn) {\n    let path = new $f43aec954cdfdf21$export$2e2bcd8739ae039();\n\n    for (let c of this.commands) {\n      let args = [];\n\n      for (let i = 0; i < c.args.length; i += 2) {\n        let [x, y] = fn(c.args[i], c.args[i + 1]);\n        args.push(x, y);\n      }\n\n      path[c.command](...args);\n    }\n\n    return path;\n  }\n  /**\n  * Transforms the path by the given matrix.\n  */\n\n\n  transform(m0, m1, m2, m3, m4, m5) {\n    return this.mapPoints((x, y) => {\n      const tx = m0 * x + m2 * y + m4;\n      const ty = m1 * x + m3 * y + m5;\n      return [tx, ty];\n    });\n  }\n  /**\n  * Translates the path by the given offset.\n  */\n\n\n  translate(x, y) {\n    return this.transform(1, 0, 0, 1, x, y);\n  }\n  /**\n  * Rotates the path by the given angle (in radians).\n  */\n\n\n  rotate(angle) {\n    let cos = Math.cos(angle);\n    let sin = Math.sin(angle);\n    return this.transform(cos, sin, -sin, cos, 0, 0);\n  }\n  /**\n  * Scales the path.\n  */\n\n\n  scale(scaleX) {\n    let scaleY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : scaleX;\n    return this.transform(scaleX, 0, 0, scaleY, 0, 0);\n  }\n\n  constructor() {\n    this.commands = [];\n    this._bbox = null;\n    this._cbox = null;\n  }\n\n}\n\nfor (let command of ['moveTo', 'lineTo', 'quadraticCurveTo', 'bezierCurveTo', 'closePath']) $f43aec954cdfdf21$export$2e2bcd8739ae039.prototype[command] = function () {\n  this._bbox = this._cbox = null;\n\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n\n  this.commands.push({\n    command: command,\n    args: args\n  });\n  return this;\n};\n\nvar $7713b9b7b438dff8$export$2e2bcd8739ae039 = ['.notdef', '.null', 'nonmarkingreturn', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quotesingle', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore', 'grave', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', 'Adieresis', 'Aring', 'Ccedilla', 'Eacute', 'Ntilde', 'Odieresis', 'Udieresis', 'aacute', 'agrave', 'acircumflex', 'adieresis', 'atilde', 'aring', 'ccedilla', 'eacute', 'egrave', 'ecircumflex', 'edieresis', 'iacute', 'igrave', 'icircumflex', 'idieresis', 'ntilde', 'oacute', 'ograve', 'ocircumflex', 'odieresis', 'otilde', 'uacute', 'ugrave', 'ucircumflex', 'udieresis', 'dagger', 'degree', 'cent', 'sterling', 'section', 'bullet', 'paragraph', 'germandbls', 'registered', 'copyright', 'trademark', 'acute', 'dieresis', 'notequal', 'AE', 'Oslash', 'infinity', 'plusminus', 'lessequal', 'greaterequal', 'yen', 'mu', 'partialdiff', 'summation', 'product', 'pi', 'integral', 'ordfeminine', 'ordmasculine', 'Omega', 'ae', 'oslash', 'questiondown', 'exclamdown', 'logicalnot', 'radical', 'florin', 'approxequal', 'Delta', 'guillemotleft', 'guillemotright', 'ellipsis', 'nonbreakingspace', 'Agrave', 'Atilde', 'Otilde', 'OE', 'oe', 'endash', 'emdash', 'quotedblleft', 'quotedblright', 'quoteleft', 'quoteright', 'divide', 'lozenge', 'ydieresis', 'Ydieresis', 'fraction', 'currency', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'daggerdbl', 'periodcentered', 'quotesinglbase', 'quotedblbase', 'perthousand', 'Acircumflex', 'Ecircumflex', 'Aacute', 'Edieresis', 'Egrave', 'Iacute', 'Icircumflex', 'Idieresis', 'Igrave', 'Oacute', 'Ocircumflex', 'apple', 'Ograve', 'Uacute', 'Ucircumflex', 'Ugrave', 'dotlessi', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'ring', 'cedilla', 'hungarumlaut', 'ogonek', 'caron', 'Lslash', 'lslash', 'Scaron', 'scaron', 'Zcaron', 'zcaron', 'brokenbar', 'Eth', 'eth', 'Yacute', 'yacute', 'Thorn', 'thorn', 'minus', 'multiply', 'onesuperior', 'twosuperior', 'threesuperior', 'onehalf', 'onequarter', 'threequarters', 'franc', 'Gbreve', 'gbreve', 'Idotaccent', 'Scedilla', 'scedilla', 'Cacute', 'cacute', 'Ccaron', 'ccaron', 'dcroat'];\n\nclass $f92906be28e61769$export$2e2bcd8739ae039 {\n  _getPath() {\n    return new (0, $f43aec954cdfdf21$export$2e2bcd8739ae039)();\n  }\n\n  _getCBox() {\n    return this.path.cbox;\n  }\n\n  _getBBox() {\n    return this.path.bbox;\n  }\n\n  _getTableMetrics(table) {\n    if (this.id < table.metrics.length) return table.metrics.get(this.id);\n    let metric = table.metrics.get(table.metrics.length - 1);\n    let res = {\n      advance: metric ? metric.advance : 0,\n      bearing: table.bearings.get(this.id - table.metrics.length) || 0\n    };\n    return res;\n  }\n\n  _getMetrics(cbox) {\n    if (this._metrics) return this._metrics;\n\n    let {\n      advance: advanceWidth,\n      bearing: leftBearing\n    } = this._getTableMetrics(this._font.hmtx); // For vertical metrics, use vmtx if available, or fall back to global data from OS/2 or hhea\n\n\n    if (this._font.vmtx) var {\n      advance: advanceHeight,\n      bearing: topBearing\n    } = this._getTableMetrics(this._font.vmtx);else {\n      let os2;\n      if (typeof cbox === 'undefined' || cbox === null) ({\n        cbox: cbox\n      } = this);\n\n      if ((os2 = this._font['OS/2']) && os2.version > 0) {\n        var advanceHeight = Math.abs(os2.typoAscender - os2.typoDescender);\n        var topBearing = os2.typoAscender - cbox.maxY;\n      } else {\n        let {\n          hhea: hhea\n        } = this._font;\n        var advanceHeight = Math.abs(hhea.ascent - hhea.descent);\n        var topBearing = hhea.ascent - cbox.maxY;\n      }\n    }\n    if (this._font._variationProcessor && this._font.HVAR) advanceWidth += this._font._variationProcessor.getAdvanceAdjustment(this.id, this._font.HVAR);\n    return this._metrics = {\n      advanceWidth: advanceWidth,\n      advanceHeight: advanceHeight,\n      leftBearing: leftBearing,\n      topBearing: topBearing\n    };\n  }\n  /**\n  * The glyph’s control box.\n  * This is often the same as the bounding box, but is faster to compute.\n  * Because of the way bezier curves are defined, some of the control points\n  * can be outside of the bounding box. Where `bbox` takes this into account,\n  * `cbox` does not. Thus, cbox is less accurate, but faster to compute.\n  * See [here](http://www.freetype.org/freetype2/docs/glyphs/glyphs-6.html#section-2)\n  * for a more detailed description.\n  *\n  * @type {BBox}\n  */\n\n\n  get cbox() {\n    return this._getCBox();\n  }\n  /**\n  * The glyph’s bounding box, i.e. the rectangle that encloses the\n  * glyph outline as tightly as possible.\n  * @type {BBox}\n  */\n\n\n  get bbox() {\n    return this._getBBox();\n  }\n  /**\n  * A vector Path object representing the glyph outline.\n  * @type {Path}\n  */\n\n\n  get path() {\n    // Cache the path so we only decode it once\n    // Decoding is actually performed by subclasses\n    return this._getPath();\n  }\n  /**\n  * Returns a path scaled to the given font size.\n  * @param {number} size\n  * @return {Path}\n  */\n\n\n  getScaledPath(size) {\n    let scale = 1 / this._font.unitsPerEm * size;\n    return this.path.scale(scale);\n  }\n  /**\n  * The glyph's advance width.\n  * @type {number}\n  */\n\n\n  get advanceWidth() {\n    return this._getMetrics().advanceWidth;\n  }\n  /**\n  * The glyph's advance height.\n  * @type {number}\n  */\n\n\n  get advanceHeight() {\n    return this._getMetrics().advanceHeight;\n  }\n\n  get ligatureCaretPositions() {}\n\n  _getName() {\n    let {\n      post: post\n    } = this._font;\n    if (!post) return null;\n\n    switch (post.version) {\n      case 1:\n        return (0, $7713b9b7b438dff8$export$2e2bcd8739ae039)[this.id];\n\n      case 2:\n        let id = post.glyphNameIndex[this.id];\n        if (id < (0, $7713b9b7b438dff8$export$2e2bcd8739ae039).length) return (0, $7713b9b7b438dff8$export$2e2bcd8739ae039)[id];\n        return post.names[id - (0, $7713b9b7b438dff8$export$2e2bcd8739ae039).length];\n\n      case 2.5:\n        return (0, $7713b9b7b438dff8$export$2e2bcd8739ae039)[this.id + post.offsets[this.id]];\n\n      case 4:\n        return String.fromCharCode(post.map[this.id]);\n    }\n  }\n  /**\n  * The glyph's name\n  * @type {string}\n  */\n\n\n  get name() {\n    return this._getName();\n  }\n  /**\n  * Renders the glyph to the given graphics context, at the specified font size.\n  * @param {CanvasRenderingContext2d} ctx\n  * @param {number} size\n  */\n\n\n  render(ctx, size) {\n    ctx.save();\n    let scale = 1 / this._font.head.unitsPerEm * size;\n    ctx.scale(scale, scale);\n    let fn = this.path.toFunction();\n    fn(ctx);\n    ctx.fill();\n    ctx.restore();\n  }\n\n  constructor(id, codePoints, font) {\n    /**\n    * The glyph id in the font\n    * @type {number}\n    */\n    this.id = id;\n    /**\n    * An array of unicode code points that are represented by this glyph.\n    * There can be multiple code points in the case of ligatures and other glyphs\n    * that represent multiple visual characters.\n    * @type {number[]}\n    */\n\n    this.codePoints = codePoints;\n    this._font = font; // TODO: get this info from GDEF if available\n\n    this.isMark = this.codePoints.length > 0 && this.codePoints.every((0, $6uUbQ$isMark));\n    this.isLigature = this.codePoints.length > 1;\n  }\n\n}\n\n(0, $6uUbQ$_1)([(0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)], $f92906be28e61769$export$2e2bcd8739ae039.prototype, \"cbox\", null);\n(0, $6uUbQ$_1)([(0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)], $f92906be28e61769$export$2e2bcd8739ae039.prototype, \"bbox\", null);\n(0, $6uUbQ$_1)([(0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)], $f92906be28e61769$export$2e2bcd8739ae039.prototype, \"path\", null);\n(0, $6uUbQ$_1)([(0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)], $f92906be28e61769$export$2e2bcd8739ae039.prototype, \"advanceWidth\", null);\n(0, $6uUbQ$_1)([(0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)], $f92906be28e61769$export$2e2bcd8739ae039.prototype, \"advanceHeight\", null);\n(0, $6uUbQ$_1)([(0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)], $f92906be28e61769$export$2e2bcd8739ae039.prototype, \"name\", null); // The header for both simple and composite glyphs\n\nlet $69aac16029968692$var$GlyfHeader = new $6uUbQ$Struct({\n  numberOfContours: $6uUbQ$int16,\n  xMin: $6uUbQ$int16,\n  yMin: $6uUbQ$int16,\n  xMax: $6uUbQ$int16,\n  yMax: $6uUbQ$int16\n}); // Flags for simple glyphs\n\nconst $69aac16029968692$var$ON_CURVE = 1;\nconst $69aac16029968692$var$X_SHORT_VECTOR = 2;\nconst $69aac16029968692$var$Y_SHORT_VECTOR = 4;\nconst $69aac16029968692$var$REPEAT = 8;\nconst $69aac16029968692$var$SAME_X = 16;\nconst $69aac16029968692$var$SAME_Y = 32; // Flags for composite glyphs\n\nconst $69aac16029968692$var$ARG_1_AND_2_ARE_WORDS = 1;\nconst $69aac16029968692$var$ARGS_ARE_XY_VALUES = 2;\nconst $69aac16029968692$var$ROUND_XY_TO_GRID = 4;\nconst $69aac16029968692$var$WE_HAVE_A_SCALE = 8;\nconst $69aac16029968692$var$MORE_COMPONENTS = 32;\nconst $69aac16029968692$var$WE_HAVE_AN_X_AND_Y_SCALE = 64;\nconst $69aac16029968692$var$WE_HAVE_A_TWO_BY_TWO = 128;\nconst $69aac16029968692$var$WE_HAVE_INSTRUCTIONS = 256;\nconst $69aac16029968692$var$USE_MY_METRICS = 512;\nconst $69aac16029968692$var$OVERLAP_COMPOUND = 1024;\nconst $69aac16029968692$var$SCALED_COMPONENT_OFFSET = 2048;\nconst $69aac16029968692$var$UNSCALED_COMPONENT_OFFSET = 4096;\n\nclass $69aac16029968692$export$baf26146a414f24a {\n  copy() {\n    return new $69aac16029968692$export$baf26146a414f24a(this.onCurve, this.endContour, this.x, this.y);\n  }\n\n  constructor(onCurve, endContour) {\n    let x = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let y = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    this.onCurve = onCurve;\n    this.endContour = endContour;\n    this.x = x;\n    this.y = y;\n  }\n\n} // Represents a component in a composite glyph\n\n\nclass $69aac16029968692$var$Component {\n  constructor(glyphID, dx, dy) {\n    this.glyphID = glyphID;\n    this.dx = dx;\n    this.dy = dy;\n    this.pos = 0;\n    this.scaleX = this.scaleY = 1;\n    this.scale01 = this.scale10 = 0;\n  }\n\n}\n\nclass $69aac16029968692$export$2e2bcd8739ae039 extends (0, $f92906be28e61769$export$2e2bcd8739ae039) {\n  // Parses just the glyph header and returns the bounding box\n  _getCBox(internal) {\n    // We need to decode the glyph if variation processing is requested,\n    // so it's easier just to recompute the path's cbox after decoding.\n    if (this._font._variationProcessor && !internal) return this.path.cbox;\n\n    let stream = this._font._getTableStream('glyf');\n\n    stream.pos += this._font.loca.offsets[this.id];\n    let glyph = $69aac16029968692$var$GlyfHeader.decode(stream);\n    let cbox = new (0, $f34600ab9d7f70d8$export$2e2bcd8739ae039)(glyph.xMin, glyph.yMin, glyph.xMax, glyph.yMax);\n    return Object.freeze(cbox);\n  } // Parses a single glyph coordinate\n\n\n  _parseGlyphCoord(stream, prev, short, same) {\n    if (short) {\n      var val = stream.readUInt8();\n      if (!same) val = -val;\n      val += prev;\n    } else if (same) var val = prev;else var val = prev + stream.readInt16BE();\n\n    return val;\n  } // Decodes the glyph data into points for simple glyphs,\n  // or components for composite glyphs\n\n\n  _decode() {\n    let glyfPos = this._font.loca.offsets[this.id];\n    let nextPos = this._font.loca.offsets[this.id + 1]; // Nothing to do if there is no data for this glyph\n\n    if (glyfPos === nextPos) return null;\n\n    let stream = this._font._getTableStream('glyf');\n\n    stream.pos += glyfPos;\n    let startPos = stream.pos;\n    let glyph = $69aac16029968692$var$GlyfHeader.decode(stream);\n    if (glyph.numberOfContours > 0) this._decodeSimple(glyph, stream);else if (glyph.numberOfContours < 0) this._decodeComposite(glyph, stream, startPos);\n    return glyph;\n  }\n\n  _decodeSimple(glyph, stream) {\n    // this is a simple glyph\n    glyph.points = [];\n    let endPtsOfContours = new $6uUbQ$Array($6uUbQ$uint16, glyph.numberOfContours).decode(stream);\n    glyph.instructions = new $6uUbQ$Array($6uUbQ$uint8, $6uUbQ$uint16).decode(stream);\n    let flags = [];\n    let numCoords = endPtsOfContours[endPtsOfContours.length - 1] + 1;\n\n    while (flags.length < numCoords) {\n      var flag = stream.readUInt8();\n      flags.push(flag); // check for repeat flag\n\n      if (flag & $69aac16029968692$var$REPEAT) {\n        let count = stream.readUInt8();\n\n        for (let j = 0; j < count; j++) flags.push(flag);\n      }\n    }\n\n    for (var i = 0; i < flags.length; i++) {\n      var flag = flags[i];\n      let point = new $69aac16029968692$export$baf26146a414f24a(!!(flag & $69aac16029968692$var$ON_CURVE), endPtsOfContours.indexOf(i) >= 0, 0, 0);\n      glyph.points.push(point);\n    }\n\n    let px = 0;\n\n    for (var i = 0; i < flags.length; i++) {\n      var flag = flags[i];\n      glyph.points[i].x = px = this._parseGlyphCoord(stream, px, flag & $69aac16029968692$var$X_SHORT_VECTOR, flag & $69aac16029968692$var$SAME_X);\n    }\n\n    let py = 0;\n\n    for (var i = 0; i < flags.length; i++) {\n      var flag = flags[i];\n      glyph.points[i].y = py = this._parseGlyphCoord(stream, py, flag & $69aac16029968692$var$Y_SHORT_VECTOR, flag & $69aac16029968692$var$SAME_Y);\n    }\n\n    if (this._font._variationProcessor) {\n      let points = glyph.points.slice();\n      points.push(...this._getPhantomPoints(glyph));\n\n      this._font._variationProcessor.transformPoints(this.id, points);\n\n      glyph.phantomPoints = points.slice(-4);\n    }\n\n    return;\n  }\n\n  _decodeComposite(glyph, stream) {\n    let offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    // this is a composite glyph\n    glyph.components = [];\n    let haveInstructions = false;\n    let flags = $69aac16029968692$var$MORE_COMPONENTS;\n\n    while (flags & $69aac16029968692$var$MORE_COMPONENTS) {\n      flags = stream.readUInt16BE();\n      let gPos = stream.pos - offset;\n      let glyphID = stream.readUInt16BE();\n      if (!haveInstructions) haveInstructions = (flags & $69aac16029968692$var$WE_HAVE_INSTRUCTIONS) !== 0;\n\n      if (flags & $69aac16029968692$var$ARG_1_AND_2_ARE_WORDS) {\n        var dx = stream.readInt16BE();\n        var dy = stream.readInt16BE();\n      } else {\n        var dx = stream.readInt8();\n        var dy = stream.readInt8();\n      }\n\n      var component = new $69aac16029968692$var$Component(glyphID, dx, dy);\n      component.pos = gPos;\n      if (flags & $69aac16029968692$var$WE_HAVE_A_SCALE) // fixed number with 14 bits of fraction\n        component.scaleX = component.scaleY = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;else if (flags & $69aac16029968692$var$WE_HAVE_AN_X_AND_Y_SCALE) {\n        component.scaleX = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n        component.scaleY = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n      } else if (flags & $69aac16029968692$var$WE_HAVE_A_TWO_BY_TWO) {\n        component.scaleX = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n        component.scale01 = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n        component.scale10 = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n        component.scaleY = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n      }\n      glyph.components.push(component);\n    }\n\n    if (this._font._variationProcessor) {\n      let points = [];\n\n      for (let j = 0; j < glyph.components.length; j++) {\n        var component = glyph.components[j];\n        points.push(new $69aac16029968692$export$baf26146a414f24a(true, true, component.dx, component.dy));\n      }\n\n      points.push(...this._getPhantomPoints(glyph));\n\n      this._font._variationProcessor.transformPoints(this.id, points);\n\n      glyph.phantomPoints = points.splice(-4, 4);\n\n      for (let i = 0; i < points.length; i++) {\n        let point = points[i];\n        glyph.components[i].dx = point.x;\n        glyph.components[i].dy = point.y;\n      }\n    }\n\n    return haveInstructions;\n  }\n\n  _getPhantomPoints(glyph) {\n    let cbox = this._getCBox(true);\n\n    if (this._metrics == null) this._metrics = (0, $f92906be28e61769$export$2e2bcd8739ae039).prototype._getMetrics.call(this, cbox);\n    let {\n      advanceWidth: advanceWidth,\n      advanceHeight: advanceHeight,\n      leftBearing: leftBearing,\n      topBearing: topBearing\n    } = this._metrics;\n    return [new $69aac16029968692$export$baf26146a414f24a(false, true, glyph.xMin - leftBearing, 0), new $69aac16029968692$export$baf26146a414f24a(false, true, glyph.xMin - leftBearing + advanceWidth, 0), new $69aac16029968692$export$baf26146a414f24a(false, true, 0, glyph.yMax + topBearing), new $69aac16029968692$export$baf26146a414f24a(false, true, 0, glyph.yMax + topBearing + advanceHeight)];\n  } // Decodes font data, resolves composite glyphs, and returns an array of contours\n\n\n  _getContours() {\n    let glyph = this._decode();\n\n    if (!glyph) return [];\n    let points = [];\n    if (glyph.numberOfContours < 0) // resolve composite glyphs\n      for (let component of glyph.components) {\n        let contours = this._font.getGlyph(component.glyphID)._getContours();\n\n        for (let i = 0; i < contours.length; i++) {\n          let contour = contours[i];\n\n          for (let j = 0; j < contour.length; j++) {\n            let point = contour[j];\n            let x = point.x * component.scaleX + point.y * component.scale01 + component.dx;\n            let y = point.y * component.scaleY + point.x * component.scale10 + component.dy;\n            points.push(new $69aac16029968692$export$baf26146a414f24a(point.onCurve, point.endContour, x, y));\n          }\n        }\n      } else points = glyph.points || []; // Recompute and cache metrics if we performed variation processing, and don't have an HVAR table\n\n    if (glyph.phantomPoints && !this._font.directory.tables.HVAR) {\n      this._metrics.advanceWidth = glyph.phantomPoints[1].x - glyph.phantomPoints[0].x;\n      this._metrics.advanceHeight = glyph.phantomPoints[3].y - glyph.phantomPoints[2].y;\n      this._metrics.leftBearing = glyph.xMin - glyph.phantomPoints[0].x;\n      this._metrics.topBearing = glyph.phantomPoints[2].y - glyph.yMax;\n    }\n\n    let contours = [];\n    let cur = [];\n\n    for (let k = 0; k < points.length; k++) {\n      var point = points[k];\n      cur.push(point);\n\n      if (point.endContour) {\n        contours.push(cur);\n        cur = [];\n      }\n    }\n\n    return contours;\n  }\n\n  _getMetrics() {\n    if (this._metrics) return this._metrics;\n\n    let cbox = this._getCBox(true);\n\n    super._getMetrics(cbox);\n\n    if (this._font._variationProcessor && !this._font.HVAR) // No HVAR table, decode the glyph. This triggers recomputation of metrics.\n      this.path;\n    return this._metrics;\n  } // Converts contours to a Path object that can be rendered\n\n\n  _getPath() {\n    let contours = this._getContours();\n\n    let path = new (0, $f43aec954cdfdf21$export$2e2bcd8739ae039)();\n\n    for (let i = 0; i < contours.length; i++) {\n      let contour = contours[i];\n      let firstPt = contour[0];\n      let lastPt = contour[contour.length - 1];\n      let start = 0;\n\n      if (firstPt.onCurve) {\n        // The first point will be consumed by the moveTo command, so skip in the loop\n        var curvePt = null;\n        start = 1;\n      } else {\n        if (lastPt.onCurve) // Start at the last point if the first point is off curve and the last point is on curve\n          firstPt = lastPt;else // Start at the middle if both the first and last points are off curve\n          firstPt = new $69aac16029968692$export$baf26146a414f24a(false, false, (firstPt.x + lastPt.x) / 2, (firstPt.y + lastPt.y) / 2);\n        var curvePt = firstPt;\n      }\n\n      path.moveTo(firstPt.x, firstPt.y);\n\n      for (let j = start; j < contour.length; j++) {\n        let pt = contour[j];\n        let prevPt = j === 0 ? firstPt : contour[j - 1];\n        if (prevPt.onCurve && pt.onCurve) path.lineTo(pt.x, pt.y);else if (prevPt.onCurve && !pt.onCurve) var curvePt = pt;else if (!prevPt.onCurve && !pt.onCurve) {\n          let midX = (prevPt.x + pt.x) / 2;\n          let midY = (prevPt.y + pt.y) / 2;\n          path.quadraticCurveTo(prevPt.x, prevPt.y, midX, midY);\n          var curvePt = pt;\n        } else if (!prevPt.onCurve && pt.onCurve) {\n          path.quadraticCurveTo(curvePt.x, curvePt.y, pt.x, pt.y);\n          var curvePt = null;\n        } else throw new Error(\"Unknown TTF path state\");\n      } // Connect the first and last points\n\n\n      if (curvePt) path.quadraticCurveTo(curvePt.x, curvePt.y, firstPt.x, firstPt.y);\n      path.closePath();\n    }\n\n    return path;\n  }\n\n  constructor() {\n    super(...arguments);\n    (0, $6uUbQ$_)(this, \"type\", 'TTF');\n  }\n\n}\n\nclass $62cc5109c6101893$export$2e2bcd8739ae039 extends (0, $f92906be28e61769$export$2e2bcd8739ae039) {\n  _getName() {\n    if (this._font.CFF2) return super._getName();\n    return this._font['CFF '].getGlyphName(this.id);\n  }\n\n  bias(s) {\n    if (s.length < 1240) return 107;else if (s.length < 33900) return 1131;else return 32768;\n  }\n\n  _getPath() {\n    let cff = this._font.CFF2 || this._font['CFF '];\n    let {\n      stream: stream\n    } = cff;\n    let str = cff.topDict.CharStrings[this.id];\n    let end = str.offset + str.length;\n    stream.pos = str.offset;\n    let path = new (0, $f43aec954cdfdf21$export$2e2bcd8739ae039)();\n    let stack = [];\n    let trans = [];\n    let width = null;\n    let nStems = 0;\n    let x = 0,\n        y = 0;\n    let usedGsubrs;\n    let usedSubrs;\n    let open = false;\n    this._usedGsubrs = usedGsubrs = {};\n    this._usedSubrs = usedSubrs = {};\n    let gsubrs = cff.globalSubrIndex || [];\n    let gsubrsBias = this.bias(gsubrs);\n    let privateDict = cff.privateDictForGlyph(this.id) || {};\n    let subrs = privateDict.Subrs || [];\n    let subrsBias = this.bias(subrs);\n    let vstore = cff.topDict.vstore && cff.topDict.vstore.itemVariationStore;\n    let vsindex = privateDict.vsindex;\n    let variationProcessor = this._font._variationProcessor;\n\n    function checkWidth() {\n      if (width == null) width = stack.shift() + privateDict.nominalWidthX;\n    }\n\n    function parseStems() {\n      if (stack.length % 2 !== 0) checkWidth();\n      nStems += stack.length >> 1;\n      return stack.length = 0;\n    }\n\n    function moveTo(x, y) {\n      if (open) path.closePath();\n      path.moveTo(x, y);\n      open = true;\n    }\n\n    let parse = function () {\n      while (stream.pos < end) {\n        let op = stream.readUInt8();\n\n        if (op < 32) {\n          let index, subr, phase;\n          let c1x, c1y, c2x, c2y, c3x, c3y;\n          let c4x, c4y, c5x, c5y, c6x, c6y;\n          let pts;\n\n          switch (op) {\n            case 1:\n            case 3:\n            case 18:\n            case 23:\n              parseStems();\n              break;\n\n            case 4:\n              if (stack.length > 1) checkWidth();\n              y += stack.shift();\n              moveTo(x, y);\n              break;\n\n            case 5:\n              while (stack.length >= 2) {\n                x += stack.shift();\n                y += stack.shift();\n                path.lineTo(x, y);\n              }\n\n              break;\n\n            case 6:\n            case 7:\n              phase = op === 6;\n\n              while (stack.length >= 1) {\n                if (phase) x += stack.shift();else y += stack.shift();\n                path.lineTo(x, y);\n                phase = !phase;\n              }\n\n              break;\n\n            case 8:\n              while (stack.length > 0) {\n                c1x = x + stack.shift();\n                c1y = y + stack.shift();\n                c2x = c1x + stack.shift();\n                c2y = c1y + stack.shift();\n                x = c2x + stack.shift();\n                y = c2y + stack.shift();\n                path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);\n              }\n\n              break;\n\n            case 10:\n              index = stack.pop() + subrsBias;\n              subr = subrs[index];\n\n              if (subr) {\n                usedSubrs[index] = true;\n                let p = stream.pos;\n                let e = end;\n                stream.pos = subr.offset;\n                end = subr.offset + subr.length;\n                parse();\n                stream.pos = p;\n                end = e;\n              }\n\n              break;\n\n            case 11:\n              if (cff.version >= 2) break;\n              return;\n\n            case 14:\n              if (cff.version >= 2) break;\n              if (stack.length > 0) checkWidth();\n\n              if (open) {\n                path.closePath();\n                open = false;\n              }\n\n              break;\n\n            case 15:\n              if (cff.version < 2) throw new Error('vsindex operator not supported in CFF v1');\n              vsindex = stack.pop();\n              break;\n\n            case 16:\n              {\n                if (cff.version < 2) throw new Error('blend operator not supported in CFF v1');\n                if (!variationProcessor) throw new Error('blend operator in non-variation font');\n                let blendVector = variationProcessor.getBlendVector(vstore, vsindex);\n                let numBlends = stack.pop();\n                let numOperands = numBlends * blendVector.length;\n                let delta = stack.length - numOperands;\n                let base = delta - numBlends;\n\n                for (let i = 0; i < numBlends; i++) {\n                  let sum = stack[base + i];\n\n                  for (let j = 0; j < blendVector.length; j++) sum += blendVector[j] * stack[delta++];\n\n                  stack[base + i] = sum;\n                }\n\n                while (numOperands--) stack.pop();\n\n                break;\n              }\n\n            case 19:\n            case 20:\n              parseStems();\n              stream.pos += nStems + 7 >> 3;\n              break;\n\n            case 21:\n              if (stack.length > 2) checkWidth();\n              x += stack.shift();\n              y += stack.shift();\n              moveTo(x, y);\n              break;\n\n            case 22:\n              if (stack.length > 1) checkWidth();\n              x += stack.shift();\n              moveTo(x, y);\n              break;\n\n            case 24:\n              while (stack.length >= 8) {\n                c1x = x + stack.shift();\n                c1y = y + stack.shift();\n                c2x = c1x + stack.shift();\n                c2y = c1y + stack.shift();\n                x = c2x + stack.shift();\n                y = c2y + stack.shift();\n                path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);\n              }\n\n              x += stack.shift();\n              y += stack.shift();\n              path.lineTo(x, y);\n              break;\n\n            case 25:\n              while (stack.length >= 8) {\n                x += stack.shift();\n                y += stack.shift();\n                path.lineTo(x, y);\n              }\n\n              c1x = x + stack.shift();\n              c1y = y + stack.shift();\n              c2x = c1x + stack.shift();\n              c2y = c1y + stack.shift();\n              x = c2x + stack.shift();\n              y = c2y + stack.shift();\n              path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);\n              break;\n\n            case 26:\n              if (stack.length % 2) x += stack.shift();\n\n              while (stack.length >= 4) {\n                c1x = x;\n                c1y = y + stack.shift();\n                c2x = c1x + stack.shift();\n                c2y = c1y + stack.shift();\n                x = c2x;\n                y = c2y + stack.shift();\n                path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);\n              }\n\n              break;\n\n            case 27:\n              if (stack.length % 2) y += stack.shift();\n\n              while (stack.length >= 4) {\n                c1x = x + stack.shift();\n                c1y = y;\n                c2x = c1x + stack.shift();\n                c2y = c1y + stack.shift();\n                x = c2x + stack.shift();\n                y = c2y;\n                path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);\n              }\n\n              break;\n\n            case 28:\n              stack.push(stream.readInt16BE());\n              break;\n\n            case 29:\n              index = stack.pop() + gsubrsBias;\n              subr = gsubrs[index];\n\n              if (subr) {\n                usedGsubrs[index] = true;\n                let p = stream.pos;\n                let e = end;\n                stream.pos = subr.offset;\n                end = subr.offset + subr.length;\n                parse();\n                stream.pos = p;\n                end = e;\n              }\n\n              break;\n\n            case 30:\n            case 31:\n              phase = op === 31;\n\n              while (stack.length >= 4) {\n                if (phase) {\n                  c1x = x + stack.shift();\n                  c1y = y;\n                  c2x = c1x + stack.shift();\n                  c2y = c1y + stack.shift();\n                  y = c2y + stack.shift();\n                  x = c2x + (stack.length === 1 ? stack.shift() : 0);\n                } else {\n                  c1x = x;\n                  c1y = y + stack.shift();\n                  c2x = c1x + stack.shift();\n                  c2y = c1y + stack.shift();\n                  x = c2x + stack.shift();\n                  y = c2y + (stack.length === 1 ? stack.shift() : 0);\n                }\n\n                path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);\n                phase = !phase;\n              }\n\n              break;\n\n            case 12:\n              op = stream.readUInt8();\n\n              switch (op) {\n                case 3:\n                  let a = stack.pop();\n                  let b = stack.pop();\n                  stack.push(a && b ? 1 : 0);\n                  break;\n\n                case 4:\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(a || b ? 1 : 0);\n                  break;\n\n                case 5:\n                  a = stack.pop();\n                  stack.push(a ? 0 : 1);\n                  break;\n\n                case 9:\n                  a = stack.pop();\n                  stack.push(Math.abs(a));\n                  break;\n\n                case 10:\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(a + b);\n                  break;\n\n                case 11:\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(a - b);\n                  break;\n\n                case 12:\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(a / b);\n                  break;\n\n                case 14:\n                  a = stack.pop();\n                  stack.push(-a);\n                  break;\n\n                case 15:\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(a === b ? 1 : 0);\n                  break;\n\n                case 18:\n                  stack.pop();\n                  break;\n\n                case 20:\n                  let val = stack.pop();\n                  let idx = stack.pop();\n                  trans[idx] = val;\n                  break;\n\n                case 21:\n                  idx = stack.pop();\n                  stack.push(trans[idx] || 0);\n                  break;\n\n                case 22:\n                  let s1 = stack.pop();\n                  let s2 = stack.pop();\n                  let v1 = stack.pop();\n                  let v2 = stack.pop();\n                  stack.push(v1 <= v2 ? s1 : s2);\n                  break;\n\n                case 23:\n                  stack.push(Math.random());\n                  break;\n\n                case 24:\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(a * b);\n                  break;\n\n                case 26:\n                  a = stack.pop();\n                  stack.push(Math.sqrt(a));\n                  break;\n\n                case 27:\n                  a = stack.pop();\n                  stack.push(a, a);\n                  break;\n\n                case 28:\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(b, a);\n                  break;\n\n                case 29:\n                  idx = stack.pop();\n                  if (idx < 0) idx = 0;else if (idx > stack.length - 1) idx = stack.length - 1;\n                  stack.push(stack[idx]);\n                  break;\n\n                case 30:\n                  let n = stack.pop();\n                  let j = stack.pop();\n                  if (j >= 0) while (j > 0) {\n                    var t = stack[n - 1];\n\n                    for (let i = n - 2; i >= 0; i--) stack[i + 1] = stack[i];\n\n                    stack[0] = t;\n                    j--;\n                  } else while (j < 0) {\n                    var t = stack[0];\n\n                    for (let i = 0; i <= n; i++) stack[i] = stack[i + 1];\n\n                    stack[n - 1] = t;\n                    j++;\n                  }\n                  break;\n\n                case 34:\n                  c1x = x + stack.shift();\n                  c1y = y;\n                  c2x = c1x + stack.shift();\n                  c2y = c1y + stack.shift();\n                  c3x = c2x + stack.shift();\n                  c3y = c2y;\n                  c4x = c3x + stack.shift();\n                  c4y = c3y;\n                  c5x = c4x + stack.shift();\n                  c5y = c4y;\n                  c6x = c5x + stack.shift();\n                  c6y = c5y;\n                  x = c6x;\n                  y = c6y;\n                  path.bezierCurveTo(c1x, c1y, c2x, c2y, c3x, c3y);\n                  path.bezierCurveTo(c4x, c4y, c5x, c5y, c6x, c6y);\n                  break;\n\n                case 35:\n                  pts = [];\n\n                  for (let i = 0; i <= 5; i++) {\n                    x += stack.shift();\n                    y += stack.shift();\n                    pts.push(x, y);\n                  }\n\n                  path.bezierCurveTo(...pts.slice(0, 6));\n                  path.bezierCurveTo(...pts.slice(6));\n                  stack.shift(); // fd\n\n                  break;\n\n                case 36:\n                  c1x = x + stack.shift();\n                  c1y = y + stack.shift();\n                  c2x = c1x + stack.shift();\n                  c2y = c1y + stack.shift();\n                  c3x = c2x + stack.shift();\n                  c3y = c2y;\n                  c4x = c3x + stack.shift();\n                  c4y = c3y;\n                  c5x = c4x + stack.shift();\n                  c5y = c4y + stack.shift();\n                  c6x = c5x + stack.shift();\n                  c6y = c5y;\n                  x = c6x;\n                  y = c6y;\n                  path.bezierCurveTo(c1x, c1y, c2x, c2y, c3x, c3y);\n                  path.bezierCurveTo(c4x, c4y, c5x, c5y, c6x, c6y);\n                  break;\n\n                case 37:\n                  let startx = x;\n                  let starty = y;\n                  pts = [];\n\n                  for (let i = 0; i <= 4; i++) {\n                    x += stack.shift();\n                    y += stack.shift();\n                    pts.push(x, y);\n                  }\n\n                  if (Math.abs(x - startx) > Math.abs(y - starty)) {\n                    x += stack.shift();\n                    y = starty;\n                  } else {\n                    x = startx;\n                    y += stack.shift();\n                  }\n\n                  pts.push(x, y);\n                  path.bezierCurveTo(...pts.slice(0, 6));\n                  path.bezierCurveTo(...pts.slice(6));\n                  break;\n\n                default:\n                  throw new Error(`Unknown op: 12 ${op}`);\n              }\n\n              break;\n\n            default:\n              throw new Error(`Unknown op: ${op}`);\n          }\n        } else if (op < 247) stack.push(op - 139);else if (op < 251) {\n          var b1 = stream.readUInt8();\n          stack.push((op - 247) * 256 + b1 + 108);\n        } else if (op < 255) {\n          var b1 = stream.readUInt8();\n          stack.push(-(op - 251) * 256 - b1 - 108);\n        } else stack.push(stream.readInt32BE() / 65536);\n      }\n    };\n\n    parse();\n    if (open) path.closePath();\n    return path;\n  }\n\n  constructor() {\n    super(...arguments);\n    (0, $6uUbQ$_)(this, \"type\", 'CFF');\n  }\n\n}\n\nlet $25d8f049c222084c$var$SBIXImage = new $6uUbQ$Struct({\n  originX: $6uUbQ$uint16,\n  originY: $6uUbQ$uint16,\n  type: new $6uUbQ$String(4),\n  data: new $6uUbQ$Buffer(t => t.parent.buflen - t._currentOffset)\n});\n\nclass $25d8f049c222084c$export$2e2bcd8739ae039 extends (0, $69aac16029968692$export$2e2bcd8739ae039) {\n  /**\n  * Returns an object representing a glyph image at the given point size.\n  * The object has a data property with a Buffer containing the actual image data,\n  * along with the image type, and origin.\n  *\n  * @param {number} size\n  * @return {object}\n  */\n  getImageForSize(size) {\n    for (let i = 0; i < this._font.sbix.imageTables.length; i++) {\n      var table = this._font.sbix.imageTables[i];\n      if (table.ppem >= size) break;\n    }\n\n    let offsets = table.imageOffsets;\n    let start = offsets[this.id];\n    let end = offsets[this.id + 1];\n    if (start === end) return null;\n    this._font.stream.pos = start;\n    return $25d8f049c222084c$var$SBIXImage.decode(this._font.stream, {\n      buflen: end - start\n    });\n  }\n\n  render(ctx, size) {\n    let img = this.getImageForSize(size);\n\n    if (img != null) {\n      let scale = size / this._font.unitsPerEm;\n      ctx.image(img.data, {\n        height: size,\n        x: img.originX,\n        y: (this.bbox.minY - img.originY) * scale\n      });\n    }\n\n    if (this._font.sbix.flags.renderOutlines) super.render(ctx, size);\n  }\n\n  constructor() {\n    super(...arguments);\n    (0, $6uUbQ$_)(this, \"type\", 'SBIX');\n  }\n\n}\n\nclass $0d411f0165859681$var$COLRLayer {\n  constructor(glyph, color) {\n    this.glyph = glyph;\n    this.color = color;\n  }\n\n}\n\nclass $0d411f0165859681$export$2e2bcd8739ae039 extends (0, $f92906be28e61769$export$2e2bcd8739ae039) {\n  _getBBox() {\n    let bbox = new (0, $f34600ab9d7f70d8$export$2e2bcd8739ae039)();\n\n    for (let i = 0; i < this.layers.length; i++) {\n      let layer = this.layers[i];\n      let b = layer.glyph.bbox;\n      bbox.addPoint(b.minX, b.minY);\n      bbox.addPoint(b.maxX, b.maxY);\n    }\n\n    return bbox;\n  }\n  /**\n  * Returns an array of objects containing the glyph and color for\n  * each layer in the composite color glyph.\n  * @type {object[]}\n  */\n\n\n  get layers() {\n    let cpal = this._font.CPAL;\n    let colr = this._font.COLR;\n    let low = 0;\n    let high = colr.baseGlyphRecord.length - 1;\n\n    while (low <= high) {\n      let mid = low + high >> 1;\n      var rec = colr.baseGlyphRecord[mid];\n      if (this.id < rec.gid) high = mid - 1;else if (this.id > rec.gid) low = mid + 1;else {\n        var baseLayer = rec;\n        break;\n      }\n    } // if base glyph not found in COLR table,\n    // default to normal glyph from glyf or CFF\n\n\n    if (baseLayer == null) {\n      var g = this._font._getBaseGlyph(this.id);\n\n      var color = {\n        red: 0,\n        green: 0,\n        blue: 0,\n        alpha: 255\n      };\n      return [new $0d411f0165859681$var$COLRLayer(g, color)];\n    } // otherwise, return an array of all the layers\n\n\n    let layers = [];\n\n    for (let i = baseLayer.firstLayerIndex; i < baseLayer.firstLayerIndex + baseLayer.numLayers; i++) {\n      var rec = colr.layerRecords[i];\n      var color = cpal.colorRecords[rec.paletteIndex];\n\n      var g = this._font._getBaseGlyph(rec.gid);\n\n      layers.push(new $0d411f0165859681$var$COLRLayer(g, color));\n    }\n\n    return layers;\n  }\n\n  render(ctx, size) {\n    for (let {\n      glyph: glyph,\n      color: color\n    } of this.layers) {\n      ctx.fillColor([color.red, color.green, color.blue], color.alpha / 255 * 100);\n      glyph.render(ctx, size);\n    }\n\n    return;\n  }\n\n  constructor() {\n    super(...arguments);\n    (0, $6uUbQ$_)(this, \"type\", 'COLR');\n  }\n\n}\n\nconst $0bb840cac04e911b$var$TUPLES_SHARE_POINT_NUMBERS = 0x8000;\nconst $0bb840cac04e911b$var$TUPLE_COUNT_MASK = 0x0fff;\nconst $0bb840cac04e911b$var$EMBEDDED_TUPLE_COORD = 0x8000;\nconst $0bb840cac04e911b$var$INTERMEDIATE_TUPLE = 0x4000;\nconst $0bb840cac04e911b$var$PRIVATE_POINT_NUMBERS = 0x2000;\nconst $0bb840cac04e911b$var$TUPLE_INDEX_MASK = 0x0fff;\nconst $0bb840cac04e911b$var$POINTS_ARE_WORDS = 0x80;\nconst $0bb840cac04e911b$var$POINT_RUN_COUNT_MASK = 0x7f;\nconst $0bb840cac04e911b$var$DELTAS_ARE_ZERO = 0x80;\nconst $0bb840cac04e911b$var$DELTAS_ARE_WORDS = 0x40;\nconst $0bb840cac04e911b$var$DELTA_RUN_COUNT_MASK = 0x3f;\n\nclass $0bb840cac04e911b$export$2e2bcd8739ae039 {\n  normalizeCoords(coords) {\n    // the default mapping is linear along each axis, in two segments:\n    // from the minValue to defaultValue, and from defaultValue to maxValue.\n    let normalized = [];\n\n    for (var i = 0; i < this.font.fvar.axis.length; i++) {\n      let axis = this.font.fvar.axis[i];\n      if (coords[i] < axis.defaultValue) normalized.push((coords[i] - axis.defaultValue + Number.EPSILON) / (axis.defaultValue - axis.minValue + Number.EPSILON));else normalized.push((coords[i] - axis.defaultValue + Number.EPSILON) / (axis.maxValue - axis.defaultValue + Number.EPSILON));\n    } // if there is an avar table, the normalized value is calculated\n    // by interpolating between the two nearest mapped values.\n\n\n    if (this.font.avar) for (var i = 0; i < this.font.avar.segment.length; i++) {\n      let segment = this.font.avar.segment[i];\n\n      for (let j = 0; j < segment.correspondence.length; j++) {\n        let pair = segment.correspondence[j];\n\n        if (j >= 1 && normalized[i] < pair.fromCoord) {\n          let prev = segment.correspondence[j - 1];\n          normalized[i] = ((normalized[i] - prev.fromCoord) * (pair.toCoord - prev.toCoord) + Number.EPSILON) / (pair.fromCoord - prev.fromCoord + Number.EPSILON) + prev.toCoord;\n          break;\n        }\n      }\n    }\n    return normalized;\n  }\n\n  transformPoints(gid, glyphPoints) {\n    if (!this.font.fvar || !this.font.gvar) return;\n    let {\n      gvar: gvar\n    } = this.font;\n    if (gid >= gvar.glyphCount) return;\n    let offset = gvar.offsets[gid];\n    if (offset === gvar.offsets[gid + 1]) return; // Read the gvar data for this glyph\n\n    let {\n      stream: stream\n    } = this.font;\n    stream.pos = offset;\n    if (stream.pos >= stream.length) return;\n    let tupleCount = stream.readUInt16BE();\n    let offsetToData = offset + stream.readUInt16BE();\n\n    if (tupleCount & $0bb840cac04e911b$var$TUPLES_SHARE_POINT_NUMBERS) {\n      var here = stream.pos;\n      stream.pos = offsetToData;\n      var sharedPoints = this.decodePoints();\n      offsetToData = stream.pos;\n      stream.pos = here;\n    }\n\n    let origPoints = glyphPoints.map(pt => pt.copy());\n    tupleCount &= $0bb840cac04e911b$var$TUPLE_COUNT_MASK;\n\n    for (let i = 0; i < tupleCount; i++) {\n      let tupleDataSize = stream.readUInt16BE();\n      let tupleIndex = stream.readUInt16BE();\n\n      if (tupleIndex & $0bb840cac04e911b$var$EMBEDDED_TUPLE_COORD) {\n        var tupleCoords = [];\n\n        for (let a = 0; a < gvar.axisCount; a++) tupleCoords.push(stream.readInt16BE() / 16384);\n      } else {\n        if ((tupleIndex & $0bb840cac04e911b$var$TUPLE_INDEX_MASK) >= gvar.globalCoordCount) throw new Error('Invalid gvar table');\n        var tupleCoords = gvar.globalCoords[tupleIndex & $0bb840cac04e911b$var$TUPLE_INDEX_MASK];\n      }\n\n      if (tupleIndex & $0bb840cac04e911b$var$INTERMEDIATE_TUPLE) {\n        var startCoords = [];\n\n        for (let a = 0; a < gvar.axisCount; a++) startCoords.push(stream.readInt16BE() / 16384);\n\n        var endCoords = [];\n\n        for (let a = 0; a < gvar.axisCount; a++) endCoords.push(stream.readInt16BE() / 16384);\n      } // Get the factor at which to apply this tuple\n\n\n      let factor = this.tupleFactor(tupleIndex, tupleCoords, startCoords, endCoords);\n\n      if (factor === 0) {\n        offsetToData += tupleDataSize;\n        continue;\n      }\n\n      var here = stream.pos;\n      stream.pos = offsetToData;\n      if (tupleIndex & $0bb840cac04e911b$var$PRIVATE_POINT_NUMBERS) var points = this.decodePoints();else var points = sharedPoints; // points.length = 0 means there are deltas for all points\n\n      let nPoints = points.length === 0 ? glyphPoints.length : points.length;\n      let xDeltas = this.decodeDeltas(nPoints);\n      let yDeltas = this.decodeDeltas(nPoints);\n      if (points.length === 0) for (let i = 0; i < glyphPoints.length; i++) {\n        var point = glyphPoints[i];\n        point.x += Math.round(xDeltas[i] * factor);\n        point.y += Math.round(yDeltas[i] * factor);\n      } else {\n        let outPoints = origPoints.map(pt => pt.copy());\n        let hasDelta = glyphPoints.map(() => false);\n\n        for (let i = 0; i < points.length; i++) {\n          let idx = points[i];\n\n          if (idx < glyphPoints.length) {\n            let point = outPoints[idx];\n            hasDelta[idx] = true;\n            point.x += xDeltas[i] * factor;\n            point.y += yDeltas[i] * factor;\n          }\n        }\n\n        this.interpolateMissingDeltas(outPoints, origPoints, hasDelta);\n\n        for (let i = 0; i < glyphPoints.length; i++) {\n          let deltaX = outPoints[i].x - origPoints[i].x;\n          let deltaY = outPoints[i].y - origPoints[i].y;\n          glyphPoints[i].x = Math.round(glyphPoints[i].x + deltaX);\n          glyphPoints[i].y = Math.round(glyphPoints[i].y + deltaY);\n        }\n      }\n      offsetToData += tupleDataSize;\n      stream.pos = here;\n    }\n  }\n\n  decodePoints() {\n    let stream = this.font.stream;\n    let count = stream.readUInt8();\n    if (count & $0bb840cac04e911b$var$POINTS_ARE_WORDS) count = (count & $0bb840cac04e911b$var$POINT_RUN_COUNT_MASK) << 8 | stream.readUInt8();\n    let points = new Uint16Array(count);\n    let i = 0;\n    let point = 0;\n\n    while (i < count) {\n      let run = stream.readUInt8();\n      let runCount = (run & $0bb840cac04e911b$var$POINT_RUN_COUNT_MASK) + 1;\n      let fn = run & $0bb840cac04e911b$var$POINTS_ARE_WORDS ? stream.readUInt16 : stream.readUInt8;\n\n      for (let j = 0; j < runCount && i < count; j++) {\n        point += fn.call(stream);\n        points[i++] = point;\n      }\n    }\n\n    return points;\n  }\n\n  decodeDeltas(count) {\n    let stream = this.font.stream;\n    let i = 0;\n    let deltas = new Int16Array(count);\n\n    while (i < count) {\n      let run = stream.readUInt8();\n      let runCount = (run & $0bb840cac04e911b$var$DELTA_RUN_COUNT_MASK) + 1;\n      if (run & $0bb840cac04e911b$var$DELTAS_ARE_ZERO) i += runCount;else {\n        let fn = run & $0bb840cac04e911b$var$DELTAS_ARE_WORDS ? stream.readInt16BE : stream.readInt8;\n\n        for (let j = 0; j < runCount && i < count; j++) deltas[i++] = fn.call(stream);\n      }\n    }\n\n    return deltas;\n  }\n\n  tupleFactor(tupleIndex, tupleCoords, startCoords, endCoords) {\n    let normalized = this.normalizedCoords;\n    let {\n      gvar: gvar\n    } = this.font;\n    let factor = 1;\n\n    for (let i = 0; i < gvar.axisCount; i++) {\n      if (tupleCoords[i] === 0) continue;\n      if (normalized[i] === 0) return 0;\n\n      if ((tupleIndex & $0bb840cac04e911b$var$INTERMEDIATE_TUPLE) === 0) {\n        if (normalized[i] < Math.min(0, tupleCoords[i]) || normalized[i] > Math.max(0, tupleCoords[i])) return 0;\n        factor = (factor * normalized[i] + Number.EPSILON) / (tupleCoords[i] + Number.EPSILON);\n      } else {\n        if (normalized[i] < startCoords[i] || normalized[i] > endCoords[i]) return 0;else if (normalized[i] < tupleCoords[i]) factor = factor * (normalized[i] - startCoords[i] + Number.EPSILON) / (tupleCoords[i] - startCoords[i] + Number.EPSILON);else factor = factor * (endCoords[i] - normalized[i] + Number.EPSILON) / (endCoords[i] - tupleCoords[i] + Number.EPSILON);\n      }\n    }\n\n    return factor;\n  } // Interpolates points without delta values.\n  // Needed for the Ø and Q glyphs in Skia.\n  // Algorithm from Freetype.\n\n\n  interpolateMissingDeltas(points, inPoints, hasDelta) {\n    if (points.length === 0) return;\n    let point = 0;\n\n    while (point < points.length) {\n      let firstPoint = point; // find the end point of the contour\n\n      let endPoint = point;\n      let pt = points[endPoint];\n\n      while (!pt.endContour) pt = points[++endPoint]; // find the first point that has a delta\n\n\n      while (point <= endPoint && !hasDelta[point]) point++;\n\n      if (point > endPoint) continue;\n      let firstDelta = point;\n      let curDelta = point;\n      point++;\n\n      while (point <= endPoint) {\n        // find the next point with a delta, and interpolate intermediate points\n        if (hasDelta[point]) {\n          this.deltaInterpolate(curDelta + 1, point - 1, curDelta, point, inPoints, points);\n          curDelta = point;\n        }\n\n        point++;\n      } // shift contour if we only have a single delta\n\n\n      if (curDelta === firstDelta) this.deltaShift(firstPoint, endPoint, curDelta, inPoints, points);else {\n        // otherwise, handle the remaining points at the end and beginning of the contour\n        this.deltaInterpolate(curDelta + 1, endPoint, curDelta, firstDelta, inPoints, points);\n        if (firstDelta > 0) this.deltaInterpolate(firstPoint, firstDelta - 1, curDelta, firstDelta, inPoints, points);\n      }\n      point = endPoint + 1;\n    }\n  }\n\n  deltaInterpolate(p1, p2, ref1, ref2, inPoints, outPoints) {\n    if (p1 > p2) return;\n    let iterable = ['x', 'y'];\n\n    for (let i = 0; i < iterable.length; i++) {\n      let k = iterable[i];\n\n      if (inPoints[ref1][k] > inPoints[ref2][k]) {\n        var p = ref1;\n        ref1 = ref2;\n        ref2 = p;\n      }\n\n      let in1 = inPoints[ref1][k];\n      let in2 = inPoints[ref2][k];\n      let out1 = outPoints[ref1][k];\n      let out2 = outPoints[ref2][k]; // If the reference points have the same coordinate but different\n      // delta, inferred delta is zero.  Otherwise interpolate.\n\n      if (in1 !== in2 || out1 === out2) {\n        let scale = in1 === in2 ? 0 : (out2 - out1) / (in2 - in1);\n\n        for (let p = p1; p <= p2; p++) {\n          let out = inPoints[p][k];\n          if (out <= in1) out += out1 - in1;else if (out >= in2) out += out2 - in2;else out = out1 + (out - in1) * scale;\n          outPoints[p][k] = out;\n        }\n      }\n    }\n  }\n\n  deltaShift(p1, p2, ref, inPoints, outPoints) {\n    let deltaX = outPoints[ref].x - inPoints[ref].x;\n    let deltaY = outPoints[ref].y - inPoints[ref].y;\n    if (deltaX === 0 && deltaY === 0) return;\n\n    for (let p = p1; p <= p2; p++) if (p !== ref) {\n      outPoints[p].x += deltaX;\n      outPoints[p].y += deltaY;\n    }\n  }\n\n  getAdvanceAdjustment(gid, table) {\n    let outerIndex, innerIndex;\n\n    if (table.advanceWidthMapping) {\n      let idx = gid;\n      if (idx >= table.advanceWidthMapping.mapCount) idx = table.advanceWidthMapping.mapCount - 1;\n      let entryFormat = table.advanceWidthMapping.entryFormat;\n      ({\n        outerIndex: outerIndex,\n        innerIndex: innerIndex\n      } = table.advanceWidthMapping.mapData[idx]);\n    } else {\n      outerIndex = 0;\n      innerIndex = gid;\n    }\n\n    return this.getDelta(table.itemVariationStore, outerIndex, innerIndex);\n  } // See pseudo code from `Font Variations Overview'\n  // in the OpenType specification.\n\n\n  getDelta(itemStore, outerIndex, innerIndex) {\n    if (outerIndex >= itemStore.itemVariationData.length) return 0;\n    let varData = itemStore.itemVariationData[outerIndex];\n    if (innerIndex >= varData.deltaSets.length) return 0;\n    let deltaSet = varData.deltaSets[innerIndex];\n    let blendVector = this.getBlendVector(itemStore, outerIndex);\n    let netAdjustment = 0;\n\n    for (let master = 0; master < varData.regionIndexCount; master++) netAdjustment += deltaSet.deltas[master] * blendVector[master];\n\n    return netAdjustment;\n  }\n\n  getBlendVector(itemStore, outerIndex) {\n    let varData = itemStore.itemVariationData[outerIndex];\n    if (this.blendVectors.has(varData)) return this.blendVectors.get(varData);\n    let normalizedCoords = this.normalizedCoords;\n    let blendVector = []; // outer loop steps through master designs to be blended\n\n    for (let master = 0; master < varData.regionIndexCount; master++) {\n      let scalar = 1;\n      let regionIndex = varData.regionIndexes[master];\n      let axes = itemStore.variationRegionList.variationRegions[regionIndex]; // inner loop steps through axes in this region\n\n      for (let j = 0; j < axes.length; j++) {\n        let axis = axes[j];\n        let axisScalar; // compute the scalar contribution of this axis\n        // ignore invalid ranges\n\n        if (axis.startCoord > axis.peakCoord || axis.peakCoord > axis.endCoord) axisScalar = 1;else if (axis.startCoord < 0 && axis.endCoord > 0 && axis.peakCoord !== 0) axisScalar = 1;else if (axis.peakCoord === 0) axisScalar = 1;else if (normalizedCoords[j] < axis.startCoord || normalizedCoords[j] > axis.endCoord) axisScalar = 0;else {\n          if (normalizedCoords[j] === axis.peakCoord) axisScalar = 1;else if (normalizedCoords[j] < axis.peakCoord) axisScalar = (normalizedCoords[j] - axis.startCoord + Number.EPSILON) / (axis.peakCoord - axis.startCoord + Number.EPSILON);else axisScalar = (axis.endCoord - normalizedCoords[j] + Number.EPSILON) / (axis.endCoord - axis.peakCoord + Number.EPSILON);\n        } // take product of all the axis scalars\n\n        scalar *= axisScalar;\n      }\n\n      blendVector[master] = scalar;\n    }\n\n    this.blendVectors.set(varData, blendVector);\n    return blendVector;\n  }\n\n  constructor(font, coords) {\n    this.font = font;\n    this.normalizedCoords = this.normalizeCoords(coords);\n    this.blendVectors = new Map();\n  }\n\n}\n\nconst $5cc7476da92df375$var$resolved = Promise.resolve();\n\nclass $5cc7476da92df375$export$2e2bcd8739ae039 {\n  includeGlyph(glyph) {\n    if (typeof glyph === 'object') glyph = glyph.id;\n\n    if (this.mapping[glyph] == null) {\n      this.glyphs.push(glyph);\n      this.mapping[glyph] = this.glyphs.length - 1;\n    }\n\n    return this.mapping[glyph];\n  }\n\n  constructor(font) {\n    this.font = font;\n    this.glyphs = [];\n    this.mapping = {}; // always include the missing glyph\n\n    this.includeGlyph(0);\n  }\n\n} // Flags for simple glyphs\n\n\nconst $807e58506be70005$var$ON_CURVE = 1;\nconst $807e58506be70005$var$X_SHORT_VECTOR = 2;\nconst $807e58506be70005$var$Y_SHORT_VECTOR = 4;\nconst $807e58506be70005$var$REPEAT = 8;\nconst $807e58506be70005$var$SAME_X = 16;\nconst $807e58506be70005$var$SAME_Y = 32;\n\nclass $807e58506be70005$var$Point {\n  static size(val) {\n    return val >= 0 && val <= 255 ? 1 : 2;\n  }\n\n  static encode(stream, value) {\n    if (value >= 0 && value <= 255) stream.writeUInt8(value);else stream.writeInt16BE(value);\n  }\n\n}\n\nlet $807e58506be70005$var$Glyf = new $6uUbQ$Struct({\n  numberOfContours: $6uUbQ$int16,\n  xMin: $6uUbQ$int16,\n  yMin: $6uUbQ$int16,\n  xMax: $6uUbQ$int16,\n  yMax: $6uUbQ$int16,\n  endPtsOfContours: new $6uUbQ$Array($6uUbQ$uint16, 'numberOfContours'),\n  instructions: new $6uUbQ$Array($6uUbQ$uint8, $6uUbQ$uint16),\n  flags: new $6uUbQ$Array($6uUbQ$uint8, 0),\n  xPoints: new $6uUbQ$Array($807e58506be70005$var$Point, 0),\n  yPoints: new $6uUbQ$Array($807e58506be70005$var$Point, 0)\n});\n\nclass $807e58506be70005$export$2e2bcd8739ae039 {\n  encodeSimple(path) {\n    let instructions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    let endPtsOfContours = [];\n    let xPoints = [];\n    let yPoints = [];\n    let flags = [];\n    let same = 0;\n    let lastX = 0,\n        lastY = 0,\n        lastFlag = 0;\n    let pointCount = 0;\n\n    for (let i = 0; i < path.commands.length; i++) {\n      let c = path.commands[i];\n\n      for (let j = 0; j < c.args.length; j += 2) {\n        let x = c.args[j];\n        let y = c.args[j + 1];\n        let flag = 0; // If the ending point of a quadratic curve is the midpoint\n        // between the control point and the control point of the next\n        // quadratic curve, we can omit the ending point.\n\n        if (c.command === 'quadraticCurveTo' && j === 2) {\n          let next = path.commands[i + 1];\n\n          if (next && next.command === 'quadraticCurveTo') {\n            let midX = (lastX + next.args[0]) / 2;\n            let midY = (lastY + next.args[1]) / 2;\n            if (x === midX && y === midY) continue;\n          }\n        } // All points except control points are on curve.\n\n\n        if (!(c.command === 'quadraticCurveTo' && j === 0)) flag |= $807e58506be70005$var$ON_CURVE;\n        flag = this._encodePoint(x, lastX, xPoints, flag, $807e58506be70005$var$X_SHORT_VECTOR, $807e58506be70005$var$SAME_X);\n        flag = this._encodePoint(y, lastY, yPoints, flag, $807e58506be70005$var$Y_SHORT_VECTOR, $807e58506be70005$var$SAME_Y);\n\n        if (flag === lastFlag && same < 255) {\n          flags[flags.length - 1] |= $807e58506be70005$var$REPEAT;\n          same++;\n        } else {\n          if (same > 0) {\n            flags.push(same);\n            same = 0;\n          }\n\n          flags.push(flag);\n          lastFlag = flag;\n        }\n\n        lastX = x;\n        lastY = y;\n        pointCount++;\n      }\n\n      if (c.command === 'closePath') endPtsOfContours.push(pointCount - 1);\n    } // Close the path if the last command didn't already\n\n\n    if (path.commands.length > 1 && path.commands[path.commands.length - 1].command !== 'closePath') endPtsOfContours.push(pointCount - 1);\n    let bbox = path.bbox;\n    let glyf = {\n      numberOfContours: endPtsOfContours.length,\n      xMin: bbox.minX,\n      yMin: bbox.minY,\n      xMax: bbox.maxX,\n      yMax: bbox.maxY,\n      endPtsOfContours: endPtsOfContours,\n      instructions: instructions,\n      flags: flags,\n      xPoints: xPoints,\n      yPoints: yPoints\n    };\n    let size = $807e58506be70005$var$Glyf.size(glyf);\n    let tail = 4 - size % 4;\n    let stream = new $6uUbQ$EncodeStream(size + tail);\n    $807e58506be70005$var$Glyf.encode(stream, glyf); // Align to 4-byte length\n\n    if (tail !== 0) stream.fill(0, tail);\n    return stream.buffer;\n  }\n\n  _encodePoint(value, last, points, flag, shortFlag, sameFlag) {\n    let diff = value - last;\n    if (value === last) flag |= sameFlag;else {\n      if (-255 <= diff && diff <= 255) {\n        flag |= shortFlag;\n        if (diff < 0) diff = -diff;else flag |= sameFlag;\n      }\n\n      points.push(diff);\n    }\n    return flag;\n  }\n\n}\n\nclass $4abbb6a5dbdc441a$export$2e2bcd8739ae039 extends (0, $5cc7476da92df375$export$2e2bcd8739ae039) {\n  _addGlyph(gid) {\n    let glyph = this.font.getGlyph(gid);\n\n    let glyf = glyph._decode(); // get the offset to the glyph from the loca table\n\n\n    let curOffset = this.font.loca.offsets[gid];\n    let nextOffset = this.font.loca.offsets[gid + 1];\n\n    let stream = this.font._getTableStream('glyf');\n\n    stream.pos += curOffset;\n    let buffer = stream.readBuffer(nextOffset - curOffset); // if it is a compound glyph, include its components\n\n    if (glyf && glyf.numberOfContours < 0) {\n      buffer = new Uint8Array(buffer);\n      let view = new DataView(buffer.buffer);\n\n      for (let component of glyf.components) {\n        gid = this.includeGlyph(component.glyphID);\n        view.setUint16(component.pos, gid);\n      }\n    } else if (glyf && this.font._variationProcessor) // If this is a TrueType variation glyph, re-encode the path\n      buffer = this.glyphEncoder.encodeSimple(glyph.path, glyf.instructions);\n\n    this.glyf.push(buffer);\n    this.loca.offsets.push(this.offset);\n    this.hmtx.metrics.push({\n      advance: glyph.advanceWidth,\n      bearing: glyph._getMetrics().leftBearing\n    });\n    this.offset += buffer.length;\n    return this.glyf.length - 1;\n  }\n\n  encode() {\n    // tables required by PDF spec:\n    //   head, hhea, loca, maxp, cvt , prep, glyf, hmtx, fpgm\n    //\n    // additional tables required for standalone fonts:\n    //   name, cmap, OS/2, post\n    this.glyf = [];\n    this.offset = 0;\n    this.loca = {\n      offsets: [],\n      version: this.font.loca.version\n    };\n    this.hmtx = {\n      metrics: [],\n      bearings: []\n    }; // include all the glyphs\n    // not using a for loop because we need to support adding more\n    // glyphs to the array as we go, and CoffeeScript caches the length.\n\n    let i = 0;\n\n    while (i < this.glyphs.length) this._addGlyph(this.glyphs[i++]);\n\n    let maxp = (0, $6uUbQ$clone)(this.font.maxp);\n    maxp.numGlyphs = this.glyf.length;\n    this.loca.offsets.push(this.offset);\n    let head = (0, $6uUbQ$clone)(this.font.head);\n    head.indexToLocFormat = this.loca.version;\n    let hhea = (0, $6uUbQ$clone)(this.font.hhea);\n    hhea.numberOfMetrics = this.hmtx.metrics.length; // map = []\n    // for index in [0...256]\n    //     if index < @numGlyphs\n    //         map[index] = index\n    //     else\n    //         map[index] = 0\n    //\n    // cmapTable =\n    //     version: 0\n    //     length: 262\n    //     language: 0\n    //     codeMap: map\n    //\n    // cmap =\n    //     version: 0\n    //     numSubtables: 1\n    //     tables: [\n    //         platformID: 1\n    //         encodingID: 0\n    //         table: cmapTable\n    //     ]\n    // TODO: subset prep, cvt, fpgm?\n\n    return (0, $816c07a04b6dba87$export$2e2bcd8739ae039).toBuffer({\n      tables: {\n        head: head,\n        hhea: hhea,\n        loca: this.loca,\n        maxp: maxp,\n        'cvt ': this.font['cvt '],\n        prep: this.font.prep,\n        glyf: this.glyf,\n        hmtx: this.hmtx,\n        fpgm: this.font.fpgm\n      }\n    });\n  }\n\n  constructor(font) {\n    super(font);\n    this.glyphEncoder = new (0, $807e58506be70005$export$2e2bcd8739ae039)();\n  }\n\n}\n\nclass $001d739428a71d5a$export$2e2bcd8739ae039 extends (0, $5cc7476da92df375$export$2e2bcd8739ae039) {\n  subsetCharstrings() {\n    this.charstrings = [];\n    let gsubrs = {};\n\n    for (let gid of this.glyphs) {\n      this.charstrings.push(this.cff.getCharString(gid));\n      let glyph = this.font.getGlyph(gid);\n      let path = glyph.path; // this causes the glyph to be parsed\n\n      for (let subr in glyph._usedGsubrs) gsubrs[subr] = true;\n    }\n\n    this.gsubrs = this.subsetSubrs(this.cff.globalSubrIndex, gsubrs);\n  }\n\n  subsetSubrs(subrs, used) {\n    let res = [];\n\n    for (let i = 0; i < subrs.length; i++) {\n      let subr = subrs[i];\n\n      if (used[i]) {\n        this.cff.stream.pos = subr.offset;\n        res.push(this.cff.stream.readBuffer(subr.length));\n      } else res.push(new Uint8Array([11])); // return\n\n    }\n\n    return res;\n  }\n\n  subsetFontdict(topDict) {\n    topDict.FDArray = [];\n    topDict.FDSelect = {\n      version: 0,\n      fds: []\n    };\n    let used_fds = {};\n    let used_subrs = [];\n    let fd_select = {};\n\n    for (let gid of this.glyphs) {\n      let fd = this.cff.fdForGlyph(gid);\n      if (fd == null) continue;\n\n      if (!used_fds[fd]) {\n        topDict.FDArray.push(Object.assign({}, this.cff.topDict.FDArray[fd]));\n        used_subrs.push({});\n        fd_select[fd] = topDict.FDArray.length - 1;\n      }\n\n      used_fds[fd] = true;\n      topDict.FDSelect.fds.push(fd_select[fd]);\n      let glyph = this.font.getGlyph(gid);\n      let path = glyph.path; // this causes the glyph to be parsed\n\n      for (let subr in glyph._usedSubrs) used_subrs[fd_select[fd]][subr] = true;\n    }\n\n    for (let i = 0; i < topDict.FDArray.length; i++) {\n      let dict = topDict.FDArray[i];\n      delete dict.FontName;\n\n      if (dict.Private && dict.Private.Subrs) {\n        dict.Private = Object.assign({}, dict.Private);\n        dict.Private.Subrs = this.subsetSubrs(dict.Private.Subrs, used_subrs[i]);\n      }\n    }\n\n    return;\n  }\n\n  createCIDFontdict(topDict) {\n    let used_subrs = {};\n\n    for (let gid of this.glyphs) {\n      let glyph = this.font.getGlyph(gid);\n      let path = glyph.path; // this causes the glyph to be parsed\n\n      for (let subr in glyph._usedSubrs) used_subrs[subr] = true;\n    }\n\n    let privateDict = Object.assign({}, this.cff.topDict.Private);\n    if (this.cff.topDict.Private && this.cff.topDict.Private.Subrs) privateDict.Subrs = this.subsetSubrs(this.cff.topDict.Private.Subrs, used_subrs);\n    topDict.FDArray = [{\n      Private: privateDict\n    }];\n    return topDict.FDSelect = {\n      version: 3,\n      nRanges: 1,\n      ranges: [{\n        first: 0,\n        fd: 0\n      }],\n      sentinel: this.charstrings.length\n    };\n  }\n\n  addString(string) {\n    if (!string) return null;\n    if (!this.strings) this.strings = [];\n    this.strings.push(string);\n    return (0, $229224aec43783c5$export$2e2bcd8739ae039).length + this.strings.length - 1;\n  }\n\n  encode() {\n    this.subsetCharstrings();\n    let charset = {\n      version: this.charstrings.length > 255 ? 2 : 1,\n      ranges: [{\n        first: 1,\n        nLeft: this.charstrings.length - 2\n      }]\n    };\n    let topDict = Object.assign({}, this.cff.topDict);\n    topDict.Private = null;\n    topDict.charset = charset;\n    topDict.Encoding = null;\n    topDict.CharStrings = this.charstrings;\n\n    for (let key of ['version', 'Notice', 'Copyright', 'FullName', 'FamilyName', 'Weight', 'PostScript', 'BaseFontName', 'FontName']) topDict[key] = this.addString(this.cff.string(topDict[key]));\n\n    topDict.ROS = [this.addString('Adobe'), this.addString('Identity'), 0];\n    topDict.CIDCount = this.charstrings.length;\n    if (this.cff.isCIDFont) this.subsetFontdict(topDict);else this.createCIDFontdict(topDict);\n    let top = {\n      version: 1,\n      hdrSize: this.cff.hdrSize,\n      offSize: 4,\n      header: this.cff.header,\n      nameIndex: [this.cff.postscriptName],\n      topDictIndex: [topDict],\n      stringIndex: this.strings,\n      globalSubrIndex: this.gsubrs\n    };\n    return (0, $b84fd3dd9d8eddb2$export$2e2bcd8739ae039).toBuffer(top);\n  }\n\n  constructor(font) {\n    super(font);\n    this.cff = this.font['CFF '];\n    if (!this.cff) throw new Error('Not a CFF Font');\n  }\n\n}\n\nclass $4c1709dee528ea76$export$2e2bcd8739ae039 {\n  static probe(buffer) {\n    let format = (0, $12727730ddfc8bfe$export$3d28c1996ced1f14).decode(buffer.slice(0, 4));\n    return format === 'true' || format === 'OTTO' || format === String.fromCharCode(0, 1, 0, 0);\n  }\n\n  setDefaultLanguage() {\n    let lang = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    this.defaultLanguage = lang;\n  }\n\n  _getTable(table) {\n    if (!(table.tag in this._tables)) try {\n      this._tables[table.tag] = this._decodeTable(table);\n    } catch (e) {\n      if ($d636bc798e7178db$export$bd5c5d8b8dcafd78) {\n        console.error(`Error decoding table ${table.tag}`);\n        console.error(e.stack);\n      }\n    }\n    return this._tables[table.tag];\n  }\n\n  _getTableStream(tag) {\n    let table = this.directory.tables[tag];\n\n    if (table) {\n      this.stream.pos = table.offset;\n      return this.stream;\n    }\n\n    return null;\n  }\n\n  _decodeDirectory() {\n    return this.directory = (0, $816c07a04b6dba87$export$2e2bcd8739ae039).decode(this.stream, {\n      _startOffset: 0\n    });\n  }\n\n  _decodeTable(table) {\n    let pos = this.stream.pos;\n\n    let stream = this._getTableStream(table.tag);\n\n    let result = (0, $c3395722bea751e2$export$2e2bcd8739ae039)[table.tag].decode(stream, this, table.length);\n    this.stream.pos = pos;\n    return result;\n  }\n  /**\n  * Gets a string from the font's `name` table\n  * `lang` is a BCP-47 language code.\n  * @return {string}\n  */\n\n\n  getName(key) {\n    let lang = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.defaultLanguage || $d636bc798e7178db$export$42940898df819940;\n    let record = this.name && this.name.records[key];\n    if (record) // Attempt to retrieve the entry, depending on which translation is available:\n      return record[lang] || record[this.defaultLanguage] || record[$d636bc798e7178db$export$42940898df819940] || record['en'] || record[Object.keys(record)[0]] // Seriously, ANY language would be fine\n      || null;\n    return null;\n  }\n  /**\n  * The unique PostScript name for this font, e.g. \"Helvetica-Bold\"\n  * @type {string}\n  */\n\n\n  get postscriptName() {\n    return this.getName('postscriptName');\n  }\n  /**\n  * The font's full name, e.g. \"Helvetica Bold\"\n  * @type {string}\n  */\n\n\n  get fullName() {\n    return this.getName('fullName');\n  }\n  /**\n  * The font's family name, e.g. \"Helvetica\"\n  * @type {string}\n  */\n\n\n  get familyName() {\n    return this.getName('fontFamily');\n  }\n  /**\n  * The font's sub-family, e.g. \"Bold\".\n  * @type {string}\n  */\n\n\n  get subfamilyName() {\n    return this.getName('fontSubfamily');\n  }\n  /**\n  * The font's copyright information\n  * @type {string}\n  */\n\n\n  get copyright() {\n    return this.getName('copyright');\n  }\n  /**\n  * The font's version number\n  * @type {string}\n  */\n\n\n  get version() {\n    return this.getName('version');\n  }\n  /**\n  * The font’s [ascender](https://en.wikipedia.org/wiki/Ascender_(typography))\n  * @type {number}\n  */\n\n\n  get ascent() {\n    return this.hhea.ascent;\n  }\n  /**\n  * The font’s [descender](https://en.wikipedia.org/wiki/Descender)\n  * @type {number}\n  */\n\n\n  get descent() {\n    return this.hhea.descent;\n  }\n  /**\n  * The amount of space that should be included between lines\n  * @type {number}\n  */\n\n\n  get lineGap() {\n    return this.hhea.lineGap;\n  }\n  /**\n  * The offset from the normal underline position that should be used\n  * @type {number}\n  */\n\n\n  get underlinePosition() {\n    return this.post.underlinePosition;\n  }\n  /**\n  * The weight of the underline that should be used\n  * @type {number}\n  */\n\n\n  get underlineThickness() {\n    return this.post.underlineThickness;\n  }\n  /**\n  * If this is an italic font, the angle the cursor should be drawn at to match the font design\n  * @type {number}\n  */\n\n\n  get italicAngle() {\n    return this.post.italicAngle;\n  }\n  /**\n  * The height of capital letters above the baseline.\n  * See [here](https://en.wikipedia.org/wiki/Cap_height) for more details.\n  * @type {number}\n  */\n\n\n  get capHeight() {\n    let os2 = this['OS/2'];\n    return os2 ? os2.capHeight : this.ascent;\n  }\n  /**\n  * The height of lower case letters in the font.\n  * See [here](https://en.wikipedia.org/wiki/X-height) for more details.\n  * @type {number}\n  */\n\n\n  get xHeight() {\n    let os2 = this['OS/2'];\n    return os2 ? os2.xHeight : 0;\n  }\n  /**\n  * The number of glyphs in the font.\n  * @type {number}\n  */\n\n\n  get numGlyphs() {\n    return this.maxp.numGlyphs;\n  }\n  /**\n  * The size of the font’s internal coordinate grid\n  * @type {number}\n  */\n\n\n  get unitsPerEm() {\n    return this.head.unitsPerEm;\n  }\n  /**\n  * The font’s bounding box, i.e. the box that encloses all glyphs in the font.\n  * @type {BBox}\n  */\n\n\n  get bbox() {\n    return Object.freeze(new (0, $f34600ab9d7f70d8$export$2e2bcd8739ae039)(this.head.xMin, this.head.yMin, this.head.xMax, this.head.yMax));\n  }\n\n  get _cmapProcessor() {\n    return new (0, $f08dd41ef10b694c$export$2e2bcd8739ae039)(this.cmap);\n  }\n  /**\n  * An array of all of the unicode code points supported by the font.\n  * @type {number[]}\n  */\n\n\n  get characterSet() {\n    return this._cmapProcessor.getCharacterSet();\n  }\n  /**\n  * Returns whether there is glyph in the font for the given unicode code point.\n  *\n  * @param {number} codePoint\n  * @return {boolean}\n  */\n\n\n  hasGlyphForCodePoint(codePoint) {\n    return !!this._cmapProcessor.lookup(codePoint);\n  }\n  /**\n  * Maps a single unicode code point to a Glyph object.\n  * Does not perform any advanced substitutions (there is no context to do so).\n  *\n  * @param {number} codePoint\n  * @return {Glyph}\n  */\n\n\n  glyphForCodePoint(codePoint) {\n    return this.getGlyph(this._cmapProcessor.lookup(codePoint), [codePoint]);\n  }\n  /**\n  * Returns an array of Glyph objects for the given string.\n  * This is only a one-to-one mapping from characters to glyphs.\n  * For most uses, you should use font.layout (described below), which\n  * provides a much more advanced mapping supporting AAT and OpenType shaping.\n  *\n  * @param {string} string\n  * @return {Glyph[]}\n  */\n\n\n  glyphsForString(string) {\n    let glyphs = [];\n    let len = string.length;\n    let idx = 0;\n    let last = -1;\n    let state = -1;\n\n    while (idx <= len) {\n      let code = 0;\n      let nextState = 0;\n\n      if (idx < len) {\n        // Decode the next codepoint from UTF 16\n        code = string.charCodeAt(idx++);\n\n        if (0xd800 <= code && code <= 0xdbff && idx < len) {\n          let next = string.charCodeAt(idx);\n\n          if (0xdc00 <= next && next <= 0xdfff) {\n            idx++;\n            code = ((code & 0x3ff) << 10) + (next & 0x3ff) + 0x10000;\n          }\n        } // Compute the next state: 1 if the next codepoint is a variation selector, 0 otherwise.\n\n\n        nextState = 0xfe00 <= code && code <= 0xfe0f || 0xe0100 <= code && code <= 0xe01ef ? 1 : 0;\n      } else idx++;\n\n      if (state === 0 && nextState === 1) // Variation selector following normal codepoint.\n        glyphs.push(this.getGlyph(this._cmapProcessor.lookup(last, code), [last, code]));else if (state === 0 && nextState === 0) // Normal codepoint following normal codepoint.\n        glyphs.push(this.glyphForCodePoint(last));\n      last = code;\n      state = nextState;\n    }\n\n    return glyphs;\n  }\n\n  get _layoutEngine() {\n    return new (0, $4c0a7fa5df7a9ab1$export$2e2bcd8739ae039)(this);\n  }\n  /**\n  * Returns a GlyphRun object, which includes an array of Glyphs and GlyphPositions for the given string.\n  *\n  * @param {string} string\n  * @param {string[]} [userFeatures]\n  * @param {string} [script]\n  * @param {string} [language]\n  * @param {string} [direction]\n  * @return {GlyphRun}\n  */\n\n\n  layout(string, userFeatures, script, language, direction) {\n    return this._layoutEngine.layout(string, userFeatures, script, language, direction);\n  }\n  /**\n  * Returns an array of strings that map to the given glyph id.\n  * @param {number} gid - glyph id\n  */\n\n\n  stringsForGlyph(gid) {\n    return this._layoutEngine.stringsForGlyph(gid);\n  }\n  /**\n  * An array of all [OpenType feature tags](https://www.microsoft.com/typography/otspec/featuretags.htm)\n  * (or mapped AAT tags) supported by the font.\n  * The features parameter is an array of OpenType feature tags to be applied in addition to the default set.\n  * If this is an AAT font, the OpenType feature tags are mapped to AAT features.\n  *\n  * @type {string[]}\n  */\n\n\n  get availableFeatures() {\n    return this._layoutEngine.getAvailableFeatures();\n  }\n\n  getAvailableFeatures(script, language) {\n    return this._layoutEngine.getAvailableFeatures(script, language);\n  }\n\n  _getBaseGlyph(glyph) {\n    let characters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    if (!this._glyphs[glyph]) {\n      if (this.directory.tables.glyf) this._glyphs[glyph] = new (0, $69aac16029968692$export$2e2bcd8739ae039)(glyph, characters, this);else if (this.directory.tables['CFF '] || this.directory.tables.CFF2) this._glyphs[glyph] = new (0, $62cc5109c6101893$export$2e2bcd8739ae039)(glyph, characters, this);\n    }\n\n    return this._glyphs[glyph] || null;\n  }\n  /**\n  * Returns a glyph object for the given glyph id.\n  * You can pass the array of code points this glyph represents for\n  * your use later, and it will be stored in the glyph object.\n  *\n  * @param {number} glyph\n  * @param {number[]} characters\n  * @return {Glyph}\n  */\n\n\n  getGlyph(glyph) {\n    let characters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    if (!this._glyphs[glyph]) {\n      if (this.directory.tables.sbix) this._glyphs[glyph] = new (0, $25d8f049c222084c$export$2e2bcd8739ae039)(glyph, characters, this);else if (this.directory.tables.COLR && this.directory.tables.CPAL) this._glyphs[glyph] = new (0, $0d411f0165859681$export$2e2bcd8739ae039)(glyph, characters, this);else this._getBaseGlyph(glyph, characters);\n    }\n\n    return this._glyphs[glyph] || null;\n  }\n  /**\n  * Returns a Subset for this font.\n  * @return {Subset}\n  */\n\n\n  createSubset() {\n    if (this.directory.tables['CFF ']) return new (0, $001d739428a71d5a$export$2e2bcd8739ae039)(this);\n    return new (0, $4abbb6a5dbdc441a$export$2e2bcd8739ae039)(this);\n  }\n  /**\n  * Returns an object describing the available variation axes\n  * that this font supports. Keys are setting tags, and values\n  * contain the axis name, range, and default value.\n  *\n  * @type {object}\n  */\n\n\n  get variationAxes() {\n    let res = {};\n    if (!this.fvar) return res;\n\n    for (let axis of this.fvar.axis) res[axis.axisTag.trim()] = {\n      name: axis.name.en,\n      min: axis.minValue,\n      default: axis.defaultValue,\n      max: axis.maxValue\n    };\n\n    return res;\n  }\n  /**\n  * Returns an object describing the named variation instances\n  * that the font designer has specified. Keys are variation names\n  * and values are the variation settings for this instance.\n  *\n  * @type {object}\n  */\n\n\n  get namedVariations() {\n    let res = {};\n    if (!this.fvar) return res;\n\n    for (let instance of this.fvar.instance) {\n      let settings = {};\n\n      for (let i = 0; i < this.fvar.axis.length; i++) {\n        let axis = this.fvar.axis[i];\n        settings[axis.axisTag.trim()] = instance.coord[i];\n      }\n\n      res[instance.name.en] = settings;\n    }\n\n    return res;\n  }\n  /**\n  * Returns a new font with the given variation settings applied.\n  * Settings can either be an instance name, or an object containing\n  * variation tags as specified by the `variationAxes` property.\n  *\n  * @param {object} settings\n  * @return {TTFFont}\n  */\n\n\n  getVariation(settings) {\n    if (!(this.directory.tables.fvar && (this.directory.tables.gvar && this.directory.tables.glyf || this.directory.tables.CFF2))) throw new Error('Variations require a font with the fvar, gvar and glyf, or CFF2 tables.');\n    if (typeof settings === 'string') settings = this.namedVariations[settings];\n    if (typeof settings !== 'object') throw new Error('Variation settings must be either a variation name or settings object.'); // normalize the coordinates\n\n    let coords = this.fvar.axis.map((axis, i) => {\n      let axisTag = axis.axisTag.trim();\n      if (axisTag in settings) return Math.max(axis.minValue, Math.min(axis.maxValue, settings[axisTag]));else return axis.defaultValue;\n    });\n    let stream = new $6uUbQ$DecodeStream(this.stream.buffer);\n    stream.pos = this._directoryPos;\n    let font = new $4c1709dee528ea76$export$2e2bcd8739ae039(stream, coords);\n    font._tables = this._tables;\n    return font;\n  }\n\n  get _variationProcessor() {\n    if (!this.fvar) return null;\n    let variationCoords = this.variationCoords; // Ignore if no variation coords and not CFF2\n\n    if (!variationCoords && !this.CFF2) return null;\n    if (!variationCoords) variationCoords = this.fvar.axis.map(axis => axis.defaultValue);\n    return new (0, $0bb840cac04e911b$export$2e2bcd8739ae039)(this, variationCoords);\n  } // Standardized format plugin API\n\n\n  getFont(name) {\n    return this.getVariation(name);\n  }\n\n  constructor(stream) {\n    let variationCoords = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    (0, $6uUbQ$_)(this, \"type\", 'TTF');\n    this.defaultLanguage = null;\n    this.stream = stream;\n    this.variationCoords = variationCoords;\n    this._directoryPos = this.stream.pos;\n    this._tables = {};\n    this._glyphs = {};\n\n    this._decodeDirectory(); // define properties for each table to lazily parse\n\n\n    for (let tag in this.directory.tables) {\n      let table = this.directory.tables[tag];\n      if ((0, $c3395722bea751e2$export$2e2bcd8739ae039)[tag] && table.length > 0) Object.defineProperty(this, tag, {\n        get: this._getTable.bind(this, table)\n      });\n    }\n  }\n\n}\n\n(0, $6uUbQ$_1)([(0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)], $4c1709dee528ea76$export$2e2bcd8739ae039.prototype, \"bbox\", null);\n(0, $6uUbQ$_1)([(0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)], $4c1709dee528ea76$export$2e2bcd8739ae039.prototype, \"_cmapProcessor\", null);\n(0, $6uUbQ$_1)([(0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)], $4c1709dee528ea76$export$2e2bcd8739ae039.prototype, \"characterSet\", null);\n(0, $6uUbQ$_1)([(0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)], $4c1709dee528ea76$export$2e2bcd8739ae039.prototype, \"_layoutEngine\", null);\n(0, $6uUbQ$_1)([(0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)], $4c1709dee528ea76$export$2e2bcd8739ae039.prototype, \"variationAxes\", null);\n(0, $6uUbQ$_1)([(0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)], $4c1709dee528ea76$export$2e2bcd8739ae039.prototype, \"namedVariations\", null);\n(0, $6uUbQ$_1)([(0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)], $4c1709dee528ea76$export$2e2bcd8739ae039.prototype, \"_variationProcessor\", null);\nlet $c1726355ecc5b889$var$WOFFDirectoryEntry = new $6uUbQ$Struct({\n  tag: new $6uUbQ$String(4),\n  offset: new $6uUbQ$Pointer($6uUbQ$uint32, 'void', {\n    type: 'global'\n  }),\n  compLength: $6uUbQ$uint32,\n  length: $6uUbQ$uint32,\n  origChecksum: $6uUbQ$uint32\n});\nlet $c1726355ecc5b889$var$WOFFDirectory = new $6uUbQ$Struct({\n  tag: new $6uUbQ$String(4),\n  flavor: $6uUbQ$uint32,\n  length: $6uUbQ$uint32,\n  numTables: $6uUbQ$uint16,\n  reserved: new $6uUbQ$Reserved($6uUbQ$uint16),\n  totalSfntSize: $6uUbQ$uint32,\n  majorVersion: $6uUbQ$uint16,\n  minorVersion: $6uUbQ$uint16,\n  metaOffset: $6uUbQ$uint32,\n  metaLength: $6uUbQ$uint32,\n  metaOrigLength: $6uUbQ$uint32,\n  privOffset: $6uUbQ$uint32,\n  privLength: $6uUbQ$uint32,\n  tables: new $6uUbQ$Array($c1726355ecc5b889$var$WOFFDirectoryEntry, 'numTables')\n});\n\n$c1726355ecc5b889$var$WOFFDirectory.process = function () {\n  let tables = {};\n\n  for (let table of this.tables) tables[table.tag] = table;\n\n  this.tables = tables;\n};\n\nvar $c1726355ecc5b889$export$2e2bcd8739ae039 = $c1726355ecc5b889$var$WOFFDirectory;\n\nclass $760785214b9fc52c$export$2e2bcd8739ae039 extends (0, $4c1709dee528ea76$export$2e2bcd8739ae039) {\n  static probe(buffer) {\n    return (0, $12727730ddfc8bfe$export$3d28c1996ced1f14).decode(buffer.slice(0, 4)) === 'wOFF';\n  }\n\n  _decodeDirectory() {\n    this.directory = (0, $c1726355ecc5b889$export$2e2bcd8739ae039).decode(this.stream, {\n      _startOffset: 0\n    });\n  }\n\n  _getTableStream(tag) {\n    let table = this.directory.tables[tag];\n\n    if (table) {\n      this.stream.pos = table.offset;\n\n      if (table.compLength < table.length) {\n        this.stream.pos += 2; // skip deflate header\n\n        let outBuffer = new Uint8Array(table.length);\n        let buf = (0, $6uUbQ$tinyinflate)(this.stream.readBuffer(table.compLength - 2), outBuffer);\n        return new $6uUbQ$DecodeStream(buf);\n      } else return this.stream;\n    }\n\n    return null;\n  }\n\n  constructor() {\n    super(...arguments);\n    (0, $6uUbQ$_)(this, \"type\", 'WOFF');\n  }\n\n}\n\nclass $8046190c9f1ad19e$export$2e2bcd8739ae039 extends (0, $69aac16029968692$export$2e2bcd8739ae039) {\n  _decode() {\n    // We have to decode in advance (in WOFF2Font), so just return the pre-decoded data.\n    return this._font._transformedGlyphs[this.id];\n  }\n\n  _getCBox() {\n    return this.path.bbox;\n  }\n\n  constructor() {\n    super(...arguments);\n    (0, $6uUbQ$_)(this, \"type\", 'WOFF2');\n  }\n\n}\n\nconst $c28ec7bbb3b8de3a$var$Base128 = {\n  decode(stream) {\n    let result = 0;\n    let iterable = [0, 1, 2, 3, 4];\n\n    for (let j = 0; j < iterable.length; j++) {\n      let i = iterable[j];\n      let code = stream.readUInt8(); // If any of the top seven bits are set then we're about to overflow.\n\n      if (result & 0xe0000000) throw new Error('Overflow');\n      result = result << 7 | code & 0x7f;\n      if ((code & 0x80) === 0) return result;\n    }\n\n    throw new Error('Bad base 128 number');\n  }\n\n};\nlet $c28ec7bbb3b8de3a$var$knownTags = ['cmap', 'head', 'hhea', 'hmtx', 'maxp', 'name', 'OS/2', 'post', 'cvt ', 'fpgm', 'glyf', 'loca', 'prep', 'CFF ', 'VORG', 'EBDT', 'EBLC', 'gasp', 'hdmx', 'kern', 'LTSH', 'PCLT', 'VDMX', 'vhea', 'vmtx', 'BASE', 'GDEF', 'GPOS', 'GSUB', 'EBSC', 'JSTF', 'MATH', 'CBDT', 'CBLC', 'COLR', 'CPAL', 'SVG ', 'sbix', 'acnt', 'avar', 'bdat', 'bloc', 'bsln', 'cvar', 'fdsc', 'feat', 'fmtx', 'fvar', 'gvar', 'hsty', 'just', 'lcar', 'mort', 'morx', 'opbd', 'prop', 'trak', 'Zapf', 'Silf', 'Glat', 'Gloc', 'Feat', 'Sill'];\nlet $c28ec7bbb3b8de3a$var$WOFF2DirectoryEntry = new $6uUbQ$Struct({\n  flags: $6uUbQ$uint8,\n  customTag: new $6uUbQ$Optional(new $6uUbQ$String(4), t => (t.flags & 0x3f) === 0x3f),\n  tag: t => t.customTag || $c28ec7bbb3b8de3a$var$knownTags[t.flags & 0x3f],\n  length: $c28ec7bbb3b8de3a$var$Base128,\n  transformVersion: t => t.flags >>> 6 & 0x03,\n  transformed: t => t.tag === 'glyf' || t.tag === 'loca' ? t.transformVersion === 0 : t.transformVersion !== 0,\n  transformLength: new $6uUbQ$Optional($c28ec7bbb3b8de3a$var$Base128, t => t.transformed)\n});\nlet $c28ec7bbb3b8de3a$var$WOFF2Directory = new $6uUbQ$Struct({\n  tag: new $6uUbQ$String(4),\n  flavor: $6uUbQ$uint32,\n  length: $6uUbQ$uint32,\n  numTables: $6uUbQ$uint16,\n  reserved: new $6uUbQ$Reserved($6uUbQ$uint16),\n  totalSfntSize: $6uUbQ$uint32,\n  totalCompressedSize: $6uUbQ$uint32,\n  majorVersion: $6uUbQ$uint16,\n  minorVersion: $6uUbQ$uint16,\n  metaOffset: $6uUbQ$uint32,\n  metaLength: $6uUbQ$uint32,\n  metaOrigLength: $6uUbQ$uint32,\n  privOffset: $6uUbQ$uint32,\n  privLength: $6uUbQ$uint32,\n  tables: new $6uUbQ$Array($c28ec7bbb3b8de3a$var$WOFF2DirectoryEntry, 'numTables')\n});\n\n$c28ec7bbb3b8de3a$var$WOFF2Directory.process = function () {\n  let tables = {};\n\n  for (let i = 0; i < this.tables.length; i++) {\n    let table = this.tables[i];\n    tables[table.tag] = table;\n  }\n\n  return this.tables = tables;\n};\n\nvar $c28ec7bbb3b8de3a$export$2e2bcd8739ae039 = $c28ec7bbb3b8de3a$var$WOFF2Directory;\n\nclass $21ee218f84ac7f32$export$2e2bcd8739ae039 extends (0, $4c1709dee528ea76$export$2e2bcd8739ae039) {\n  static probe(buffer) {\n    return (0, $12727730ddfc8bfe$export$3d28c1996ced1f14).decode(buffer.slice(0, 4)) === 'wOF2';\n  }\n\n  _decodeDirectory() {\n    this.directory = (0, $c28ec7bbb3b8de3a$export$2e2bcd8739ae039).decode(this.stream);\n    this._dataPos = this.stream.pos;\n  }\n\n  _decompress() {\n    // decompress data and setup table offsets if we haven't already\n    if (!this._decompressed) {\n      this.stream.pos = this._dataPos;\n      let buffer = this.stream.readBuffer(this.directory.totalCompressedSize);\n      let decompressedSize = 0;\n\n      for (let tag in this.directory.tables) {\n        let entry = this.directory.tables[tag];\n        entry.offset = decompressedSize;\n        decompressedSize += entry.transformLength != null ? entry.transformLength : entry.length;\n      }\n\n      let decompressed = (0, $6uUbQ$brotlidecompressjs)(buffer, decompressedSize);\n      if (!decompressed) throw new Error('Error decoding compressed data in WOFF2');\n      this.stream = new $6uUbQ$DecodeStream(decompressed);\n      this._decompressed = true;\n    }\n  }\n\n  _decodeTable(table) {\n    this._decompress();\n\n    return super._decodeTable(table);\n  } // Override this method to get a glyph and return our\n  // custom subclass if there is a glyf table.\n\n\n  _getBaseGlyph(glyph) {\n    let characters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    if (!this._glyphs[glyph]) {\n      if (this.directory.tables.glyf && this.directory.tables.glyf.transformed) {\n        if (!this._transformedGlyphs) this._transformGlyfTable();\n        return this._glyphs[glyph] = new (0, $8046190c9f1ad19e$export$2e2bcd8739ae039)(glyph, characters, this);\n      } else return super._getBaseGlyph(glyph, characters);\n    }\n  }\n\n  _transformGlyfTable() {\n    this._decompress();\n\n    this.stream.pos = this.directory.tables.glyf.offset;\n    let table = $21ee218f84ac7f32$var$GlyfTable.decode(this.stream);\n    let glyphs = [];\n\n    for (let index = 0; index < table.numGlyphs; index++) {\n      let glyph = {};\n      let nContours = table.nContours.readInt16BE();\n      glyph.numberOfContours = nContours;\n\n      if (nContours > 0) {\n        let nPoints = [];\n        let totalPoints = 0;\n\n        for (let i = 0; i < nContours; i++) {\n          let r = $21ee218f84ac7f32$var$read255UInt16(table.nPoints);\n          totalPoints += r;\n          nPoints.push(totalPoints);\n        }\n\n        glyph.points = $21ee218f84ac7f32$var$decodeTriplet(table.flags, table.glyphs, totalPoints);\n\n        for (let i = 0; i < nContours; i++) glyph.points[nPoints[i] - 1].endContour = true;\n\n        var instructionSize = $21ee218f84ac7f32$var$read255UInt16(table.glyphs);\n      } else if (nContours < 0) {\n        let haveInstructions = (0, $69aac16029968692$export$2e2bcd8739ae039).prototype._decodeComposite.call({\n          _font: this\n        }, glyph, table.composites);\n\n        if (haveInstructions) var instructionSize = $21ee218f84ac7f32$var$read255UInt16(table.glyphs);\n      }\n\n      glyphs.push(glyph);\n    }\n\n    this._transformedGlyphs = glyphs;\n  }\n\n  constructor() {\n    super(...arguments);\n    (0, $6uUbQ$_)(this, \"type\", 'WOFF2');\n  }\n\n} // Special class that accepts a length and returns a sub-stream for that data\n\n\nclass $21ee218f84ac7f32$var$Substream {\n  decode(stream, parent) {\n    return new $6uUbQ$DecodeStream(this._buf.decode(stream, parent));\n  }\n\n  constructor(length) {\n    this.length = length;\n    this._buf = new $6uUbQ$Buffer(length);\n  }\n\n} // This struct represents the entire glyf table\n\n\nlet $21ee218f84ac7f32$var$GlyfTable = new $6uUbQ$Struct({\n  version: $6uUbQ$uint32,\n  numGlyphs: $6uUbQ$uint16,\n  indexFormat: $6uUbQ$uint16,\n  nContourStreamSize: $6uUbQ$uint32,\n  nPointsStreamSize: $6uUbQ$uint32,\n  flagStreamSize: $6uUbQ$uint32,\n  glyphStreamSize: $6uUbQ$uint32,\n  compositeStreamSize: $6uUbQ$uint32,\n  bboxStreamSize: $6uUbQ$uint32,\n  instructionStreamSize: $6uUbQ$uint32,\n  nContours: new $21ee218f84ac7f32$var$Substream('nContourStreamSize'),\n  nPoints: new $21ee218f84ac7f32$var$Substream('nPointsStreamSize'),\n  flags: new $21ee218f84ac7f32$var$Substream('flagStreamSize'),\n  glyphs: new $21ee218f84ac7f32$var$Substream('glyphStreamSize'),\n  composites: new $21ee218f84ac7f32$var$Substream('compositeStreamSize'),\n  bboxes: new $21ee218f84ac7f32$var$Substream('bboxStreamSize'),\n  instructions: new $21ee218f84ac7f32$var$Substream('instructionStreamSize')\n});\nconst $21ee218f84ac7f32$var$WORD_CODE = 253;\nconst $21ee218f84ac7f32$var$ONE_MORE_BYTE_CODE2 = 254;\nconst $21ee218f84ac7f32$var$ONE_MORE_BYTE_CODE1 = 255;\nconst $21ee218f84ac7f32$var$LOWEST_U_CODE = 253;\n\nfunction $21ee218f84ac7f32$var$read255UInt16(stream) {\n  let code = stream.readUInt8();\n  if (code === $21ee218f84ac7f32$var$WORD_CODE) return stream.readUInt16BE();\n  if (code === $21ee218f84ac7f32$var$ONE_MORE_BYTE_CODE1) return stream.readUInt8() + $21ee218f84ac7f32$var$LOWEST_U_CODE;\n  if (code === $21ee218f84ac7f32$var$ONE_MORE_BYTE_CODE2) return stream.readUInt8() + $21ee218f84ac7f32$var$LOWEST_U_CODE * 2;\n  return code;\n}\n\nfunction $21ee218f84ac7f32$var$withSign(flag, baseval) {\n  return flag & 1 ? baseval : -baseval;\n}\n\nfunction $21ee218f84ac7f32$var$decodeTriplet(flags, glyphs, nPoints) {\n  let y;\n  let x = y = 0;\n  let res = [];\n\n  for (let i = 0; i < nPoints; i++) {\n    let dx = 0,\n        dy = 0;\n    let flag = flags.readUInt8();\n    let onCurve = !(flag >> 7);\n    flag &= 0x7f;\n\n    if (flag < 10) {\n      dx = 0;\n      dy = $21ee218f84ac7f32$var$withSign(flag, ((flag & 14) << 7) + glyphs.readUInt8());\n    } else if (flag < 20) {\n      dx = $21ee218f84ac7f32$var$withSign(flag, ((flag - 10 & 14) << 7) + glyphs.readUInt8());\n      dy = 0;\n    } else if (flag < 84) {\n      var b0 = flag - 20;\n      var b1 = glyphs.readUInt8();\n      dx = $21ee218f84ac7f32$var$withSign(flag, 1 + (b0 & 0x30) + (b1 >> 4));\n      dy = $21ee218f84ac7f32$var$withSign(flag >> 1, 1 + ((b0 & 0x0c) << 2) + (b1 & 0x0f));\n    } else if (flag < 120) {\n      var b0 = flag - 84;\n      dx = $21ee218f84ac7f32$var$withSign(flag, 1 + (b0 / 12 << 8) + glyphs.readUInt8());\n      dy = $21ee218f84ac7f32$var$withSign(flag >> 1, 1 + (b0 % 12 >> 2 << 8) + glyphs.readUInt8());\n    } else if (flag < 124) {\n      var b1 = glyphs.readUInt8();\n      let b2 = glyphs.readUInt8();\n      dx = $21ee218f84ac7f32$var$withSign(flag, (b1 << 4) + (b2 >> 4));\n      dy = $21ee218f84ac7f32$var$withSign(flag >> 1, ((b2 & 0x0f) << 8) + glyphs.readUInt8());\n    } else {\n      dx = $21ee218f84ac7f32$var$withSign(flag, glyphs.readUInt16BE());\n      dy = $21ee218f84ac7f32$var$withSign(flag >> 1, glyphs.readUInt16BE());\n    }\n\n    x += dx;\n    y += dy;\n    res.push(new (0, $69aac16029968692$export$baf26146a414f24a)(onCurve, false, x, y));\n  }\n\n  return res;\n}\n\nlet $cd5853a56c68fec7$var$TTCHeader = new $6uUbQ$VersionedStruct($6uUbQ$uint32, {\n  0x00010000: {\n    numFonts: $6uUbQ$uint32,\n    offsets: new $6uUbQ$Array($6uUbQ$uint32, 'numFonts')\n  },\n  0x00020000: {\n    numFonts: $6uUbQ$uint32,\n    offsets: new $6uUbQ$Array($6uUbQ$uint32, 'numFonts'),\n    dsigTag: $6uUbQ$uint32,\n    dsigLength: $6uUbQ$uint32,\n    dsigOffset: $6uUbQ$uint32\n  }\n});\n\nclass $cd5853a56c68fec7$export$2e2bcd8739ae039 {\n  static probe(buffer) {\n    return (0, $12727730ddfc8bfe$export$3d28c1996ced1f14).decode(buffer.slice(0, 4)) === 'ttcf';\n  }\n\n  getFont(name) {\n    for (let offset of this.header.offsets) {\n      let stream = new $6uUbQ$DecodeStream(this.stream.buffer);\n      stream.pos = offset;\n      let font = new (0, $4c1709dee528ea76$export$2e2bcd8739ae039)(stream);\n      if (font.postscriptName === name || font.postscriptName instanceof Uint8Array && name instanceof Uint8Array && font.postscriptName.every((v, i) => name[i] === v)) return font;\n    }\n\n    return null;\n  }\n\n  get fonts() {\n    let fonts = [];\n\n    for (let offset of this.header.offsets) {\n      let stream = new $6uUbQ$DecodeStream(this.stream.buffer);\n      stream.pos = offset;\n      fonts.push(new (0, $4c1709dee528ea76$export$2e2bcd8739ae039)(stream));\n    }\n\n    return fonts;\n  }\n\n  constructor(stream) {\n    (0, $6uUbQ$_)(this, \"type\", 'TTC');\n    this.stream = stream;\n    if (stream.readString(4) !== 'ttcf') throw new Error('Not a TrueType collection');\n    this.header = $cd5853a56c68fec7$var$TTCHeader.decode(stream);\n  }\n\n}\n\nlet $05f49f930186144e$var$DFontName = new $6uUbQ$String($6uUbQ$uint8);\nlet $05f49f930186144e$var$DFontData = new $6uUbQ$Struct({\n  len: $6uUbQ$uint32,\n  buf: new $6uUbQ$Buffer('len')\n});\nlet $05f49f930186144e$var$Ref = new $6uUbQ$Struct({\n  id: $6uUbQ$uint16,\n  nameOffset: $6uUbQ$int16,\n  attr: $6uUbQ$uint8,\n  dataOffset: $6uUbQ$uint24,\n  handle: $6uUbQ$uint32\n});\nlet $05f49f930186144e$var$Type = new $6uUbQ$Struct({\n  name: new $6uUbQ$String(4),\n  maxTypeIndex: $6uUbQ$uint16,\n  refList: new $6uUbQ$Pointer($6uUbQ$uint16, new $6uUbQ$Array($05f49f930186144e$var$Ref, t => t.maxTypeIndex + 1), {\n    type: 'parent'\n  })\n});\nlet $05f49f930186144e$var$TypeList = new $6uUbQ$Struct({\n  length: $6uUbQ$uint16,\n  types: new $6uUbQ$Array($05f49f930186144e$var$Type, t => t.length + 1)\n});\nlet $05f49f930186144e$var$DFontMap = new $6uUbQ$Struct({\n  reserved: new $6uUbQ$Reserved($6uUbQ$uint8, 24),\n  typeList: new $6uUbQ$Pointer($6uUbQ$uint16, $05f49f930186144e$var$TypeList),\n  nameListOffset: new $6uUbQ$Pointer($6uUbQ$uint16, 'void')\n});\nlet $05f49f930186144e$var$DFontHeader = new $6uUbQ$Struct({\n  dataOffset: $6uUbQ$uint32,\n  map: new $6uUbQ$Pointer($6uUbQ$uint32, $05f49f930186144e$var$DFontMap),\n  dataLength: $6uUbQ$uint32,\n  mapLength: $6uUbQ$uint32\n});\n\nclass $05f49f930186144e$export$2e2bcd8739ae039 {\n  static probe(buffer) {\n    let stream = new $6uUbQ$DecodeStream(buffer);\n\n    try {\n      var header = $05f49f930186144e$var$DFontHeader.decode(stream);\n    } catch (e) {\n      return false;\n    }\n\n    for (let type of header.map.typeList.types) {\n      if (type.name === 'sfnt') return true;\n    }\n\n    return false;\n  }\n\n  getFont(name) {\n    if (!this.sfnt) return null;\n\n    for (let ref of this.sfnt.refList) {\n      let pos = this.header.dataOffset + ref.dataOffset + 4;\n      let stream = new $6uUbQ$DecodeStream(this.stream.buffer.slice(pos));\n      let font = new (0, $4c1709dee528ea76$export$2e2bcd8739ae039)(stream);\n      if (font.postscriptName === name || font.postscriptName instanceof Uint8Array && name instanceof Uint8Array && font.postscriptName.every((v, i) => name[i] === v)) return font;\n    }\n\n    return null;\n  }\n\n  get fonts() {\n    let fonts = [];\n\n    for (let ref of this.sfnt.refList) {\n      let pos = this.header.dataOffset + ref.dataOffset + 4;\n      let stream = new $6uUbQ$DecodeStream(this.stream.buffer.slice(pos));\n      fonts.push(new (0, $4c1709dee528ea76$export$2e2bcd8739ae039)(stream));\n    }\n\n    return fonts;\n  }\n\n  constructor(stream) {\n    (0, $6uUbQ$_)(this, \"type\", 'DFont');\n    this.stream = stream;\n    this.header = $05f49f930186144e$var$DFontHeader.decode(this.stream);\n\n    for (let type of this.header.map.typeList.types) {\n      for (let ref of type.refList) if (ref.nameOffset >= 0) {\n        this.stream.pos = ref.nameOffset + this.header.map.nameListOffset;\n        ref.name = $05f49f930186144e$var$DFontName.decode(this.stream);\n      } else ref.name = null;\n\n      if (type.name === 'sfnt') this.sfnt = type;\n    }\n  }\n\n} // Register font formats\n\n\n(0, $d636bc798e7178db$export$36b2f24e97d43be)((0, $4c1709dee528ea76$export$2e2bcd8739ae039));\n(0, $d636bc798e7178db$export$36b2f24e97d43be)((0, $760785214b9fc52c$export$2e2bcd8739ae039));\n(0, $d636bc798e7178db$export$36b2f24e97d43be)((0, $21ee218f84ac7f32$export$2e2bcd8739ae039));\n(0, $d636bc798e7178db$export$36b2f24e97d43be)((0, $cd5853a56c68fec7$export$2e2bcd8739ae039));\n(0, $d636bc798e7178db$export$36b2f24e97d43be)((0, $05f49f930186144e$export$2e2bcd8739ae039));\nexport { $d636bc798e7178db$export$bd5c5d8b8dcafd78 as logErrors, $d636bc798e7178db$export$36b2f24e97d43be as registerFormat, $d636bc798e7178db$export$185802fd694ee1f5 as create, $d636bc798e7178db$export$42940898df819940 as defaultLanguage, $d636bc798e7178db$export$5157e7780d44cc36 as setDefaultLanguage };","map":{"version":3,"mappings":"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","names":["$d636bc798e7178db$export$bd5c5d8b8dcafd78","$d636bc798e7178db$var$formats","$d636bc798e7178db$export$36b2f24e97d43be","format","push","$d636bc798e7178db$export$185802fd694ee1f5","buffer","postscriptName","i","length","probe","font","getFont","Error","$d636bc798e7178db$export$42940898df819940","$d636bc798e7178db$export$5157e7780d44cc36","lang","$e71565f2ce09cb6b$export$69a3209f1a06c04d","target","key","descriptor","get","value","call","Object","defineProperty","fn","cache","Map","memoized","args","has","result","apply","set","$26a62205ad06574e$var$SubHeader","$6uUbQ$Struct","firstCode","$6uUbQ$uint16","entryCount","idDelta","$6uUbQ$int16","idRangeOffset","$26a62205ad06574e$var$CmapGroup","startCharCode","$6uUbQ$uint32","endCharCode","glyphID","$26a62205ad06574e$var$UnicodeValueRange","startUnicodeValue","$6uUbQ$uint24","additionalCount","$6uUbQ$uint8","$26a62205ad06574e$var$UVSMapping","unicodeValue","$26a62205ad06574e$var$DefaultUVS","$6uUbQ$Array","$26a62205ad06574e$var$NonDefaultUVS","$26a62205ad06574e$var$VarSelectorRecord","varSelector","defaultUVS","$6uUbQ$Pointer","type","nonDefaultUVS","$26a62205ad06574e$var$CmapSubtable","$6uUbQ$VersionedStruct","language","codeMap","$6uUbQ$LazyArray","subHeaderKeys","subHeaderCount","t","Math","max","subHeaders","glyphIndexArray","segCountX2","segCount","searchRange","entrySelector","rangeShift","endCode","reservedPad","$6uUbQ$Reserved","startCode","_currentOffset","glyphIndices","reserved","is32","nGroups","groups","numRecords","varSelectors","$26a62205ad06574e$var$CmapEntry","platformID","encodingID","table","lazy","$26a62205ad06574e$export$2e2bcd8739ae039","version","numSubtables","tables","$f2612a29f92ac062$export$2e2bcd8739ae039","$6uUbQ$int32","revision","checkSumAdjustment","magicNumber","flags","unitsPerEm","created","modified","xMin","yMin","xMax","yMax","macStyle","$6uUbQ$Bitfield","lowestRecPPEM","fontDirectionHint","indexToLocFormat","glyphDataFormat","$2c179dd593583073$export$2e2bcd8739ae039","ascent","descent","lineGap","advanceWidthMax","minLeftSideBearing","minRightSideBearing","xMaxExtent","caretSlopeRise","caretSlopeRun","caretOffset","metricDataFormat","numberOfMetrics","$bdc9060542264b85$var$HmtxEntry","advance","bearing","$bdc9060542264b85$export$2e2bcd8739ae039","metrics","parent","hhea","bearings","maxp","numGlyphs","$dbf51cb3d3fe409d$export$2e2bcd8739ae039","maxPoints","maxContours","maxComponentPoints","maxComponentContours","maxZones","maxTwilightPoints","maxStorage","maxFunctionDefs","maxInstructionDefs","maxStackElements","maxSizeOfInstructions","maxComponentElements","maxComponentDepth","$e449ad78d50845fe$export$badc544e0651b6b1","languageID","$e449ad78d50845fe$export$479e671907f486d1","$e449ad78d50845fe$export$6fef87b7618bdf0b","$e449ad78d50845fe$var$SINGLE_BYTE_ENCODINGS","Set","$e449ad78d50845fe$var$MAC_ENCODINGS","$e449ad78d50845fe$var$encodingCache","$e449ad78d50845fe$export$1dceb3c14ed68bee","encoding","cached","mapping","res","charCodeAt","decoder","TextDecoder","Uint8Array","s","decode","$e449ad78d50845fe$export$2092376fd002e13","$2bcf221753ec8e32$var$NameRecord","nameID","string","$6uUbQ$String","relativeTo","ctx","stringOffset","allowNull","$2bcf221753ec8e32$var$LangTagRecord","tag","$2bcf221753ec8e32$var$NameTable","count","records","langTagCount","langTags","$2bcf221753ec8e32$export$2e2bcd8739ae039","$2bcf221753ec8e32$var$NAMES","process","stream","record","obj","preEncode","Array","isArray","val","indexOf","en","size","$84b272aa31b70606$var$OS2","header","xAvgCharWidth","usWeightClass","usWidthClass","fsType","ySubscriptXSize","ySubscriptYSize","ySubscriptXOffset","ySubscriptYOffset","ySuperscriptXSize","ySuperscriptYSize","ySuperscriptXOffset","ySuperscriptYOffset","yStrikeoutSize","yStrikeoutPosition","sFamilyClass","panose","ulCharRange","vendorID","fsSelection","usFirstCharIndex","usLastCharIndex","typoAscender","typoDescender","typoLineGap","winAscent","winDescent","codePageRange","xHeight","capHeight","defaultChar","breakChar","maxContent","usLowerOpticalPointSize","usUpperOpticalPointSize","$84b272aa31b70606$var$versions","versions","$84b272aa31b70606$export$2e2bcd8739ae039","$32d9e2eb9565d93c$export$2e2bcd8739ae039","$6uUbQ$fixed32","italicAngle","underlinePosition","underlineThickness","isFixedPitch","minMemType42","maxMemType42","minMemType1","maxMemType1","numberOfGlyphs","glyphNameIndex","names","offsets","map","$5202bd9d9ad8eaac$export$2e2bcd8739ae039","controlValues","$5c0f37ca5ffb1850$export$2e2bcd8739ae039","instructions","$2b2b260902b1c57e$var$loca","_processed","$2b2b260902b1c57e$export$2e2bcd8739ae039","$7afb878c7bea4f66$export$2e2bcd8739ae039","controlValueProgram","$6c92b6371bce8bd9$export$2e2bcd8739ae039","$6uUbQ$Buffer","$43e9821ef3717eec$export$2e2bcd8739ae039","getCFFVersion","hdrSize","readUInt32BE","readUInt16BE","offSize","readUInt8","offsetType","pos","ret","startPos","start","end","offset","arr","item","encode","writeUInt16BE","sizes","writeUInt8","constructor","$c2d28e92708f99da$var$FLOAT_EOF","$c2d28e92708f99da$var$FLOAT_LOOKUP","$c2d28e92708f99da$var$FLOAT_ENCODE_LOOKUP","$c2d28e92708f99da$export$2e2bcd8739ae039","readInt16BE","readInt32BE","str","b","n1","n2","parseFloat","forceLarge","ceil","Number","writeInt32BE","c1","c2","writeInt16BE","$61aa549f16d58b9b$export$2e2bcd8739ae039","decodeOperands","operands","op","encodeOperands","defineProperties","_startOffset","fields","field","dict","includePointers","pointerSize","startOffset","len","k","pointers","pointerOffset","ops","ptr","$0e34a43d05bde82c$export$2e2bcd8739ae039","$0e34a43d05bde82c$var$Ptr","options","valueOf","$6d59db2e29cc77b3$var$CFFBlendOp","numBlends","pop","$6d59db2e29cc77b3$export$2e2bcd8739ae039","$229224aec43783c5$export$2e2bcd8739ae039","$bc0433d9b7e41f5f$export$dee0027060fa13bd","$bc0433d9b7e41f5f$export$4f58f497e14a53c3","$ef658f5c9a1488b2$export$c33b50336c234f16","$ef658f5c9a1488b2$export$3ed0f9e1fee8d489","$ef658f5c9a1488b2$export$dc28be11139d4120","$7cbbe4e24ef3cb75$var$LangSysTable","reqFeatureIndex","featureCount","featureIndexes","$7cbbe4e24ef3cb75$var$LangSysRecord","langSys","$7cbbe4e24ef3cb75$var$Script","defaultLangSys","langSysRecords","$7cbbe4e24ef3cb75$var$ScriptRecord","script","$7cbbe4e24ef3cb75$export$3e15fc05ce864229","$7cbbe4e24ef3cb75$var$FeatureParams","$7cbbe4e24ef3cb75$export$6e91cf7616333d5","featureParams","lookupCount","lookupListIndexes","$7cbbe4e24ef3cb75$var$FeatureRecord","feature","$7cbbe4e24ef3cb75$export$aa18130def4b6cb4","$7cbbe4e24ef3cb75$var$LookupFlags","markAttachmentType","$7cbbe4e24ef3cb75$export$df0008c6ff2da22a","SubTable","Lookup","lookupType","subTableCount","subTables","markFilteringSet","$6uUbQ$Optional","useMarkFilteringSet","$7cbbe4e24ef3cb75$var$RangeRecord","startCoverageIndex","$7cbbe4e24ef3cb75$export$17608c3f81a6111","glyphCount","glyphs","rangeCount","rangeRecords","$7cbbe4e24ef3cb75$var$ClassRangeRecord","class","$7cbbe4e24ef3cb75$export$843d551fbbafef71","startGlyph","classValueArray","classRangeCount","classRangeRecord","$7cbbe4e24ef3cb75$export$8215d14a63d9fb10","a","deltaFormat","$7cbbe4e24ef3cb75$var$LookupRecord","sequenceIndex","lookupListIndex","$7cbbe4e24ef3cb75$var$Rule","input","lookupRecords","$7cbbe4e24ef3cb75$var$RuleSet","$7cbbe4e24ef3cb75$var$ClassRule","classes","$7cbbe4e24ef3cb75$var$ClassSet","$7cbbe4e24ef3cb75$export$841858b892ce1f4c","coverage","ruleSetCount","ruleSets","classDef","classSetCnt","classSet","coverages","$7cbbe4e24ef3cb75$var$ChainRule","backtrackGlyphCount","backtrack","inputGlyphCount","lookaheadGlyphCount","lookahead","$7cbbe4e24ef3cb75$var$ChainRuleSet","$7cbbe4e24ef3cb75$export$5e6d09e6861162f6","chainCount","chainRuleSets","backtrackClassDef","inputClassDef","lookaheadClassDef","chainClassSet","backtrackCoverage","inputCoverage","lookaheadCoverage","$1a47b0c45c1c22fe$var$F2DOT14","$6uUbQ$Fixed","$1a47b0c45c1c22fe$var$RegionAxisCoordinates","startCoord","peakCoord","endCoord","$1a47b0c45c1c22fe$var$VariationRegionList","axisCount","regionCount","variationRegions","$1a47b0c45c1c22fe$var$DeltaSet","shortDeltas","shortDeltaCount","regionDeltas","$6uUbQ$int8","regionIndexCount","deltas","concat","$1a47b0c45c1c22fe$var$ItemVariationData","itemCount","regionIndexes","deltaSets","$1a47b0c45c1c22fe$export$fe1b122a2710f241","variationRegionList","variationDataCount","itemVariationData","$1a47b0c45c1c22fe$var$ConditionTable","axisIndex","filterRangeMinValue","filterRangeMaxValue","$1a47b0c45c1c22fe$var$ConditionSet","conditionCount","conditionTable","$1a47b0c45c1c22fe$var$FeatureTableSubstitutionRecord","featureIndex","alternateFeatureTable","$1a47b0c45c1c22fe$var$FeatureTableSubstitution","substitutionCount","substitutions","$1a47b0c45c1c22fe$var$FeatureVariationRecord","conditionSet","featureTableSubstitution","$1a47b0c45c1c22fe$export$441b70b7971dd419","majorVersion","minorVersion","featureVariationRecordCount","featureVariationRecords","$b84fd3dd9d8eddb2$var$PredefinedOp","predefinedOps","index","$b84fd3dd9d8eddb2$var$CFFEncodingVersion","$6uUbQ$Number","$b84fd3dd9d8eddb2$var$Range1","first","nLeft","$b84fd3dd9d8eddb2$var$Range2","$b84fd3dd9d8eddb2$var$CFFCustomEncoding","nCodes","codes","nRanges","ranges","$b84fd3dd9d8eddb2$var$CFFEncoding","$b84fd3dd9d8eddb2$var$RangeArray","range","$b84fd3dd9d8eddb2$var$CFFCustomCharset","CharStrings","$b84fd3dd9d8eddb2$var$CFFCharset","$b84fd3dd9d8eddb2$var$FDRange3","fd","$b84fd3dd9d8eddb2$var$FDRange4","$b84fd3dd9d8eddb2$var$FDSelect","fds","sentinel","$b84fd3dd9d8eddb2$var$ptr","$b84fd3dd9d8eddb2$var$CFFPrivateOp","$b84fd3dd9d8eddb2$var$FontDict","$b84fd3dd9d8eddb2$var$CFFTopDict","$b84fd3dd9d8eddb2$var$VariationStore","itemVariationStore","$b84fd3dd9d8eddb2$var$CFF2TopDict","$b84fd3dd9d8eddb2$var$CFFTop","$6uUbQ$fixed16","nameIndex","topDictIndex","stringIndex","globalSubrIndex","topDict","$b84fd3dd9d8eddb2$export$2e2bcd8739ae039","$822ac0d589e4e237$var$CFFFont","top","isCIDFont","ROS","sid","FullName","FamilyName","getCharString","glyph","readBuffer","getGlyphName","gid","charset","fdForGlyph","FDSelect","low","high","mid","privateDictForGlyph","FDArray","Private","$822ac0d589e4e237$export$2e2bcd8739ae039","$2bbf2bc1ce37cd8f$var$VerticalOrigin","glyphIndex","vertOriginY","$2bbf2bc1ce37cd8f$export$2e2bcd8739ae039","defaultVertOriginY","numVertOriginYMetrics","$0941618dc22a946d$export$16b227cb15d716a0","height","width","horiBearingX","horiBearingY","horiAdvance","vertBearingX","vertBearingY","vertAdvance","$0941618dc22a946d$export$62c53e75f69bfe12","bearingX","bearingY","$0941618dc22a946d$var$EBDTComponent","xOffset","yOffset","$0941618dc22a946d$var$ByteAligned","$0941618dc22a946d$var$BitAligned","$0941618dc22a946d$export$f1f5ddeb20d14f","data","pad","numComponents","components","dataLen","$9911c4c7201c13de$var$SBitLineMetrics","ascender","descender","widthMax","caretSlopeNumerator","caretSlopeDenominator","minOriginSB","minAdvanceSB","maxBeforeBL","minAfterBL","$9911c4c7201c13de$var$CodeOffsetPair","glyphCode","$9911c4c7201c13de$var$IndexSubtable","imageFormat","imageDataOffset","offsetArray","lastGlyphIndex","firstGlyphIndex","imageSize","bigMetrics","glyphArray","glyphCodeArray","$9911c4c7201c13de$var$IndexSubtableArray","subtable","$9911c4c7201c13de$var$BitmapSizeTable","indexSubTableArray","indexTablesSize","numberOfIndexSubTables","colorRef","hori","vert","startGlyphIndex","endGlyphIndex","ppemX","ppemY","bitDepth","$9911c4c7201c13de$export$2e2bcd8739ae039","numSizes","$abb847051efd51b1$var$ImageTable","ppem","resolution","imageOffsets","$abb847051efd51b1$export$2e2bcd8739ae039","numImgTables","imageTables","$eb629188f3dfefdd$var$LayerRecord","paletteIndex","$eb629188f3dfefdd$var$BaseGlyphRecord","firstLayerIndex","numLayers","$eb629188f3dfefdd$export$2e2bcd8739ae039","numBaseGlyphRecords","baseGlyphRecord","layerRecords","numLayerRecords","$08734b8e7dc64587$var$ColorRecord","blue","green","red","alpha","$08734b8e7dc64587$export$2e2bcd8739ae039","numPaletteEntries","numPalettes","numColorRecords","colorRecords","colorRecordIndices","offsetPaletteTypeArray","offsetPaletteLabelArray","offsetPaletteEntryLabelArray","$497cef411d884e34$var$BaseCoord","coordinate","referenceGlyph","baseCoordPoint","deviceTable","$497cef411d884e34$var$BaseValues","defaultIndex","baseCoordCount","baseCoords","$497cef411d884e34$var$FeatMinMaxRecord","minCoord","maxCoord","$497cef411d884e34$var$MinMax","featMinMaxCount","featMinMaxRecords","$497cef411d884e34$var$BaseLangSysRecord","minMax","$497cef411d884e34$var$BaseScript","baseValues","defaultMinMax","baseLangSysCount","baseLangSysRecords","$497cef411d884e34$var$BaseScriptRecord","$497cef411d884e34$var$BaseScriptList","$497cef411d884e34$var$BaseTagList","$497cef411d884e34$var$Axis","baseTagList","baseScriptList","$497cef411d884e34$export$2e2bcd8739ae039","horizAxis","vertAxis","$cf5f33c63ef209e6$var$AttachPoint","$cf5f33c63ef209e6$var$AttachList","attachPoints","$cf5f33c63ef209e6$var$CaretValue","caretValuePoint","$cf5f33c63ef209e6$var$LigGlyph","$cf5f33c63ef209e6$var$LigCaretList","ligGlyphCount","ligGlyphs","$cf5f33c63ef209e6$var$MarkGlyphSetsDef","markSetTableFormat","markSetCount","$cf5f33c63ef209e6$export$2e2bcd8739ae039","glyphClassDef","attachList","ligCaretList","markAttachClassDef","markGlyphSetsDef","$47e0e8ef515d9903$var$ValueFormat","$47e0e8ef515d9903$var$types","xPlacement","yPlacement","xAdvance","yAdvance","xPlaDevice","rel","yPlaDevice","xAdvDevice","yAdvDevice","$47e0e8ef515d9903$var$ValueRecord","buildStruct","struct","$47e0e8ef515d9903$var$PairValueRecord","secondGlyph","value1","value2","$47e0e8ef515d9903$var$PairSet","$47e0e8ef515d9903$var$Class2Record","$47e0e8ef515d9903$var$Anchor","xCoordinate","yCoordinate","anchorPoint","xDeviceTable","yDeviceTable","$47e0e8ef515d9903$var$EntryExitRecord","entryAnchor","exitAnchor","$47e0e8ef515d9903$var$MarkRecord","markAnchor","$47e0e8ef515d9903$var$MarkArray","$47e0e8ef515d9903$var$BaseRecord","classCount","$47e0e8ef515d9903$var$BaseArray","$47e0e8ef515d9903$var$ComponentRecord","$47e0e8ef515d9903$var$LigatureAttach","$47e0e8ef515d9903$var$LigatureArray","$47e0e8ef515d9903$export$73a8cfb19cd43a0f","valueFormat","valueCount","values","valueFormat1","valueFormat2","pairSetCount","pairSets","classDef1","classDef2","class1Count","class2Count","classRecords","entryExitCount","entryExitRecords","markCoverage","baseCoverage","markArray","baseArray","ligatureCoverage","ligatureArray","mark1Coverage","mark2Coverage","mark1Array","mark2Array","posFormat","extension","$47e0e8ef515d9903$export$2e2bcd8739ae039","scriptList","featureList","lookupList","featureVariations","$d3f442064af66e06$var$Sequence","$d3f442064af66e06$var$AlternateSet","$d3f442064af66e06$var$Ligature","compCount","$d3f442064af66e06$var$LigatureSet","$d3f442064af66e06$var$GSUBLookup","deltaGlyphID","substitute","substFormat","sequences","alternateSet","ligatureSets","substitutes","$d3f442064af66e06$export$2e2bcd8739ae039","$71cfb3c4767fbd0c$var$JstfGSUBModList","$71cfb3c4767fbd0c$var$JstfPriority","shrinkageEnableGSUB","shrinkageDisableGSUB","shrinkageEnableGPOS","shrinkageDisableGPOS","shrinkageJstfMax","extensionEnableGSUB","extensionDisableGSUB","extensionEnableGPOS","extensionDisableGPOS","extensionJstfMax","$71cfb3c4767fbd0c$var$JstfLangSys","$71cfb3c4767fbd0c$var$JstfLangSysRecord","jstfLangSys","$71cfb3c4767fbd0c$var$JstfScript","extenderGlyphs","langSysCount","$71cfb3c4767fbd0c$var$JstfScriptRecord","$71cfb3c4767fbd0c$export$2e2bcd8739ae039","scriptCount","$d059a6bd2d3b5b63$var$VariableSizeNumber","readUInt24BE","_size","$d059a6bd2d3b5b63$var$MapDataEntry","entry","entryFormat","outerIndex","innerIndex","$d059a6bd2d3b5b63$var$DeltaSetIndexMap","mapCount","mapData","$d059a6bd2d3b5b63$export$2e2bcd8739ae039","advanceWidthMapping","LSBMapping","RSBMapping","$dceeca3e1977ce30$var$Signature","$dceeca3e1977ce30$var$SignatureBlock","cbSignature","signature","$dceeca3e1977ce30$export$2e2bcd8739ae039","ulVersion","usNumSigs","usFlag","signatures","signatureBlocks","$8acd740a9435aad0$var$GaspRange","rangeMaxPPEM","rangeGaspBehavior","$8acd740a9435aad0$export$2e2bcd8739ae039","numRanges","gaspRanges","$b5f380243c34d6a0$var$DeviceRecord","pixelSize","maximumWidth","widths","$b5f380243c34d6a0$export$2e2bcd8739ae039","sizeDeviceRecord","$ca2df1256966e313$var$KernPair","left","right","$ca2df1256966e313$var$ClassTable","firstGlyph","nGlyphs","$ca2df1256966e313$var$Kern2Array","off","leftTable","rowWidth","$ca2df1256966e313$var$KernSubtable","nPairs","pairs","rightTable","array","kernValueCount","leftClassCount","rightClassCount","kernValue","leftClass","rightClass","kernIndex","$ca2df1256966e313$var$KernTable","subVersion","padding","tupleIndex","$ca2df1256966e313$export$2e2bcd8739ae039","nTables","$7a9f92b0c46ebe33$export$2e2bcd8739ae039","yPels","$2b2ccc419d152631$export$2e2bcd8739ae039","fontNumber","pitch","style","typeFamily","symbolSet","typeface","characterComplement","fileName","strokeWeight","widthType","serifStyle","$ca5b40b9bcda9c9b$var$Ratio","bCharSet","xRatio","yStartRatio","yEndRatio","$ca5b40b9bcda9c9b$var$vTable","yPelHeight","$ca5b40b9bcda9c9b$var$VdmxGroup","recs","startsz","endsz","entries","$ca5b40b9bcda9c9b$export$2e2bcd8739ae039","numRecs","numRatios","ratioRanges","$69530a3c40755af0$export$2e2bcd8739ae039","advanceHeightMax","minTopSideBearing","minBottomSideBearing","yMaxExtent","$344073dd270f0e62$var$VmtxEntry","$344073dd270f0e62$export$2e2bcd8739ae039","vhea","$3793b781918cfced$var$shortFrac","$3793b781918cfced$var$Correspondence","fromCoord","toCoord","$3793b781918cfced$var$Segment","pairCount","correspondence","$3793b781918cfced$export$2e2bcd8739ae039","segment","$6cb7dd5f47d82580$var$UnboundedArrayAccessor","getItem","_items","base","inspect","name","$6cb7dd5f47d82580$export$c5af1eebc882e39a","$6cb7dd5f47d82580$export$8351f8c2ae2f103c","ValueType","Shadow","BinarySearchHeader","unitSize","nUnits","LookupSegmentSingle","lastGlyph","LookupSegmentArray","LookupSingle","binarySearchHeader","segments","$6cb7dd5f47d82580$export$79f7d93d790934ba","entryData","assign","newState","Entry","StateArray","nClasses","StateHeader","classTable","stateArray","entryTable","$6cb7dd5f47d82580$export$105027425199cc51","ClassLookupTable","newStateOffset","StateHeader1","$6a3746e8c708f5a3$var$BslnSubtable","mappingData","standardGlyph","controlPoints","$6a3746e8c708f5a3$export$2e2bcd8739ae039","defaultBaseline","$d0c76fac617b308a$var$Setting","setting","fontFeatures","$d0c76fac617b308a$var$FeatureName","nSettings","settingTable","featureFlags","defaultSetting","$d0c76fac617b308a$export$2e2bcd8739ae039","featureNameCount","reserved1","reserved2","featureNames","$e83fd065f00fcd01$var$Axis","axisTag","minValue","defaultValue","maxValue","$e83fd065f00fcd01$var$Instance","coord","postscriptNameID","instanceSize","$e83fd065f00fcd01$export$2e2bcd8739ae039","offsetToData","countSizePairs","axisSize","instanceCount","axis","instance","$dbe33c8d3a7f131c$var$shortFrac","$dbe33c8d3a7f131c$var$Offset","$dbe33c8d3a7f131c$var$gvar","globalCoordCount","globalCoords","$dbe33c8d3a7f131c$export$2e2bcd8739ae039","$05b01887df96c4ee$var$ClassTable","subFeatureFlags","stateTable","$05b01887df96c4ee$var$WidthDeltaRecord","justClass","beforeGrowLimit","beforeShrinkLimit","afterGrowLimit","afterShrinkLimit","growFlags","shrinkFlags","$05b01887df96c4ee$var$WidthDeltaCluster","$05b01887df96c4ee$var$ActionData","lowerLimit","upperLimit","order","addGlyph","substThreshold","substGlyph","variationAxis","minimumLimit","noStretchValue","maximumLimit","$05b01887df96c4ee$var$Action","actionClass","actionType","actionLength","actionData","$05b01887df96c4ee$var$PostcompensationAction","$05b01887df96c4ee$var$PostCompensationTable","lookupTable","$05b01887df96c4ee$var$JustificationTable","wdcOffset","postCompensationTable","widthDeltaClusters","$05b01887df96c4ee$export$2e2bcd8739ae039","horizontal","vertical","$03ee6ebd54db1053$var$LigatureData","action","$03ee6ebd54db1053$var$ContextualData","markIndex","currentIndex","$03ee6ebd54db1053$var$InsertionData","currentInsertIndex","markedInsertIndex","$03ee6ebd54db1053$var$SubstitutionTable","items","$03ee6ebd54db1053$var$SubtableData","substitutionTable","ligatureActions","ligatureList","insertionActions","$03ee6ebd54db1053$var$Subtable","$03ee6ebd54db1053$var$FeatureEntry","featureType","featureSetting","enableFlags","disableFlags","$03ee6ebd54db1053$var$MorxChain","defaultFlags","chainLength","nFeatureEntries","nSubtables","features","subtables","$03ee6ebd54db1053$export$2e2bcd8739ae039","unused","nChains","chains","$b7492a80b0d1a056$var$OpticalBounds","bottom","$b7492a80b0d1a056$export$2e2bcd8739ae039","$c3395722bea751e2$var$tables","$c3395722bea751e2$export$2e2bcd8739ae039","cmap","head","hmtx","post","fpgm","loca","prep","glyf","VORG","EBLC","CBLC","sbix","COLR","CPAL","BASE","GDEF","GPOS","GSUB","JSTF","HVAR","DSIG","gasp","hdmx","kern","LTSH","PCLT","VDMX","vmtx","avar","bsln","feat","fvar","gvar","just","morx","opbd","$816c07a04b6dba87$var$TableEntry","checkSum","$816c07a04b6dba87$var$Directory","numTables","$6uUbQ$VoidPointer","maxExponentFor2","floor","log","LN2","maxPowerOf2","pow","$816c07a04b6dba87$export$2e2bcd8739ae039","$12727730ddfc8bfe$export$2e0ae67339d5f1ac","cmp","min","$12727730ddfc8bfe$export$d02631cccf789723","$12727730ddfc8bfe$export$3d28c1996ced1f14","$12727730ddfc8bfe$var$CHARS","$12727730ddfc8bfe$var$LOOKUP","$12727730ddfc8bfe$export$94fdf11bafc8de6b","base64","bufferLength","bytes","p","encoded1","encoded2","encoded3","encoded4","$f08dd41ef10b694c$export$2e2bcd8739ae039","findSubtable","cmapTable","lookup","codepoint","variationSelector","getVariationSelector","rangeOffset","group","uvs","selectors","toArray","x","sel","getCharacterSet","endCodes","tail","codePointsForGlyph","delta","c","g","$0bba3a9db57637f3$export$2e2bcd8739ae039","positions","id","getKerning","crossStream","variation","pairIdx","pair","leftOffset","rightOffset","override","$0a4bdfeb6dfd6f5e$export$2e2bcd8739ae039","positionGlyphs","clusterStart","clusterEnd","isMark","positionCluster","baseBox","cbox","copy","codePoints","minX","yGap","mark","markBox","position","combiningClass","getCombiningClass","maxX","minY","maxY","codePoint","$f34600ab9d7f70d8$export$2e2bcd8739ae039","addPoint","y","abs","Infinity","$130d1a642ebcd2b7$var$UNICODE_SCRIPTS","Caucasian_Albanian","Arabic","Imperial_Aramaic","Armenian","Avestan","Balinese","Bamum","Bassa_Vah","Batak","Bengali","Bopomofo","Brahmi","Braille","Buginese","Buhid","Chakma","Canadian_Aboriginal","Carian","Cham","Cherokee","Coptic","Cypriot","Cyrillic","Devanagari","Deseret","Duployan","Egyptian_Hieroglyphs","Elbasan","Ethiopic","Georgian","Glagolitic","Gothic","Grantha","Greek","Gujarati","Gurmukhi","Hangul","Han","Hanunoo","Hebrew","Hiragana","Pahawh_Hmong","Katakana_Or_Hiragana","Old_Italic","Javanese","Kayah_Li","Katakana","Kharoshthi","Khmer","Khojki","Kannada","Kaithi","Tai_Tham","Lao","Latin","Lepcha","Limbu","Linear_A","Linear_B","Lisu","Lycian","Lydian","Mahajani","Mandaic","Manichaean","Mende_Kikakui","Meroitic_Cursive","Meroitic_Hieroglyphs","Malayalam","Modi","Mongolian","Mro","Meetei_Mayek","Myanmar","Old_North_Arabian","Nabataean","Nko","Ogham","Ol_Chiki","Old_Turkic","Oriya","Osmanya","Palmyrene","Pau_Cin_Hau","Old_Permic","Phags_Pa","Inscriptional_Pahlavi","Psalter_Pahlavi","Phoenician","Miao","Inscriptional_Parthian","Rejang","Runic","Samaritan","Old_South_Arabian","Saurashtra","Shavian","Sharada","Siddham","Khudawadi","Sinhala","Sora_Sompeng","Sundanese","Syloti_Nagri","Syriac","Tagbanwa","Takri","Tai_Le","New_Tai_Lue","Tamil","Tai_Viet","Telugu","Tifinagh","Tagalog","Thaana","Thai","Tibetan","Tirhuta","Ugaritic","Vai","Warang_Citi","Old_Persian","Cuneiform","Yi","Inherited","Common","Unknown","$130d1a642ebcd2b7$var$OPENTYPE_SCRIPTS","$130d1a642ebcd2b7$export$b32f0b5f69d65e51","$130d1a642ebcd2b7$export$ce50e82f12a827a4","$130d1a642ebcd2b7$export$e5cb25e204fb8450","idx","code","next","$130d1a642ebcd2b7$export$16fab0757cfc223d","$130d1a642ebcd2b7$var$RTL","arab","hebr","syrc","thaa","cprt","khar","phnx","lydi","avst","armi","phli","prti","sarb","orkh","samr","mand","merc","mero","mani","mend","nbat","narb","palm","phlp","$130d1a642ebcd2b7$export$9fddb9d0dd7d8a54","$be07b3e97a42687a$export$2e2bcd8739ae039","bbox","direction","$1ac75d9a55b67f01$export$2e2bcd8739ae039","$3b6302b64eccc32c$var$features","allTypographicFeatures","exclusive","allTypeFeatures","ligatures","requiredLigatures","commonLigatures","rareLigatures","rebusPictures","diphthongLigatures","squaredLigatures","abbrevSquaredLigatures","symbolLigatures","contextualLigatures","historicalLigatures","cursiveConnection","unconnected","partiallyConnected","cursive","letterCase","verticalSubstitution","substituteVerticalForms","linguisticRearrangement","numberSpacing","monospacedNumbers","proportionalNumbers","thirdWidthNumbers","quarterWidthNumbers","smartSwash","wordInitialSwashes","wordFinalSwashes","nonFinalSwashes","diacritics","showDiacritics","hideDiacritics","decomposeDiacritics","verticalPosition","normalPosition","superiors","inferiors","ordinals","scientificInferiors","fractions","noFractions","verticalFractions","diagonalFractions","overlappingCharacters","preventOverlap","typographicExtras","slashedZero","mathematicalExtras","mathematicalGreek","ornamentSets","noOrnaments","dingbats","piCharacters","fleurons","decorativeBorders","internationalSymbols","mathSymbols","characterAlternatives","noAlternates","designComplexity","designLevel1","designLevel2","designLevel3","designLevel4","designLevel5","styleOptions","noStyleOptions","displayText","engravedText","illuminatedCaps","titlingCaps","tallCaps","characterShape","traditionalCharacters","simplifiedCharacters","JIS1978Characters","JIS1983Characters","JIS1990Characters","traditionalAltOne","traditionalAltTwo","traditionalAltThree","traditionalAltFour","traditionalAltFive","expertCharacters","JIS2004Characters","hojoCharacters","NLCCharacters","traditionalNamesCharacters","numberCase","lowerCaseNumbers","upperCaseNumbers","textSpacing","proportionalText","monospacedText","halfWidthText","thirdWidthText","quarterWidthText","altProportionalText","altHalfWidthText","transliteration","noTransliteration","annotation","noAnnotation","boxAnnotation","roundedBoxAnnotation","circleAnnotation","invertedCircleAnnotation","parenthesisAnnotation","periodAnnotation","romanNumeralAnnotation","diamondAnnotation","invertedBoxAnnotation","invertedRoundedBoxAnnotation","kanaSpacing","fullWidthKana","proportionalKana","ideographicSpacing","fullWidthIdeographs","proportionalIdeographs","halfWidthIdeographs","unicodeDecomposition","canonicalComposition","compatibilityComposition","transcodingComposition","rubyKana","CJKSymbolAlternatives","noCJKSymbolAlternatives","CJKSymbolAltOne","CJKSymbolAltTwo","CJKSymbolAltThree","CJKSymbolAltFour","CJKSymbolAltFive","ideographicAlternatives","noIdeographicAlternatives","ideographicAltOne","ideographicAltTwo","ideographicAltThree","ideographicAltFour","ideographicAltFive","CJKVerticalRomanPlacement","CJKVerticalRomanCentered","CJKVerticalRomanHBaseline","italicCJKRoman","CJKItalicRoman","caseSensitiveLayout","caseSensitiveSpacing","alternateKana","alternateHorizKana","alternateVertKana","stylisticAlternatives","noStylisticAlternates","stylisticAltOne","stylisticAltTwo","stylisticAltThree","stylisticAltFour","stylisticAltFive","stylisticAltSix","stylisticAltSeven","stylisticAltEight","stylisticAltNine","stylisticAltTen","stylisticAltEleven","stylisticAltTwelve","stylisticAltThirteen","stylisticAltFourteen","stylisticAltFifteen","stylisticAltSixteen","stylisticAltSeventeen","stylisticAltEighteen","stylisticAltNineteen","stylisticAltTwenty","contextualAlternates","swashAlternates","contextualSwashAlternates","lowerCase","defaultLowerCase","lowerCaseSmallCaps","lowerCasePetiteCaps","upperCase","defaultUpperCase","upperCaseSmallCaps","upperCasePetiteCaps","languageTag","CJKRomanSpacing","halfWidthCJKRoman","proportionalCJKRoman","defaultCJKRoman","fullWidthCJKRoman","$3b6302b64eccc32c$var$feature","selector","$3b6302b64eccc32c$var$OTMapping","rlig","clig","dlig","hlig","liga","hist","smcp","pcap","frac","dnom","numr","afrc","case","ccmp","cpct","valt","swsh","cswh","curs","c2pc","c2sc","init","fin2","medi","med2","fin3","fina","pkna","half","halt","hkna","vkna","ital","lnum","onum","mgrk","calt","vrt2","tnum","pnum","sups","subs","ordn","pwid","hwid","qwid","twid","fwid","palt","trad","smpl","jp78","jp83","jp90","jp04","expt","hojo","nlck","tnam","ruby","titl","zero","ss01","ss02","ss03","ss04","ss05","ss06","ss07","ss08","ss09","ss10","ss11","ss12","ss13","ss14","ss15","ss16","ss17","ss18","ss19","ss20","slice","$3b6302b64eccc32c$var$AATMapping","ot","aat","$3b6302b64eccc32c$export$b813f7d2a1677c16","r","$3b6302b64eccc32c$var$mapFeatureStrings","f","isNaN","typeCode","settingCode","$3b6302b64eccc32c$export$bd6df347a4f391c4","keys","$ff5ce077dae0f144$export$2e2bcd8739ae039","seg","glyphsForValue","classValue","$50c7aac9316f2948$var$START_OF_TEXT_STATE","$50c7aac9316f2948$var$START_OF_LINE_STATE","$50c7aac9316f2948$var$END_OF_TEXT_CLASS","$50c7aac9316f2948$var$OUT_OF_BOUNDS_CLASS","$50c7aac9316f2948$var$DELETED_GLYPH_CLASS","$50c7aac9316f2948$var$END_OF_LINE_CLASS","$50c7aac9316f2948$var$DONT_ADVANCE","$50c7aac9316f2948$export$2e2bcd8739ae039","reverse","processEntry","currentState","dir","classCode","shouldAdvance","row","entryIndex","traverse","opts","state","visited","add","enter","exit","$55f71433a605c87d$var$MARK_FIRST","$55f71433a605c87d$var$MARK_LAST","$55f71433a605c87d$var$VERB","$55f71433a605c87d$var$SET_MARK","$55f71433a605c87d$var$SET_COMPONENT","$55f71433a605c87d$var$PERFORM_ACTION","$55f71433a605c87d$var$LAST_MASK","$55f71433a605c87d$var$STORE_MASK","$55f71433a605c87d$var$OFFSET_MASK","$55f71433a605c87d$var$VERTICAL_ONLY","$55f71433a605c87d$var$REVERSE_DIRECTION","$55f71433a605c87d$var$HORIZONTAL_AND_VERTICAL","$55f71433a605c87d$var$CURRENT_IS_KASHIDA_LIKE","$55f71433a605c87d$var$MARKED_IS_KASHIDA_LIKE","$55f71433a605c87d$var$CURRENT_INSERT_BEFORE","$55f71433a605c87d$var$MARKED_INSERT_BEFORE","$55f71433a605c87d$var$CURRENT_INSERT_COUNT","$55f71433a605c87d$var$MARKED_INSERT_COUNT","$55f71433a605c87d$export$2e2bcd8739ae039","chain","processSubtable","splice","processNoncontextualSubstitutions","ligatureStack","markedGlyph","markedIndex","stateMachine","getStateMachine","getProcessor","processIndicRearragement","processContextualSubstitution","processLigature","processGlyphInsertion","$55f71433a605c87d$var$reorderGlyphs","subsitutions","getGlyph","actions","actionIndex","last","ligatureIndex","ligatureGlyphs","componentGlyph","unshift","store","component","ligatureEntry","_insertGlyphs","insertionActionIndex","isBefore","insertions","getSupportedFeatures","generateInputs","inputCache","generateInputCache","generateInputsForSubtable","stack","found","bind","$55f71433a605c87d$var$swap","rangeA","rangeB","reverseA","reverseB","verb","$ba6dd74203be8728$export$2e2bcd8739ae039","glyphRun","morxProcessor","getAvailableFeatures","stringsForGlyph","glyphStrings","_addStrings","strings","_cmapProcessor","String","fromCodePoint","fallbackPosition","$94d7a73bd2edfc9a$export$2e2bcd8739ae039","_addFeatures","global","stageIndex","stages","stage","allFeatures","globalFeatures","arg","local","addStage","setFeatureOverrides","assignGlobalFeatures","processor","applyFeatures","$649970d87335b30f$var$VARIATION_FEATURES","$649970d87335b30f$var$COMMON_FEATURES","$649970d87335b30f$var$FRACTIONAL_FEATURES","$649970d87335b30f$var$HORIZONTAL_FEATURES","$649970d87335b30f$var$VERTICAL_FEATURES","$649970d87335b30f$var$DIRECTIONAL_FEATURES","ltr","rtl","$649970d87335b30f$export$2e2bcd8739ae039","plan","planPreprocessing","planFeatures","planPostprocessing","assignFeatures","userFeatures","$764eb544bbe1ccf0$var$trie","$764eb544bbe1ccf0$var$FEATURES","$764eb544bbe1ccf0$var$ShapingClasses","Non_Joining","Left_Joining","Right_Joining","Dual_Joining","Join_Causing","ALAPH","Transparent","$764eb544bbe1ccf0$var$ISOL","$764eb544bbe1ccf0$var$FINA","$764eb544bbe1ccf0$var$FIN2","$764eb544bbe1ccf0$var$FIN3","$764eb544bbe1ccf0$var$MEDI","$764eb544bbe1ccf0$var$MED2","$764eb544bbe1ccf0$var$INIT","$764eb544bbe1ccf0$var$NONE","$764eb544bbe1ccf0$var$STATE_TABLE","$764eb544bbe1ccf0$export$2e2bcd8739ae039","prev","curAction","prevAction","$764eb544bbe1ccf0$var$getShapingClass","category","$85d408632270248b$export$2e2bcd8739ae039","reset","shouldIgnore","ignoreMarks","ignoreBaseGlyphs","isBase","ignoreLigatures","isLigature","move","peek","increment","peekIndex","$a83b9c36aaa94fd3$var$DEFAULT_SCRIPTS","$a83b9c36aaa94fd3$export$2e2bcd8739ae039","findScript","selectScript","changed","scriptTag","repeat","substituteFeature","substituteFeatureForVariations","lookupsForFeatures","exclude","lookups","lookupIndex","sort","variationsIndex","substitution","findVariationsIndex","coords","variations","conditions","variationConditionsMatch","every","condition","advances","applyLookups","glyphIterator","currentFeature","cur","applyLookup","applyLookupList","lookupRecord","coverageIndex","match","sequence","matched","sequenceMatches","sequenceMatchIndices","coverageSequenceMatches","getClassID","classSequenceMatches","classID","applyContext","rule","applyChainingContext","rules","_variationProcessor","normalizedCoords","ligatureID","$10e7b257e1a9a756$export$2e2bcd8739ae039","_id","substituted","_font","prototype","ligatureComponent","isLigated","cursiveAttachment","markAttachment","shaperInfo","isMultiplied","$e1c6bbc8cb416f8c$export$2e2bcd8739ae039","$e1c6bbc8cb416f8c$var$getType","$e1c6bbc8cb416f8c$var$STATE_TABLE","$e1c6bbc8cb416f8c$var$DECOMPOSE","hasGlyphForCodePoint","$e1c6bbc8cb416f8c$var$decompose","$e1c6bbc8cb416f8c$var$COMPOSE","$e1c6bbc8cb416f8c$var$compose","$e1c6bbc8cb416f8c$var$TONE_MARK","$e1c6bbc8cb416f8c$var$reorderToneMark","$e1c6bbc8cb416f8c$var$INVALID","$e1c6bbc8cb416f8c$var$insertDottedCircle","$e1c6bbc8cb416f8c$var$HANGUL_BASE","$e1c6bbc8cb416f8c$var$HANGUL_END","$e1c6bbc8cb416f8c$var$HANGUL_COUNT","$e1c6bbc8cb416f8c$var$L_BASE","$e1c6bbc8cb416f8c$var$V_BASE","$e1c6bbc8cb416f8c$var$T_BASE","$e1c6bbc8cb416f8c$var$L_COUNT","$e1c6bbc8cb416f8c$var$V_COUNT","$e1c6bbc8cb416f8c$var$T_COUNT","$e1c6bbc8cb416f8c$var$L_END","$e1c6bbc8cb416f8c$var$V_END","$e1c6bbc8cb416f8c$var$T_END","$e1c6bbc8cb416f8c$var$DOTTED_CIRCLE","$e1c6bbc8cb416f8c$var$isL","$e1c6bbc8cb416f8c$var$isV","$e1c6bbc8cb416f8c$var$isT","$e1c6bbc8cb416f8c$var$isTone","$e1c6bbc8cb416f8c$var$isLVT","$e1c6bbc8cb416f8c$var$isLV","$e1c6bbc8cb416f8c$var$isCombiningL","$e1c6bbc8cb416f8c$var$isCombiningV","$e1c6bbc8cb416f8c$var$isCombiningT","$e1c6bbc8cb416f8c$var$X","$e1c6bbc8cb416f8c$var$L","$e1c6bbc8cb416f8c$var$V","$e1c6bbc8cb416f8c$var$T","$e1c6bbc8cb416f8c$var$LV","$e1c6bbc8cb416f8c$var$LVT","$e1c6bbc8cb416f8c$var$M","$e1c6bbc8cb416f8c$var$NO_ACTION","$e1c6bbc8cb416f8c$var$getGlyph","glyphForCodePoint","l","v","ljmo","vjmo","insert","tjmo","prevType","lv","del","$e1c6bbc8cb416f8c$var$getLength","advanceWidth","dottedCircle","$4b0735ca6c692ea5$exports","JSON","parse","$aa333a9607471296$exports","$90a9d3398ee54fe5$export$a513ea61a7bee91c","X","C","V","N","H","ZWNJ","ZWJ","M","SM","VD","A","Placeholder","Dotted_Circle","RS","Coeng","Repha","Ra","CM","Symbol","$90a9d3398ee54fe5$export$1a1f61c9c4dd9df0","Start","Ra_To_Become_Reph","Pre_M","Pre_C","Base_C","After_Main","Above_C","Before_Sub","Below_C","After_Sub","Before_Post","Post_C","After_Post","Final_C","SMVD","End","$90a9d3398ee54fe5$export$8519deaa7de2b07","$90a9d3398ee54fe5$export$bbcd928767338e0d","$90a9d3398ee54fe5$export$ca9599b2a300afc","$90a9d3398ee54fe5$export$e99d119da76a0fc5","Default","hasOldSpec","virama","basePos","rephPos","rephMode","blwfMode","$90a9d3398ee54fe5$export$f647c9cfdd77d95a","decompositions","$7826f90f6f0cecc9$var$decompositions","$7826f90f6f0cecc9$var$trie","$7826f90f6f0cecc9$var$stateMachine","$7826f90f6f0cecc9$export$2e2bcd8739ae039","$7826f90f6f0cecc9$var$setupSyllables","$7826f90f6f0cecc9$var$initialReordering","$7826f90f6f0cecc9$var$finalReordering","unicodeScript","indicConfig","isOldSpec","d","decomposed","$7826f90f6f0cecc9$var$indicCategory","$7826f90f6f0cecc9$var$indicPosition","$7826f90f6f0cecc9$var$IndicInfo","syllableType","syllable","tags","$7826f90f6f0cecc9$var$isConsonant","$7826f90f6f0cecc9$var$isJoiner","$7826f90f6f0cecc9$var$isHalantOrCoeng","$7826f90f6f0cecc9$var$wouldSubstitute","_layoutEngine","engine","GSUBProcessor","$7826f90f6f0cecc9$var$consonantPosition","consonant","info","$7826f90f6f0cecc9$var$nextSyllable","limit","hasReph","rphf","seenBelow","j","disallowDoubleHalants","lastPos","blwf","abvf","pstf","prefLen","pref","cfar","nonJoiner","tryPref","BASE_C","newPos","oldPos","tmp","newRephPos","reph","test","categories","$7ab494fe977143c6$var$categories","$7ab494fe977143c6$var$decompositions","$7ab494fe977143c6$var$trie","$7ab494fe977143c6$var$stateMachine","$7ab494fe977143c6$export$2e2bcd8739ae039","$7ab494fe977143c6$var$setupSyllables","$7ab494fe977143c6$var$clearSubstitutionFlags","$7ab494fe977143c6$var$recordRphf","$7ab494fe977143c6$var$recordPref","$7ab494fe977143c6$var$reorder","$7ab494fe977143c6$var$useCategory","$7ab494fe977143c6$var$USEInfo","$7ab494fe977143c6$var$nextSyllable","$7ab494fe977143c6$var$isBase","$7ab494fe977143c6$var$isHalant","$102b6fe50f1d50b4$var$SHAPERS","mong","phag","hang","bng2","beng","dev2","deva","gjr2","gujr","guru","gur2","knda","knd2","mlm2","mlym","ory2","orya","taml","tml2","telu","tel2","khmr","bali","batk","brah","bugi","buhd","cakm","cham","dupl","egyp","gran","hano","java","kthi","kali","khoj","sind","lepc","limb","mahj","mtei","modi","hmng","rjng","saur","shrd","sidd","sinh","sund","sylo","tglg","tagb","tale","lana","tavt","takr","tibt","tfng","tirh","latn","DFLT","$102b6fe50f1d50b4$export$7877a478dd30fd3d","shaper","$0a876c45f1f7c41c$export$2e2bcd8739ae039","curGlyph","replacement","undefined","USER_INDEX","ligature","characters","ligatureGlyph","isMarkLigature","lastLigID","lastNumComps","curComps","matchIndex","$c96c93587d49c14d$export$2e2bcd8739ae039","applyPositionValue","variationProcessor","variationStore","getDelta","nextGlyph","class1","class2","nextIndex","curRecord","nextRecord","getAnchor","rightToLeft","baseGlyphIndex","baseIndex","markRecord","baseAnchor","applyAnchor","ligIndex","ligAttach","markGlyph","ligGlyph","compIndex","mark1Index","prevIndex","good","mark2Index","markCoords","markPos","anchor","fixCursiveAttachment","fixMarkAttachment","$a62492810de27e3d$export$2e2bcd8739ae039","setup","glyphInfos","GPOSProcessor","glyphInfo","zeroMarkWidths","zeroMarkAdvances","cleanup","$4c0a7fa5df7a9ab1$export$2e2bcd8739ae039","layout","glyphsForString","hideDefaultIgnorables","positioned","unicodeLayoutEngine","kernProcessor","space","isDefaultIgnorable","ch","plane","from","$f43aec954cdfdf21$var$SVG_COMMANDS","moveTo","lineTo","quadraticCurveTo","bezierCurveTo","closePath","$f43aec954cdfdf21$export$2e2bcd8739ae039","toFunction","commands","forEach","command","toSVG","cmds","round","join","_cbox","freeze","_bbox","cx","cy","p0","p1","p2","p3","qp1x","qp1y","p3x","p3y","cp1x","cp1y","cp2x","cp2y","b2ac","t1","sqrt","t2","mapPoints","path","transform","m0","m1","m2","m3","m4","m5","tx","ty","translate","rotate","angle","cos","sin","scale","scaleX","scaleY","$7713b9b7b438dff8$export$2e2bcd8739ae039","$f92906be28e61769$export$2e2bcd8739ae039","_getPath","_getCBox","_getBBox","_getTableMetrics","metric","_getMetrics","_metrics","leftBearing","advanceHeight","topBearing","os2","getAdvanceAdjustment","getScaledPath","_getName","fromCharCode","render","save","fill","restore","$69aac16029968692$var$GlyfHeader","numberOfContours","$69aac16029968692$var$ON_CURVE","$69aac16029968692$var$X_SHORT_VECTOR","$69aac16029968692$var$Y_SHORT_VECTOR","$69aac16029968692$var$REPEAT","$69aac16029968692$var$SAME_X","$69aac16029968692$var$SAME_Y","$69aac16029968692$var$ARG_1_AND_2_ARE_WORDS","$69aac16029968692$var$ARGS_ARE_XY_VALUES","$69aac16029968692$var$ROUND_XY_TO_GRID","$69aac16029968692$var$WE_HAVE_A_SCALE","$69aac16029968692$var$MORE_COMPONENTS","$69aac16029968692$var$WE_HAVE_AN_X_AND_Y_SCALE","$69aac16029968692$var$WE_HAVE_A_TWO_BY_TWO","$69aac16029968692$var$WE_HAVE_INSTRUCTIONS","$69aac16029968692$var$USE_MY_METRICS","$69aac16029968692$var$OVERLAP_COMPOUND","$69aac16029968692$var$SCALED_COMPONENT_OFFSET","$69aac16029968692$var$UNSCALED_COMPONENT_OFFSET","$69aac16029968692$export$baf26146a414f24a","onCurve","endContour","$69aac16029968692$var$Component","dx","dy","scale01","scale10","$69aac16029968692$export$2e2bcd8739ae039","internal","_getTableStream","_parseGlyphCoord","short","same","_decode","glyfPos","nextPos","_decodeSimple","_decodeComposite","points","endPtsOfContours","numCoords","flag","point","px","py","_getPhantomPoints","transformPoints","phantomPoints","haveInstructions","gPos","readInt8","_getContours","contours","contour","directory","firstPt","lastPt","curvePt","pt","prevPt","midX","midY","$62cc5109c6101893$export$2e2bcd8739ae039","CFF2","bias","cff","trans","nStems","usedGsubrs","usedSubrs","open","_usedGsubrs","_usedSubrs","gsubrs","gsubrsBias","privateDict","subrs","Subrs","subrsBias","vstore","vsindex","checkWidth","shift","nominalWidthX","parseStems","subr","phase","c1x","c1y","c2x","c2y","c3x","c3y","c4x","c4y","c5x","c5y","c6x","c6y","pts","e","blendVector","getBlendVector","numOperands","sum","s1","s2","v1","v2","random","n","startx","starty","b1","$25d8f049c222084c$var$SBIXImage","originX","originY","buflen","$25d8f049c222084c$export$2e2bcd8739ae039","getImageForSize","img","image","renderOutlines","$0d411f0165859681$var$COLRLayer","color","$0d411f0165859681$export$2e2bcd8739ae039","layers","layer","cpal","colr","rec","baseLayer","_getBaseGlyph","fillColor","$0bb840cac04e911b$var$TUPLES_SHARE_POINT_NUMBERS","$0bb840cac04e911b$var$TUPLE_COUNT_MASK","$0bb840cac04e911b$var$EMBEDDED_TUPLE_COORD","$0bb840cac04e911b$var$INTERMEDIATE_TUPLE","$0bb840cac04e911b$var$PRIVATE_POINT_NUMBERS","$0bb840cac04e911b$var$TUPLE_INDEX_MASK","$0bb840cac04e911b$var$POINTS_ARE_WORDS","$0bb840cac04e911b$var$POINT_RUN_COUNT_MASK","$0bb840cac04e911b$var$DELTAS_ARE_ZERO","$0bb840cac04e911b$var$DELTAS_ARE_WORDS","$0bb840cac04e911b$var$DELTA_RUN_COUNT_MASK","$0bb840cac04e911b$export$2e2bcd8739ae039","normalizeCoords","normalized","EPSILON","glyphPoints","tupleCount","here","sharedPoints","decodePoints","origPoints","tupleDataSize","tupleCoords","startCoords","endCoords","factor","tupleFactor","nPoints","xDeltas","decodeDeltas","yDeltas","outPoints","hasDelta","interpolateMissingDeltas","deltaX","deltaY","Uint16Array","run","runCount","readUInt16","Int16Array","inPoints","firstPoint","endPoint","firstDelta","curDelta","deltaInterpolate","deltaShift","ref1","ref2","iterable","in1","in2","out1","out2","out","ref","itemStore","varData","deltaSet","netAdjustment","master","blendVectors","scalar","regionIndex","axes","axisScalar","$5cc7476da92df375$var$resolved","Promise","resolve","$5cc7476da92df375$export$2e2bcd8739ae039","includeGlyph","$807e58506be70005$var$ON_CURVE","$807e58506be70005$var$X_SHORT_VECTOR","$807e58506be70005$var$Y_SHORT_VECTOR","$807e58506be70005$var$REPEAT","$807e58506be70005$var$SAME_X","$807e58506be70005$var$SAME_Y","$807e58506be70005$var$Point","$807e58506be70005$var$Glyf","xPoints","yPoints","$807e58506be70005$export$2e2bcd8739ae039","encodeSimple","lastX","lastY","lastFlag","pointCount","_encodePoint","$6uUbQ$EncodeStream","shortFlag","sameFlag","diff","$4abbb6a5dbdc441a$export$2e2bcd8739ae039","_addGlyph","curOffset","nextOffset","view","DataView","setUint16","glyphEncoder","toBuffer","$001d739428a71d5a$export$2e2bcd8739ae039","subsetCharstrings","charstrings","subsetSubrs","used","subsetFontdict","used_fds","used_subrs","fd_select","FontName","createCIDFontdict","addString","Encoding","CIDCount","$4c1709dee528ea76$export$2e2bcd8739ae039","setDefaultLanguage","defaultLanguage","_getTable","_tables","_decodeTable","console","error","_decodeDirectory","getName","nextState","_glyphs","createSubset","trim","default","settings","getVariation","namedVariations","$6uUbQ$DecodeStream","_directoryPos","variationCoords","$c1726355ecc5b889$var$WOFFDirectoryEntry","compLength","origChecksum","$c1726355ecc5b889$var$WOFFDirectory","flavor","totalSfntSize","metaOffset","metaLength","metaOrigLength","privOffset","privLength","$c1726355ecc5b889$export$2e2bcd8739ae039","$760785214b9fc52c$export$2e2bcd8739ae039","outBuffer","buf","$8046190c9f1ad19e$export$2e2bcd8739ae039","_transformedGlyphs","$c28ec7bbb3b8de3a$var$Base128","$c28ec7bbb3b8de3a$var$knownTags","$c28ec7bbb3b8de3a$var$WOFF2DirectoryEntry","customTag","transformVersion","transformed","transformLength","$c28ec7bbb3b8de3a$var$WOFF2Directory","totalCompressedSize","$c28ec7bbb3b8de3a$export$2e2bcd8739ae039","$21ee218f84ac7f32$export$2e2bcd8739ae039","_dataPos","_decompress","_decompressed","decompressedSize","decompressed","_transformGlyfTable","$21ee218f84ac7f32$var$GlyfTable","nContours","totalPoints","$21ee218f84ac7f32$var$read255UInt16","$21ee218f84ac7f32$var$decodeTriplet","instructionSize","composites","$21ee218f84ac7f32$var$Substream","_buf","indexFormat","nContourStreamSize","nPointsStreamSize","flagStreamSize","glyphStreamSize","compositeStreamSize","bboxStreamSize","instructionStreamSize","bboxes","$21ee218f84ac7f32$var$WORD_CODE","$21ee218f84ac7f32$var$ONE_MORE_BYTE_CODE2","$21ee218f84ac7f32$var$ONE_MORE_BYTE_CODE1","$21ee218f84ac7f32$var$LOWEST_U_CODE","$21ee218f84ac7f32$var$withSign","baseval","b0","b2","$cd5853a56c68fec7$var$TTCHeader","numFonts","dsigTag","dsigLength","dsigOffset","$cd5853a56c68fec7$export$2e2bcd8739ae039","fonts","readString","$05f49f930186144e$var$DFontName","$05f49f930186144e$var$DFontData","$05f49f930186144e$var$Ref","nameOffset","attr","dataOffset","handle","$05f49f930186144e$var$Type","maxTypeIndex","refList","$05f49f930186144e$var$TypeList","types","$05f49f930186144e$var$DFontMap","typeList","nameListOffset","$05f49f930186144e$var$DFontHeader","dataLength","mapLength","$05f49f930186144e$export$2e2bcd8739ae039","sfnt"],"sources":["C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\base.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\decorators.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\cmap.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\head.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\hhea.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\hmtx.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\maxp.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\encodings.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\name.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\OS2.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\post.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\cvt.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\fpgm.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\loca.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\prep.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\glyf.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\cff\\CFFIndex.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\cff\\CFFOperand.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\cff\\CFFDict.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\cff\\CFFPointer.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\cff\\CFFPrivateDict.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\cff\\CFFStandardStrings.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\cff\\CFFEncodings.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\cff\\CFFCharsets.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\opentype.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\variations.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\cff\\CFFTop.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\cff\\CFFFont.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\VORG.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\EBDT.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\EBLC.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\sbix.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\COLR.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\CPAL.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\BASE.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\GDEF.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\GPOS.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\GSUB.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\JSTF.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\HVAR.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\DSIG.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\gasp.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\hdmx.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\kern.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\LTSH.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\PCLT.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\VDMX.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\vhea.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\vmtx.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\avar.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\aat.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\bsln.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\feat.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\fvar.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\gvar.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\just.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\morx.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\opbd.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\index.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\directory.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\utils.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\CmapProcessor.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\layout\\KernProcessor.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\layout\\UnicodeLayoutEngine.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\glyph\\BBox.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\layout\\Script.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\layout\\GlyphRun.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\layout\\GlyphPosition.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\aat\\AATFeatureMap.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\aat\\AATLookupTable.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\aat\\AATStateMachine.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\aat\\AATMorxProcessor.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\aat\\AATLayoutEngine.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\opentype\\ShapingPlan.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\opentype\\shapers\\DefaultShaper.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\opentype\\shapers\\ArabicShaper.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\opentype\\GlyphIterator.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\opentype\\OTProcessor.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\opentype\\GlyphInfo.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\opentype\\shapers\\HangulShaper.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\opentype\\shapers\\indic.json","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\opentype\\shapers\\use.json","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\opentype\\shapers\\indic-data.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\opentype\\shapers\\IndicShaper.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\opentype\\shapers\\UniversalShaper.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\opentype\\shapers\\index.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\opentype\\GSUBProcessor.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\opentype\\GPOSProcessor.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\opentype\\OTLayoutEngine.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\layout\\LayoutEngine.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\glyph\\Path.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\glyph\\StandardNames.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\glyph\\Glyph.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\glyph\\TTFGlyph.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\glyph\\CFFGlyph.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\glyph\\SBIXGlyph.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\glyph\\COLRGlyph.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\glyph\\GlyphVariationProcessor.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\subset\\Subset.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\glyph\\TTFGlyphEncoder.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\subset\\TTFSubset.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\subset\\CFFSubset.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\TTFFont.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\WOFFDirectory.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\WOFFFont.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\glyph\\WOFF2Glyph.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\tables\\WOFF2Directory.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\WOFF2Font.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\TrueTypeCollection.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\DFont.js","C:\\Users\\PC\\Documents\\PROGRAMMING\\MERN\\frontend\\node_modules\\fontkit\\dist\\src\\index.js"],"sourcesContent":["import {DecodeStream} from 'restructure';\n\nexport let logErrors = false;\n\nlet formats = [];\nexport function registerFormat(format) {\n  formats.push(format);\n};\n\nexport function create(buffer, postscriptName) {\n  for (let i = 0; i < formats.length; i++) {\n    let format = formats[i];\n    if (format.probe(buffer)) {\n      let font = new format(new DecodeStream(buffer));\n      if (postscriptName) {\n        return font.getFont(postscriptName);\n      }\n\n      return font;\n    }\n  }\n\n  throw new Error('Unknown font format');\n};\n\nexport let defaultLanguage = 'en';\nexport function setDefaultLanguage(lang = 'en') {\n  defaultLanguage = lang;\n};\n","/**\n * This decorator caches the results of a getter or method such that\n * the results are lazily computed once, and then cached.\n * @private\n */\nexport function cache(target, key, descriptor) {\n  if (descriptor.get) {\n    let get = descriptor.get;\n    descriptor.get = function() {\n      let value = get.call(this);\n      Object.defineProperty(this, key, { value });\n      return value;\n    };\n  } else if (typeof descriptor.value === 'function') {\n    let fn = descriptor.value;\n\n    return {\n      get() {\n        let cache = new Map;\n        function memoized(...args) {\n          let key = args.length > 0 ? args[0] : 'value';\n          if (cache.has(key)) {\n            return cache.get(key);\n          }\n\n          let result = fn.apply(this, args);\n          cache.set(key, result);\n          return result;\n        };\n\n        Object.defineProperty(this, key, {value: memoized});\n        return memoized;\n      }\n    };\n  }\n}\n","import * as r from 'restructure';\n\nlet SubHeader = new r.Struct({\n  firstCode:      r.uint16,\n  entryCount:     r.uint16,\n  idDelta:        r.int16,\n  idRangeOffset:  r.uint16\n});\n\nlet CmapGroup = new r.Struct({\n  startCharCode:  r.uint32,\n  endCharCode:    r.uint32,\n  glyphID:        r.uint32\n});\n\nlet UnicodeValueRange = new r.Struct({\n  startUnicodeValue:  r.uint24,\n  additionalCount:    r.uint8\n});\n\nlet UVSMapping = new r.Struct({\n  unicodeValue: r.uint24,\n  glyphID:      r.uint16\n});\n\nlet DefaultUVS = new r.Array(UnicodeValueRange, r.uint32);\nlet NonDefaultUVS = new r.Array(UVSMapping, r.uint32);\n\nlet VarSelectorRecord = new r.Struct({\n  varSelector:    r.uint24,\n  defaultUVS:     new r.Pointer(r.uint32, DefaultUVS, {type: 'parent'}),\n  nonDefaultUVS:  new r.Pointer(r.uint32, NonDefaultUVS, {type: 'parent'})\n});\n\nlet CmapSubtable = new r.VersionedStruct(r.uint16, {\n  0: { // Byte encoding\n    length:     r.uint16,   // Total table length in bytes (set to 262 for format 0)\n    language:   r.uint16,   // Language code for this encoding subtable, or zero if language-independent\n    codeMap:    new r.LazyArray(r.uint8, 256)\n  },\n\n  2: { // High-byte mapping (CJK)\n    length:           r.uint16,\n    language:         r.uint16,\n    subHeaderKeys:    new r.Array(r.uint16, 256),\n    subHeaderCount:   t => Math.max.apply(Math, t.subHeaderKeys),\n    subHeaders:       new r.LazyArray(SubHeader, 'subHeaderCount'),\n    glyphIndexArray:  new r.LazyArray(r.uint16, 'subHeaderCount')\n  },\n\n  4: { // Segment mapping to delta values\n    length:           r.uint16,              // Total table length in bytes\n    language:         r.uint16,              // Language code\n    segCountX2:       r.uint16,\n    segCount:         t => t.segCountX2 >> 1,\n    searchRange:      r.uint16,\n    entrySelector:    r.uint16,\n    rangeShift:       r.uint16,\n    endCode:          new r.LazyArray(r.uint16, 'segCount'),\n    reservedPad:      new r.Reserved(r.uint16),       // This value should be zero\n    startCode:        new r.LazyArray(r.uint16, 'segCount'),\n    idDelta:          new r.LazyArray(r.int16, 'segCount'),\n    idRangeOffset:    new r.LazyArray(r.uint16, 'segCount'),\n    glyphIndexArray:  new r.LazyArray(r.uint16, t => (t.length - t._currentOffset) / 2)\n  },\n\n  6: { // Trimmed table\n    length:         r.uint16,\n    language:       r.uint16,\n    firstCode:      r.uint16,\n    entryCount:     r.uint16,\n    glyphIndices:   new r.LazyArray(r.uint16, 'entryCount')\n  },\n\n  8: { // mixed 16-bit and 32-bit coverage\n    reserved: new r.Reserved(r.uint16),\n    length:   r.uint32,\n    language: r.uint16,\n    is32:     new r.LazyArray(r.uint8, 8192),\n    nGroups:  r.uint32,\n    groups:   new r.LazyArray(CmapGroup, 'nGroups')\n  },\n\n  10: { // Trimmed Array\n    reserved:       new r.Reserved(r.uint16),\n    length:         r.uint32,\n    language:       r.uint32,\n    firstCode:      r.uint32,\n    entryCount:     r.uint32,\n    glyphIndices:   new r.LazyArray(r.uint16, 'numChars')\n  },\n\n  12: { // Segmented coverage\n    reserved: new r.Reserved(r.uint16),\n    length:   r.uint32,\n    language: r.uint32,\n    nGroups:  r.uint32,\n    groups:   new r.LazyArray(CmapGroup, 'nGroups')\n  },\n\n  13: { // Many-to-one range mappings (same as 12 except for group.startGlyphID)\n    reserved: new r.Reserved(r.uint16),\n    length:   r.uint32,\n    language: r.uint32,\n    nGroups:  r.uint32,\n    groups:   new r.LazyArray(CmapGroup, 'nGroups')\n  },\n\n  14: { // Unicode Variation Sequences\n    length:       r.uint32,\n    numRecords:   r.uint32,\n    varSelectors: new r.LazyArray(VarSelectorRecord, 'numRecords')\n  }\n});\n\nlet CmapEntry = new r.Struct({\n  platformID:  r.uint16,  // Platform identifier\n  encodingID:  r.uint16,  // Platform-specific encoding identifier\n  table:       new r.Pointer(r.uint32, CmapSubtable, {type: 'parent', lazy: true})\n});\n\n// character to glyph mapping\nexport default new r.Struct({\n  version:      r.uint16,\n  numSubtables: r.uint16,\n  tables:       new r.Array(CmapEntry, 'numSubtables')\n});\n","import * as r from 'restructure';\n\n// font header\nexport default new r.Struct({\n  version:            r.int32,                   // 0x00010000 (version 1.0)\n  revision:           r.int32,                   // set by font manufacturer\n  checkSumAdjustment: r.uint32,\n  magicNumber:        r.uint32,                  // set to 0x5F0F3CF5\n  flags:              r.uint16,\n  unitsPerEm:         r.uint16,                  // range from 64 to 16384\n  created:            new r.Array(r.int32, 2),\n  modified:           new r.Array(r.int32, 2),\n  xMin:               r.int16,                   // for all glyph bounding boxes\n  yMin:               r.int16,                   // for all glyph bounding boxes\n  xMax:               r.int16,                   // for all glyph bounding boxes\n  yMax:               r.int16,                   // for all glyph bounding boxes\n  macStyle:           new r.Bitfield(r.uint16, [\n    'bold', 'italic', 'underline', 'outline',\n    'shadow', 'condensed', 'extended'\n  ]),\n  lowestRecPPEM:      r.uint16,                  // smallest readable size in pixels\n  fontDirectionHint:  r.int16,\n  indexToLocFormat:   r.int16,                   // 0 for short offsets, 1 for long\n  glyphDataFormat:    r.int16                    // 0 for current format\n});\n","import * as r from 'restructure';\n\n// horizontal header\nexport default new r.Struct({\n  version:              r.int32,\n  ascent:               r.int16,   // Distance from baseline of highest ascender\n  descent:              r.int16,   // Distance from baseline of lowest descender\n  lineGap:              r.int16,   // Typographic line gap\n  advanceWidthMax:      r.uint16,  // Maximum advance width value in 'hmtx' table\n  minLeftSideBearing:   r.int16,   // Maximum advance width value in 'hmtx' table\n  minRightSideBearing:  r.int16,   // Minimum right sidebearing value\n  xMaxExtent:           r.int16,\n  caretSlopeRise:       r.int16,   // Used to calculate the slope of the cursor (rise/run); 1 for vertical\n  caretSlopeRun:        r.int16,   // 0 for vertical\n  caretOffset:          r.int16,   // Set to 0 for non-slanted fonts\n  reserved:             new r.Reserved(r.int16, 4),\n  metricDataFormat:     r.int16,   // 0 for current format\n  numberOfMetrics:      r.uint16   // Number of advance widths in 'hmtx' table\n});\n","import * as r from 'restructure';\n\nlet HmtxEntry = new r.Struct({\n  advance: r.uint16,\n  bearing: r.int16\n});\n\nexport default new r.Struct({\n  metrics:    new r.LazyArray(HmtxEntry, t => t.parent.hhea.numberOfMetrics),\n  bearings:   new r.LazyArray(r.int16, t => t.parent.maxp.numGlyphs - t.parent.hhea.numberOfMetrics)\n});\n","import * as r from 'restructure';\n\n// maxiumum profile\nexport default new r.Struct({\n  version:                r.int32,\n  numGlyphs:              r.uint16,  // The number of glyphs in the font\n  maxPoints:              r.uint16,  // Maximum points in a non-composite glyph\n  maxContours:            r.uint16,  // Maximum contours in a non-composite glyph\n  maxComponentPoints:     r.uint16,  // Maximum points in a composite glyph\n  maxComponentContours:   r.uint16,  // Maximum contours in a composite glyph\n  maxZones:               r.uint16,  // 1 if instructions do not use the twilight zone, 2 otherwise\n  maxTwilightPoints:      r.uint16,  // Maximum points used in Z0\n  maxStorage:             r.uint16,  // Number of Storage Area locations\n  maxFunctionDefs:        r.uint16,  // Number of FDEFs\n  maxInstructionDefs:     r.uint16,  // Number of IDEFs\n  maxStackElements:       r.uint16,  // Maximum stack depth\n  maxSizeOfInstructions:  r.uint16,  // Maximum byte count for glyph instructions\n  maxComponentElements:   r.uint16,  // Maximum number of components referenced at “top level” for any composite glyph\n  maxComponentDepth:      r.uint16   // Maximum levels of recursion; 1 for simple components\n});\n","/**\n * Gets an encoding name from platform, encoding, and language ids.\n * Returned encoding names can be used in iconv-lite to decode text.\n */\nexport function getEncoding(platformID, encodingID, languageID = 0) {\n  if (platformID === 1 && MAC_LANGUAGE_ENCODINGS[languageID]) {\n    return MAC_LANGUAGE_ENCODINGS[languageID];\n  }\n  \n  return ENCODINGS[platformID][encodingID];\n}\n\nconst SINGLE_BYTE_ENCODINGS = new Set(['x-mac-roman', 'x-mac-cyrillic', 'iso-8859-6', 'iso-8859-8']);\nconst MAC_ENCODINGS = {\n  'x-mac-croatian': 'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®Š™´¨≠ŽØ∞±≤≥∆µ∂∑∏š∫ªºΩžø¿¡¬√ƒ≈Ć«Č… ÀÃÕŒœĐ—“”‘’÷◊©⁄€‹›Æ»–·‚„‰ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ˜¯πË˚¸Êæˇ',\n  'x-mac-gaelic': 'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØḂ±≤≥ḃĊċḊḋḞḟĠġṀæøṁṖṗɼƒſṠ«»… ÀÃÕŒœ–—“”‘’ṡẛÿŸṪ€‹›Ŷŷṫ·Ỳỳ⁊ÂÊÁËÈÍÎÏÌÓÔ♣ÒÚÛÙıÝýŴŵẄẅẀẁẂẃ',\n  'x-mac-greek': 'Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦€ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩάΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ\\u00AD',\n  'x-mac-icelandic': 'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',\n  'x-mac-inuit': 'ᐃᐄᐅᐆᐊᐋᐱᐲᐳᐴᐸᐹᑉᑎᑏᑐᑑᑕᑖᑦᑭᑮᑯᑰᑲᑳᒃᒋᒌᒍᒎᒐᒑ°ᒡᒥᒦ•¶ᒧ®©™ᒨᒪᒫᒻᓂᓃᓄᓅᓇᓈᓐᓯᓰᓱᓲᓴᓵᔅᓕᓖᓗᓘᓚᓛᓪᔨᔩᔪᔫᔭ… ᔮᔾᕕᕖᕗ–—“”‘’ᕘᕙᕚᕝᕆᕇᕈᕉᕋᕌᕐᕿᖀᖁᖂᖃᖄᖅᖏᖐᖑᖒᖓᖔᖕᙱᙲᙳᙴᙵᙶᖖᖠᖡᖢᖣᖤᖥᖦᕼŁł',\n  'x-mac-ce': 'ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ',\n  'x-mac-romanian': 'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ĂȘ∞±≤≥¥µ∂∑∏π∫ªºΩăș¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›Țț‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',\n  'x-mac-turkish': 'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙˆ˜¯˘˙˚¸˝˛ˇ'\n};\n\nconst encodingCache = new Map();\n\nexport function getEncodingMapping(encoding) {\n  let cached = encodingCache.get(encoding);\n  if (cached) {\n    return cached;\n  }\n\n  // These encodings aren't supported by TextDecoder.\n  let mapping = MAC_ENCODINGS[encoding];\n  if (mapping) {\n    let res = new Map();\n    for (let i = 0; i < mapping.length; i++) {\n      res.set(mapping.charCodeAt(i), 0x80 + i);\n    }\n\n    encodingCache.set(encoding, res);\n    return res;\n  }\n\n  // Only single byte encodings can be mapped 1:1.\n  if (SINGLE_BYTE_ENCODINGS.has(encoding)) {\n    // TextEncoder only supports utf8, whereas TextDecoder supports legacy encodings.\n    // Use this to create a mapping of code points.\n    let decoder = new TextDecoder(encoding);\n    let mapping = new Uint8Array(0x80);\n    for (let i = 0; i < 0x80; i++) {\n      mapping[i] = 0x80 + i;\n    }\n\n    let res = new Map();\n    let s = decoder.decode(mapping);\n    for (let i = 0; i < 0x80; i++) {\n      res.set(s.charCodeAt(i), 0x80 + i);\n    }\n\n    encodingCache.set(encoding, res);\n    return res;\n  }\n}\n\n// Map of platform ids to encoding ids.\nexport const ENCODINGS = [\n  // unicode\n  ['utf-16be', 'utf-16be', 'utf-16be', 'utf-16be', 'utf-16be', 'utf-16be', 'utf-16be'],\n  \n  // macintosh\n  // Mappings available at http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/\n  // 0\tRoman                 17\tMalayalam\n  // 1\tJapanese\t            18\tSinhalese\n  // 2\tTraditional Chinese\t  19\tBurmese\n  // 3\tKorean\t              20\tKhmer\n  // 4\tArabic\t              21\tThai\n  // 5\tHebrew\t              22\tLaotian\n  // 6\tGreek\t                23\tGeorgian\n  // 7\tRussian\t              24\tArmenian\n  // 8\tRSymbol\t              25\tSimplified Chinese\n  // 9\tDevanagari\t          26\tTibetan\n  // 10\tGurmukhi\t            27\tMongolian\n  // 11\tGujarati\t            28\tGeez\n  // 12\tOriya\t                29\tSlavic\n  // 13\tBengali\t              30\tVietnamese\n  // 14\tTamil\t                31\tSindhi\n  // 15\tTelugu\t              32\t(Uninterpreted)\n  // 16\tKannada\n  ['x-mac-roman', 'shift-jis', 'big5', 'euc-kr', 'iso-8859-6', 'iso-8859-8',\n   'x-mac-greek', 'x-mac-cyrillic', 'x-mac-symbol', 'x-mac-devanagari', 'x-mac-gurmukhi', 'x-mac-gujarati',\n   'Oriya', 'Bengali', 'Tamil', 'Telugu', 'Kannada', 'Malayalam', 'Sinhalese',\n   'Burmese', 'Khmer', 'iso-8859-11', 'Laotian', 'Georgian', 'Armenian', 'gbk', \n   'Tibetan', 'Mongolian', 'Geez', 'x-mac-ce', 'Vietnamese', 'Sindhi'],\n  \n  // ISO (deprecated)\n  ['ascii', null, 'iso-8859-1'],\n  \n  // windows\n  // Docs here: http://msdn.microsoft.com/en-us/library/system.text.encoding(v=vs.110).aspx\n  ['symbol', 'utf-16be', 'shift-jis', 'gb18030', 'big5', 'euc-kr', 'johab', null, null, null, 'utf-16be']\n];\n\n// Overrides for Mac scripts by language id.\n// See http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/Readme.txt\nexport const MAC_LANGUAGE_ENCODINGS = {\n  15: 'x-mac-icelandic',\n  17: 'x-mac-turkish',\n  18: 'x-mac-croatian',\n  24: 'x-mac-ce',\n  25: 'x-mac-ce',\n  26: 'x-mac-ce',\n  27: 'x-mac-ce',\n  28: 'x-mac-ce',\n  30: 'x-mac-icelandic',\n  37: 'x-mac-romanian',\n  38: 'x-mac-ce',\n  39: 'x-mac-ce',\n  40: 'x-mac-ce',\n  143: 'x-mac-inuit',\n  146: 'x-mac-gaelic'\n};\n\n// Map of platform ids to BCP-47 language codes.\nexport const LANGUAGES = [\n  // unicode\n  [],\n  \n  { // macintosh\n    0: 'en',        30: 'fo',       60: 'ks',       90: 'rw',\n    1: 'fr',        31: 'fa',       61: 'ku',       91: 'rn',\n    2: 'de',        32: 'ru',       62: 'sd',       92: 'ny',\n    3: 'it',        33: 'zh',       63: 'bo',       93: 'mg',\n    4: 'nl',        34: 'nl-BE',    64: 'ne',       94: 'eo',\n    5: 'sv',        35: 'ga',       65: 'sa',       128: 'cy',\n    6: 'es',        36: 'sq',       66: 'mr',       129: 'eu',\n    7: 'da',        37: 'ro',       67: 'bn',       130: 'ca',\n    8: 'pt',        38: 'cz',       68: 'as',       131: 'la',\n    9: 'no',        39: 'sk',       69: 'gu',       132: 'qu',\n    10: 'he',       40: 'si',       70: 'pa',       133: 'gn',\n    11: 'ja',       41: 'yi',       71: 'or',       134: 'ay',\n    12: 'ar',       42: 'sr',       72: 'ml',       135: 'tt',\n    13: 'fi',       43: 'mk',       73: 'kn',       136: 'ug',\n    14: 'el',       44: 'bg',       74: 'ta',       137: 'dz',\n    15: 'is',       45: 'uk',       75: 'te',       138: 'jv',\n    16: 'mt',       46: 'be',       76: 'si',       139: 'su',\n    17: 'tr',       47: 'uz',       77: 'my',       140: 'gl',\n    18: 'hr',       48: 'kk',       78: 'km',       141: 'af',\n    19: 'zh-Hant',  49: 'az-Cyrl',  79: 'lo',       142: 'br',\n    20: 'ur',       50: 'az-Arab',  80: 'vi',       143: 'iu',\n    21: 'hi',       51: 'hy',       81: 'id',       144: 'gd',\n    22: 'th',       52: 'ka',       82: 'tl',       145: 'gv',\n    23: 'ko',       53: 'mo',       83: 'ms',       146: 'ga',\n    24: 'lt',       54: 'ky',       84: 'ms-Arab',  147: 'to',\n    25: 'pl',       55: 'tg',       85: 'am',       148: 'el-polyton',\n    26: 'hu',       56: 'tk',       86: 'ti',       149: 'kl',\n    27: 'es',       57: 'mn-CN',    87: 'om',       150: 'az',\n    28: 'lv',       58: 'mn',       88: 'so',       151: 'nn',\n    29: 'se',       59: 'ps',       89: 'sw',\n  },\n  \n  // ISO (deprecated)\n  [],\n  \n  { // windows                                        \n    0x0436: 'af',       0x4009: 'en-IN',    0x0487: 'rw',          0x0432: 'tn',       \n    0x041C: 'sq',       0x1809: 'en-IE',    0x0441: 'sw',          0x045B: 'si',          \n    0x0484: 'gsw',      0x2009: 'en-JM',    0x0457: 'kok',         0x041B: 'sk',          \n    0x045E: 'am',       0x4409: 'en-MY',    0x0412: 'ko',          0x0424: 'sl',          \n    0x1401: 'ar-DZ',    0x1409: 'en-NZ',    0x0440: 'ky',          0x2C0A: 'es-AR',       \n    0x3C01: 'ar-BH',    0x3409: 'en-PH',    0x0454: 'lo',          0x400A: 'es-BO',       \n    0x0C01: 'ar',       0x4809: 'en-SG',    0x0426: 'lv',          0x340A: 'es-CL',       \n    0x0801: 'ar-IQ',    0x1C09: 'en-ZA',    0x0427: 'lt',          0x240A: 'es-CO',       \n    0x2C01: 'ar-JO',    0x2C09: 'en-TT',    0x082E: 'dsb',         0x140A: 'es-CR',       \n    0x3401: 'ar-KW',    0x0809: 'en-GB',    0x046E: 'lb',          0x1C0A: 'es-DO',       \n    0x3001: 'ar-LB',    0x0409: 'en',       0x042F: 'mk',          0x300A: 'es-EC',       \n    0x1001: 'ar-LY',    0x3009: 'en-ZW',    0x083E: 'ms-BN',       0x440A: 'es-SV',       \n    0x1801: 'ary',      0x0425: 'et',       0x043E: 'ms',          0x100A: 'es-GT',       \n    0x2001: 'ar-OM',    0x0438: 'fo',       0x044C: 'ml',          0x480A: 'es-HN',       \n    0x4001: 'ar-QA',    0x0464: 'fil',      0x043A: 'mt',          0x080A: 'es-MX',       \n    0x0401: 'ar-SA',    0x040B: 'fi',       0x0481: 'mi',          0x4C0A: 'es-NI',       \n    0x2801: 'ar-SY',    0x080C: 'fr-BE',    0x047A: 'arn',         0x180A: 'es-PA',       \n    0x1C01: 'aeb',      0x0C0C: 'fr-CA',    0x044E: 'mr',          0x3C0A: 'es-PY',       \n    0x3801: 'ar-AE',    0x040C: 'fr',       0x047C: 'moh',         0x280A: 'es-PE',       \n    0x2401: 'ar-YE',    0x140C: 'fr-LU',    0x0450: 'mn',          0x500A: 'es-PR',       \n    0x042B: 'hy',       0x180C: 'fr-MC',    0x0850: 'mn-CN',       0x0C0A: 'es',          \n    0x044D: 'as',       0x100C: 'fr-CH',    0x0461: 'ne',          0x040A: 'es',          \n    0x082C: 'az-Cyrl',  0x0462: 'fy',       0x0414: 'nb',          0x540A: 'es-US',       \n    0x042C: 'az',       0x0456: 'gl',       0x0814: 'nn',          0x380A: 'es-UY',     \n    0x046D: 'ba',       0x0437: 'ka',       0x0482: 'oc',          0x200A: 'es-VE',       \n    0x042D: 'eu',       0x0C07: 'de-AT',    0x0448: 'or',          0x081D: 'sv-FI',       \n    0x0423: 'be',       0x0407: 'de',       0x0463: 'ps',          0x041D: 'sv',          \n    0x0845: 'bn',       0x1407: 'de-LI',    0x0415: 'pl',          0x045A: 'syr',         \n    0x0445: 'bn-IN',    0x1007: 'de-LU',    0x0416: 'pt',          0x0428: 'tg',          \n    0x201A: 'bs-Cyrl',  0x0807: 'de-CH',    0x0816: 'pt-PT',       0x085F: 'tzm',         \n    0x141A: 'bs',       0x0408: 'el',       0x0446: 'pa',          0x0449: 'ta',          \n    0x047E: 'br',       0x046F: 'kl',       0x046B: 'qu-BO',       0x0444: 'tt',          \n    0x0402: 'bg',       0x0447: 'gu',       0x086B: 'qu-EC',       0x044A: 'te',          \n    0x0403: 'ca',       0x0468: 'ha',       0x0C6B: 'qu',          0x041E: 'th',          \n    0x0C04: 'zh-HK',    0x040D: 'he',       0x0418: 'ro',          0x0451: 'bo',          \n    0x1404: 'zh-MO',    0x0439: 'hi',       0x0417: 'rm',          0x041F: 'tr',          \n    0x0804: 'zh',       0x040E: 'hu',       0x0419: 'ru',          0x0442: 'tk',          \n    0x1004: 'zh-SG',    0x040F: 'is',       0x243B: 'smn',         0x0480: 'ug',          \n    0x0404: 'zh-TW',    0x0470: 'ig',       0x103B: 'smj-NO',      0x0422: 'uk',          \n    0x0483: 'co',       0x0421: 'id',       0x143B: 'smj',         0x042E: 'hsb',         \n    0x041A: 'hr',       0x045D: 'iu',       0x0C3B: 'se-FI',       0x0420: 'ur',          \n    0x101A: 'hr-BA',    0x085D: 'iu-Latn',  0x043B: 'se',          0x0843: 'uz-Cyrl',     \n    0x0405: 'cs',       0x083C: 'ga',       0x083B: 'se-SE',       0x0443: 'uz',          \n    0x0406: 'da',       0x0434: 'xh',       0x203B: 'sms',         0x042A: 'vi',          \n    0x048C: 'prs',      0x0435: 'zu',       0x183B: 'sma-NO',      0x0452: 'cy',          \n    0x0465: 'dv',       0x0410: 'it',       0x1C3B: 'sms',         0x0488: 'wo',          \n    0x0813: 'nl-BE',    0x0810: 'it-CH',    0x044F: 'sa',          0x0485: 'sah',         \n    0x0413: 'nl',       0x0411: 'ja',       0x1C1A: 'sr-Cyrl-BA',  0x0478: 'ii',          \n    0x0C09: 'en-AU',    0x044B: 'kn',       0x0C1A: 'sr',          0x046A: 'yo',           \n    0x2809: 'en-BZ',    0x043F: 'kk',       0x181A: 'sr-Latn-BA',  \n    0x1009: 'en-CA',    0x0453: 'km',       0x081A: 'sr-Latn',     \n    0x2409: 'en-029',   0x0486: 'quc',      0x046C: 'nso',         \n  }\n];\n","import * as r from 'restructure';\nimport {getEncoding, LANGUAGES} from '../encodings';\n\nlet NameRecord = new r.Struct({\n  platformID: r.uint16,\n  encodingID: r.uint16,\n  languageID: r.uint16,\n  nameID:     r.uint16,\n  length:     r.uint16,\n  string:     new r.Pointer(r.uint16,\n    new r.String('length', t => getEncoding(t.platformID, t.encodingID, t.languageID)),\n    { type: 'parent', relativeTo: ctx => ctx.parent.stringOffset, allowNull: false }\n  )\n});\n\nlet LangTagRecord = new r.Struct({\n  length:  r.uint16,\n  tag:     new r.Pointer(r.uint16, new r.String('length', 'utf16be'), {type: 'parent', relativeTo: ctx => ctx.stringOffset})\n});\n\nvar NameTable = new r.VersionedStruct(r.uint16, {\n  0: {\n    count:          r.uint16,\n    stringOffset:   r.uint16,\n    records:        new r.Array(NameRecord, 'count')\n  },\n  1: {\n    count:          r.uint16,\n    stringOffset:   r.uint16,\n    records:        new r.Array(NameRecord, 'count'),\n    langTagCount:   r.uint16,\n    langTags:       new r.Array(LangTagRecord, 'langTagCount')\n  }\n});\n\nexport default NameTable;\n\nconst NAMES = [\n  'copyright',\n  'fontFamily',\n  'fontSubfamily',\n  'uniqueSubfamily',\n  'fullName',\n  'version',\n  'postscriptName', // Note: A font may have only one PostScript name and that name must be ASCII.\n  'trademark',\n  'manufacturer',\n  'designer',\n  'description',\n  'vendorURL',\n  'designerURL',\n  'license',\n  'licenseURL',\n  null, // reserved\n  'preferredFamily',\n  'preferredSubfamily',\n  'compatibleFull',\n  'sampleText',\n  'postscriptCIDFontName',\n  'wwsFamilyName',\n  'wwsSubfamilyName'\n];\n\nNameTable.process = function(stream) {\n  var records = {};\n  for (let record of this.records) {\n    // find out what language this is for\n    let language = LANGUAGES[record.platformID][record.languageID];\n\n    if (language == null && this.langTags != null && record.languageID >= 0x8000) {\n      language = this.langTags[record.languageID - 0x8000].tag;\n    }\n\n    if (language == null) {\n      language = record.platformID + '-' + record.languageID;\n    }\n\n    // if the nameID is >= 256, it is a font feature record (AAT)\n    let key = record.nameID >= 256 ? 'fontFeatures' : (NAMES[record.nameID] || record.nameID);\n    if (records[key] == null) {\n      records[key] = {};\n    }\n\n    let obj = records[key];\n    if (record.nameID >= 256) {\n      obj = obj[record.nameID] || (obj[record.nameID] = {});\n    }\n\n    if (typeof record.string === 'string' || typeof obj[language] !== 'string') {\n      obj[language] = record.string;\n    }\n  }\n\n  this.records = records;\n};\n\nNameTable.preEncode = function() {\n  if (Array.isArray(this.records)) return;\n  this.version = 0;\n\n  let records = [];\n  for (let key in this.records) {\n    let val = this.records[key];\n    if (key === 'fontFeatures') continue;\n\n    records.push({\n      platformID: 3,\n      encodingID: 1,\n      languageID: 0x409,\n      nameID: NAMES.indexOf(key),\n      length: val.en.length * 2,\n      string: val.en\n    });\n\n    if (key === 'postscriptName') {\n      records.push({\n        platformID: 1,\n        encodingID: 0,\n        languageID: 0,\n        nameID: NAMES.indexOf(key),\n        length: val.en.length,\n        string: val.en\n      });\n    }\n  }\n\n  this.records = records;\n  this.count = records.length;\n  this.stringOffset = NameTable.size(this, null, false);\n};\n","import * as r from 'restructure';\n\nvar OS2 = new r.VersionedStruct(r.uint16, {\n  header: {\n    xAvgCharWidth:          r.int16,   // average weighted advance width of lower case letters and space\n    usWeightClass:          r.uint16,  // visual weight of stroke in glyphs\n    usWidthClass:           r.uint16,  // relative change from the normal aspect ratio (width to height ratio)\n    fsType:                 new r.Bitfield(r.uint16, [ // Indicates font embedding licensing rights\n      null, 'noEmbedding', 'viewOnly', 'editable', null,\n      null, null, null, 'noSubsetting', 'bitmapOnly'\n    ]),\n    ySubscriptXSize:        r.int16,   // recommended horizontal size in pixels for subscripts\n    ySubscriptYSize:        r.int16,   // recommended vertical size in pixels for subscripts\n    ySubscriptXOffset:      r.int16,   // recommended horizontal offset for subscripts\n    ySubscriptYOffset:      r.int16,   // recommended vertical offset form the baseline for subscripts\n    ySuperscriptXSize:      r.int16,   // recommended horizontal size in pixels for superscripts\n    ySuperscriptYSize:      r.int16,   // recommended vertical size in pixels for superscripts\n    ySuperscriptXOffset:    r.int16,   // recommended horizontal offset for superscripts\n    ySuperscriptYOffset:    r.int16,   // recommended vertical offset from the baseline for superscripts\n    yStrikeoutSize:         r.int16,   // width of the strikeout stroke\n    yStrikeoutPosition:     r.int16,   // position of the strikeout stroke relative to the baseline\n    sFamilyClass:           r.int16,   // classification of font-family design\n    panose:                 new r.Array(r.uint8, 10),   // describe the visual characteristics of a given typeface\n    ulCharRange:            new r.Array(r.uint32, 4),\n    vendorID:               new r.String(4),          // four character identifier for the font vendor\n    fsSelection:            new r.Bitfield(r.uint16, [  // bit field containing information about the font\n      'italic', 'underscore', 'negative', 'outlined', 'strikeout',\n      'bold', 'regular', 'useTypoMetrics', 'wws', 'oblique'\n    ]),\n    usFirstCharIndex:       r.uint16,  // The minimum Unicode index in this font\n    usLastCharIndex:        r.uint16   // The maximum Unicode index in this font\n  },\n\n  // The Apple version of this table ends here, but the Microsoft one continues on...\n  0: {},\n\n  1: {\n    typoAscender:       r.int16,\n    typoDescender:      r.int16,\n    typoLineGap:        r.int16,\n    winAscent:          r.uint16,\n    winDescent:         r.uint16,\n    codePageRange:      new r.Array(r.uint32, 2)\n  },\n\n  2: {\n    // these should be common with version 1 somehow\n    typoAscender:       r.int16,\n    typoDescender:      r.int16,\n    typoLineGap:        r.int16,\n    winAscent:          r.uint16,\n    winDescent:         r.uint16,\n    codePageRange:      new r.Array(r.uint32, 2),\n\n    xHeight:            r.int16,\n    capHeight:          r.int16,\n    defaultChar:        r.uint16,\n    breakChar:          r.uint16,\n    maxContent:         r.uint16\n  },\n\n  5: {\n    typoAscender:       r.int16,\n    typoDescender:      r.int16,\n    typoLineGap:        r.int16,\n    winAscent:          r.uint16,\n    winDescent:         r.uint16,\n    codePageRange:      new r.Array(r.uint32, 2),\n\n    xHeight:            r.int16,\n    capHeight:          r.int16,\n    defaultChar:        r.uint16,\n    breakChar:          r.uint16,\n    maxContent:         r.uint16,\n\n    usLowerOpticalPointSize: r.uint16,\n    usUpperOpticalPointSize: r.uint16\n  }\n});\n\nlet versions = OS2.versions;\nversions[3] = versions[4] = versions[2];\n\nexport default OS2;\n","import * as r from 'restructure';\n\n// PostScript information\nexport default new r.VersionedStruct(r.fixed32, {\n  header: { // these fields exist at the top of all versions\n    italicAngle:        r.fixed32, // Italic angle in counter-clockwise degrees from the vertical.\n    underlinePosition:  r.int16,   // Suggested distance of the top of the underline from the baseline\n    underlineThickness: r.int16,   // Suggested values for the underline thickness\n    isFixedPitch:       r.uint32,  // Whether the font is monospaced\n    minMemType42:       r.uint32,  // Minimum memory usage when a TrueType font is downloaded as a Type 42 font\n    maxMemType42:       r.uint32,  // Maximum memory usage when a TrueType font is downloaded as a Type 42 font\n    minMemType1:        r.uint32,  // Minimum memory usage when a TrueType font is downloaded as a Type 1 font\n    maxMemType1:        r.uint32   // Maximum memory usage when a TrueType font is downloaded as a Type 1 font\n  },\n\n  1: {}, // version 1 has no additional fields\n\n  2: {\n    numberOfGlyphs: r.uint16,\n    glyphNameIndex: new r.Array(r.uint16, 'numberOfGlyphs'),\n    names:          new r.Array(new r.String(r.uint8))\n  },\n\n  2.5: {\n    numberOfGlyphs: r.uint16,\n    offsets:        new r.Array(r.uint8, 'numberOfGlyphs')\n  },\n\n  3: {}, // version 3 has no additional fields\n\n  4: {\n    map: new r.Array(r.uint32, t => t.parent.maxp.numGlyphs)\n  }\n});\n","import * as r from 'restructure';\n\n// An array of predefined values accessible by instructions\nexport default new r.Struct({\n  controlValues: new r.Array(r.int16)\n});\n","import * as r from 'restructure';\n\n// A list of instructions that are executed once when a font is first used.\n// These instructions are known as the font program. The main use of this table\n// is for the definition of functions that are used in many different glyph programs.\nexport default new r.Struct({\n  instructions: new r.Array(r.uint8)\n});\n","import * as r from 'restructure';\n\nlet loca = new r.VersionedStruct('head.indexToLocFormat', {\n  0: {\n    offsets: new r.Array(r.uint16)\n  },\n  1: {\n    offsets: new r.Array(r.uint32)\n  }\n});\n\nloca.process = function() {\n  if (this.version === 0 && !this._processed) {\n    for (let i = 0; i < this.offsets.length; i++) {\n      this.offsets[i] <<= 1;\n    }\n    this._processed = true;\n  }\n};\n\nloca.preEncode = function() {\n  if (this.version === 0 && this._processed !== false) {\n    for (let i = 0; i < this.offsets.length; i++) {\n      this.offsets[i] >>>= 1;\n    }\n    this._processed = false;\n  }\n};\n\nexport default loca;\n","import * as r from 'restructure';\n\n// Set of instructions executed whenever the point size or font transformation change\nexport default new r.Struct({\n  controlValueProgram: new r.Array(r.uint8)\n});\n","import * as r from 'restructure';\n\n// only used for encoding\nexport default new r.Array(new r.Buffer);\n","import * as r from 'restructure';\n\nexport default class CFFIndex {\n  constructor(type) {\n    this.type = type;\n  }\n\n  getCFFVersion(ctx) {\n    while (ctx && !ctx.hdrSize) {\n      ctx = ctx.parent;\n    }\n\n    return ctx ? ctx.version : -1;\n  }\n\n  decode(stream, parent) {\n    let version = this.getCFFVersion(parent);\n    let count = version >= 2\n      ? stream.readUInt32BE()\n      : stream.readUInt16BE();\n\n    if (count === 0) {\n      return [];\n    }\n\n    let offSize = stream.readUInt8();\n    let offsetType;\n    if (offSize === 1) {\n      offsetType = r.uint8;\n    } else if (offSize === 2) {\n      offsetType = r.uint16;\n    } else if (offSize === 3) {\n      offsetType = r.uint24;\n    } else if (offSize === 4) {\n      offsetType = r.uint32;\n    } else {\n      throw new Error(`Bad offset size in CFFIndex: ${offSize} ${stream.pos}`);\n    }\n\n    let ret = [];\n    let startPos = stream.pos + ((count + 1) * offSize) - 1;\n\n    let start = offsetType.decode(stream);\n    for (let i = 0; i < count; i++) {\n      let end = offsetType.decode(stream);\n\n      if (this.type != null) {\n        let pos = stream.pos;\n        stream.pos = startPos + start;\n\n        parent.length = end - start;\n        ret.push(this.type.decode(stream, parent));\n        stream.pos = pos;\n      } else {\n        ret.push({\n          offset: startPos + start,\n          length: end - start\n        });\n      }\n\n      start = end;\n    }\n\n    stream.pos = startPos + start;\n    return ret;\n  }\n\n  size(arr, parent) {\n    let size = 2;\n    if (arr.length === 0) {\n      return size;\n    }\n\n    let type = this.type || new r.Buffer;\n\n    // find maximum offset to detminine offset type\n    let offset = 1;\n    for (let i = 0; i < arr.length; i++) {\n      let item = arr[i];\n      offset += type.size(item, parent);\n    }\n\n    let offsetType;\n    if (offset <= 0xff) {\n      offsetType = r.uint8;\n    } else if (offset <= 0xffff) {\n      offsetType = r.uint16;\n    } else if (offset <= 0xffffff) {\n      offsetType = r.uint24;\n    } else if (offset <= 0xffffffff) {\n      offsetType = r.uint32;\n    } else {\n      throw new Error(\"Bad offset in CFFIndex\");\n    }\n\n    size += 1 + offsetType.size() * (arr.length + 1);\n    size += offset - 1;\n\n    return size;\n  }\n\n  encode(stream, arr, parent) {\n    stream.writeUInt16BE(arr.length);\n    if (arr.length === 0) {\n      return;\n    }\n\n    let type = this.type || new r.Buffer;\n\n    // find maximum offset to detminine offset type\n    let sizes = [];\n    let offset = 1;\n    for (let item of arr) {\n      let s = type.size(item, parent);\n      sizes.push(s);\n      offset += s;\n    }\n\n    let offsetType;\n    if (offset <= 0xff) {\n      offsetType = r.uint8;\n    } else if (offset <= 0xffff) {\n      offsetType = r.uint16;\n    } else if (offset <= 0xffffff) {\n      offsetType = r.uint24;\n    } else if (offset <= 0xffffffff) {\n      offsetType = r.uint32;\n    } else {\n      throw new Error(\"Bad offset in CFFIndex\");\n    }\n\n    // write offset size\n    stream.writeUInt8(offsetType.size());\n\n    // write elements\n    offset = 1;\n    offsetType.encode(stream, offset);\n\n    for (let size of sizes) {\n      offset += size;\n      offsetType.encode(stream, offset);\n    }\n\n    for (let item of arr) {\n      type.encode(stream, item, parent);\n    }\n\n    return;\n  }\n}\n","const FLOAT_EOF = 0xf;\nconst FLOAT_LOOKUP = [\n  '0', '1', '2', '3', '4', '5', '6', '7',\n  '8', '9', '.', 'E', 'E-', null, '-'\n];\n\nconst FLOAT_ENCODE_LOOKUP = {\n  '.': 10,\n  'E': 11,\n  'E-': 12,\n  '-': 14\n};\n\nexport default class CFFOperand {\n  static decode(stream, value) {\n    if (32 <= value && value <= 246) {\n      return value - 139;\n    }\n\n    if (247 <= value && value <= 250) {\n      return (value - 247) * 256 + stream.readUInt8() + 108;\n    }\n\n    if (251 <= value && value <= 254) {\n      return -(value - 251) * 256 - stream.readUInt8() - 108;\n    }\n\n    if (value === 28) {\n      return stream.readInt16BE();\n    }\n\n    if (value === 29) {\n      return stream.readInt32BE();\n    }\n\n    if (value === 30) {\n      let str = '';\n      while (true) {\n        let b = stream.readUInt8();\n\n        let n1 = b >> 4;\n        if (n1 === FLOAT_EOF) { break; }\n        str += FLOAT_LOOKUP[n1];\n\n        let n2 = b & 15;\n        if (n2 === FLOAT_EOF) { break; }\n        str += FLOAT_LOOKUP[n2];\n      }\n\n      return parseFloat(str);\n    }\n\n    return null;\n  }\n\n  static size(value) {\n    // if the value needs to be forced to the largest size (32 bit)\n    // e.g. for unknown pointers, set to 32768\n    if (value.forceLarge) {\n      value = 32768;\n    }\n\n    if ((value | 0) !== value) { // floating point\n      let str = '' + value;\n      return 1 + Math.ceil((str.length + 1) / 2);\n\n    } else if (-107 <= value && value <= 107) {\n      return 1;\n\n    } else if (108 <= value && value <= 1131 || -1131 <= value && value <= -108) {\n      return 2;\n\n    } else if (-32768 <= value && value <= 32767) {\n      return 3;\n\n    } else {\n      return 5;\n    }\n  }\n\n  static encode(stream, value) {\n    // if the value needs to be forced to the largest size (32 bit)\n    // e.g. for unknown pointers, save the old value and set to 32768\n    let val = Number(value);\n\n    if (value.forceLarge) {\n      stream.writeUInt8(29);\n      return stream.writeInt32BE(val);\n\n    } else if ((val | 0) !== val) { // floating point\n      stream.writeUInt8(30);\n\n      let str = '' + val;\n      for (let i = 0; i < str.length; i += 2) {\n        let c1 = str[i];\n        let n1 = FLOAT_ENCODE_LOOKUP[c1] || +c1;\n\n        if (i === str.length - 1) {\n          var n2 = FLOAT_EOF;\n        } else {\n          let c2 = str[i + 1];\n          var n2 = FLOAT_ENCODE_LOOKUP[c2] || +c2;\n        }\n\n        stream.writeUInt8((n1 << 4) | (n2 & 15));\n      }\n\n      if (n2 !== FLOAT_EOF) {\n        return stream.writeUInt8((FLOAT_EOF << 4));\n      }\n\n    } else if (-107 <= val && val <= 107) {\n      return stream.writeUInt8(val + 139);\n\n    } else if (108 <= val && val <= 1131) {\n      val -= 108;\n      stream.writeUInt8((val >> 8) + 247);\n      return stream.writeUInt8(val & 0xff);\n\n    } else if (-1131 <= val && val <= -108) {\n      val = -val - 108;\n      stream.writeUInt8((val >> 8) + 251);\n      return stream.writeUInt8(val & 0xff);\n\n    } else if (-32768 <= val && val <= 32767) {\n      stream.writeUInt8(28);\n      return stream.writeInt16BE(val);\n\n    } else {\n      stream.writeUInt8(29);\n      return stream.writeInt32BE(val);\n    }\n  }\n}\n","import isEqual from 'fast-deep-equal';\nimport * as r from 'restructure';\nimport CFFOperand from './CFFOperand';\nimport { PropertyDescriptor } from 'restructure';\n\nexport default class CFFDict {\n  constructor(ops = []) {\n    this.ops = ops;\n    this.fields = {};\n    for (let field of ops) {\n      let key = Array.isArray(field[0]) ? field[0][0] << 8 | field[0][1] : field[0];\n      this.fields[key] = field;\n    }\n  }\n\n  decodeOperands(type, stream, ret, operands) {\n    if (Array.isArray(type)) {\n      return operands.map((op, i) => this.decodeOperands(type[i], stream, ret, [op]));\n    } else if (type.decode != null) {\n      return type.decode(stream, ret, operands);\n    } else {\n      switch (type) {\n        case 'number':\n        case 'offset':\n        case 'sid':\n          return operands[0];\n        case 'boolean':\n          return !!operands[0];\n        default:\n          return operands;\n      }\n    }\n  }\n\n  encodeOperands(type, stream, ctx, operands) {\n    if (Array.isArray(type)) {\n      return operands.map((op, i) => this.encodeOperands(type[i], stream, ctx, op)[0]);\n    } else if (type.encode != null) {\n      return type.encode(stream, operands, ctx);\n    } else if (typeof operands === 'number') {\n      return [operands];\n    } else if (typeof operands === 'boolean') {\n      return [+operands];\n    } else if (Array.isArray(operands)) {\n      return operands;\n    } else {\n      return [operands];\n    }\n  }\n\n  decode(stream, parent) {\n    let end = stream.pos + parent.length;\n    let ret = {};\n    let operands = [];\n\n    // define hidden properties\n    Object.defineProperties(ret, {\n      parent:         { value: parent },\n      _startOffset:   { value: stream.pos }\n    });\n\n    // fill in defaults\n    for (let key in this.fields) {\n      let field = this.fields[key];\n      ret[field[1]] = field[3];\n    }\n\n    while (stream.pos < end) {\n      let b = stream.readUInt8();\n      if (b < 28) {\n        if (b === 12) {\n          b = (b << 8) | stream.readUInt8();\n        }\n\n        let field = this.fields[b];\n        if (!field) {\n          throw new Error(`Unknown operator ${b}`);\n        }\n\n        let val = this.decodeOperands(field[2], stream, ret, operands);\n        if (val != null) {\n          if (val instanceof PropertyDescriptor) {\n            Object.defineProperty(ret, field[1], val);\n          } else {\n            ret[field[1]] = val;\n          }\n        }\n\n        operands = [];\n      } else {\n        operands.push(CFFOperand.decode(stream, b));\n      }\n    }\n\n    return ret;\n  }\n\n  size(dict, parent, includePointers = true) {\n    let ctx = {\n      parent,\n      val: dict,\n      pointerSize: 0,\n      startOffset: parent.startOffset || 0\n    };\n\n    let len = 0;\n\n    for (let k in this.fields) {\n      let field = this.fields[k];\n      let val = dict[field[1]];\n      if (val == null || isEqual(val, field[3])) {\n        continue;\n      }\n\n      let operands = this.encodeOperands(field[2], null, ctx, val);\n      for (let op of operands) {\n        len += CFFOperand.size(op);\n      }\n\n      let key = Array.isArray(field[0]) ? field[0] : [field[0]];\n      len += key.length;\n    }\n\n    if (includePointers) {\n      len += ctx.pointerSize;\n    }\n\n    return len;\n  }\n\n  encode(stream, dict, parent) {\n    let ctx = {\n      pointers: [],\n      startOffset: stream.pos,\n      parent,\n      val: dict,\n      pointerSize: 0\n    };\n\n    ctx.pointerOffset = stream.pos + this.size(dict, ctx, false);\n\n    for (let field of this.ops) {\n      let val = dict[field[1]];\n      if (val == null || isEqual(val, field[3])) {\n        continue;\n      }\n\n      let operands = this.encodeOperands(field[2], stream, ctx, val);\n      for (let op of operands) {\n        CFFOperand.encode(stream, op);\n      }\n\n      let key = Array.isArray(field[0]) ? field[0] : [field[0]];\n      for (let op of key) {\n        stream.writeUInt8(op);\n      }\n    }\n\n    let i = 0;\n    while (i < ctx.pointers.length) {\n      let ptr = ctx.pointers[i++];\n      ptr.type.encode(stream, ptr.val, ptr.parent);\n    }\n\n    return;\n  }\n}\n","import * as r from 'restructure';\n\nexport default class CFFPointer extends r.Pointer {\n  constructor(type, options = {}) {\n    if (options.type == null) {\n      options.type = 'global';\n    }\n\n    super(null, type, options);\n  }\n\n  decode(stream, parent, operands) {\n    this.offsetType = {\n      decode: () => operands[0]\n    };\n\n    return super.decode(stream, parent, operands);\n  }\n\n  encode(stream, value, ctx) {\n    if (!stream) {\n      // compute the size (so ctx.pointerSize is correct)\n      this.offsetType = {\n        size: () => 0\n      };\n\n      this.size(value, ctx);\n      return [new Ptr(0)];\n    }\n\n    let ptr = null;\n    this.offsetType = {\n      encode: (stream, val) => ptr = val\n    };\n\n    super.encode(stream, value, ctx);\n    return [new Ptr(ptr)];\n  }\n}\n\nclass Ptr {\n  constructor(val) {\n    this.val = val;\n    this.forceLarge = true;\n  }\n\n  valueOf() {\n    return this.val;\n  }\n}\n","import CFFDict from './CFFDict';\nimport CFFIndex from './CFFIndex';\nimport CFFPointer from './CFFPointer';\n\nclass CFFBlendOp {\n  static decode(stream, parent, operands) {\n    let numBlends = operands.pop();\n\n    // TODO: actually blend. For now just consume the deltas\n    // since we don't use any of the values anyway.\n    while (operands.length > numBlends) {\n      operands.pop();\n    }\n  }\n}\n\nexport default new CFFDict([\n  // key       name                    type                                          default\n  [6,         'BlueValues',           'delta',                                       null],\n  [7,         'OtherBlues',           'delta',                                       null],\n  [8,         'FamilyBlues',          'delta',                                       null],\n  [9,         'FamilyOtherBlues',     'delta',                                       null],\n  [[12, 9],   'BlueScale',            'number',                                      0.039625],\n  [[12, 10],  'BlueShift',            'number',                                      7],\n  [[12, 11],  'BlueFuzz',             'number',                                      1],\n  [10,        'StdHW',                'number',                                      null],\n  [11,        'StdVW',                'number',                                      null],\n  [[12, 12],  'StemSnapH',            'delta',                                       null],\n  [[12, 13],  'StemSnapV',            'delta',                                       null],\n  [[12, 14],  'ForceBold',            'boolean',                                     false],\n  [[12, 17],  'LanguageGroup',        'number',                                      0],\n  [[12, 18],  'ExpansionFactor',      'number',                                      0.06],\n  [[12, 19],  'initialRandomSeed',    'number',                                      0],\n  [20,        'defaultWidthX',        'number',                                      0],\n  [21,        'nominalWidthX',        'number',                                      0],\n  [22,        'vsindex',              'number',                                      0],\n  [23,        'blend',                CFFBlendOp,                                    null],\n  [19,        'Subrs',                new CFFPointer(new CFFIndex, {type: 'local'}), null]\n]);\n","// Automatically generated from Appendix A of the CFF specification; do\n// not edit. Length should be 391.\nexport default [\n  \".notdef\", \"space\", \"exclam\", \"quotedbl\", \"numbersign\", \"dollar\",\n  \"percent\", \"ampersand\", \"quoteright\", \"parenleft\", \"parenright\",\n  \"asterisk\", \"plus\", \"comma\", \"hyphen\", \"period\", \"slash\", \"zero\", \"one\",\n  \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"colon\",\n  \"semicolon\", \"less\", \"equal\", \"greater\", \"question\", \"at\", \"A\", \"B\", \"C\",\n  \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\",\n  \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"bracketleft\", \"backslash\",\n  \"bracketright\", \"asciicircum\", \"underscore\", \"quoteleft\", \"a\", \"b\", \"c\",\n  \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\",\n  \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"braceleft\", \"bar\", \"braceright\",\n  \"asciitilde\", \"exclamdown\", \"cent\", \"sterling\", \"fraction\", \"yen\",\n  \"florin\", \"section\", \"currency\", \"quotesingle\", \"quotedblleft\",\n  \"guillemotleft\", \"guilsinglleft\", \"guilsinglright\", \"fi\", \"fl\", \"endash\",\n  \"dagger\", \"daggerdbl\", \"periodcentered\", \"paragraph\", \"bullet\",\n  \"quotesinglbase\", \"quotedblbase\", \"quotedblright\", \"guillemotright\",\n  \"ellipsis\", \"perthousand\", \"questiondown\", \"grave\", \"acute\", \"circumflex\",\n  \"tilde\", \"macron\", \"breve\", \"dotaccent\", \"dieresis\", \"ring\", \"cedilla\",\n  \"hungarumlaut\", \"ogonek\", \"caron\", \"emdash\", \"AE\", \"ordfeminine\", \"Lslash\",\n  \"Oslash\", \"OE\", \"ordmasculine\", \"ae\", \"dotlessi\", \"lslash\", \"oslash\", \"oe\",\n  \"germandbls\", \"onesuperior\", \"logicalnot\", \"mu\", \"trademark\", \"Eth\",\n  \"onehalf\", \"plusminus\", \"Thorn\", \"onequarter\", \"divide\", \"brokenbar\",\n  \"degree\", \"thorn\", \"threequarters\", \"twosuperior\", \"registered\", \"minus\",\n  \"eth\", \"multiply\", \"threesuperior\", \"copyright\", \"Aacute\", \"Acircumflex\",\n  \"Adieresis\", \"Agrave\", \"Aring\", \"Atilde\", \"Ccedilla\", \"Eacute\",\n  \"Ecircumflex\", \"Edieresis\", \"Egrave\", \"Iacute\", \"Icircumflex\", \"Idieresis\",\n  \"Igrave\", \"Ntilde\", \"Oacute\", \"Ocircumflex\", \"Odieresis\", \"Ograve\",\n  \"Otilde\", \"Scaron\", \"Uacute\", \"Ucircumflex\", \"Udieresis\", \"Ugrave\",\n  \"Yacute\", \"Ydieresis\", \"Zcaron\", \"aacute\", \"acircumflex\", \"adieresis\",\n  \"agrave\", \"aring\", \"atilde\", \"ccedilla\", \"eacute\", \"ecircumflex\",\n  \"edieresis\", \"egrave\", \"iacute\", \"icircumflex\", \"idieresis\", \"igrave\",\n  \"ntilde\", \"oacute\", \"ocircumflex\", \"odieresis\", \"ograve\", \"otilde\",\n  \"scaron\", \"uacute\", \"ucircumflex\", \"udieresis\", \"ugrave\", \"yacute\",\n  \"ydieresis\", \"zcaron\", \"exclamsmall\", \"Hungarumlautsmall\",\n  \"dollaroldstyle\", \"dollarsuperior\", \"ampersandsmall\", \"Acutesmall\",\n  \"parenleftsuperior\", \"parenrightsuperior\", \"twodotenleader\",\n  \"onedotenleader\", \"zerooldstyle\", \"oneoldstyle\", \"twooldstyle\",\n  \"threeoldstyle\", \"fouroldstyle\", \"fiveoldstyle\", \"sixoldstyle\",\n  \"sevenoldstyle\", \"eightoldstyle\", \"nineoldstyle\", \"commasuperior\",\n  \"threequartersemdash\", \"periodsuperior\", \"questionsmall\", \"asuperior\",\n  \"bsuperior\", \"centsuperior\", \"dsuperior\", \"esuperior\", \"isuperior\",\n  \"lsuperior\", \"msuperior\", \"nsuperior\", \"osuperior\", \"rsuperior\",\n  \"ssuperior\", \"tsuperior\", \"ff\", \"ffi\", \"ffl\", \"parenleftinferior\",\n  \"parenrightinferior\", \"Circumflexsmall\", \"hyphensuperior\", \"Gravesmall\",\n  \"Asmall\", \"Bsmall\", \"Csmall\", \"Dsmall\", \"Esmall\", \"Fsmall\", \"Gsmall\",\n  \"Hsmall\", \"Ismall\", \"Jsmall\", \"Ksmall\", \"Lsmall\", \"Msmall\", \"Nsmall\",\n  \"Osmall\", \"Psmall\", \"Qsmall\", \"Rsmall\", \"Ssmall\", \"Tsmall\", \"Usmall\",\n  \"Vsmall\", \"Wsmall\", \"Xsmall\", \"Ysmall\", \"Zsmall\", \"colonmonetary\",\n  \"onefitted\", \"rupiah\", \"Tildesmall\", \"exclamdownsmall\", \"centoldstyle\",\n  \"Lslashsmall\", \"Scaronsmall\", \"Zcaronsmall\", \"Dieresissmall\", \"Brevesmall\",\n  \"Caronsmall\", \"Dotaccentsmall\", \"Macronsmall\", \"figuredash\",\n  \"hypheninferior\", \"Ogoneksmall\", \"Ringsmall\", \"Cedillasmall\",\n  \"questiondownsmall\", \"oneeighth\", \"threeeighths\", \"fiveeighths\",\n  \"seveneighths\", \"onethird\", \"twothirds\", \"zerosuperior\", \"foursuperior\",\n  \"fivesuperior\", \"sixsuperior\", \"sevensuperior\", \"eightsuperior\",\n  \"ninesuperior\", \"zeroinferior\", \"oneinferior\", \"twoinferior\",\n  \"threeinferior\", \"fourinferior\", \"fiveinferior\", \"sixinferior\",\n  \"seveninferior\", \"eightinferior\", \"nineinferior\", \"centinferior\",\n  \"dollarinferior\", \"periodinferior\", \"commainferior\", \"Agravesmall\",\n  \"Aacutesmall\", \"Acircumflexsmall\", \"Atildesmall\", \"Adieresissmall\",\n  \"Aringsmall\", \"AEsmall\", \"Ccedillasmall\", \"Egravesmall\", \"Eacutesmall\",\n  \"Ecircumflexsmall\", \"Edieresissmall\", \"Igravesmall\", \"Iacutesmall\",\n  \"Icircumflexsmall\", \"Idieresissmall\", \"Ethsmall\", \"Ntildesmall\",\n  \"Ogravesmall\", \"Oacutesmall\", \"Ocircumflexsmall\", \"Otildesmall\",\n  \"Odieresissmall\", \"OEsmall\", \"Oslashsmall\", \"Ugravesmall\", \"Uacutesmall\",\n  \"Ucircumflexsmall\", \"Udieresissmall\", \"Yacutesmall\", \"Thornsmall\",\n  \"Ydieresissmall\", \"001.000\", \"001.001\", \"001.002\", \"001.003\", \"Black\",\n  \"Bold\", \"Book\", \"Light\", \"Medium\", \"Regular\", \"Roman\", \"Semibold\"\n];\n","export let StandardEncoding = [\n  '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',\n  '', '', '', '', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright',\n  'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two',\n  'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater',\n  'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',\n  'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore',\n  'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',\n  'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', '', '', '', '', '', '', '', '',\n  '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',\n  'exclamdown', 'cent', 'sterling', 'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle',\n  'quotedblleft', 'guillemotleft', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', '', 'endash', 'dagger',\n  'daggerdbl', 'periodcentered', '', 'paragraph', 'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright',\n  'guillemotright', 'ellipsis', 'perthousand', '', 'questiondown', '', 'grave', 'acute', 'circumflex', 'tilde',\n  'macron', 'breve', 'dotaccent', 'dieresis', '', 'ring', 'cedilla', '', 'hungarumlaut', 'ogonek', 'caron',\n  'emdash', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'AE', '', 'ordfeminine', '', '', '',\n  '', 'Lslash', 'Oslash', 'OE', 'ordmasculine', '', '', '', '', '', 'ae', '', '', '', 'dotlessi', '', '',\n  'lslash', 'oslash', 'oe', 'germandbls'\n];\n\nexport let ExpertEncoding = [\n  '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',\n  '', '', '', '', 'space', 'exclamsmall', 'Hungarumlautsmall', '', 'dollaroldstyle', 'dollarsuperior',\n  'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', 'twodotenleader', 'onedotenleader',\n  'comma', 'hyphen', 'period', 'fraction', 'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle',\n  'fouroldstyle', 'fiveoldstyle', 'sixoldstyle', 'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'colon',\n  'semicolon', 'commasuperior', 'threequartersemdash', 'periodsuperior', 'questionsmall', '', 'asuperior',\n  'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', '', '', 'isuperior', '', '', 'lsuperior', 'msuperior',\n  'nsuperior', 'osuperior', '', '', 'rsuperior', 'ssuperior', 'tsuperior', '', 'ff', 'fi', 'fl', 'ffi', 'ffl',\n  'parenleftinferior', '', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall',\n  'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall',\n  'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall',\n  'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', '', '', '', '', '', '', '',\n  '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',\n  'exclamdownsmall', 'centoldstyle', 'Lslashsmall', '', '', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall',\n  'Brevesmall', 'Caronsmall', '', 'Dotaccentsmall', '', '', 'Macronsmall', '', '', 'figuredash', 'hypheninferior',\n  '', '', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall', '', '', '', 'onequarter', 'onehalf', 'threequarters',\n  'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds', '',\n  '', 'zerosuperior', 'onesuperior', 'twosuperior', 'threesuperior', 'foursuperior', 'fivesuperior',\n  'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior', 'zeroinferior', 'oneinferior', 'twoinferior',\n  'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior', 'eightinferior',\n  'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior', 'commainferior', 'Agravesmall',\n  'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall', 'Aringsmall', 'AEsmall', 'Ccedillasmall',\n  'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall', 'Igravesmall', 'Iacutesmall',\n  'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall', 'Oacutesmall',\n  'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall', 'Uacutesmall',\n  'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall'\n];\n","export let ISOAdobeCharset = [\n  '.notdef', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar',\n  'percent', 'ampersand', 'quoteright', 'parenleft', 'parenright',\n  'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero',\n  'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight',\n  'nine', 'colon', 'semicolon', 'less', 'equal', 'greater', 'question',\n  'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',\n  'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',\n  'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore',\n  'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',\n  'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n  'braceleft', 'bar', 'braceright', 'asciitilde', 'exclamdown', 'cent',\n  'sterling', 'fraction', 'yen', 'florin', 'section', 'currency',\n  'quotesingle', 'quotedblleft', 'guillemotleft', 'guilsinglleft',\n  'guilsinglright', 'fi', 'fl', 'endash', 'dagger', 'daggerdbl',\n  'periodcentered', 'paragraph', 'bullet', 'quotesinglbase',\n  'quotedblbase', 'quotedblright', 'guillemotright', 'ellipsis',\n  'perthousand', 'questiondown', 'grave', 'acute', 'circumflex', 'tilde',\n  'macron', 'breve', 'dotaccent', 'dieresis', 'ring', 'cedilla',\n  'hungarumlaut', 'ogonek', 'caron', 'emdash', 'AE', 'ordfeminine',\n  'Lslash', 'Oslash', 'OE', 'ordmasculine', 'ae', 'dotlessi', 'lslash',\n  'oslash', 'oe', 'germandbls', 'onesuperior', 'logicalnot', 'mu',\n  'trademark', 'Eth', 'onehalf', 'plusminus', 'Thorn', 'onequarter',\n  'divide', 'brokenbar', 'degree', 'thorn', 'threequarters', 'twosuperior',\n  'registered', 'minus', 'eth', 'multiply', 'threesuperior', 'copyright',\n  'Aacute', 'Acircumflex', 'Adieresis', 'Agrave', 'Aring', 'Atilde',\n  'Ccedilla', 'Eacute', 'Ecircumflex', 'Edieresis', 'Egrave', 'Iacute',\n  'Icircumflex', 'Idieresis', 'Igrave', 'Ntilde', 'Oacute', 'Ocircumflex',\n  'Odieresis', 'Ograve', 'Otilde', 'Scaron', 'Uacute', 'Ucircumflex',\n  'Udieresis', 'Ugrave', 'Yacute', 'Ydieresis', 'Zcaron', 'aacute',\n  'acircumflex', 'adieresis', 'agrave', 'aring', 'atilde', 'ccedilla',\n  'eacute', 'ecircumflex', 'edieresis', 'egrave', 'iacute', 'icircumflex',\n  'idieresis', 'igrave', 'ntilde', 'oacute', 'ocircumflex', 'odieresis',\n  'ograve', 'otilde', 'scaron', 'uacute', 'ucircumflex', 'udieresis',\n  'ugrave', 'yacute', 'ydieresis', 'zcaron'\n];\n\nexport let ExpertCharset = [\n  '.notdef', 'space', 'exclamsmall', 'Hungarumlautsmall', 'dollaroldstyle',\n  'dollarsuperior', 'ampersandsmall', 'Acutesmall', 'parenleftsuperior',\n  'parenrightsuperior', 'twodotenleader', 'onedotenleader', 'comma',\n  'hyphen', 'period', 'fraction', 'zerooldstyle', 'oneoldstyle',\n  'twooldstyle', 'threeoldstyle', 'fouroldstyle', 'fiveoldstyle',\n  'sixoldstyle', 'sevenoldstyle', 'eightoldstyle', 'nineoldstyle',\n  'colon', 'semicolon', 'commasuperior', 'threequartersemdash',\n  'periodsuperior', 'questionsmall', 'asuperior', 'bsuperior',\n  'centsuperior', 'dsuperior', 'esuperior', 'isuperior', 'lsuperior',\n  'msuperior', 'nsuperior', 'osuperior', 'rsuperior', 'ssuperior',\n  'tsuperior', 'ff', 'fi', 'fl', 'ffi', 'ffl', 'parenleftinferior',\n  'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall',\n  'Asmall', 'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall',\n  'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall', 'Msmall', 'Nsmall',\n  'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall',\n  'Vsmall', 'Wsmall', 'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary',\n  'onefitted', 'rupiah', 'Tildesmall', 'exclamdownsmall', 'centoldstyle',\n  'Lslashsmall', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall',\n  'Brevesmall', 'Caronsmall', 'Dotaccentsmall', 'Macronsmall',\n  'figuredash', 'hypheninferior', 'Ogoneksmall', 'Ringsmall',\n  'Cedillasmall', 'onequarter', 'onehalf', 'threequarters',\n  'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths',\n  'seveneighths', 'onethird', 'twothirds', 'zerosuperior', 'onesuperior',\n  'twosuperior', 'threesuperior', 'foursuperior', 'fivesuperior',\n  'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior',\n  'zeroinferior', 'oneinferior', 'twoinferior', 'threeinferior',\n  'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior',\n  'eightinferior', 'nineinferior', 'centinferior', 'dollarinferior',\n  'periodinferior', 'commainferior', 'Agravesmall', 'Aacutesmall',\n  'Acircumflexsmall', 'Atildesmall', 'Adieresissmall', 'Aringsmall',\n  'AEsmall', 'Ccedillasmall', 'Egravesmall', 'Eacutesmall',\n  'Ecircumflexsmall', 'Edieresissmall', 'Igravesmall', 'Iacutesmall',\n  'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall',\n  'Ogravesmall', 'Oacutesmall', 'Ocircumflexsmall', 'Otildesmall',\n  'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall', 'Uacutesmall',\n  'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall',\n  'Ydieresissmall'\n];\n\nexport let ExpertSubsetCharset = [\n  '.notdef', 'space', 'dollaroldstyle', 'dollarsuperior',\n  'parenleftsuperior', 'parenrightsuperior', 'twodotenleader',\n  'onedotenleader', 'comma', 'hyphen', 'period', 'fraction',\n  'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle',\n  'fouroldstyle', 'fiveoldstyle', 'sixoldstyle', 'sevenoldstyle',\n  'eightoldstyle', 'nineoldstyle', 'colon', 'semicolon', 'commasuperior',\n  'threequartersemdash', 'periodsuperior', 'asuperior', 'bsuperior',\n  'centsuperior', 'dsuperior', 'esuperior', 'isuperior', 'lsuperior',\n  'msuperior', 'nsuperior', 'osuperior', 'rsuperior', 'ssuperior',\n  'tsuperior', 'ff', 'fi', 'fl', 'ffi', 'ffl', 'parenleftinferior',\n  'parenrightinferior', 'hyphensuperior', 'colonmonetary', 'onefitted',\n  'rupiah', 'centoldstyle', 'figuredash', 'hypheninferior', 'onequarter',\n  'onehalf', 'threequarters', 'oneeighth', 'threeeighths', 'fiveeighths',\n  'seveneighths', 'onethird', 'twothirds', 'zerosuperior', 'onesuperior',\n  'twosuperior', 'threesuperior', 'foursuperior', 'fivesuperior',\n  'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior',\n  'zeroinferior', 'oneinferior', 'twoinferior', 'threeinferior',\n  'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior',\n  'eightinferior', 'nineinferior', 'centinferior', 'dollarinferior',\n  'periodinferior', 'commainferior'\n];\n","import * as r from 'restructure';\n\n//########################\n// Scripts and Languages #\n//########################\n\nlet LangSysTable = new r.Struct({\n  reserved:         new r.Reserved(r.uint16),\n  reqFeatureIndex:  r.uint16,\n  featureCount:     r.uint16,\n  featureIndexes:   new r.Array(r.uint16, 'featureCount')\n});\n\nlet LangSysRecord = new r.Struct({\n  tag:      new r.String(4),\n  langSys:  new r.Pointer(r.uint16, LangSysTable, { type: 'parent' })\n});\n\nlet Script = new r.Struct({\n  defaultLangSys: new r.Pointer(r.uint16, LangSysTable),\n  count:          r.uint16,\n  langSysRecords: new r.Array(LangSysRecord, 'count')\n});\n\nlet ScriptRecord = new r.Struct({\n  tag:    new r.String(4),\n  script: new r.Pointer(r.uint16, Script, { type: 'parent' })\n});\n\nexport let ScriptList = new r.Array(ScriptRecord, r.uint16);\n\n//#######################\n// Features and Lookups #\n//#######################\n\nlet FeatureParams = new r.Struct({\n  version:    r.uint16, // should be set to 0 according OT spec\n  nameID:     r.uint16, //OT spec: UI Name ID or uiLabelNameId\n});\n\nexport let Feature = new r.Struct({\n  featureParams:      new r.Pointer(r.uint16, FeatureParams),\n  lookupCount:        r.uint16,\n  lookupListIndexes:  new r.Array(r.uint16, 'lookupCount')\n});\n\nlet FeatureRecord = new r.Struct({\n  tag:      new r.String(4),\n  feature:  new r.Pointer(r.uint16, Feature, { type: 'parent' })\n});\n\nexport let FeatureList = new r.Array(FeatureRecord, r.uint16);\n\nlet LookupFlags = new r.Struct({\n  markAttachmentType: r.uint8,\n  flags: new r.Bitfield(r.uint8, [\n    'rightToLeft', 'ignoreBaseGlyphs', 'ignoreLigatures',\n    'ignoreMarks', 'useMarkFilteringSet'\n  ])\n});\n\nexport function LookupList(SubTable) {\n  let Lookup = new r.Struct({\n    lookupType:         r.uint16,\n    flags:              LookupFlags,\n    subTableCount:      r.uint16,\n    subTables:          new r.Array(new r.Pointer(r.uint16, SubTable), 'subTableCount'),\n    markFilteringSet:   new r.Optional(r.uint16, t => t.flags.flags.useMarkFilteringSet)\n  });\n\n  return new r.LazyArray(new r.Pointer(r.uint16, Lookup), r.uint16);\n}\n\n//#################\n// Coverage Table #\n//#################\n\nlet RangeRecord = new r.Struct({\n  start:              r.uint16,\n  end:                r.uint16,\n  startCoverageIndex: r.uint16\n});\n\nexport let Coverage = new r.VersionedStruct(r.uint16, {\n  1: {\n    glyphCount:   r.uint16,\n    glyphs:       new r.Array(r.uint16, 'glyphCount')\n  },\n  2: {\n    rangeCount:   r.uint16,\n    rangeRecords: new r.Array(RangeRecord, 'rangeCount')\n  }\n});\n\n//#########################\n// Class Definition Table #\n//#########################\n\nlet ClassRangeRecord = new r.Struct({\n  start:  r.uint16,\n  end:    r.uint16,\n  class:  r.uint16\n});\n\nexport let ClassDef = new r.VersionedStruct(r.uint16, {\n  1: { // Class array\n    startGlyph:       r.uint16,\n    glyphCount:       r.uint16,\n    classValueArray:  new r.Array(r.uint16, 'glyphCount')\n  },\n  2: { // Class ranges\n    classRangeCount:  r.uint16,\n    classRangeRecord: new r.Array(ClassRangeRecord, 'classRangeCount')\n  }\n});\n\n//###############\n// Device Table #\n//###############\n\nexport let Device = new r.Struct({\n  a: r.uint16, // startSize for hinting Device, outerIndex for VariationIndex\n  b: r.uint16, // endSize for Device, innerIndex for VariationIndex\n  deltaFormat: r.uint16\n});\n\n//#############################################\n// Contextual Substitution/Positioning Tables #\n//#############################################\n\nlet LookupRecord = new r.Struct({\n  sequenceIndex:      r.uint16,\n  lookupListIndex:    r.uint16\n});\n\nlet Rule = new r.Struct({\n  glyphCount:     r.uint16,\n  lookupCount:    r.uint16,\n  input:          new r.Array(r.uint16, t => t.glyphCount - 1),\n  lookupRecords:  new r.Array(LookupRecord, 'lookupCount')\n});\n\nlet RuleSet = new r.Array(new r.Pointer(r.uint16, Rule), r.uint16);\n\nlet ClassRule = new r.Struct({\n  glyphCount:     r.uint16,\n  lookupCount:    r.uint16,\n  classes:        new r.Array(r.uint16, t => t.glyphCount - 1),\n  lookupRecords:  new r.Array(LookupRecord, 'lookupCount')\n});\n\nlet ClassSet = new r.Array(new r.Pointer(r.uint16, ClassRule), r.uint16);\n\nexport let Context = new r.VersionedStruct(r.uint16, {\n  1: { // Simple context\n    coverage:      new r.Pointer(r.uint16, Coverage),\n    ruleSetCount:  r.uint16,\n    ruleSets:      new r.Array(new r.Pointer(r.uint16, RuleSet), 'ruleSetCount')\n  },\n  2: { // Class-based context\n    coverage:      new r.Pointer(r.uint16, Coverage),\n    classDef:      new r.Pointer(r.uint16, ClassDef),\n    classSetCnt:   r.uint16,\n    classSet:      new r.Array(new r.Pointer(r.uint16, ClassSet), 'classSetCnt')\n  },\n  3: {\n    glyphCount:    r.uint16,\n    lookupCount:   r.uint16,\n    coverages:     new r.Array(new r.Pointer(r.uint16, Coverage), 'glyphCount'),\n    lookupRecords: new r.Array(LookupRecord, 'lookupCount')\n  }\n});\n\n//######################################################\n// Chaining Contextual Substitution/Positioning Tables #\n//######################################################\n\nlet ChainRule = new r.Struct({\n  backtrackGlyphCount:  r.uint16,\n  backtrack:            new r.Array(r.uint16, 'backtrackGlyphCount'),\n  inputGlyphCount:      r.uint16,\n  input:                new r.Array(r.uint16, t => t.inputGlyphCount - 1),\n  lookaheadGlyphCount:  r.uint16,\n  lookahead:            new r.Array(r.uint16, 'lookaheadGlyphCount'),\n  lookupCount:          r.uint16,\n  lookupRecords:        new r.Array(LookupRecord, 'lookupCount')\n});\n\nlet ChainRuleSet = new r.Array(new r.Pointer(r.uint16, ChainRule), r.uint16);\n\nexport let ChainingContext = new r.VersionedStruct(r.uint16, {\n  1: { // Simple context glyph substitution\n    coverage:           new r.Pointer(r.uint16, Coverage),\n    chainCount:         r.uint16,\n    chainRuleSets:      new r.Array(new r.Pointer(r.uint16, ChainRuleSet), 'chainCount')\n  },\n\n  2: { // Class-based chaining context\n    coverage:           new r.Pointer(r.uint16, Coverage),\n    backtrackClassDef:  new r.Pointer(r.uint16, ClassDef),\n    inputClassDef:      new r.Pointer(r.uint16, ClassDef),\n    lookaheadClassDef:  new r.Pointer(r.uint16, ClassDef),\n    chainCount:         r.uint16,\n    chainClassSet:      new r.Array(new r.Pointer(r.uint16, ChainRuleSet), 'chainCount')\n  },\n\n  3: { // Coverage-based chaining context\n    backtrackGlyphCount:    r.uint16,\n    backtrackCoverage:      new r.Array(new r.Pointer(r.uint16, Coverage), 'backtrackGlyphCount'),\n    inputGlyphCount:        r.uint16,\n    inputCoverage:          new r.Array(new r.Pointer(r.uint16, Coverage), 'inputGlyphCount'),\n    lookaheadGlyphCount:    r.uint16,\n    lookaheadCoverage:      new r.Array(new r.Pointer(r.uint16, Coverage), 'lookaheadGlyphCount'),\n    lookupCount:            r.uint16,\n    lookupRecords:          new r.Array(LookupRecord, 'lookupCount')\n  }\n});\n","import {Feature} from './opentype';\nimport * as r from 'restructure';\n\n/*******************\n * Variation Store *\n *******************/\n\nlet F2DOT14 = new r.Fixed(16, 'BE', 14);\nlet RegionAxisCoordinates = new r.Struct({\n  startCoord: F2DOT14,\n  peakCoord: F2DOT14,\n  endCoord: F2DOT14\n});\n\nlet VariationRegionList = new r.Struct({\n  axisCount: r.uint16,\n  regionCount: r.uint16,\n  variationRegions: new r.Array(new r.Array(RegionAxisCoordinates, 'axisCount'), 'regionCount')\n});\n\nlet DeltaSet = new r.Struct({\n  shortDeltas: new r.Array(r.int16, t => t.parent.shortDeltaCount),\n  regionDeltas: new r.Array(r.int8, t => t.parent.regionIndexCount - t.parent.shortDeltaCount),\n  deltas: t => t.shortDeltas.concat(t.regionDeltas)\n});\n\nlet ItemVariationData = new r.Struct({\n  itemCount: r.uint16,\n  shortDeltaCount: r.uint16,\n  regionIndexCount: r.uint16,\n  regionIndexes: new r.Array(r.uint16, 'regionIndexCount'),\n  deltaSets: new r.Array(DeltaSet, 'itemCount')\n});\n\nexport let ItemVariationStore = new r.Struct({\n  format: r.uint16,\n  variationRegionList: new r.Pointer(r.uint32, VariationRegionList),\n  variationDataCount: r.uint16,\n  itemVariationData: new r.Array(new r.Pointer(r.uint32, ItemVariationData), 'variationDataCount')\n});\n\n/**********************\n * Feature Variations *\n **********************/\n\nlet ConditionTable = new r.VersionedStruct(r.uint16, {\n  1: {\n    axisIndex: r.uint16,\n    axisIndex: r.uint16,\n    filterRangeMinValue: F2DOT14,\n    filterRangeMaxValue: F2DOT14\n  }\n});\n\nlet ConditionSet = new r.Struct({\n  conditionCount: r.uint16,\n  conditionTable: new r.Array(new r.Pointer(r.uint32, ConditionTable), 'conditionCount')\n});\n\nlet FeatureTableSubstitutionRecord = new r.Struct({\n  featureIndex: r.uint16,\n  alternateFeatureTable: new r.Pointer(r.uint32, Feature, {type: 'parent'})\n});\n\nlet FeatureTableSubstitution = new r.Struct({\n  version: r.fixed32,\n  substitutionCount: r.uint16,\n  substitutions: new r.Array(FeatureTableSubstitutionRecord, 'substitutionCount')\n});\n\nlet FeatureVariationRecord = new r.Struct({\n  conditionSet: new r.Pointer(r.uint32, ConditionSet, {type: 'parent'}),\n  featureTableSubstitution: new r.Pointer(r.uint32, FeatureTableSubstitution, {type: 'parent'})\n});\n\nexport let FeatureVariations = new r.Struct({\n  majorVersion: r.uint16,\n  minorVersion: r.uint16,\n  featureVariationRecordCount: r.uint32,\n  featureVariationRecords: new r.Array(FeatureVariationRecord, 'featureVariationRecordCount')\n});\n","import * as r from 'restructure';\nimport { resolveLength } from 'restructure';\nimport CFFDict from './CFFDict';\nimport CFFIndex from './CFFIndex';\nimport CFFPointer from './CFFPointer';\nimport CFFPrivateDict from './CFFPrivateDict';\nimport StandardStrings from './CFFStandardStrings';\nimport { StandardEncoding, ExpertEncoding } from './CFFEncodings';\nimport { ISOAdobeCharset, ExpertCharset, ExpertSubsetCharset } from './CFFCharsets';\nimport { ItemVariationStore } from '../tables/variations';\n\n// Checks if an operand is an index of a predefined value,\n// otherwise delegates to the provided type.\nclass PredefinedOp {\n  constructor(predefinedOps, type) {\n    this.predefinedOps = predefinedOps;\n    this.type = type;\n  }\n\n  decode(stream, parent, operands) {\n    if (this.predefinedOps[operands[0]]) {\n      return this.predefinedOps[operands[0]];\n    }\n\n    return this.type.decode(stream, parent, operands);\n  }\n\n  size(value, ctx) {\n    return this.type.size(value, ctx);\n  }\n\n  encode(stream, value, ctx) {\n    let index = this.predefinedOps.indexOf(value);\n    if (index !== -1) {\n      return index;\n    }\n\n    return this.type.encode(stream, value, ctx);\n  }\n}\n\nclass CFFEncodingVersion extends r.Number {\n  constructor() {\n    super('UInt8');\n  }\n\n  decode(stream) {\n    return r.uint8.decode(stream) & 0x7f;\n  }\n}\n\nlet Range1 = new r.Struct({\n  first: r.uint16,\n  nLeft: r.uint8\n});\n\nlet Range2 = new r.Struct({\n  first: r.uint16,\n  nLeft: r.uint16\n});\n\nlet CFFCustomEncoding = new r.VersionedStruct(new CFFEncodingVersion(), {\n  0: {\n    nCodes: r.uint8,\n    codes: new r.Array(r.uint8, 'nCodes')\n  },\n\n  1: {\n    nRanges: r.uint8,\n    ranges: new r.Array(Range1, 'nRanges')\n  }\n\n  // TODO: supplement?\n});\n\nlet CFFEncoding = new PredefinedOp([ StandardEncoding, ExpertEncoding ], new CFFPointer(CFFCustomEncoding, { lazy: true }));\n\n// Decodes an array of ranges until the total\n// length is equal to the provided length.\nclass RangeArray extends r.Array {\n  decode(stream, parent) {\n    let length = resolveLength(this.length, stream, parent);\n    let count = 0;\n    let res = [];\n    while (count < length) {\n      let range = this.type.decode(stream, parent);\n      range.offset = count;\n      count += range.nLeft + 1;\n      res.push(range);\n    }\n\n    return res;\n  }\n}\n\nlet CFFCustomCharset = new r.VersionedStruct(r.uint8, {\n  0: {\n    glyphs: new r.Array(r.uint16, t => t.parent.CharStrings.length - 1)\n  },\n\n  1: {\n    ranges: new RangeArray(Range1, t => t.parent.CharStrings.length - 1)\n  },\n\n  2: {\n    ranges: new RangeArray(Range2, t => t.parent.CharStrings.length - 1)\n  }\n});\n\nlet CFFCharset = new PredefinedOp([ ISOAdobeCharset, ExpertCharset, ExpertSubsetCharset ], new CFFPointer(CFFCustomCharset, {lazy: true}));\n\nlet FDRange3 = new r.Struct({\n  first: r.uint16,\n  fd: r.uint8\n});\n\nlet FDRange4 = new r.Struct({\n  first: r.uint32,\n  fd: r.uint16\n});\n\nlet FDSelect = new r.VersionedStruct(r.uint8, {\n  0: {\n    fds: new r.Array(r.uint8, t => t.parent.CharStrings.length)\n  },\n\n  3: {\n    nRanges: r.uint16,\n    ranges: new r.Array(FDRange3, 'nRanges'),\n    sentinel: r.uint16\n  },\n\n  4: {\n    nRanges: r.uint32,\n    ranges: new r.Array(FDRange4, 'nRanges'),\n    sentinel: r.uint32\n  }\n});\n\nlet ptr = new CFFPointer(CFFPrivateDict);\nclass CFFPrivateOp {\n  decode(stream, parent, operands) {\n    parent.length = operands[0];\n    return ptr.decode(stream, parent, [operands[1]]);\n  }\n\n  size(dict, ctx) {\n    return [CFFPrivateDict.size(dict, ctx, false), ptr.size(dict, ctx)[0]];\n  }\n\n  encode(stream, dict, ctx) {\n    return [CFFPrivateDict.size(dict, ctx, false), ptr.encode(stream, dict, ctx)[0]];\n  }\n}\n\nlet FontDict = new CFFDict([\n  // key       name                   type(s)                                 default\n  [18,        'Private',              new CFFPrivateOp,                       null],\n  [[12, 38],  'FontName',             'sid',                                  null],\n  [[12, 7],   'FontMatrix',           'array',                                [0.001, 0, 0, 0.001, 0, 0]],\n  [[12, 5],   'PaintType',            'number',                               0],\n]);\n\nlet CFFTopDict = new CFFDict([\n  // key       name                   type(s)                                 default\n  [[12, 30],  'ROS',                  ['sid', 'sid', 'number'],               null],\n\n  [0,         'version',              'sid',                                  null],\n  [1,         'Notice',               'sid',                                  null],\n  [[12, 0],   'Copyright',            'sid',                                  null],\n  [2,         'FullName',             'sid',                                  null],\n  [3,         'FamilyName',           'sid',                                  null],\n  [4,         'Weight',               'sid',                                  null],\n  [[12, 1],   'isFixedPitch',         'boolean',                              false],\n  [[12, 2],   'ItalicAngle',          'number',                               0],\n  [[12, 3],   'UnderlinePosition',    'number',                               -100],\n  [[12, 4],   'UnderlineThickness',   'number',                               50],\n  [[12, 5],   'PaintType',            'number',                               0],\n  [[12, 6],   'CharstringType',       'number',                               2],\n  [[12, 7],   'FontMatrix',           'array',                                [0.001, 0, 0, 0.001, 0, 0]],\n  [13,        'UniqueID',             'number',                               null],\n  [5,         'FontBBox',             'array',                                [0, 0, 0, 0]],\n  [[12, 8],   'StrokeWidth',          'number',                               0],\n  [14,        'XUID',                 'array',                                null],\n  [15,        'charset',              CFFCharset,                             ISOAdobeCharset],\n  [16,        'Encoding',             CFFEncoding,                            StandardEncoding],\n  [17,        'CharStrings',          new CFFPointer(new CFFIndex),           null],\n  [18,        'Private',              new CFFPrivateOp,                       null],\n  [[12, 20],  'SyntheticBase',        'number',                               null],\n  [[12, 21],  'PostScript',           'sid',                                  null],\n  [[12, 22],  'BaseFontName',         'sid',                                  null],\n  [[12, 23],  'BaseFontBlend',        'delta',                                null],\n\n  // CID font specific\n  [[12, 31],  'CIDFontVersion',       'number',                               0],\n  [[12, 32],  'CIDFontRevision',      'number',                               0],\n  [[12, 33],  'CIDFontType',          'number',                               0],\n  [[12, 34],  'CIDCount',             'number',                               8720],\n  [[12, 35],  'UIDBase',              'number',                               null],\n  [[12, 37],  'FDSelect',             new CFFPointer(FDSelect),               null],\n  [[12, 36],  'FDArray',              new CFFPointer(new CFFIndex(FontDict)), null],\n  [[12, 38],  'FontName',             'sid',                                  null]\n]);\n\nlet VariationStore = new r.Struct({\n  length: r.uint16,\n  itemVariationStore: ItemVariationStore\n})\n\nlet CFF2TopDict = new CFFDict([\n  [[12, 7],   'FontMatrix',           'array',                                [0.001, 0, 0, 0.001, 0, 0]],\n  [17,        'CharStrings',          new CFFPointer(new CFFIndex),           null],\n  [[12, 37],  'FDSelect',             new CFFPointer(FDSelect),               null],\n  [[12, 36],  'FDArray',              new CFFPointer(new CFFIndex(FontDict)), null],\n  [24,        'vstore',               new CFFPointer(VariationStore),         null],\n  [25,        'maxstack',             'number',                               193]\n]);\n\nlet CFFTop = new r.VersionedStruct(r.fixed16, {\n  1: {\n    hdrSize:            r.uint8,\n    offSize:            r.uint8,\n    nameIndex:          new CFFIndex(new r.String('length')),\n    topDictIndex:       new CFFIndex(CFFTopDict),\n    stringIndex:        new CFFIndex(new r.String('length')),\n    globalSubrIndex:    new CFFIndex\n  },\n\n  2: {\n    hdrSize:            r.uint8,\n    length:             r.uint16,\n    topDict:            CFF2TopDict,\n    globalSubrIndex:    new CFFIndex\n  }\n});\n\nexport default CFFTop;\n","import * as r from 'restructure';\nimport CFFIndex from './CFFIndex';\nimport CFFTop from './CFFTop';\nimport CFFPrivateDict from './CFFPrivateDict';\nimport standardStrings from './CFFStandardStrings';\n\nclass CFFFont {\n  constructor(stream) {\n    this.stream = stream;\n    this.decode();\n  }\n\n  static decode(stream) {\n    return new CFFFont(stream);\n  }\n\n  decode() {\n    let start = this.stream.pos;\n    let top = CFFTop.decode(this.stream);\n    for (let key in top) {\n      let val = top[key];\n      this[key] = val;\n    }\n\n    if (this.version < 2) {\n      if (this.topDictIndex.length !== 1) {\n        throw new Error(\"Only a single font is allowed in CFF\");\n      }\n\n      this.topDict = this.topDictIndex[0];\n    }\n\n    this.isCIDFont = this.topDict.ROS != null;\n    return this;\n  }\n\n  string(sid) {\n    if (this.version >= 2) {\n      return null;\n    }\n\n    if (sid < standardStrings.length) {\n      return standardStrings[sid];\n    }\n\n    return this.stringIndex[sid - standardStrings.length];\n  }\n\n  get postscriptName() {\n    if (this.version < 2) {\n      return this.nameIndex[0];\n    }\n\n    return null;\n  }\n\n  get fullName() {\n    return this.string(this.topDict.FullName);\n  }\n\n  get familyName() {\n    return this.string(this.topDict.FamilyName);\n  }\n\n  getCharString(glyph) {\n    this.stream.pos = this.topDict.CharStrings[glyph].offset;\n    return this.stream.readBuffer(this.topDict.CharStrings[glyph].length);\n  }\n\n  getGlyphName(gid) {\n    // CFF2 glyph names are in the post table.\n    if (this.version >= 2) {\n      return null;\n    }\n\n    // CID-keyed fonts don't have glyph names\n    if (this.isCIDFont) {\n      return null;\n    }\n\n    let { charset } = this.topDict;\n    if (Array.isArray(charset)) {\n      return charset[gid];\n    }\n\n    if (gid === 0) {\n      return '.notdef';\n    }\n\n    gid -= 1;\n\n    switch (charset.version) {\n      case 0:\n        return this.string(charset.glyphs[gid]);\n\n      case 1:\n      case 2:\n        for (let i = 0; i < charset.ranges.length; i++) {\n          let range = charset.ranges[i];\n          if (range.offset <= gid && gid <= range.offset + range.nLeft) {\n            return this.string(range.first + (gid - range.offset));\n          }\n        }\n        break;\n    }\n\n    return null;\n  }\n\n  fdForGlyph(gid) {\n    if (!this.topDict.FDSelect) {\n      return null;\n    }\n\n    switch (this.topDict.FDSelect.version) {\n      case 0:\n        return this.topDict.FDSelect.fds[gid];\n\n      case 3:\n      case 4:\n        let { ranges } = this.topDict.FDSelect;\n        let low = 0;\n        let high = ranges.length - 1;\n\n        while (low <= high) {\n          let mid = (low + high) >> 1;\n\n          if (gid < ranges[mid].first) {\n            high = mid - 1;\n          } else if (mid < high && gid >= ranges[mid + 1].first) {\n            low = mid + 1;\n          } else {\n            return ranges[mid].fd;\n          }\n        }\n      default:\n        throw new Error(`Unknown FDSelect version: ${this.topDict.FDSelect.version}`);\n    }\n  }\n\n  privateDictForGlyph(gid) {\n    if (this.topDict.FDSelect) {\n      let fd = this.fdForGlyph(gid);\n      if (this.topDict.FDArray[fd]) {\n        return this.topDict.FDArray[fd].Private;\n      }\n\n      return null;\n    }\n\n    if (this.version < 2) {\n      return this.topDict.Private;\n    }\n\n    return this.topDict.FDArray[0].Private;\n  }\n}\n\nexport default CFFFont;\n","import * as r from 'restructure';\n\nlet VerticalOrigin = new r.Struct({\n  glyphIndex:   r.uint16,\n  vertOriginY:  r.int16\n});\n\nexport default new r.Struct({\n  majorVersion:           r.uint16,\n  minorVersion:           r.uint16,\n  defaultVertOriginY:     r.int16,\n  numVertOriginYMetrics:  r.uint16,\n  metrics:                new r.Array(VerticalOrigin, 'numVertOriginYMetrics')\n});\n","import * as r from 'restructure';\n\nexport let BigMetrics = new r.Struct({\n  height: r.uint8,\n  width: r.uint8,\n  horiBearingX: r.int8,\n  horiBearingY: r.int8,\n  horiAdvance: r.uint8,\n  vertBearingX: r.int8,\n  vertBearingY: r.int8,\n  vertAdvance: r.uint8\n});\n\nexport let SmallMetrics = new r.Struct({\n  height: r.uint8,\n  width: r.uint8,\n  bearingX: r.int8,\n  bearingY: r.int8,\n  advance: r.uint8\n});\n\nlet EBDTComponent = new r.Struct({\n  glyph: r.uint16,\n  xOffset: r.int8,\n  yOffset: r.int8\n});\n\nclass ByteAligned {}\n\nclass BitAligned {}\n\nexport let glyph = new r.VersionedStruct('version', {\n  1: {\n    metrics: SmallMetrics,\n    data: ByteAligned\n  },\n\n  2: {\n    metrics: SmallMetrics,\n    data: BitAligned\n  },\n\n  // format 3 is deprecated\n  // format 4 is not supported by Microsoft\n\n  5: {\n    data: BitAligned\n  },\n\n  6: {\n    metrics: BigMetrics,\n    data: ByteAligned\n  },\n\n  7: {\n    metrics: BigMetrics,\n    data: BitAligned\n  },\n\n  8: {\n    metrics: SmallMetrics,\n    pad: new r.Reserved(r.uint8),\n    numComponents: r.uint16,\n    components: new r.Array(EBDTComponent, 'numComponents')\n  },\n\n  9: {\n    metrics: BigMetrics,\n    pad: new r.Reserved(r.uint8),\n    numComponents: r.uint16,\n    components: new r.Array(EBDTComponent, 'numComponents')\n  },\n\n  17: {\n    metrics: SmallMetrics,\n    dataLen: r.uint32,\n    data: new r.Buffer('dataLen')\n  },\n\n  18: {\n    metrics: BigMetrics,\n    dataLen: r.uint32,\n    data: new r.Buffer('dataLen')\n  },\n\n  19: {\n    dataLen: r.uint32,\n    data: new r.Buffer('dataLen')\n  }\n});\n\n","import * as r from 'restructure';\nimport {BigMetrics} from './EBDT';\n\nlet SBitLineMetrics = new r.Struct({\n  ascender: r.int8,\n  descender: r.int8,\n  widthMax: r.uint8,\n  caretSlopeNumerator: r.int8,\n  caretSlopeDenominator: r.int8,\n  caretOffset: r.int8,\n  minOriginSB: r.int8,\n  minAdvanceSB: r.int8,\n  maxBeforeBL: r.int8,\n  minAfterBL: r.int8,\n  pad: new r.Reserved(r.int8, 2)\n});\n\nlet CodeOffsetPair = new r.Struct({\n  glyphCode: r.uint16,\n  offset: r.uint16\n});\n\nlet IndexSubtable = new r.VersionedStruct(r.uint16, {\n  header: {\n    imageFormat: r.uint16,\n    imageDataOffset: r.uint32\n  },\n\n  1: {\n    offsetArray: new r.Array(r.uint32, t => t.parent.lastGlyphIndex - t.parent.firstGlyphIndex + 1)\n  },\n\n  2: {\n    imageSize: r.uint32,\n    bigMetrics: BigMetrics\n  },\n\n  3: {\n    offsetArray: new r.Array(r.uint16, t => t.parent.lastGlyphIndex - t.parent.firstGlyphIndex + 1)\n  },\n\n  4: {\n    numGlyphs: r.uint32,\n    glyphArray: new r.Array(CodeOffsetPair, t => t.numGlyphs + 1)\n  },\n\n  5: {\n    imageSize: r.uint32,\n    bigMetrics: BigMetrics,\n    numGlyphs: r.uint32,\n    glyphCodeArray: new r.Array(r.uint16, 'numGlyphs')\n  }\n});\n\nlet IndexSubtableArray = new r.Struct({\n  firstGlyphIndex: r.uint16,\n  lastGlyphIndex: r.uint16,\n  subtable: new r.Pointer(r.uint32, IndexSubtable)\n});\n\nlet BitmapSizeTable = new r.Struct({\n  indexSubTableArray: new r.Pointer(r.uint32, new r.Array(IndexSubtableArray, 1), { type: 'parent' }),\n  indexTablesSize: r.uint32,\n  numberOfIndexSubTables: r.uint32,\n  colorRef: r.uint32,\n  hori: SBitLineMetrics,\n  vert: SBitLineMetrics,\n  startGlyphIndex: r.uint16,\n  endGlyphIndex: r.uint16,\n  ppemX: r.uint8,\n  ppemY: r.uint8,\n  bitDepth: r.uint8,\n  flags: new r.Bitfield(r.uint8, ['horizontal', 'vertical'])\n});\n\nexport default new r.Struct({\n  version:  r.uint32, // 0x00020000\n  numSizes: r.uint32,\n  sizes:    new r.Array(BitmapSizeTable, 'numSizes')\n});\n","import * as r from 'restructure';\n\nlet ImageTable = new r.Struct({\n  ppem: r.uint16,\n  resolution: r.uint16,\n  imageOffsets: new r.Array(new r.Pointer(r.uint32, 'void'), t => t.parent.parent.maxp.numGlyphs + 1)\n});\n\n// This is the Apple sbix table, used by the \"Apple Color Emoji\" font.\n// It includes several image tables with images for each bitmap glyph\n// of several different sizes.\nexport default new r.Struct({\n  version: r.uint16,\n  flags: new r.Bitfield(r.uint16, ['renderOutlines']),\n  numImgTables: r.uint32,\n  imageTables: new r.Array(new r.Pointer(r.uint32, ImageTable), 'numImgTables')\n});\n","import * as r from 'restructure';\n\nlet LayerRecord = new r.Struct({\n  gid: r.uint16,          // Glyph ID of layer glyph (must be in z-order from bottom to top).\n  paletteIndex: r.uint16  // Index value to use in the appropriate palette. This value must\n});                       // be less than numPaletteEntries in the CPAL table, except for\n                          // the special case noted below. Each palette entry is 16 bits.\n                          // A palette index of 0xFFFF is a special case indicating that\n                          // the text foreground color should be used.\n\nlet BaseGlyphRecord = new r.Struct({\n  gid: r.uint16,             // Glyph ID of reference glyph. This glyph is for reference only\n                             // and is not rendered for color.\n  firstLayerIndex: r.uint16, // Index (from beginning of the Layer Records) to the layer record.\n                             // There will be numLayers consecutive entries for this base glyph.\n  numLayers: r.uint16\n});\n\nexport default new r.Struct({\n  version: r.uint16,\n  numBaseGlyphRecords: r.uint16,\n  baseGlyphRecord: new r.Pointer(r.uint32, new r.Array(BaseGlyphRecord, 'numBaseGlyphRecords')),\n  layerRecords: new r.Pointer(r.uint32, new r.Array(LayerRecord, 'numLayerRecords'), { lazy: true }),\n  numLayerRecords: r.uint16\n});\n","import * as r from 'restructure';\n\nlet ColorRecord = new r.Struct({\n  blue: r.uint8,\n  green: r.uint8,\n  red: r.uint8,\n  alpha: r.uint8\n});\n\nexport default new r.VersionedStruct(r.uint16, {\n  header: {\n    numPaletteEntries: r.uint16,\n    numPalettes: r.uint16,\n    numColorRecords: r.uint16,\n    colorRecords: new r.Pointer(r.uint32, new r.Array(ColorRecord, 'numColorRecords')),\n    colorRecordIndices: new r.Array(r.uint16, 'numPalettes'),\n  },\n  0: {},\n  1: {\n    offsetPaletteTypeArray: new r.Pointer(r.uint32, new r.Array(r.uint32, 'numPalettes')),\n    offsetPaletteLabelArray: new r.Pointer(r.uint32, new r.Array(r.uint16, 'numPalettes')),\n    offsetPaletteEntryLabelArray: new r.Pointer(r.uint32, new r.Array(r.uint16, 'numPaletteEntries'))\n  }\n});\n","import * as r from 'restructure';\nimport {ScriptList, FeatureList, LookupList, Coverage, ClassDef, Device} from './opentype';\nimport {ItemVariationStore} from './variations';\n\nlet BaseCoord = new r.VersionedStruct(r.uint16, {\n  1: { // Design units only\n    coordinate:   r.int16 // X or Y value, in design units\n  },\n\n  2: { // Design units plus contour point\n    coordinate:     r.int16,   // X or Y value, in design units\n    referenceGlyph: r.uint16,  // GlyphID of control glyph\n    baseCoordPoint: r.uint16   // Index of contour point on the referenceGlyph\n  },\n\n  3: { // Design units plus Device table\n    coordinate:   r.int16,                         // X or Y value, in design units\n    deviceTable:  new r.Pointer(r.uint16, Device)  // Device table for X or Y value\n  }\n});\n\nlet BaseValues = new r.Struct({\n  defaultIndex:   r.uint16,  // Index of default baseline for this script-same index in the BaseTagList\n  baseCoordCount: r.uint16,\n  baseCoords:     new r.Array(new r.Pointer(r.uint16, BaseCoord), 'baseCoordCount')\n});\n\nlet FeatMinMaxRecord = new r.Struct({\n  tag:        new r.String(4),  // 4-byte feature identification tag-must match FeatureTag in FeatureList\n  minCoord:   new r.Pointer(r.uint16, BaseCoord, {type: 'parent'}), // May be NULL\n  maxCoord:   new r.Pointer(r.uint16, BaseCoord, {type: 'parent'})  // May be NULL\n});\n\nlet MinMax = new r.Struct({\n  minCoord:           new r.Pointer(r.uint16, BaseCoord),  // May be NULL\n  maxCoord:           new r.Pointer(r.uint16, BaseCoord),  // May be NULL\n  featMinMaxCount:    r.uint16,                            // May be 0\n  featMinMaxRecords:  new r.Array(FeatMinMaxRecord, 'featMinMaxCount') // In alphabetical order\n});\n\nlet BaseLangSysRecord = new r.Struct({\n  tag:    new r.String(4),  // 4-byte language system identification tag\n  minMax: new r.Pointer(r.uint16, MinMax, {type: 'parent'})\n});\n\nlet BaseScript = new r.Struct({\n  baseValues:         new r.Pointer(r.uint16, BaseValues), // May be NULL\n  defaultMinMax:      new r.Pointer(r.uint16, MinMax),     // May be NULL\n  baseLangSysCount:   r.uint16,                            // May be 0\n  baseLangSysRecords: new r.Array(BaseLangSysRecord, 'baseLangSysCount') // in alphabetical order by BaseLangSysTag\n});\n\nlet BaseScriptRecord = new r.Struct({\n  tag:      new r.String(4),  // 4-byte script identification tag\n  script:   new r.Pointer(r.uint16, BaseScript, {type: 'parent'})\n});\n\nlet BaseScriptList = new r.Array(BaseScriptRecord, r.uint16);\n\n// Array of 4-byte baseline identification tags-must be in alphabetical order\nlet BaseTagList = new r.Array(new r.String(4), r.uint16);\n\nlet Axis = new r.Struct({\n  baseTagList:    new r.Pointer(r.uint16, BaseTagList),  // May be NULL\n  baseScriptList: new r.Pointer(r.uint16, BaseScriptList)\n});\n\nexport default new r.VersionedStruct(r.uint32, {\n  header: {\n    horizAxis:    new r.Pointer(r.uint16, Axis),   // May be NULL\n    vertAxis:     new r.Pointer(r.uint16, Axis)    // May be NULL\n  },\n\n  0x00010000: {},\n  0x00010001: {\n    itemVariationStore: new r.Pointer(r.uint32, ItemVariationStore)\n  }\n});\n","import * as r from 'restructure';\nimport {ScriptList, FeatureList, LookupList, Coverage, ClassDef, Device} from './opentype';\nimport {ItemVariationStore} from './variations';\n\nlet AttachPoint = new r.Array(r.uint16, r.uint16);\nlet AttachList = new r.Struct({\n  coverage:       new r.Pointer(r.uint16, Coverage),\n  glyphCount:     r.uint16,\n  attachPoints:   new r.Array(new r.Pointer(r.uint16, AttachPoint), 'glyphCount')\n});\n\nlet CaretValue = new r.VersionedStruct(r.uint16, {\n  1: { // Design units only\n    coordinate: r.int16\n  },\n\n  2: { // Contour point\n    caretValuePoint: r.uint16\n  },\n\n  3: { // Design units plus Device table\n    coordinate:     r.int16,\n    deviceTable:    new r.Pointer(r.uint16, Device)\n  }\n});\n\nlet LigGlyph = new r.Array(new r.Pointer(r.uint16, CaretValue), r.uint16);\n\nlet LigCaretList = new r.Struct({\n  coverage:       new r.Pointer(r.uint16, Coverage),\n  ligGlyphCount:  r.uint16,\n  ligGlyphs:      new r.Array(new r.Pointer(r.uint16, LigGlyph), 'ligGlyphCount')\n});\n\nlet MarkGlyphSetsDef = new r.Struct({\n  markSetTableFormat: r.uint16,\n  markSetCount:       r.uint16,\n  coverage:           new r.Array(new r.Pointer(r.uint32, Coverage), 'markSetCount')\n});\n\nexport default new r.VersionedStruct(r.uint32, {\n  header: {\n    glyphClassDef:      new r.Pointer(r.uint16, ClassDef),\n    attachList:         new r.Pointer(r.uint16, AttachList),\n    ligCaretList:       new r.Pointer(r.uint16, LigCaretList),\n    markAttachClassDef: new r.Pointer(r.uint16, ClassDef)\n  },\n\n  0x00010000: {},\n  0x00010002: {\n    markGlyphSetsDef:   new r.Pointer(r.uint16, MarkGlyphSetsDef)\n  },\n  0x00010003: {\n    markGlyphSetsDef:   new r.Pointer(r.uint16, MarkGlyphSetsDef),\n    itemVariationStore: new r.Pointer(r.uint32, ItemVariationStore)\n  }\n});\n","import * as r from 'restructure';\nimport {ScriptList, FeatureList, LookupList, Coverage, ClassDef, Device, Context, ChainingContext} from './opentype';\nimport {FeatureVariations} from './variations';\n\nlet ValueFormat = new r.Bitfield(r.uint16, [\n  'xPlacement', 'yPlacement',\n  'xAdvance', 'yAdvance',\n  'xPlaDevice', 'yPlaDevice',\n  'xAdvDevice', 'yAdvDevice'\n]);\n\nlet types = {\n  xPlacement: r.int16,\n  yPlacement: r.int16,\n  xAdvance:   r.int16,\n  yAdvance:   r.int16,\n  xPlaDevice: new r.Pointer(r.uint16, Device, { type: 'global', relativeTo: ctx => ctx.rel }),\n  yPlaDevice: new r.Pointer(r.uint16, Device, { type: 'global', relativeTo: ctx => ctx.rel }),\n  xAdvDevice: new r.Pointer(r.uint16, Device, { type: 'global', relativeTo: ctx => ctx.rel }),\n  yAdvDevice: new r.Pointer(r.uint16, Device, { type: 'global', relativeTo: ctx => ctx.rel })\n};\n\nclass ValueRecord {\n  constructor(key = 'valueFormat') {\n    this.key = key;\n  }\n\n  buildStruct(parent) {\n    let struct = parent;\n    while (!struct[this.key] && struct.parent) {\n      struct = struct.parent;\n    }\n\n    if (!struct[this.key]) return;\n\n    let fields = {};\n    fields.rel = () => struct._startOffset;\n\n    let format = struct[this.key];\n    for (let key in format) {\n      if (format[key]) {\n        fields[key] = types[key];\n      }\n    }\n\n    return new r.Struct(fields);\n  }\n\n  size(val, ctx) {\n    return this.buildStruct(ctx).size(val, ctx);\n  }\n\n  decode(stream, parent) {\n    let res = this.buildStruct(parent).decode(stream, parent);\n    delete res.rel;\n    return res;\n  }\n}\n\nlet PairValueRecord = new r.Struct({\n  secondGlyph:    r.uint16,\n  value1:         new ValueRecord('valueFormat1'),\n  value2:         new ValueRecord('valueFormat2')\n});\n\nlet PairSet = new r.Array(PairValueRecord, r.uint16);\n\nlet Class2Record = new r.Struct({\n  value1: new ValueRecord('valueFormat1'),\n  value2: new ValueRecord('valueFormat2')\n});\n\nlet Anchor = new r.VersionedStruct(r.uint16, {\n  1: { // Design units only\n    xCoordinate:    r.int16,\n    yCoordinate:    r.int16\n  },\n\n  2: { // Design units plus contour point\n    xCoordinate:    r.int16,\n    yCoordinate:    r.int16,\n    anchorPoint:    r.uint16\n  },\n\n  3: { // Design units plus Device tables\n    xCoordinate:    r.int16,\n    yCoordinate:    r.int16,\n    xDeviceTable:   new r.Pointer(r.uint16, Device),\n    yDeviceTable:   new r.Pointer(r.uint16, Device)\n  }\n});\n\nlet EntryExitRecord = new r.Struct({\n  entryAnchor:    new r.Pointer(r.uint16, Anchor, {type: 'parent'}),\n  exitAnchor:     new r.Pointer(r.uint16, Anchor, {type: 'parent'})\n});\n\nlet MarkRecord = new r.Struct({\n  class:      r.uint16,\n  markAnchor: new r.Pointer(r.uint16, Anchor, {type: 'parent'})\n});\n\nlet MarkArray = new r.Array(MarkRecord, r.uint16);\n\nlet BaseRecord  = new r.Array(new r.Pointer(r.uint16, Anchor), t => t.parent.classCount);\nlet BaseArray   = new r.Array(BaseRecord, r.uint16);\n\nlet ComponentRecord = new r.Array(new r.Pointer(r.uint16, Anchor), t => t.parent.parent.classCount);\nlet LigatureAttach  = new r.Array(ComponentRecord, r.uint16);\nlet LigatureArray   = new r.Array(new r.Pointer(r.uint16, LigatureAttach), r.uint16);\n\nlet GPOSLookup = new r.VersionedStruct('lookupType', {\n  1: new r.VersionedStruct(r.uint16, { // Single Adjustment\n    1: { // Single positioning value\n      coverage:       new r.Pointer(r.uint16, Coverage),\n      valueFormat:    ValueFormat,\n      value:          new ValueRecord()\n    },\n    2: {\n      coverage:       new r.Pointer(r.uint16, Coverage),\n      valueFormat:    ValueFormat,\n      valueCount:     r.uint16,\n      values:         new r.LazyArray(new ValueRecord(), 'valueCount')\n    }\n  }),\n\n  2: new r.VersionedStruct(r.uint16, { // Pair Adjustment Positioning\n    1: { // Adjustments for glyph pairs\n      coverage:       new r.Pointer(r.uint16, Coverage),\n      valueFormat1:   ValueFormat,\n      valueFormat2:   ValueFormat,\n      pairSetCount:   r.uint16,\n      pairSets:       new r.LazyArray(new r.Pointer(r.uint16, PairSet), 'pairSetCount')\n    },\n\n    2: { // Class pair adjustment\n      coverage:       new r.Pointer(r.uint16, Coverage),\n      valueFormat1:   ValueFormat,\n      valueFormat2:   ValueFormat,\n      classDef1:      new r.Pointer(r.uint16, ClassDef),\n      classDef2:      new r.Pointer(r.uint16, ClassDef),\n      class1Count:    r.uint16,\n      class2Count:    r.uint16,\n      classRecords:   new r.LazyArray(new r.LazyArray(Class2Record, 'class2Count'), 'class1Count')\n    }\n  }),\n\n  3: { // Cursive Attachment Positioning\n    format:             r.uint16,\n    coverage:           new r.Pointer(r.uint16, Coverage),\n    entryExitCount:     r.uint16,\n    entryExitRecords:   new r.Array(EntryExitRecord, 'entryExitCount')\n  },\n\n  4: { // MarkToBase Attachment Positioning\n    format:             r.uint16,\n    markCoverage:       new r.Pointer(r.uint16, Coverage),\n    baseCoverage:       new r.Pointer(r.uint16, Coverage),\n    classCount:         r.uint16,\n    markArray:          new r.Pointer(r.uint16, MarkArray),\n    baseArray:          new r.Pointer(r.uint16, BaseArray)\n  },\n\n  5: { // MarkToLigature Attachment Positioning\n    format:             r.uint16,\n    markCoverage:       new r.Pointer(r.uint16, Coverage),\n    ligatureCoverage:   new r.Pointer(r.uint16, Coverage),\n    classCount:         r.uint16,\n    markArray:          new r.Pointer(r.uint16, MarkArray),\n    ligatureArray:      new r.Pointer(r.uint16, LigatureArray)\n  },\n\n  6: { // MarkToMark Attachment Positioning\n    format:             r.uint16,\n    mark1Coverage:      new r.Pointer(r.uint16, Coverage),\n    mark2Coverage:      new r.Pointer(r.uint16, Coverage),\n    classCount:         r.uint16,\n    mark1Array:         new r.Pointer(r.uint16, MarkArray),\n    mark2Array:         new r.Pointer(r.uint16, BaseArray)\n  },\n\n  7: Context,          // Contextual positioning\n  8: ChainingContext,  // Chaining contextual positioning\n\n  9: { // Extension Positioning\n    posFormat:   r.uint16,\n    lookupType:  r.uint16,   // cannot also be 9\n    extension:   new r.Pointer(r.uint32, null)\n  }\n});\n\n// Fix circular reference\nGPOSLookup.versions[9].extension.type = GPOSLookup;\n\nexport default new r.VersionedStruct(r.uint32, {\n  header: {\n    scriptList:     new r.Pointer(r.uint16, ScriptList),\n    featureList:    new r.Pointer(r.uint16, FeatureList),\n    lookupList:     new r.Pointer(r.uint16, new LookupList(GPOSLookup))\n  },\n\n  0x00010000: {},\n  0x00010001: {\n    featureVariations: new r.Pointer(r.uint32, FeatureVariations)\n  }\n});\n\n// export GPOSLookup for JSTF table\nexport { GPOSLookup };\n","import * as r from 'restructure';\nimport {ScriptList, FeatureList, LookupList, Coverage, ClassDef, Device, Context, ChainingContext} from './opentype';\nimport {FeatureVariations} from './variations';\n\nlet Sequence = new r.Array(r.uint16, r.uint16);\nlet AlternateSet = Sequence;\n\nlet Ligature = new r.Struct({\n  glyph:      r.uint16,\n  compCount:  r.uint16,\n  components: new r.Array(r.uint16, t => t.compCount - 1)\n});\n\nlet LigatureSet = new r.Array(new r.Pointer(r.uint16, Ligature), r.uint16);\n\nlet GSUBLookup = new r.VersionedStruct('lookupType', {\n  1: new r.VersionedStruct(r.uint16, {// Single Substitution\n    1: {\n      coverage:       new r.Pointer(r.uint16, Coverage),\n      deltaGlyphID:   r.int16\n    },\n    2: {\n      coverage:       new r.Pointer(r.uint16, Coverage),\n      glyphCount:     r.uint16,\n      substitute:     new r.LazyArray(r.uint16, 'glyphCount')\n    }\n  }),\n\n  2: { // Multiple Substitution\n    substFormat:    r.uint16,\n    coverage:       new r.Pointer(r.uint16, Coverage),\n    count:          r.uint16,\n    sequences:      new r.LazyArray(new r.Pointer(r.uint16, Sequence), 'count')\n  },\n\n  3: { // Alternate Substitution\n    substFormat:    r.uint16,\n    coverage:       new r.Pointer(r.uint16, Coverage),\n    count:          r.uint16,\n    alternateSet:   new r.LazyArray(new r.Pointer(r.uint16, AlternateSet), 'count')\n  },\n\n  4: { // Ligature Substitution\n    substFormat:    r.uint16,\n    coverage:       new r.Pointer(r.uint16, Coverage),\n    count:          r.uint16,\n    ligatureSets:   new r.LazyArray(new r.Pointer(r.uint16, LigatureSet), 'count')\n  },\n\n  5: Context,         // Contextual Substitution\n  6: ChainingContext, // Chaining Contextual Substitution\n\n  7: { // Extension Substitution\n    substFormat:   r.uint16,\n    lookupType:    r.uint16,   // cannot also be 7\n    extension:     new r.Pointer(r.uint32, null)\n  },\n\n  8: { // Reverse Chaining Contextual Single Substitution\n    substFormat:            r.uint16,\n    coverage:               new r.Pointer(r.uint16, Coverage),\n    backtrackCoverage:      new r.Array(new r.Pointer(r.uint16, Coverage), 'backtrackGlyphCount'),\n    lookaheadGlyphCount:    r.uint16,\n    lookaheadCoverage:      new r.Array(new r.Pointer(r.uint16, Coverage), 'lookaheadGlyphCount'),\n    glyphCount:             r.uint16,\n    substitutes:            new r.Array(r.uint16, 'glyphCount')\n  }\n});\n\n// Fix circular reference\nGSUBLookup.versions[7].extension.type = GSUBLookup;\n\nexport default new r.VersionedStruct(r.uint32, {\n  header: {\n    scriptList:     new r.Pointer(r.uint16, ScriptList),\n    featureList:    new r.Pointer(r.uint16, FeatureList),\n    lookupList:     new r.Pointer(r.uint16, new LookupList(GSUBLookup))\n  },\n\n  0x00010000: {},\n  0x00010001: {\n    featureVariations: new r.Pointer(r.uint32, FeatureVariations)\n  }\n});\n","import * as r from 'restructure';\nimport { ScriptList, FeatureList, LookupList, Coverage, ClassDef, Device } from './opentype';\nimport { GPOSLookup } from './GPOS';\n\nlet JstfGSUBModList = new r.Array(r.uint16, r.uint16);\n\nlet JstfPriority = new r.Struct({\n  shrinkageEnableGSUB:    new r.Pointer(r.uint16, JstfGSUBModList),\n  shrinkageDisableGSUB:   new r.Pointer(r.uint16, JstfGSUBModList),\n  shrinkageEnableGPOS:    new r.Pointer(r.uint16, JstfGSUBModList),\n  shrinkageDisableGPOS:   new r.Pointer(r.uint16, JstfGSUBModList),\n  shrinkageJstfMax:       new r.Pointer(r.uint16, new LookupList(GPOSLookup)),\n  extensionEnableGSUB:    new r.Pointer(r.uint16, JstfGSUBModList),\n  extensionDisableGSUB:   new r.Pointer(r.uint16, JstfGSUBModList),\n  extensionEnableGPOS:    new r.Pointer(r.uint16, JstfGSUBModList),\n  extensionDisableGPOS:   new r.Pointer(r.uint16, JstfGSUBModList),\n  extensionJstfMax:       new r.Pointer(r.uint16, new LookupList(GPOSLookup))\n});\n\nlet JstfLangSys = new r.Array(new r.Pointer(r.uint16, JstfPriority), r.uint16);\n\nlet JstfLangSysRecord = new r.Struct({\n  tag:         new r.String(4),\n  jstfLangSys: new r.Pointer(r.uint16, JstfLangSys)\n});\n\nlet JstfScript = new r.Struct({\n  extenderGlyphs: new r.Pointer(r.uint16, new r.Array(r.uint16, r.uint16)), // array of glyphs to extend line length\n  defaultLangSys: new r.Pointer(r.uint16, JstfLangSys),\n  langSysCount:   r.uint16,\n  langSysRecords: new r.Array(JstfLangSysRecord, 'langSysCount')\n});\n\nlet JstfScriptRecord = new r.Struct({\n  tag:    new r.String(4),\n  script: new r.Pointer(r.uint16, JstfScript, {type: 'parent'})\n});\n\nexport default new r.Struct({\n  version:     r.uint32,  // should be 0x00010000\n  scriptCount: r.uint16,\n  scriptList:  new r.Array(JstfScriptRecord, 'scriptCount')\n});\n","import * as r from 'restructure';\nimport { resolveLength } from 'restructure';\nimport { ItemVariationStore } from './variations';\n\n// TODO: add this to restructure\nclass VariableSizeNumber {\n  constructor(size) {\n    this._size = size;\n  }\n\n  decode(stream, parent) {\n    switch (this.size(0, parent)) {\n      case 1: return stream.readUInt8();\n      case 2: return stream.readUInt16BE();\n      case 3: return stream.readUInt24BE();\n      case 4: return stream.readUInt32BE();\n    }\n  }\n\n  size(val, parent) {\n    return resolveLength(this._size, null, parent);\n  }\n}\n\nlet MapDataEntry = new r.Struct({\n  entry: new VariableSizeNumber(t => ((t.parent.entryFormat & 0x0030) >> 4) + 1),\n  outerIndex: t => t.entry >> ((t.parent.entryFormat & 0x000F) + 1),\n  innerIndex: t => t.entry & ((1 << ((t.parent.entryFormat & 0x000F) + 1)) - 1)\n});\n\nlet DeltaSetIndexMap = new r.Struct({\n  entryFormat: r.uint16,\n  mapCount: r.uint16,\n  mapData: new r.Array(MapDataEntry, 'mapCount')\n});\n\nexport default new r.Struct({\n  majorVersion: r.uint16,\n  minorVersion: r.uint16,\n  itemVariationStore: new r.Pointer(r.uint32, ItemVariationStore),\n  advanceWidthMapping: new r.Pointer(r.uint32, DeltaSetIndexMap),\n  LSBMapping: new r.Pointer(r.uint32, DeltaSetIndexMap),\n  RSBMapping: new r.Pointer(r.uint32, DeltaSetIndexMap)\n});\n","import * as r from 'restructure';\n\nlet Signature = new r.Struct({\n  format: r.uint32,\n  length: r.uint32,\n  offset: r.uint32\n});\n\nlet SignatureBlock = new r.Struct({\n  reserved:       new r.Reserved(r.uint16, 2),\n  cbSignature:    r.uint32,  // Length (in bytes) of the PKCS#7 packet in pbSignature\n  signature:      new r.Buffer('cbSignature')\n});\n\nexport default new r.Struct({\n  ulVersion:       r.uint32,  // Version number of the DSIG table (0x00000001)\n  usNumSigs:       r.uint16,  // Number of signatures in the table\n  usFlag:          r.uint16,  // Permission flags\n  signatures:      new r.Array(Signature, 'usNumSigs'),\n  signatureBlocks: new r.Array(SignatureBlock, 'usNumSigs')\n});\n","import * as r from 'restructure';\n\nlet GaspRange = new r.Struct({\n  rangeMaxPPEM:       r.uint16,                  // Upper limit of range, in ppem\n  rangeGaspBehavior:  new r.Bitfield(r.uint16, [ // Flags describing desired rasterizer behavior\n    'grayscale', 'gridfit',\n    'symmetricSmoothing', 'symmetricGridfit'     // only in version 1, for ClearType\n  ])\n});\n\nexport default new r.Struct({\n  version:    r.uint16,  // set to 0\n  numRanges:  r.uint16,\n  gaspRanges: new r.Array(GaspRange, 'numRanges') // Sorted by ppem\n});\n","import * as r from 'restructure';\n\nlet DeviceRecord = new r.Struct({\n  pixelSize:      r.uint8,\n  maximumWidth:   r.uint8,\n  widths:         new r.Array(r.uint8, t => t.parent.parent.maxp.numGlyphs)\n});\n\n// The Horizontal Device Metrics table stores integer advance widths scaled to particular pixel sizes\nexport default new r.Struct({\n  version:            r.uint16,\n  numRecords:         r.int16,\n  sizeDeviceRecord:   r.int32,\n  records:            new r.Array(DeviceRecord, 'numRecords')\n});\n","import * as r from 'restructure';\n\nlet KernPair = new r.Struct({\n  left:   r.uint16,\n  right:  r.uint16,\n  value:  r.int16\n});\n\nlet ClassTable = new r.Struct({\n  firstGlyph: r.uint16,\n  nGlyphs: r.uint16,\n  offsets: new r.Array(r.uint16, 'nGlyphs'),\n  max: t => t.offsets.length && Math.max.apply(Math, t.offsets)\n});\n\nlet Kern2Array = new r.Struct({\n  off: t => t._startOffset - t.parent.parent._startOffset,\n  len: t => (((t.parent.leftTable.max - t.off) / t.parent.rowWidth) + 1) * (t.parent.rowWidth / 2),\n  values: new r.LazyArray(r.int16, 'len')\n});\n\nlet KernSubtable = new r.VersionedStruct('format', {\n  0: {\n    nPairs:         r.uint16,\n    searchRange:    r.uint16,\n    entrySelector:  r.uint16,\n    rangeShift:     r.uint16,\n    pairs:          new r.Array(KernPair, 'nPairs')\n  },\n\n  2: {\n    rowWidth:   r.uint16,\n    leftTable:  new r.Pointer(r.uint16, ClassTable, {type: 'parent'}),\n    rightTable: new r.Pointer(r.uint16, ClassTable, {type: 'parent'}),\n    array:      new r.Pointer(r.uint16, Kern2Array, {type: 'parent'})\n  },\n\n  3: {\n    glyphCount:       r.uint16,\n    kernValueCount:   r.uint8,\n    leftClassCount:   r.uint8,\n    rightClassCount:  r.uint8,\n    flags:            r.uint8,\n    kernValue:        new r.Array(r.int16, 'kernValueCount'),\n    leftClass:        new r.Array(r.uint8, 'glyphCount'),\n    rightClass:       new r.Array(r.uint8, 'glyphCount'),\n    kernIndex:        new r.Array(r.uint8, t => t.leftClassCount * t.rightClassCount)\n  }\n});\n\nlet KernTable = new r.VersionedStruct('version', {\n  0: { // Microsoft uses this format\n    subVersion: r.uint16,  // Microsoft has an extra sub-table version number\n    length:     r.uint16,  // Length of the subtable, in bytes\n    format:     r.uint8,   // Format of subtable\n    coverage:   new r.Bitfield(r.uint8, [\n      'horizontal',    // 1 if table has horizontal data, 0 if vertical\n      'minimum',       // If set to 1, the table has minimum values. If set to 0, the table has kerning values.\n      'crossStream',   // If set to 1, kerning is perpendicular to the flow of the text\n      'override'      // If set to 1 the value in this table replaces the accumulated value\n    ]),\n    subtable:   KernSubtable,\n    padding: new r.Reserved(r.uint8, t => t.length - t._currentOffset)\n  },\n  1: { // Apple uses this format\n    length:     r.uint32,\n    coverage:   new r.Bitfield(r.uint8, [\n      null, null, null, null, null,\n      'variation',     // Set if table has variation kerning values\n      'crossStream',   // Set if table has cross-stream kerning values\n      'vertical'      // Set if table has vertical kerning values\n    ]),\n    format:     r.uint8,\n    tupleIndex: r.uint16,\n    subtable:   KernSubtable,\n    padding: new r.Reserved(r.uint8, t => t.length - t._currentOffset)\n  }\n});\n\nexport default new r.VersionedStruct(r.uint16, {\n  0: { // Microsoft Version\n    nTables:    r.uint16,\n    tables:     new r.Array(KernTable, 'nTables')\n  },\n\n  1: { // Apple Version\n    reserved:   new r.Reserved(r.uint16), // the other half of the version number\n    nTables:    r.uint32,\n    tables:     new r.Array(KernTable, 'nTables')\n  }\n});\n","import * as r from 'restructure';\n\n// Linear Threshold table\n// Records the ppem for each glyph at which the scaling becomes linear again,\n// despite instructions effecting the advance width\nexport default new r.Struct({\n  version:    r.uint16,\n  numGlyphs:  r.uint16,\n  yPels:      new r.Array(r.uint8, 'numGlyphs')\n});\n","import * as r from 'restructure';\n\n// PCL 5 Table\n// NOTE: The PCLT table is strongly discouraged for OpenType fonts with TrueType outlines\nexport default new r.Struct({\n  version:              r.uint16,\n  fontNumber:           r.uint32,\n  pitch:                r.uint16,\n  xHeight:              r.uint16,\n  style:                r.uint16,\n  typeFamily:           r.uint16,\n  capHeight:            r.uint16,\n  symbolSet:            r.uint16,\n  typeface:             new r.String(16),\n  characterComplement:  new r.String(8),\n  fileName:             new r.String(6),\n  strokeWeight:         new r.String(1),\n  widthType:            new r.String(1),\n  serifStyle:           r.uint8,\n  reserved:             new r.Reserved(r.uint8)\n});\n","import * as r from 'restructure';\n\n// VDMX tables contain ascender/descender overrides for certain (usually small)\n// sizes. This is needed in order to match font metrics on Windows.\n\nlet Ratio = new r.Struct({\n  bCharSet:       r.uint8,                             // Character set\n  xRatio:         r.uint8,                             // Value to use for x-Ratio\n  yStartRatio:    r.uint8,                             // Starting y-Ratio value\n  yEndRatio:      r.uint8                              // Ending y-Ratio value\n});\n\nlet vTable = new r.Struct({\n  yPelHeight:     r.uint16,                            // yPelHeight to which values apply\n  yMax:           r.int16,                             // Maximum value (in pels) for this yPelHeight\n  yMin:           r.int16                              // Minimum value (in pels) for this yPelHeight\n});\n\nlet VdmxGroup = new r.Struct({\n  recs:           r.uint16,                            // Number of height records in this group\n  startsz:        r.uint8,                             // Starting yPelHeight\n  endsz:          r.uint8,                             // Ending yPelHeight\n  entries:        new r.Array(vTable, 'recs')          // The VDMX records\n});\n\nexport default new r.Struct({\n  version:        r.uint16,                            // Version number (0 or 1)\n  numRecs:        r.uint16,                            // Number of VDMX groups present\n  numRatios:      r.uint16,                            // Number of aspect ratio groupings\n  ratioRanges:    new r.Array(Ratio, 'numRatios'),     // Ratio ranges\n  offsets:        new r.Array(r.uint16, 'numRatios'),  // Offset to the VDMX group for this ratio range\n  groups:         new r.Array(VdmxGroup, 'numRecs')    // The actual VDMX groupings\n});\n","import * as r from 'restructure';\n\n// Vertical Header Table\nexport default new r.Struct({\n  version:                r.uint16,  // Version number of the Vertical Header Table\n  ascent:                 r.int16,   // The vertical typographic ascender for this font\n  descent:                r.int16,   // The vertical typographic descender for this font\n  lineGap:                r.int16,   // The vertical typographic line gap for this font\n  advanceHeightMax:       r.int16,   // The maximum advance height measurement found in the font\n  minTopSideBearing:      r.int16,   // The minimum top side bearing measurement found in the font\n  minBottomSideBearing:   r.int16,   // The minimum bottom side bearing measurement found in the font\n  yMaxExtent:             r.int16,\n  caretSlopeRise:         r.int16,   // Caret slope (rise/run)\n  caretSlopeRun:          r.int16,\n  caretOffset:            r.int16,   // Set value equal to 0 for nonslanted fonts\n  reserved:               new r.Reserved(r.int16, 4),\n  metricDataFormat:       r.int16,   // Set to 0\n  numberOfMetrics:        r.uint16   // Number of advance heights in the Vertical Metrics table\n});\n","import * as r from 'restructure';\n\nlet VmtxEntry = new r.Struct({\n  advance: r.uint16,  // The advance height of the glyph\n  bearing: r.int16    // The top sidebearing of the glyph\n});\n\n// Vertical Metrics Table\nexport default new r.Struct({\n  metrics:  new r.LazyArray(VmtxEntry, t => t.parent.vhea.numberOfMetrics),\n  bearings: new r.LazyArray(r.int16, t => t.parent.maxp.numGlyphs - t.parent.vhea.numberOfMetrics)\n});\n","import * as r from 'restructure';\n\nlet shortFrac = new r.Fixed(16, 'BE', 14);\n\nlet Correspondence = new r.Struct({\n  fromCoord: shortFrac,\n  toCoord: shortFrac\n});\n\nlet Segment = new r.Struct({\n  pairCount: r.uint16,\n  correspondence: new r.Array(Correspondence, 'pairCount')\n});\n\nexport default new r.Struct({\n  version: r.fixed32,\n  axisCount: r.uint32,\n  segment: new r.Array(Segment, 'axisCount')\n});\n","import * as r from 'restructure';\n\nclass UnboundedArrayAccessor {\n  constructor(type, stream, parent) {\n    this.type = type;\n    this.stream = stream;\n    this.parent = parent;\n    this.base = this.stream.pos;\n    this._items = [];\n  }\n\n  getItem(index) {\n    if (this._items[index] == null) {\n      let pos = this.stream.pos;\n      this.stream.pos = this.base + this.type.size(null, this.parent) * index;\n      this._items[index] = this.type.decode(this.stream, this.parent);\n      this.stream.pos = pos;\n    }\n\n    return this._items[index];\n  }\n\n  inspect() {\n    return `[UnboundedArray ${this.type.constructor.name}]`;\n  }\n}\n\nexport class UnboundedArray extends r.Array {\n  constructor(type) {\n    super(type, 0);\n  }\n\n  decode(stream, parent) {\n    return new UnboundedArrayAccessor(this.type, stream, parent);\n  }\n}\n\nexport let LookupTable = function(ValueType = r.uint16) {\n  // Helper class that makes internal structures invisible to pointers\n  class Shadow {\n    constructor(type) {\n      this.type = type;\n    }\n\n    decode(stream, ctx) {\n      ctx = ctx.parent.parent;\n      return this.type.decode(stream, ctx);\n    }\n\n    size(val, ctx) {\n      ctx = ctx.parent.parent;\n      return this.type.size(val, ctx);\n    }\n\n    encode(stream, val, ctx) {\n      ctx = ctx.parent.parent;\n      return this.type.encode(stream, val, ctx);\n    }\n  }\n\n  ValueType = new Shadow(ValueType);\n\n  let BinarySearchHeader = new r.Struct({\n    unitSize: r.uint16,\n    nUnits: r.uint16,\n    searchRange: r.uint16,\n    entrySelector: r.uint16,\n    rangeShift: r.uint16\n  });\n\n  let LookupSegmentSingle = new r.Struct({\n    lastGlyph: r.uint16,\n    firstGlyph: r.uint16,\n    value: ValueType\n  });\n\n  let LookupSegmentArray = new r.Struct({\n    lastGlyph: r.uint16,\n    firstGlyph: r.uint16,\n    values: new r.Pointer(r.uint16, new r.Array(ValueType, t => t.lastGlyph - t.firstGlyph + 1), {type: 'parent'})\n  });\n\n  let LookupSingle = new r.Struct({\n    glyph: r.uint16,\n    value: ValueType\n  });\n\n  return new r.VersionedStruct(r.uint16, {\n    0: {\n      values: new UnboundedArray(ValueType) // length == number of glyphs maybe?\n    },\n    2: {\n      binarySearchHeader: BinarySearchHeader,\n      segments: new r.Array(LookupSegmentSingle, t => t.binarySearchHeader.nUnits)\n    },\n    4: {\n      binarySearchHeader: BinarySearchHeader,\n      segments: new r.Array(LookupSegmentArray, t => t.binarySearchHeader.nUnits)\n    },\n    6: {\n      binarySearchHeader: BinarySearchHeader,\n      segments: new r.Array(LookupSingle, t => t.binarySearchHeader.nUnits)\n    },\n    8: {\n      firstGlyph: r.uint16,\n      count: r.uint16,\n      values: new r.Array(ValueType, 'count')\n    }\n  });\n};\n\nexport function StateTable(entryData = {}, lookupType = r.uint16) {\n  let entry = Object.assign({\n    newState: r.uint16,\n    flags: r.uint16\n  }, entryData);\n\n  let Entry = new r.Struct(entry);\n  let StateArray = new UnboundedArray(new r.Array(r.uint16, t => t.nClasses));\n\n  let StateHeader = new r.Struct({\n    nClasses: r.uint32,\n    classTable: new r.Pointer(r.uint32, new LookupTable(lookupType)),\n    stateArray: new r.Pointer(r.uint32, StateArray),\n    entryTable: new r.Pointer(r.uint32, new UnboundedArray(Entry))\n  });\n\n  return StateHeader;\n}\n\n// This is the old version of the StateTable structure\nexport function StateTable1(entryData = {}, lookupType = r.uint16) {\n  let ClassLookupTable = new r.Struct({\n    version() { return 8; }, // simulate LookupTable\n    firstGlyph: r.uint16,\n    values: new r.Array(r.uint8, r.uint16)\n  });\n\n  let entry = Object.assign({\n    newStateOffset: r.uint16,\n    // convert offset to stateArray index\n    newState: t => (t.newStateOffset - (t.parent.stateArray.base - t.parent._startOffset)) / t.parent.nClasses,\n    flags: r.uint16\n  }, entryData);\n\n  let Entry = new r.Struct(entry);\n  let StateArray = new UnboundedArray(new r.Array(r.uint8, t => t.nClasses));\n\n  let StateHeader1 = new r.Struct({\n    nClasses: r.uint16,\n    classTable: new r.Pointer(r.uint16, ClassLookupTable),\n    stateArray: new r.Pointer(r.uint16, StateArray),\n    entryTable: new r.Pointer(r.uint16, new UnboundedArray(Entry))\n  });\n\n  return StateHeader1;\n}\n","import * as r from 'restructure';\nimport { LookupTable } from './aat';\n\nlet BslnSubtable = new r.VersionedStruct('format', {\n  0: { // Distance-based, no mapping\n    deltas: new r.Array(r.int16, 32)\n  },\n\n  1: { // Distance-based, with mapping\n    deltas: new r.Array(r.int16, 32),\n    mappingData: new LookupTable(r.uint16)\n  },\n\n  2: { // Control point-based, no mapping\n    standardGlyph: r.uint16,\n    controlPoints: new r.Array(r.uint16, 32)\n  },\n\n  3: { // Control point-based, with mapping\n    standardGlyph: r.uint16,\n    controlPoints: new r.Array(r.uint16, 32),\n    mappingData: new LookupTable(r.uint16)\n  }\n});\n\nexport default new r.Struct({\n  version: r.fixed32,\n  format: r.uint16,\n  defaultBaseline: r.uint16,\n  subtable: BslnSubtable\n});\n","import * as r from 'restructure';\n\nlet Setting = new r.Struct({\n  setting: r.uint16,\n  nameIndex: r.int16,\n  name: t => t.parent.parent.parent.name.records.fontFeatures[t.nameIndex]\n});\n\nlet FeatureName = new r.Struct({\n  feature: r.uint16,\n  nSettings: r.uint16,\n  settingTable: new r.Pointer(r.uint32, new r.Array(Setting, 'nSettings'), { type: 'parent' }),\n  featureFlags: new r.Bitfield(r.uint8, [\n    null, null, null, null, null, null,\n    'hasDefault', 'exclusive'\n  ]),\n  defaultSetting: r.uint8,\n  nameIndex: r.int16,\n  name: t => t.parent.parent.name.records.fontFeatures[t.nameIndex]\n});\n\nexport default new r.Struct({\n  version: r.fixed32,\n  featureNameCount: r.uint16,\n  reserved1: new r.Reserved(r.uint16),\n  reserved2: new r.Reserved(r.uint32),\n  featureNames: new r.Array(FeatureName, 'featureNameCount')\n});\n","import * as r from 'restructure';\n\nlet Axis = new r.Struct({\n  axisTag: new r.String(4),\n  minValue: r.fixed32,\n  defaultValue: r.fixed32,\n  maxValue: r.fixed32,\n  flags: r.uint16,\n  nameID: r.uint16,\n  name: t => t.parent.parent.name.records.fontFeatures[t.nameID]\n});\n\nlet Instance = new r.Struct({\n  nameID: r.uint16,\n  name: t => t.parent.parent.name.records.fontFeatures[t.nameID],\n  flags: r.uint16,\n  coord: new r.Array(r.fixed32, t => t.parent.axisCount),\n  postscriptNameID: new r.Optional(r.uint16, t => t.parent.instanceSize - t._currentOffset > 0)\n});\n\nexport default new r.Struct({\n  version: r.fixed32,\n  offsetToData: r.uint16,\n  countSizePairs: r.uint16,\n  axisCount: r.uint16,\n  axisSize: r.uint16,\n  instanceCount: r.uint16,\n  instanceSize: r.uint16,\n  axis: new r.Array(Axis, 'axisCount'),\n  instance: new r.Array(Instance, 'instanceCount')\n});\n","import * as r from 'restructure';\n\nlet shortFrac = new r.Fixed(16, 'BE', 14);\nclass Offset {\n  static decode(stream, parent) {\n    // In short format, offsets are multiplied by 2.\n    // This doesn't seem to be documented by Apple, but it\n    // is implemented this way in Freetype.\n    return parent.flags\n      ? stream.readUInt32BE()\n      : stream.readUInt16BE() * 2;\n  }\n}\n\nlet gvar = new r.Struct({\n  version: r.uint16,\n  reserved: new r.Reserved(r.uint16),\n  axisCount: r.uint16,\n  globalCoordCount: r.uint16,\n  globalCoords: new r.Pointer(r.uint32, new r.Array(new r.Array(shortFrac, 'axisCount'), 'globalCoordCount')),\n  glyphCount: r.uint16,\n  flags: r.uint16,\n  offsetToData: r.uint32,\n  offsets: new r.Array(new r.Pointer(Offset, 'void', { relativeTo: ctx => ctx.offsetToData, allowNull: false }), t => t.glyphCount + 1)\n});\n\nexport default gvar;\n","import * as r from 'restructure';\nimport { LookupTable, StateTable1 } from './aat';\n\nlet ClassTable = new r.Struct({\n  length: r.uint16,\n  coverage: r.uint16,\n  subFeatureFlags: r.uint32,\n  stateTable: new StateTable1\n});\n\nlet WidthDeltaRecord = new r.Struct({\n  justClass: r.uint32,\n  beforeGrowLimit: r.fixed32,\n  beforeShrinkLimit: r.fixed32,\n  afterGrowLimit: r.fixed32,\n  afterShrinkLimit: r.fixed32,\n  growFlags: r.uint16,\n  shrinkFlags: r.uint16\n});\n\nlet WidthDeltaCluster = new r.Array(WidthDeltaRecord, r.uint32);\n\nlet ActionData = new r.VersionedStruct('actionType', {\n  0: { // Decomposition action\n    lowerLimit: r.fixed32,\n    upperLimit: r.fixed32,\n    order: r.uint16,\n    glyphs: new r.Array(r.uint16, r.uint16)\n  },\n\n  1: { // Unconditional add glyph action\n    addGlyph: r.uint16\n  },\n\n  2: { // Conditional add glyph action\n    substThreshold: r.fixed32,\n    addGlyph: r.uint16,\n    substGlyph: r.uint16\n  },\n\n  3: {}, // Stretch glyph action (no data, not supported by CoreText)\n\n  4: { // Ductile glyph action (not supported by CoreText)\n    variationAxis: r.uint32,\n    minimumLimit: r.fixed32,\n    noStretchValue: r.fixed32,\n    maximumLimit: r.fixed32\n  },\n\n  5: { // Repeated add glyph action\n    flags: r.uint16,\n    glyph: r.uint16\n  }\n});\n\nlet Action = new r.Struct({\n  actionClass: r.uint16,\n  actionType: r.uint16,\n  actionLength: r.uint32,\n  actionData: ActionData,\n  padding: new r.Reserved(r.uint8, t => t.actionLength - t._currentOffset)\n});\n\nlet PostcompensationAction = new r.Array(Action, r.uint32);\nlet PostCompensationTable = new r.Struct({\n  lookupTable: new LookupTable(new r.Pointer(r.uint16, PostcompensationAction))\n});\n\nlet JustificationTable = new r.Struct({\n  classTable: new r.Pointer(r.uint16, ClassTable, { type: 'parent' }),\n  wdcOffset: r.uint16,\n  postCompensationTable: new r.Pointer(r.uint16, PostCompensationTable, { type: 'parent' }),\n  widthDeltaClusters: new LookupTable(new r.Pointer(r.uint16, WidthDeltaCluster, { type: 'parent', relativeTo: ctx => ctx.wdcOffset }))\n});\n\nexport default new r.Struct({\n  version: r.uint32,\n  format: r.uint16,\n  horizontal: new r.Pointer(r.uint16, JustificationTable),\n  vertical: new r.Pointer(r.uint16, JustificationTable)\n});\n","import * as r from 'restructure';\nimport { UnboundedArray, LookupTable, StateTable } from './aat';\n\nlet LigatureData = {\n  action: r.uint16\n};\n\nlet ContextualData = {\n  markIndex: r.uint16,\n  currentIndex: r.uint16\n};\n\nlet InsertionData = {\n  currentInsertIndex: r.uint16,\n  markedInsertIndex: r.uint16\n};\n\nlet SubstitutionTable = new r.Struct({\n  items: new UnboundedArray(new r.Pointer(r.uint32, new LookupTable))\n});\n\nlet SubtableData = new r.VersionedStruct('type', {\n  0: { // Indic Rearrangement Subtable\n    stateTable: new StateTable\n  },\n\n  1: { // Contextual Glyph Substitution Subtable\n    stateTable: new StateTable(ContextualData),\n    substitutionTable: new r.Pointer(r.uint32, SubstitutionTable)\n  },\n\n  2: { // Ligature subtable\n    stateTable: new StateTable(LigatureData),\n    ligatureActions: new r.Pointer(r.uint32, new UnboundedArray(r.uint32)),\n    components: new r.Pointer(r.uint32, new UnboundedArray(r.uint16)),\n    ligatureList: new r.Pointer(r.uint32, new UnboundedArray(r.uint16))\n  },\n\n  4: { // Non-contextual Glyph Substitution Subtable\n    lookupTable: new LookupTable\n  },\n\n  5: { // Glyph Insertion Subtable\n    stateTable: new StateTable(InsertionData),\n    insertionActions: new r.Pointer(r.uint32, new UnboundedArray(r.uint16))\n  }\n});\n\nlet Subtable = new r.Struct({\n  length: r.uint32,\n  coverage: r.uint24,\n  type: r.uint8,\n  subFeatureFlags: r.uint32,\n  table: SubtableData,\n  padding: new r.Reserved(r.uint8, t => t.length - t._currentOffset)\n});\n\nlet FeatureEntry = new r.Struct({\n  featureType:    r.uint16,\n  featureSetting: r.uint16,\n  enableFlags:    r.uint32,\n  disableFlags:   r.uint32\n});\n\nlet MorxChain = new r.Struct({\n  defaultFlags:     r.uint32,\n  chainLength:      r.uint32,\n  nFeatureEntries:  r.uint32,\n  nSubtables:       r.uint32,\n  features:         new r.Array(FeatureEntry, 'nFeatureEntries'),\n  subtables:        new r.Array(Subtable, 'nSubtables')\n});\n\nexport default new r.Struct({\n  version:  r.uint16,\n  unused:   new r.Reserved(r.uint16),\n  nChains:  r.uint32,\n  chains:   new r.Array(MorxChain, 'nChains')\n});\n","import * as r from 'restructure';\nimport { LookupTable } from './aat';\n\nlet OpticalBounds = new r.Struct({\n  left: r.int16,\n  top: r.int16,\n  right: r.int16,\n  bottom: r.int16\n});\n\nexport default new r.Struct({\n  version: r.fixed32,\n  format: r.uint16,\n  lookupTable: new LookupTable(OpticalBounds)\n});\n","let tables = {};\nexport default tables;\n\n// Required Tables\nimport cmap from './cmap';\nimport head from './head';\nimport hhea from './hhea';\nimport hmtx from './hmtx';\nimport maxp from './maxp';\nimport name from './name';\nimport OS2 from './OS2';\nimport post from './post';\n\ntables.cmap = cmap;\ntables.head = head;\ntables.hhea = hhea;\ntables.hmtx = hmtx;\ntables.maxp = maxp;\ntables.name = name;\ntables['OS/2'] = OS2;\ntables.post = post;\n\n\n// TrueType Outlines\nimport cvt from './cvt';\nimport fpgm from './fpgm';\nimport loca from './loca';\nimport prep from './prep';\nimport glyf from './glyf';\n\ntables.fpgm = fpgm;\ntables.loca = loca;\ntables.prep = prep;\ntables['cvt '] = cvt;\ntables.glyf = glyf;\n\n\n// PostScript Outlines\nimport CFFFont from '../cff/CFFFont';\nimport VORG from './VORG';\n\ntables['CFF '] = CFFFont;\ntables['CFF2'] = CFFFont;\ntables.VORG = VORG;\n\n\n// Bitmap Glyphs\nimport EBLC from './EBLC';\nimport sbix from './sbix';\nimport COLR from './COLR';\nimport CPAL from './CPAL';\n\ntables.EBLC = EBLC;\ntables.CBLC = tables.EBLC;\ntables.sbix = sbix;\ntables.COLR = COLR;\ntables.CPAL = CPAL;\n\n\n// Advanced OpenType Tables\nimport BASE from './BASE';\nimport GDEF from './GDEF';\nimport GPOS from './GPOS';\nimport GSUB from './GSUB';\nimport JSTF from './JSTF';\n\ntables.BASE = BASE;\ntables.GDEF = GDEF;\ntables.GPOS = GPOS;\ntables.GSUB = GSUB;\ntables.JSTF = JSTF;\n\n// OpenType variations tables\nimport HVAR from './HVAR';\n\ntables.HVAR = HVAR;\n\n// Other OpenType Tables\nimport DSIG from './DSIG';\nimport gasp from './gasp';\nimport hdmx from './hdmx';\nimport kern from './kern';\nimport LTSH from './LTSH';\nimport PCLT from './PCLT';\nimport VDMX from './VDMX';\nimport vhea from './vhea';\nimport vmtx from './vmtx';\n\ntables.DSIG = DSIG;\ntables.gasp = gasp;\ntables.hdmx = hdmx;\ntables.kern = kern;\ntables.LTSH = LTSH;\ntables.PCLT = PCLT;\ntables.VDMX = VDMX;\ntables.vhea = vhea;\ntables.vmtx = vmtx;\n\n\n// Apple Advanced Typography Tables\nimport avar from './avar';\nimport bsln from './bsln';\nimport feat from './feat';\nimport fvar from './fvar';\nimport gvar from './gvar';\nimport just from './just';\nimport morx from './morx';\nimport opbd from './opbd';\n\ntables.avar = avar;\ntables.bsln = bsln;\ntables.feat = feat;\ntables.fvar = fvar;\ntables.gvar = gvar;\ntables.just = just;\ntables.morx = morx;\ntables.opbd = opbd;\n","import * as r from 'restructure';\nimport Tables from './';\n\nlet TableEntry = new r.Struct({\n  tag:        new r.String(4),\n  checkSum:   r.uint32,\n  offset:     new r.Pointer(r.uint32, 'void', { type: 'global' }),\n  length:     r.uint32\n});\n\nlet Directory = new r.Struct({\n  tag:            new r.String(4),\n  numTables:      r.uint16,\n  searchRange:    r.uint16,\n  entrySelector:  r.uint16,\n  rangeShift:     r.uint16,\n  tables:         new r.Array(TableEntry, 'numTables')\n});\n\nDirectory.process = function() {\n  let tables = {};\n  for (let table of this.tables) {\n    tables[table.tag] = table;\n  }\n\n  this.tables = tables;\n};\n\nDirectory.preEncode = function() {\n  if (!Array.isArray(this.tables)) {\n    let tables = [];\n    for (let tag in this.tables) {\n      let table = this.tables[tag];\n      if (table) {\n        tables.push({\n          tag: tag,\n          checkSum: 0,\n          offset: new r.VoidPointer(Tables[tag], table),\n          length: Tables[tag].size(table)\n        });\n      }\n    }\n    \n    this.tables = tables;\n  }\n\n  this.tag = 'true';\n  this.numTables = this.tables.length;\n\n  let maxExponentFor2 = Math.floor((Math.log(this.numTables) / Math.LN2));\n  let maxPowerOf2 = Math.pow(2, maxExponentFor2);\n\n  this.searchRange =  maxPowerOf2 * 16;\n  this.entrySelector = Math.log(maxPowerOf2) / Math.LN2;\n  this.rangeShift = this.numTables * 16 - this.searchRange;\n};\n\nexport default Directory;\n","export function binarySearch(arr, cmp) {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min <= max) {\n    let mid = (min + max) >> 1;\n    let res = cmp(arr[mid]);\n\n    if (res < 0) {\n      max = mid - 1;\n    } else if (res > 0) {\n      min = mid + 1;\n    } else {\n      return mid;\n    }\n  }\n\n  return -1;\n}\n\nexport function range(index, end) {\n  let range = [];\n  while (index < end) {\n    range.push(index++);\n  }\n  return range;\n}\n\nexport const asciiDecoder = new TextDecoder('ascii');\n\n// Based on https://github.com/niklasvh/base64-arraybuffer. MIT license.\nconst CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\nconst LOOKUP = new Uint8Array(256);\nfor (let i = 0; i < CHARS.length; i++) {\n  LOOKUP[CHARS.charCodeAt(i)] = i;\n}\n\nexport function decodeBase64(base64) {\n  let bufferLength = base64.length * 0.75;\n\n  if (base64[base64.length - 1] === '=') {\n    bufferLength--;\n    if (base64[base64.length - 2] === '=') {\n      bufferLength--;\n    }\n  }\n\n  let bytes = new Uint8Array(bufferLength);\n  let p = 0;\n\n  for (let i = 0, len = base64.length; i < len; i += 4) {\n    let encoded1 = LOOKUP[base64.charCodeAt(i)];\n    let encoded2 = LOOKUP[base64.charCodeAt(i + 1)];\n    let encoded3 = LOOKUP[base64.charCodeAt(i + 2)];\n    let encoded4 = LOOKUP[base64.charCodeAt(i + 3)];\n\n    bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);\n    bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\n    bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);\n  }\n\n  return bytes;\n}\n","import { binarySearch } from './utils';\nimport { encodingExists, getEncoding, getEncodingMapping } from './encodings';\nimport { cache } from './decorators';\nimport { range } from './utils';\n\nexport default class CmapProcessor {\n  constructor(cmapTable) {\n    // Attempt to find a Unicode cmap first\n    this.encoding = null;\n    this.cmap = this.findSubtable(cmapTable, [\n      // 32-bit subtables\n      [3, 10],\n      [0, 6],\n      [0, 4],\n\n      // 16-bit subtables\n      [3, 1],\n      [0, 3],\n      [0, 2],\n      [0, 1],\n      [0, 0]\n    ]);\n\n    // If not unicode cmap was found, take the first table with a supported encoding.\n    if (!this.cmap) {\n      for (let cmap of cmapTable.tables) {\n        let encoding = getEncoding(cmap.platformID, cmap.encodingID, cmap.table.language - 1);\n        let mapping = getEncodingMapping(encoding);\n        if (mapping) {\n          this.cmap = cmap.table;\n          this.encoding = mapping;\n        }\n      }\n    }\n\n    if (!this.cmap) {\n      throw new Error(\"Could not find a supported cmap table\");\n    }\n\n    this.uvs = this.findSubtable(cmapTable, [[0, 5]]);\n    if (this.uvs && this.uvs.version !== 14) {\n      this.uvs = null;\n    }\n  }\n\n  findSubtable(cmapTable, pairs) {\n    for (let [platformID, encodingID] of pairs) {\n      for (let cmap of cmapTable.tables) {\n        if (cmap.platformID === platformID && cmap.encodingID === encodingID) {\n          return cmap.table;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  lookup(codepoint, variationSelector) {\n    // If there is no Unicode cmap in this font, we need to re-encode\n    // the codepoint in the encoding that the cmap supports.\n    if (this.encoding) {\n      codepoint = this.encoding.get(codepoint) || codepoint;\n\n      // Otherwise, try to get a Unicode variation selector for this codepoint if one is provided.\n    } else if (variationSelector) {\n      let gid = this.getVariationSelector(codepoint, variationSelector);\n      if (gid) {\n        return gid;\n      }\n    }\n\n    let cmap = this.cmap;\n    switch (cmap.version) {\n      case 0:\n        return cmap.codeMap.get(codepoint) || 0;\n\n      case 4: {\n        let min = 0;\n        let max = cmap.segCount - 1;\n        while (min <= max) {\n          let mid = (min + max) >> 1;\n\n          if (codepoint < cmap.startCode.get(mid)) {\n            max = mid - 1;\n          } else if (codepoint > cmap.endCode.get(mid)) {\n            min = mid + 1;\n          } else {\n            let rangeOffset = cmap.idRangeOffset.get(mid);\n            let gid;\n\n            if (rangeOffset === 0) {\n              gid = codepoint + cmap.idDelta.get(mid);\n            } else {\n              let index = rangeOffset / 2 + (codepoint - cmap.startCode.get(mid)) - (cmap.segCount - mid);\n              gid = cmap.glyphIndexArray.get(index) || 0;\n              if (gid !== 0) {\n                gid += cmap.idDelta.get(mid);\n              }\n            }\n\n            return gid & 0xffff;\n          }\n        }\n\n        return 0;\n      }\n\n      case 8:\n        throw new Error('TODO: cmap format 8');\n\n      case 6:\n      case 10:\n        return cmap.glyphIndices.get(codepoint - cmap.firstCode) || 0;\n\n      case 12:\n      case 13: {\n        let min = 0;\n        let max = cmap.nGroups - 1;\n        while (min <= max) {\n          let mid = (min + max) >> 1;\n          let group = cmap.groups.get(mid);\n\n          if (codepoint < group.startCharCode) {\n            max = mid - 1;\n          } else if (codepoint > group.endCharCode) {\n            min = mid + 1;\n          } else {\n            if (cmap.version === 12) {\n              return group.glyphID + (codepoint - group.startCharCode);\n            } else {\n              return group.glyphID;\n            }\n          }\n        }\n\n        return 0;\n      }\n\n      case 14:\n        throw new Error('TODO: cmap format 14');\n\n      default:\n        throw new Error(`Unknown cmap format ${cmap.version}`);\n    }\n  }\n\n  getVariationSelector(codepoint, variationSelector) {\n    if (!this.uvs) {\n      return 0;\n    }\n\n    let selectors = this.uvs.varSelectors.toArray();\n    let i = binarySearch(selectors, x => variationSelector - x.varSelector);\n    let sel = selectors[i];\n\n    if (i !== -1 && sel.defaultUVS) {\n      i = binarySearch(sel.defaultUVS, x =>\n        codepoint < x.startUnicodeValue ? -1 : codepoint > x.startUnicodeValue + x.additionalCount ? +1 : 0\n      );\n    }\n\n    if (i !== -1 && sel.nonDefaultUVS) {\n      i = binarySearch(sel.nonDefaultUVS, x => codepoint - x.unicodeValue);\n      if (i !== -1) {\n        return sel.nonDefaultUVS[i].glyphID;\n      }\n    }\n\n    return 0;\n  }\n\n  @cache\n  getCharacterSet() {\n    let cmap = this.cmap;\n    switch (cmap.version) {\n      case 0:\n        return range(0, cmap.codeMap.length);\n\n      case 4: {\n        let res = [];\n        let endCodes = cmap.endCode.toArray();\n        for (let i = 0; i < endCodes.length; i++) {\n          let tail = endCodes[i] + 1;\n          let start = cmap.startCode.get(i);\n          res.push(...range(start, tail));\n        }\n\n        return res;\n      }\n\n      case 8:\n        throw new Error('TODO: cmap format 8');\n\n      case 6:\n      case 10:\n        return range(cmap.firstCode, cmap.firstCode + cmap.glyphIndices.length);\n\n      case 12:\n      case 13: {\n        let res = [];\n        for (let group of cmap.groups.toArray()) {\n          res.push(...range(group.startCharCode, group.endCharCode + 1));\n        }\n\n        return res;\n      }\n\n      case 14:\n        throw new Error('TODO: cmap format 14');\n\n      default:\n        throw new Error(`Unknown cmap format ${cmap.version}`);\n    }\n  }\n\n  @cache\n  codePointsForGlyph(gid) {\n    let cmap = this.cmap;\n    switch (cmap.version) {\n      case 0: {\n        let res = [];\n        for (let i = 0; i < 256; i++) {\n          if (cmap.codeMap.get(i) === gid) {\n            res.push(i);\n          }\n        }\n\n        return res;\n      }\n\n      case 4: {\n        let res = [];\n        for (let i = 0; i < cmap.segCount; i++) {\n          let end = cmap.endCode.get(i);\n          let start = cmap.startCode.get(i);\n          let rangeOffset = cmap.idRangeOffset.get(i);\n          let delta = cmap.idDelta.get(i);\n\n          for (var c = start; c <= end; c++) {\n            let g = 0;\n            if (rangeOffset === 0) {\n              g = c + delta;\n            } else {\n              let index = rangeOffset / 2 + (c - start) - (cmap.segCount - i);\n              g = cmap.glyphIndexArray.get(index) || 0;\n              if (g !== 0) {\n                g += delta;\n              }\n            }\n\n            if (g === gid) {\n              res.push(c);\n            }\n          }\n        }\n\n        return res;\n      }\n\n      case 12: {\n        let res = [];\n        for (let group of cmap.groups.toArray()) {\n          if (gid >= group.glyphID && gid <= group.glyphID + (group.endCharCode - group.startCharCode)) {\n            res.push(group.startCharCode + (gid - group.glyphID));\n          }\n        }\n\n        return res;\n      }\n\n      case 13: {\n        let res = [];\n        for (let group of cmap.groups.toArray()) {\n          if (gid === group.glyphID) {\n            res.push(...range(group.startCharCode, group.endCharCode + 1));\n          }\n        }\n\n        return res;\n      }\n\n      default:\n        throw new Error(`Unknown cmap format ${cmap.version}`);\n    }\n  }\n}\n","import {binarySearch} from '../utils';\n\nexport default class KernProcessor {\n  constructor(font) {\n    this.kern = font.kern;\n  }\n\n  process(glyphs, positions) {\n    for (let glyphIndex = 0; glyphIndex < glyphs.length - 1; glyphIndex++) {\n      let left = glyphs[glyphIndex].id;\n      let right = glyphs[glyphIndex + 1].id;\n      positions[glyphIndex].xAdvance += this.getKerning(left, right);\n    }\n  }\n\n  getKerning(left, right) {\n    let res = 0;\n\n    for (let table of this.kern.tables) {\n      if (table.coverage.crossStream) {\n        continue;\n      }\n\n      switch (table.version) {\n        case 0:\n          if (!table.coverage.horizontal) {\n            continue;\n          }\n\n          break;\n        case 1:\n          if (table.coverage.vertical || table.coverage.variation) {\n            continue;\n          }\n\n          break;\n        default:\n          throw new Error(`Unsupported kerning table version ${table.version}`);\n      }\n\n      let val = 0;\n      let s = table.subtable;\n      switch (table.format) {\n        case 0:\n          let pairIdx = binarySearch(s.pairs, function (pair) {\n            return (left - pair.left) || (right - pair.right);\n          });\n\n          if (pairIdx >= 0) {\n            val = s.pairs[pairIdx].value;\n          }\n\n          break;\n\n        case 2:\n          let leftOffset = 0, rightOffset = 0;\n          if (left >= s.leftTable.firstGlyph && left < s.leftTable.firstGlyph + s.leftTable.nGlyphs) {\n            leftOffset = s.leftTable.offsets[left - s.leftTable.firstGlyph];\n          } else {\n            leftOffset = s.array.off;\n          }\n\n          if (right >= s.rightTable.firstGlyph && right < s.rightTable.firstGlyph + s.rightTable.nGlyphs) {\n            rightOffset = s.rightTable.offsets[right - s.rightTable.firstGlyph];\n          }\n\n          let index = (leftOffset + rightOffset - s.array.off) / 2;\n          val = s.array.values.get(index);\n          break;\n\n        case 3:\n          if (left >= s.glyphCount || right >= s.glyphCount) {\n            return 0;\n          }\n\n          val = s.kernValue[s.kernIndex[s.leftClass[left] * s.rightClassCount + s.rightClass[right]]];\n          break;\n\n        default:\n          throw new Error(`Unsupported kerning sub-table format ${table.format}`);\n      }\n\n      // Microsoft supports the override flag, which resets the result\n      // Otherwise, the sum of the results from all subtables is returned\n      if (table.coverage.override) {\n        res = val;\n      } else {\n        res += val;\n      }\n    }\n\n    return res;\n  }\n}\n","import {getCombiningClass} from 'unicode-properties';\n\n/**\n * This class is used when GPOS does not define 'mark' or 'mkmk' features\n * for positioning marks relative to base glyphs. It uses the unicode\n * combining class property to position marks.\n *\n * Based on code from Harfbuzz, thanks!\n * https://github.com/behdad/harfbuzz/blob/master/src/hb-ot-shape-fallback.cc\n */\nexport default class UnicodeLayoutEngine {\n  constructor(font) {\n    this.font = font;\n  }\n\n  positionGlyphs(glyphs, positions) {\n    // find each base + mark cluster, and position the marks relative to the base\n    let clusterStart = 0;\n    let clusterEnd = 0;\n    for (let index = 0; index < glyphs.length; index++) {\n      let glyph = glyphs[index];\n      if (glyph.isMark) { // TODO: handle ligatures\n        clusterEnd = index;\n      } else {\n        if (clusterStart !== clusterEnd) {\n          this.positionCluster(glyphs, positions, clusterStart, clusterEnd);\n        }\n\n        clusterStart = clusterEnd = index;\n      }\n    }\n\n    if (clusterStart !== clusterEnd) {\n      this.positionCluster(glyphs, positions, clusterStart, clusterEnd);\n    }\n\n    return positions;\n  }\n\n  positionCluster(glyphs, positions, clusterStart, clusterEnd) {\n    let base = glyphs[clusterStart];\n    let baseBox = base.cbox.copy();\n\n    // adjust bounding box for ligature glyphs\n    if (base.codePoints.length > 1) {\n      // LTR. TODO: RTL support.\n      baseBox.minX += ((base.codePoints.length - 1) * baseBox.width) / base.codePoints.length;\n    }\n\n    let xOffset = -positions[clusterStart].xAdvance;\n    let yOffset = 0;\n    let yGap = this.font.unitsPerEm / 16;\n\n    // position each of the mark glyphs relative to the base glyph\n    for (let index = clusterStart + 1; index <= clusterEnd; index++) {\n      let mark = glyphs[index];\n      let markBox = mark.cbox;\n      let position = positions[index];\n\n      let combiningClass = this.getCombiningClass(mark.codePoints[0]);\n\n      if (combiningClass !== 'Not_Reordered') {\n        position.xOffset = position.yOffset = 0;\n\n        // x positioning\n        switch (combiningClass) {\n          case 'Double_Above':\n          case 'Double_Below':\n            // LTR. TODO: RTL support.\n            position.xOffset += baseBox.minX - markBox.width / 2 - markBox.minX;\n            break;\n\n          case 'Attached_Below_Left':\n          case 'Below_Left':\n          case 'Above_Left':\n            // left align\n            position.xOffset += baseBox.minX - markBox.minX;\n            break;\n\n          case 'Attached_Above_Right':\n          case 'Below_Right':\n          case 'Above_Right':\n            // right align\n            position.xOffset += baseBox.maxX - markBox.width - markBox.minX;\n            break;\n\n          default: // Attached_Below, Attached_Above, Below, Above, other\n            // center align\n            position.xOffset += baseBox.minX + (baseBox.width - markBox.width) / 2 - markBox.minX;\n        }\n\n        // y positioning\n        switch (combiningClass) {\n          case 'Double_Below':\n          case 'Below_Left':\n          case 'Below':\n          case 'Below_Right':\n          case 'Attached_Below_Left':\n          case 'Attached_Below':\n            // add a small gap between the glyphs if they are not attached\n            if (combiningClass === 'Attached_Below_Left' || combiningClass === 'Attached_Below') {\n              baseBox.minY += yGap;\n            }\n\n            position.yOffset = -baseBox.minY - markBox.maxY;\n            baseBox.minY += markBox.height;\n            break;\n\n          case 'Double_Above':\n          case 'Above_Left':\n          case 'Above':\n          case 'Above_Right':\n          case 'Attached_Above':\n          case 'Attached_Above_Right':\n            // add a small gap between the glyphs if they are not attached\n            if (combiningClass === 'Attached_Above' || combiningClass === 'Attached_Above_Right') {\n              baseBox.maxY += yGap;\n            }\n\n            position.yOffset = baseBox.maxY - markBox.minY;\n            baseBox.maxY += markBox.height;\n            break;\n        }\n\n        position.xAdvance = position.yAdvance = 0;\n        position.xOffset += xOffset;\n        position.yOffset += yOffset;\n\n      } else {\n        xOffset -= position.xAdvance;\n        yOffset -= position.yAdvance;\n      }\n    }\n\n    return;\n  }\n\n  getCombiningClass(codePoint) {\n    let combiningClass = getCombiningClass(codePoint);\n\n    // Thai / Lao need some per-character work\n    if ((codePoint & ~0xff) === 0x0e00) {\n      if (combiningClass === 'Not_Reordered') {\n        switch (codePoint) {\n          case 0x0e31:\n          case 0x0e34:\n          case 0x0e35:\n          case 0x0e36:\n          case 0x0e37:\n          case 0x0e47:\n          case 0x0e4c:\n          case 0x0e3d:\n          case 0x0e4e:\n            return 'Above_Right';\n\n          case 0x0eb1:\n          case 0x0eb4:\n          case 0x0eb5:\n          case 0x0eb6:\n          case 0x0eb7:\n          case 0x0ebb:\n          case 0x0ecc:\n          case 0x0ecd:\n            return 'Above';\n\n          case 0x0ebc:\n            return 'Below';\n        }\n      } else if (codePoint === 0x0e3a) { // virama\n        return 'Below_Right';\n      }\n    }\n\n    switch (combiningClass) {\n      // Hebrew\n\n      case 'CCC10': // sheva\n      case 'CCC11': // hataf segol\n      case 'CCC12': // hataf patah\n      case 'CCC13': // hataf qamats\n      case 'CCC14': // hiriq\n      case 'CCC15': // tsere\n      case 'CCC16': // segol\n      case 'CCC17': // patah\n      case 'CCC18': // qamats\n      case 'CCC20': // qubuts\n      case 'CCC22': // meteg\n        return 'Below';\n\n      case 'CCC23': // rafe\n        return 'Attached_Above';\n\n      case 'CCC24': // shin dot\n        return 'Above_Right';\n\n      case 'CCC25': // sin dot\n      case 'CCC19': // holam\n        return 'Above_Left';\n\n      case 'CCC26': // point varika\n        return 'Above';\n\n      case 'CCC21': // dagesh\n        break;\n\n      // Arabic and Syriac\n\n      case 'CCC27': // fathatan\n      case 'CCC28': // dammatan\n      case 'CCC30': // fatha\n      case 'CCC31': // damma\n      case 'CCC33': // shadda\n      case 'CCC34': // sukun\n      case 'CCC35': // superscript alef\n      case 'CCC36': // superscript alaph\n        return 'Above';\n\n      case 'CCC29': // kasratan\n      case 'CCC32': // kasra\n        return 'Below';\n\n      // Thai\n\n      case 'CCC103': // sara u / sara uu\n        return 'Below_Right';\n\n      case 'CCC107': // mai\n        return 'Above_Right';\n\n      // Lao\n\n      case 'CCC118': // sign u / sign uu\n        return 'Below';\n\n      case 'CCC122': // mai\n        return 'Above';\n\n      // Tibetan\n\n      case 'CCC129': // sign aa\n      case 'CCC132': // sign u\n        return 'Below';\n\n      case 'CCC130': // sign i\n        return 'Above';\n    }\n\n    return combiningClass;\n  }\n}\n","/**\n * Represents a glyph bounding box\n */\nexport default class BBox {\n  constructor(minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity) {\n    /**\n     * The minimum X position in the bounding box\n     * @type {number}\n     */\n    this.minX = minX;\n\n    /**\n     * The minimum Y position in the bounding box\n     * @type {number}\n     */\n    this.minY = minY;\n\n    /**\n     * The maxmimum X position in the bounding box\n     * @type {number}\n     */\n    this.maxX = maxX;\n\n    /**\n     * The maxmimum Y position in the bounding box\n     * @type {number}\n     */\n    this.maxY = maxY;\n  }\n\n  /**\n   * The width of the bounding box\n   * @type {number}\n   */\n  get width() {\n    return this.maxX - this.minX;\n  }\n\n  /**\n   * The height of the bounding box\n   * @type {number}\n   */\n  get height() {\n    return this.maxY - this.minY;\n  }\n\n  addPoint(x, y) {\n    if (Math.abs(x) !== Infinity) {\n      if (x < this.minX) {\n        this.minX = x;\n      }\n\n      if (x > this.maxX) {\n        this.maxX = x;\n      }\n    }\n\n    if (Math.abs(y) !== Infinity) {\n      if (y < this.minY) {\n        this.minY = y;\n      }\n\n      if (y > this.maxY) {\n        this.maxY = y;\n      }\n    }\n  }\n\n  copy() {\n    return new BBox(this.minX, this.minY, this.maxX, this.maxY);\n  }\n}\n","import {getScript} from 'unicode-properties';\n\n// This maps the Unicode Script property to an OpenType script tag\n// Data from http://www.microsoft.com/typography/otspec/scripttags.htm\n// and http://www.unicode.org/Public/UNIDATA/PropertyValueAliases.txt.\nconst UNICODE_SCRIPTS = {\n  Caucasian_Albanian: 'aghb',\n  Arabic: 'arab',\n  Imperial_Aramaic: 'armi',\n  Armenian: 'armn',\n  Avestan: 'avst',\n  Balinese: 'bali',\n  Bamum: 'bamu',\n  Bassa_Vah: 'bass',\n  Batak: 'batk',\n  Bengali: ['bng2', 'beng'],\n  Bopomofo: 'bopo',\n  Brahmi: 'brah',\n  Braille: 'brai',\n  Buginese: 'bugi',\n  Buhid: 'buhd',\n  Chakma: 'cakm',\n  Canadian_Aboriginal: 'cans',\n  Carian: 'cari',\n  Cham: 'cham',\n  Cherokee: 'cher',\n  Coptic: 'copt',\n  Cypriot: 'cprt',\n  Cyrillic: 'cyrl',\n  Devanagari: ['dev2', 'deva'],\n  Deseret: 'dsrt',\n  Duployan: 'dupl',\n  Egyptian_Hieroglyphs: 'egyp',\n  Elbasan: 'elba',\n  Ethiopic: 'ethi',\n  Georgian: 'geor',\n  Glagolitic: 'glag',\n  Gothic: 'goth',\n  Grantha: 'gran',\n  Greek: 'grek',\n  Gujarati: ['gjr2', 'gujr'],\n  Gurmukhi: ['gur2', 'guru'],\n  Hangul: 'hang',\n  Han: 'hani',\n  Hanunoo: 'hano',\n  Hebrew: 'hebr',\n  Hiragana: 'hira',\n  Pahawh_Hmong: 'hmng',\n  Katakana_Or_Hiragana: 'hrkt',\n  Old_Italic: 'ital',\n  Javanese: 'java',\n  Kayah_Li: 'kali',\n  Katakana: 'kana',\n  Kharoshthi: 'khar',\n  Khmer: 'khmr',\n  Khojki: 'khoj',\n  Kannada: ['knd2', 'knda'],\n  Kaithi: 'kthi',\n  Tai_Tham: 'lana',\n  Lao: 'lao ',\n  Latin: 'latn',\n  Lepcha: 'lepc',\n  Limbu: 'limb',\n  Linear_A: 'lina',\n  Linear_B: 'linb',\n  Lisu: 'lisu',\n  Lycian: 'lyci',\n  Lydian: 'lydi',\n  Mahajani: 'mahj',\n  Mandaic: 'mand',\n  Manichaean: 'mani',\n  Mende_Kikakui: 'mend',\n  Meroitic_Cursive: 'merc',\n  Meroitic_Hieroglyphs: 'mero',\n  Malayalam: ['mlm2', 'mlym'],\n  Modi: 'modi',\n  Mongolian: 'mong',\n  Mro: 'mroo',\n  Meetei_Mayek: 'mtei',\n  Myanmar: ['mym2', 'mymr'],\n  Old_North_Arabian: 'narb',\n  Nabataean: 'nbat',\n  Nko: 'nko ',\n  Ogham: 'ogam',\n  Ol_Chiki: 'olck',\n  Old_Turkic: 'orkh',\n  Oriya: ['ory2', 'orya'],\n  Osmanya: 'osma',\n  Palmyrene: 'palm',\n  Pau_Cin_Hau: 'pauc',\n  Old_Permic: 'perm',\n  Phags_Pa: 'phag',\n  Inscriptional_Pahlavi: 'phli',\n  Psalter_Pahlavi: 'phlp',\n  Phoenician: 'phnx',\n  Miao: 'plrd',\n  Inscriptional_Parthian: 'prti',\n  Rejang: 'rjng',\n  Runic: 'runr',\n  Samaritan: 'samr',\n  Old_South_Arabian: 'sarb',\n  Saurashtra: 'saur',\n  Shavian: 'shaw',\n  Sharada: 'shrd',\n  Siddham: 'sidd',\n  Khudawadi: 'sind',\n  Sinhala: 'sinh',\n  Sora_Sompeng: 'sora',\n  Sundanese: 'sund',\n  Syloti_Nagri: 'sylo',\n  Syriac: 'syrc',\n  Tagbanwa: 'tagb',\n  Takri: 'takr',\n  Tai_Le: 'tale',\n  New_Tai_Lue: 'talu',\n  Tamil: ['tml2', 'taml'],\n  Tai_Viet: 'tavt',\n  Telugu: ['tel2', 'telu'],\n  Tifinagh: 'tfng',\n  Tagalog: 'tglg',\n  Thaana: 'thaa',\n  Thai: 'thai',\n  Tibetan: 'tibt',\n  Tirhuta: 'tirh',\n  Ugaritic: 'ugar',\n  Vai: 'vai ',\n  Warang_Citi: 'wara',\n  Old_Persian: 'xpeo',\n  Cuneiform: 'xsux',\n  Yi: 'yi  ',\n  Inherited: 'zinh',\n  Common: 'zyyy',\n  Unknown: 'zzzz'\n};\n\nconst OPENTYPE_SCRIPTS = {};\nfor (let script in UNICODE_SCRIPTS) {\n  let tag = UNICODE_SCRIPTS[script];\n  if (Array.isArray(tag)) {\n    for (let t of tag) {\n      OPENTYPE_SCRIPTS[t] = script;\n    }\n  } else {\n    OPENTYPE_SCRIPTS[tag] = script;\n  }\n}\n\nexport function fromUnicode(script) {\n  return UNICODE_SCRIPTS[script];\n}\n\nexport function fromOpenType(tag) {\n  return OPENTYPE_SCRIPTS[tag];\n}\n\nexport function forString(string) {\n  let len = string.length;\n  let idx = 0;\n  while (idx < len) {\n    let code = string.charCodeAt(idx++);\n\n    // Check if this is a high surrogate\n    if (0xd800 <= code && code <= 0xdbff && idx < len) {\n      let next = string.charCodeAt(idx);\n\n      // Check if this is a low surrogate\n      if (0xdc00 <= next && next <= 0xdfff) {\n        idx++;\n        code = ((code & 0x3FF) << 10) + (next & 0x3FF) + 0x10000;\n      }\n    }\n\n    let script = getScript(code);\n    if (script !== 'Common' && script !== 'Inherited' && script !== 'Unknown') {\n      return UNICODE_SCRIPTS[script];\n    }\n  }\n\n  return UNICODE_SCRIPTS.Unknown;\n}\n\nexport function forCodePoints(codePoints) {\n  for (let i = 0; i < codePoints.length; i++) {\n    let codePoint = codePoints[i];\n    let script = getScript(codePoint);\n    if (script !== 'Common' && script !== 'Inherited' && script !== 'Unknown') {\n      return UNICODE_SCRIPTS[script];\n    }\n  }\n\n  return UNICODE_SCRIPTS.Unknown;\n}\n\n// The scripts in this map are written from right to left\nconst RTL = {\n  arab: true,   // Arabic\n  hebr: true,   // Hebrew\n  syrc: true,   // Syriac\n  thaa: true,   // Thaana\n  cprt: true,   // Cypriot Syllabary\n  khar: true,   // Kharosthi\n  phnx: true,   // Phoenician\n  'nko ': true, // N'Ko\n  lydi: true,   // Lydian\n  avst: true,   // Avestan\n  armi: true,   // Imperial Aramaic\n  phli: true,   // Inscriptional Pahlavi\n  prti: true,   // Inscriptional Parthian\n  sarb: true,   // Old South Arabian\n  orkh: true,   // Old Turkic, Orkhon Runic\n  samr: true,   // Samaritan\n  mand: true,   // Mandaic, Mandaean\n  merc: true,   // Meroitic Cursive\n  mero: true,   // Meroitic Hieroglyphs\n\n  // Unicode 7.0 (not listed on http://www.microsoft.com/typography/otspec/scripttags.htm)\n  mani: true,   // Manichaean\n  mend: true,   // Mende Kikakui\n  nbat: true,   // Nabataean\n  narb: true,   // Old North Arabian\n  palm: true,   // Palmyrene\n  phlp: true    // Psalter Pahlavi\n};\n\nexport function direction(script) {\n  if (RTL[script]) {\n    return 'rtl';\n  }\n\n  return 'ltr';\n}\n","import BBox from '../glyph/BBox';\nimport * as Script from '../layout/Script';\n\n/**\n * Represents a run of Glyph and GlyphPosition objects.\n * Returned by the font layout method.\n */\nexport default class GlyphRun {\n  constructor(glyphs, features, script, language, direction) {\n    /**\n     * An array of Glyph objects in the run\n     * @type {Glyph[]}\n     */\n    this.glyphs = glyphs;\n\n    /**\n     * An array of GlyphPosition objects for each glyph in the run\n     * @type {GlyphPosition[]}\n     */\n    this.positions = null;\n\n    /**\n     * The script that was requested for shaping. This was either passed in or detected automatically.\n     * @type {string}\n     */\n    this.script = script;\n\n    /**\n     * The language requested for shaping, as passed in. If `null`, the default language for the\n     * script was used.\n     * @type {string}\n     */\n    this.language = language || null;\n\n    /**\n     * The direction requested for shaping, as passed in (either ltr or rtl).\n     * If `null`, the default direction of the script is used.\n     * @type {string}\n     */\n    this.direction = direction || Script.direction(script);\n\n    /**\n     * The features requested during shaping. This is a combination of user\n     * specified features and features chosen by the shaper.\n     * @type {object}\n     */\n    this.features = {};\n\n    // Convert features to an object\n    if (Array.isArray(features)) {\n      for (let tag of features) {\n        this.features[tag] = true;\n      }\n    } else if (typeof features === 'object') {\n      this.features = features;\n    }\n  }\n\n  /**\n   * The total advance width of the run.\n   * @type {number}\n   */\n  get advanceWidth() {\n    let width = 0;\n    for (let position of this.positions) {\n      width += position.xAdvance;\n    }\n\n    return width;\n  }\n\n /**\n  * The total advance height of the run.\n  * @type {number}\n  */\n  get advanceHeight() {\n    let height = 0;\n    for (let position of this.positions) {\n      height += position.yAdvance;\n    }\n\n    return height;\n  }\n\n /**\n  * The bounding box containing all glyphs in the run.\n  * @type {BBox}\n  */\n  get bbox() {\n    let bbox = new BBox;\n\n    let x = 0;\n    let y = 0;\n    for (let index = 0; index < this.glyphs.length; index++) {\n      let glyph = this.glyphs[index];\n      let p = this.positions[index];\n      let b = glyph.bbox;\n\n      bbox.addPoint(b.minX + x + p.xOffset, b.minY + y + p.yOffset);\n      bbox.addPoint(b.maxX + x + p.xOffset, b.maxY + y + p.yOffset);\n\n      x += p.xAdvance;\n      y += p.yAdvance;\n    }\n\n    return bbox;\n  }\n}\n","/**\n * Represents positioning information for a glyph in a GlyphRun.\n */\nexport default class GlyphPosition {\n  constructor(xAdvance = 0, yAdvance = 0, xOffset = 0, yOffset = 0) {\n    /**\n     * The amount to move the virtual pen in the X direction after rendering this glyph.\n     * @type {number}\n     */\n    this.xAdvance = xAdvance;\n\n    /**\n     * The amount to move the virtual pen in the Y direction after rendering this glyph.\n     * @type {number}\n     */\n    this.yAdvance = yAdvance;\n\n    /**\n     * The offset from the pen position in the X direction at which to render this glyph.\n     * @type {number}\n     */\n    this.xOffset = xOffset;\n\n    /**\n     * The offset from the pen position in the Y direction at which to render this glyph.\n     * @type {number}\n     */\n    this.yOffset = yOffset;\n  }\n}\n","// see https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html\n// and /System/Library/Frameworks/CoreText.framework/Versions/A/Headers/SFNTLayoutTypes.h on a Mac\nconst features = {\n  allTypographicFeatures: {\n    code: 0,\n    exclusive: false,\n    allTypeFeatures: 0\n  },\n  ligatures: {\n    code: 1,\n    exclusive: false,\n    requiredLigatures: 0,\n    commonLigatures: 2,\n    rareLigatures: 4,\n    // logos: 6\n    rebusPictures: 8,\n    diphthongLigatures: 10,\n    squaredLigatures: 12,\n    abbrevSquaredLigatures: 14,\n    symbolLigatures: 16,\n    contextualLigatures: 18,\n    historicalLigatures: 20\n  },\n  cursiveConnection: {\n    code: 2,\n    exclusive: true,\n    unconnected: 0,\n    partiallyConnected: 1,\n    cursive: 2\n  },\n  letterCase: {\n    code: 3,\n    exclusive: true\n  },\n    // upperAndLowerCase: 0          # deprecated\n    // allCaps: 1                    # deprecated\n    // allLowerCase: 2               # deprecated\n    // smallCaps: 3                  # deprecated\n    // initialCaps: 4                # deprecated\n    // initialCapsAndSmallCaps: 5    # deprecated\n  verticalSubstitution: {\n    code: 4,\n    exclusive: false,\n    substituteVerticalForms: 0\n  },\n  linguisticRearrangement: {\n    code: 5,\n    exclusive: false,\n    linguisticRearrangement: 0\n  },\n  numberSpacing: {\n    code: 6,\n    exclusive: true,\n    monospacedNumbers: 0,\n    proportionalNumbers: 1,\n    thirdWidthNumbers: 2,\n    quarterWidthNumbers: 3\n  },\n  smartSwash: {\n    code: 8,\n    exclusive: false,\n    wordInitialSwashes: 0,\n    wordFinalSwashes: 2,\n    // lineInitialSwashes: 4\n    // lineFinalSwashes: 6\n    nonFinalSwashes: 8\n  },\n  diacritics: {\n    code: 9,\n    exclusive: true,\n    showDiacritics: 0,\n    hideDiacritics: 1,\n    decomposeDiacritics: 2\n  },\n  verticalPosition: {\n    code: 10,\n    exclusive: true,\n    normalPosition: 0,\n    superiors: 1,\n    inferiors: 2,\n    ordinals: 3,\n    scientificInferiors: 4\n  },\n  fractions: {\n    code: 11,\n    exclusive: true,\n    noFractions: 0,\n    verticalFractions: 1,\n    diagonalFractions: 2\n  },\n  overlappingCharacters: {\n    code: 13,\n    exclusive: false,\n    preventOverlap: 0\n  },\n  typographicExtras: {\n    code: 14,\n    exclusive: false,\n    // hyphensToEmDash: 0\n    // hyphenToEnDash: 2\n    slashedZero: 4\n  },\n    // formInterrobang: 6\n    // smartQuotes: 8\n    // periodsToEllipsis: 10\n  mathematicalExtras: {\n    code: 15,\n    exclusive: false,\n    // hyphenToMinus: 0\n    // asteristoMultiply: 2\n    // slashToDivide: 4\n    // inequalityLigatures: 6\n    // exponents: 8\n    mathematicalGreek: 10\n  },\n  ornamentSets: {\n    code: 16,\n    exclusive: true,\n    noOrnaments: 0,\n    dingbats: 1,\n    piCharacters: 2,\n    fleurons: 3,\n    decorativeBorders: 4,\n    internationalSymbols: 5,\n    mathSymbols: 6\n  },\n  characterAlternatives: {\n    code: 17,\n    exclusive: true,\n    noAlternates: 0\n  },\n    // user defined options\n  designComplexity: {\n    code: 18,\n    exclusive: true,\n    designLevel1: 0,\n    designLevel2: 1,\n    designLevel3: 2,\n    designLevel4: 3,\n    designLevel5: 4\n  },\n  styleOptions: {\n    code: 19,\n    exclusive: true,\n    noStyleOptions: 0,\n    displayText: 1,\n    engravedText: 2,\n    illuminatedCaps: 3,\n    titlingCaps: 4,\n    tallCaps: 5\n  },\n  characterShape: {\n    code: 20,\n    exclusive: true,\n    traditionalCharacters: 0,\n    simplifiedCharacters: 1,\n    JIS1978Characters: 2,\n    JIS1983Characters: 3,\n    JIS1990Characters: 4,\n    traditionalAltOne: 5,\n    traditionalAltTwo: 6,\n    traditionalAltThree: 7,\n    traditionalAltFour: 8,\n    traditionalAltFive: 9,\n    expertCharacters: 10,\n    JIS2004Characters: 11,\n    hojoCharacters: 12,\n    NLCCharacters: 13,\n    traditionalNamesCharacters: 14\n  },\n  numberCase: {\n    code: 21,\n    exclusive: true,\n    lowerCaseNumbers: 0,\n    upperCaseNumbers: 1\n  },\n  textSpacing: {\n    code: 22,\n    exclusive: true,\n    proportionalText: 0,\n    monospacedText: 1,\n    halfWidthText: 2,\n    thirdWidthText: 3,\n    quarterWidthText: 4,\n    altProportionalText: 5,\n    altHalfWidthText: 6\n  },\n  transliteration: {\n    code: 23,\n    exclusive: true,\n    noTransliteration: 0\n  },\n    // hanjaToHangul: 1\n    // hiraganaToKatakana: 2\n    // katakanaToHiragana: 3\n    // kanaToRomanization: 4\n    // romanizationToHiragana: 5\n    // romanizationToKatakana: 6\n    // hanjaToHangulAltOne: 7\n    // hanjaToHangulAltTwo: 8\n    // hanjaToHangulAltThree: 9\n  annotation: {\n    code: 24,\n    exclusive: true,\n    noAnnotation: 0,\n    boxAnnotation: 1,\n    roundedBoxAnnotation: 2,\n    circleAnnotation: 3,\n    invertedCircleAnnotation: 4,\n    parenthesisAnnotation: 5,\n    periodAnnotation: 6,\n    romanNumeralAnnotation: 7,\n    diamondAnnotation: 8,\n    invertedBoxAnnotation: 9,\n    invertedRoundedBoxAnnotation: 10\n  },\n  kanaSpacing: {\n    code: 25,\n    exclusive: true,\n    fullWidthKana: 0,\n    proportionalKana: 1\n  },\n  ideographicSpacing: {\n    code: 26,\n    exclusive: true,\n    fullWidthIdeographs: 0,\n    proportionalIdeographs: 1,\n    halfWidthIdeographs: 2\n  },\n  unicodeDecomposition: {\n    code: 27,\n    exclusive: false,\n    canonicalComposition: 0,\n    compatibilityComposition: 2,\n    transcodingComposition: 4\n  },\n  rubyKana: {\n    code: 28,\n    exclusive: false,\n    // noRubyKana: 0     # deprecated - use rubyKanaOff instead\n    // rubyKana: 1     # deprecated - use rubyKanaOn instead\n    rubyKana: 2\n  },\n  CJKSymbolAlternatives: {\n    code: 29,\n    exclusive: true,\n    noCJKSymbolAlternatives: 0,\n    CJKSymbolAltOne: 1,\n    CJKSymbolAltTwo: 2,\n    CJKSymbolAltThree: 3,\n    CJKSymbolAltFour: 4,\n    CJKSymbolAltFive: 5\n  },\n  ideographicAlternatives: {\n    code: 30,\n    exclusive: true,\n    noIdeographicAlternatives: 0,\n    ideographicAltOne: 1,\n    ideographicAltTwo: 2,\n    ideographicAltThree: 3,\n    ideographicAltFour: 4,\n    ideographicAltFive: 5\n  },\n  CJKVerticalRomanPlacement: {\n    code: 31,\n    exclusive: true,\n    CJKVerticalRomanCentered: 0,\n    CJKVerticalRomanHBaseline: 1\n  },\n  italicCJKRoman: {\n    code: 32,\n    exclusive: false,\n    // noCJKItalicRoman: 0     # deprecated - use CJKItalicRomanOff instead\n    // CJKItalicRoman: 1     # deprecated - use CJKItalicRomanOn instead\n    CJKItalicRoman: 2\n  },\n  caseSensitiveLayout: {\n    code: 33,\n    exclusive: false,\n    caseSensitiveLayout: 0,\n    caseSensitiveSpacing: 2\n  },\n  alternateKana: {\n    code: 34,\n    exclusive: false,\n    alternateHorizKana: 0,\n    alternateVertKana: 2\n  },\n  stylisticAlternatives: {\n    code: 35,\n    exclusive: false,\n    noStylisticAlternates: 0,\n    stylisticAltOne: 2,\n    stylisticAltTwo: 4,\n    stylisticAltThree: 6,\n    stylisticAltFour: 8,\n    stylisticAltFive: 10,\n    stylisticAltSix: 12,\n    stylisticAltSeven: 14,\n    stylisticAltEight: 16,\n    stylisticAltNine: 18,\n    stylisticAltTen: 20,\n    stylisticAltEleven: 22,\n    stylisticAltTwelve: 24,\n    stylisticAltThirteen: 26,\n    stylisticAltFourteen: 28,\n    stylisticAltFifteen: 30,\n    stylisticAltSixteen: 32,\n    stylisticAltSeventeen: 34,\n    stylisticAltEighteen: 36,\n    stylisticAltNineteen: 38,\n    stylisticAltTwenty: 40\n  },\n  contextualAlternates: {\n    code: 36,\n    exclusive: false,\n    contextualAlternates: 0,\n    swashAlternates: 2,\n    contextualSwashAlternates: 4\n  },\n  lowerCase: {\n    code: 37,\n    exclusive: true,\n    defaultLowerCase: 0,\n    lowerCaseSmallCaps: 1,\n    lowerCasePetiteCaps: 2\n  },\n  upperCase: {\n    code: 38,\n    exclusive: true,\n    defaultUpperCase: 0,\n    upperCaseSmallCaps: 1,\n    upperCasePetiteCaps: 2\n  },\n  languageTag: { // indices into ltag table\n    code: 39,\n    exclusive: true\n  },\n  CJKRomanSpacing: {\n    code: 103,\n    exclusive: true,\n    halfWidthCJKRoman: 0,\n    proportionalCJKRoman: 1,\n    defaultCJKRoman: 2,\n    fullWidthCJKRoman: 3\n  }\n};\n\nconst feature = (name, selector) => [features[name].code, features[name][selector]];\n\nconst OTMapping = {\n  rlig: feature('ligatures', 'requiredLigatures'),\n  clig: feature('ligatures', 'contextualLigatures'),\n  dlig: feature('ligatures', 'rareLigatures'),\n  hlig: feature('ligatures', 'historicalLigatures'),\n  liga: feature('ligatures', 'commonLigatures'),\n  hist: feature('ligatures', 'historicalLigatures'), // ??\n\n  smcp: feature('lowerCase', 'lowerCaseSmallCaps'),\n  pcap: feature('lowerCase', 'lowerCasePetiteCaps'),\n\n  frac: feature('fractions', 'diagonalFractions'),\n  dnom: feature('fractions', 'diagonalFractions'), // ??\n  numr: feature('fractions', 'diagonalFractions'), // ??\n  afrc: feature('fractions', 'verticalFractions'),\n  // aalt\n  // abvf, abvm, abvs, akhn, blwf, blwm, blws, cfar, cjct, cpsp, falt, isol, jalt, ljmo, mset?\n  // ltra, ltrm, nukt, pref, pres, pstf, psts, rand, rkrf, rphf, rtla, rtlm, size, tjmo, tnum?\n  // unic, vatu, vhal, vjmo, vpal, vrt2\n  // dist -> trak table?\n  // kern, vkrn -> kern table\n  // lfbd + opbd + rtbd -> opbd table?\n  // mark, mkmk -> acnt table?\n  // locl -> languageTag + ltag table\n\n  case: feature('caseSensitiveLayout', 'caseSensitiveLayout'), // also caseSensitiveSpacing\n  ccmp: feature('unicodeDecomposition', 'canonicalComposition'), // compatibilityComposition?\n  cpct: feature('CJKVerticalRomanPlacement', 'CJKVerticalRomanCentered'), // guess..., probably not given below\n  valt: feature('CJKVerticalRomanPlacement', 'CJKVerticalRomanCentered'),\n  swsh: feature('contextualAlternates', 'swashAlternates'),\n  cswh: feature('contextualAlternates', 'contextualSwashAlternates'),\n  curs: feature('cursiveConnection', 'cursive'), // ??\n  c2pc: feature('upperCase', 'upperCasePetiteCaps'),\n  c2sc: feature('upperCase', 'upperCaseSmallCaps'),\n\n  init: feature('smartSwash', 'wordInitialSwashes'), // ??\n  fin2: feature('smartSwash', 'wordFinalSwashes'), // ??\n  medi: feature('smartSwash', 'nonFinalSwashes'), // ??\n  med2: feature('smartSwash', 'nonFinalSwashes'), // ??\n  fin3: feature('smartSwash', 'wordFinalSwashes'), // ??\n  fina: feature('smartSwash', 'wordFinalSwashes'), // ??\n\n  pkna: feature('kanaSpacing', 'proportionalKana'),\n  half: feature('textSpacing', 'halfWidthText'), // also HalfWidthCJKRoman, HalfWidthIdeographs?\n  halt: feature('textSpacing', 'altHalfWidthText'),\n\n  hkna: feature('alternateKana', 'alternateHorizKana'),\n  vkna: feature('alternateKana', 'alternateVertKana'),\n  // hngl: feature 'transliteration', 'hanjaToHangulSelector' # deprecated\n\n  ital: feature('italicCJKRoman', 'CJKItalicRoman'),\n  lnum: feature('numberCase', 'upperCaseNumbers'),\n  onum: feature('numberCase', 'lowerCaseNumbers'),\n  mgrk: feature('mathematicalExtras', 'mathematicalGreek'),\n\n  // nalt: not enough info. what type of annotation?\n  // ornm: ditto, which ornament style?\n\n  calt: feature('contextualAlternates', 'contextualAlternates'), // or more?\n  vrt2: feature('verticalSubstitution', 'substituteVerticalForms'), // oh... below?\n  vert: feature('verticalSubstitution', 'substituteVerticalForms'),\n  tnum: feature('numberSpacing', 'monospacedNumbers'),\n  pnum: feature('numberSpacing', 'proportionalNumbers'),\n  sups: feature('verticalPosition', 'superiors'),\n  subs: feature('verticalPosition', 'inferiors'),\n  ordn: feature('verticalPosition', 'ordinals'),\n  pwid: feature('textSpacing', 'proportionalText'),\n  hwid: feature('textSpacing', 'halfWidthText'),\n  qwid: feature('textSpacing', 'quarterWidthText'), // also QuarterWidthNumbers?\n  twid: feature('textSpacing', 'thirdWidthText'), // also ThirdWidthNumbers?\n  fwid: feature('textSpacing', 'proportionalText'), //??\n  palt: feature('textSpacing', 'altProportionalText'),\n  trad: feature('characterShape', 'traditionalCharacters'),\n  smpl: feature('characterShape', 'simplifiedCharacters'),\n  jp78: feature('characterShape', 'JIS1978Characters'),\n  jp83: feature('characterShape', 'JIS1983Characters'),\n  jp90: feature('characterShape', 'JIS1990Characters'),\n  jp04: feature('characterShape', 'JIS2004Characters'),\n  expt: feature('characterShape', 'expertCharacters'),\n  hojo: feature('characterShape', 'hojoCharacters'),\n  nlck: feature('characterShape', 'NLCCharacters'),\n  tnam: feature('characterShape', 'traditionalNamesCharacters'),\n  ruby: feature('rubyKana', 'rubyKana'),\n  titl: feature('styleOptions', 'titlingCaps'),\n  zero: feature('typographicExtras', 'slashedZero'),\n\n  ss01: feature('stylisticAlternatives', 'stylisticAltOne'),\n  ss02: feature('stylisticAlternatives', 'stylisticAltTwo'),\n  ss03: feature('stylisticAlternatives', 'stylisticAltThree'),\n  ss04: feature('stylisticAlternatives', 'stylisticAltFour'),\n  ss05: feature('stylisticAlternatives', 'stylisticAltFive'),\n  ss06: feature('stylisticAlternatives', 'stylisticAltSix'),\n  ss07: feature('stylisticAlternatives', 'stylisticAltSeven'),\n  ss08: feature('stylisticAlternatives', 'stylisticAltEight'),\n  ss09: feature('stylisticAlternatives', 'stylisticAltNine'),\n  ss10: feature('stylisticAlternatives', 'stylisticAltTen'),\n  ss11: feature('stylisticAlternatives', 'stylisticAltEleven'),\n  ss12: feature('stylisticAlternatives', 'stylisticAltTwelve'),\n  ss13: feature('stylisticAlternatives', 'stylisticAltThirteen'),\n  ss14: feature('stylisticAlternatives', 'stylisticAltFourteen'),\n  ss15: feature('stylisticAlternatives', 'stylisticAltFifteen'),\n  ss16: feature('stylisticAlternatives', 'stylisticAltSixteen'),\n  ss17: feature('stylisticAlternatives', 'stylisticAltSeventeen'),\n  ss18: feature('stylisticAlternatives', 'stylisticAltEighteen'),\n  ss19: feature('stylisticAlternatives', 'stylisticAltNineteen'),\n  ss20: feature('stylisticAlternatives', 'stylisticAltTwenty')\n};\n\n  // salt: feature 'stylisticAlternatives', 'stylisticAltOne' # hmm, which one to choose\n\n// Add cv01-cv99 features\nfor (let i = 1; i <= 99; i++) {\n  OTMapping[`cv${`00${i}`.slice(-2)}`] = [features.characterAlternatives.code, i];\n}\n\n// create inverse mapping\nlet AATMapping = {};\nfor (let ot in OTMapping) {\n  let aat = OTMapping[ot];\n  if (AATMapping[aat[0]] == null) {\n    AATMapping[aat[0]] = {};\n  }\n\n  AATMapping[aat[0]][aat[1]] = ot;\n}\n\n// Maps an array of OpenType features to AAT features\n// in the form of {featureType:{featureSetting:true}}\nexport function mapOTToAAT(features) {\n  let res = {};\n  for (let k in features) {\n    let r;\n    if (r = OTMapping[k]) {\n      if (res[r[0]] == null) {\n        res[r[0]] = {};\n      }\n\n      res[r[0]][r[1]] = features[k];\n    }\n  }\n\n  return res;\n}\n\n// Maps strings in a [featureType, featureSetting]\n// to their equivalent number codes\nfunction mapFeatureStrings(f) {\n  let [type, setting] = f;\n  if (isNaN(type)) {\n    var typeCode = features[type] && features[type].code;\n  } else {\n    var typeCode = type;\n  }\n\n  if (isNaN(setting)) {\n    var settingCode = features[type] && features[type][setting];\n  } else {\n    var settingCode = setting;\n  }\n\n  return [typeCode, settingCode];\n}\n\n// Maps AAT features to an array of OpenType features\n// Supports both arrays in the form of [[featureType, featureSetting]]\n// and objects in the form of {featureType:{featureSetting:true}}\n// featureTypes and featureSettings can be either strings or number codes\nexport function mapAATToOT(features) {\n  let res = {};\n  if (Array.isArray(features)) {\n    for (let k = 0; k < features.length; k++) {\n      let r;\n      let f = mapFeatureStrings(features[k]);\n      if (r = AATMapping[f[0]] && AATMapping[f[0]][f[1]]) {\n        res[r] = true;\n      }\n    }\n\n  } else if (typeof features === 'object') {\n    for (let type in features) {\n      let feature = features[type];\n      for (let setting in feature) {\n        let r;\n        let f = mapFeatureStrings([type, setting]);\n        if (feature[setting] && (r = AATMapping[f[0]] && AATMapping[f[0]][f[1]])) {\n          res[r] = true;\n        }\n      }\n    }\n  }\n\n  return Object.keys(res);\n}\n","import {cache} from '../decorators';\nimport {range} from '../utils';\n\nexport default class AATLookupTable {\n  constructor(table) {\n    this.table = table;\n  }\n\n  lookup(glyph) {\n    switch (this.table.version) {\n      case 0: // simple array format\n        return this.table.values.getItem(glyph);\n\n      case 2: // segment format\n      case 4: {\n        let min = 0;\n        let max = this.table.binarySearchHeader.nUnits - 1;\n\n        while (min <= max) {\n          var mid = (min + max) >> 1;\n          var seg = this.table.segments[mid];\n\n          // special end of search value\n          if (seg.firstGlyph === 0xffff) {\n            return null;\n          }\n\n          if (glyph < seg.firstGlyph) {\n            max = mid - 1;\n          } else if (glyph > seg.lastGlyph) {\n            min = mid + 1;\n          } else {\n            if (this.table.version === 2) {\n              return seg.value;\n            } else {\n              return seg.values[glyph - seg.firstGlyph];\n            }\n          }\n        }\n\n        return null;\n      }\n\n      case 6: { // lookup single\n        let min = 0;\n        let max = this.table.binarySearchHeader.nUnits - 1;\n\n        while (min <= max) {\n          var mid = (min + max) >> 1;\n          var seg = this.table.segments[mid];\n\n          // special end of search value\n          if (seg.glyph === 0xffff) {\n            return null;\n          }\n\n          if (glyph < seg.glyph) {\n            max = mid - 1;\n          } else if (glyph > seg.glyph) {\n            min = mid + 1;\n          } else {\n            return seg.value;\n          }\n        }\n\n        return null;\n      }\n\n      case 8: // lookup trimmed\n        return this.table.values[glyph - this.table.firstGlyph];\n\n      default:\n        throw new Error(`Unknown lookup table format: ${this.table.version}`);\n    }\n  }\n\n  @cache\n  glyphsForValue(classValue) {\n    let res = [];\n\n    switch (this.table.version) {\n      case 2: // segment format\n      case 4: {\n        for (let segment of this.table.segments) {\n          if ((this.table.version === 2 && segment.value === classValue)) {\n            res.push(...range(segment.firstGlyph, segment.lastGlyph + 1));\n          } else {\n            for (let index = 0; index < segment.values.length; index++) {\n              if (segment.values[index] === classValue) {\n                res.push(segment.firstGlyph + index);\n              }\n            }\n          }\n        }\n\n        break;\n      }\n\n      case 6: { // lookup single\n        for (let segment of this.table.segments) {\n          if (segment.value === classValue) {\n            res.push(segment.glyph);\n          }\n        }\n\n        break;\n      }\n\n      case 8: { // lookup trimmed\n        for (let i = 0; i < this.table.values.length; i++) {\n          if (this.table.values[i] === classValue) {\n            res.push(this.table.firstGlyph + i);\n          }\n        }\n\n        break;\n      }\n\n      default:\n        throw new Error(`Unknown lookup table format: ${this.table.version}`);\n    }\n\n    return res;\n  }\n}\n","import AATLookupTable from './AATLookupTable';\n\nconst START_OF_TEXT_STATE = 0;\nconst START_OF_LINE_STATE = 1;\n\nconst END_OF_TEXT_CLASS = 0;\nconst OUT_OF_BOUNDS_CLASS = 1;\nconst DELETED_GLYPH_CLASS = 2;\nconst END_OF_LINE_CLASS = 3;\n\nconst DONT_ADVANCE = 0x4000;\n\nexport default class AATStateMachine {\n  constructor(stateTable) {\n    this.stateTable = stateTable;\n    this.lookupTable = new AATLookupTable(stateTable.classTable);\n  }\n\n  process(glyphs, reverse, processEntry) {\n    let currentState = START_OF_TEXT_STATE; // START_OF_LINE_STATE is used for kashida glyph insertions sometimes I think?\n    let index = reverse ? glyphs.length - 1 : 0;\n    let dir = reverse ? -1 : 1;\n\n    while ((dir === 1 && index <= glyphs.length) || (dir === -1 && index >= -1)) {\n      let glyph = null;\n      let classCode = OUT_OF_BOUNDS_CLASS;\n      let shouldAdvance = true;\n\n      if (index === glyphs.length || index === -1) {\n        classCode = END_OF_TEXT_CLASS;\n      } else {\n        glyph = glyphs[index];\n        if (glyph.id === 0xffff) { // deleted glyph\n          classCode = DELETED_GLYPH_CLASS;\n        } else {\n          classCode = this.lookupTable.lookup(glyph.id);\n          if (classCode == null) {\n            classCode = OUT_OF_BOUNDS_CLASS;\n          }\n        }\n      }\n\n      let row = this.stateTable.stateArray.getItem(currentState);\n      let entryIndex = row[classCode];\n      let entry = this.stateTable.entryTable.getItem(entryIndex);\n\n      if (classCode !== END_OF_TEXT_CLASS && classCode !==  DELETED_GLYPH_CLASS) {\n        processEntry(glyph, entry, index);\n        shouldAdvance = !(entry.flags & DONT_ADVANCE);\n      }\n\n      currentState = entry.newState;\n      if (shouldAdvance) {\n        index += dir;\n      }\n    }\n\n    return glyphs;\n  }\n\n  /**\n   * Performs a depth-first traversal of the glyph strings\n   * represented by the state machine.\n   */\n  traverse(opts, state = 0, visited = new Set) {\n    if (visited.has(state)) {\n      return;\n    }\n\n    visited.add(state);\n\n    let {nClasses, stateArray, entryTable} = this.stateTable;\n    let row = stateArray.getItem(state);\n\n    // Skip predefined classes\n    for (let classCode = 4; classCode < nClasses; classCode++) {\n      let entryIndex = row[classCode];\n      let entry = entryTable.getItem(entryIndex);\n\n      // Try all glyphs in the class\n      for (let glyph of this.lookupTable.glyphsForValue(classCode)) {\n        if (opts.enter) {\n          opts.enter(glyph, entry);\n        }\n\n        if (entry.newState !== 0) {\n          this.traverse(opts, entry.newState, visited);\n        }\n\n        if (opts.exit) {\n          opts.exit(glyph, entry);\n        }\n      }\n    }\n  }\n}\n","import AATStateMachine from './AATStateMachine';\nimport AATLookupTable from './AATLookupTable';\nimport {cache} from '../decorators';\n\n// indic replacement flags\nconst MARK_FIRST = 0x8000;\nconst MARK_LAST  = 0x2000;\nconst VERB       = 0x000F;\n\n// contextual substitution and glyph insertion flag\nconst SET_MARK = 0x8000;\n\n// ligature entry flags\nconst SET_COMPONENT  = 0x8000;\nconst PERFORM_ACTION = 0x2000;\n\n// ligature action masks\nconst LAST_MASK   = 0x80000000;\nconst STORE_MASK  = 0x40000000;\nconst OFFSET_MASK = 0x3FFFFFFF;\n\nconst VERTICAL_ONLY           = 0x800000;\nconst REVERSE_DIRECTION       = 0x400000;\nconst HORIZONTAL_AND_VERTICAL = 0x200000;\n\n// glyph insertion flags\nconst CURRENT_IS_KASHIDA_LIKE = 0x2000;\nconst MARKED_IS_KASHIDA_LIKE  = 0x1000;\nconst CURRENT_INSERT_BEFORE   = 0x0800;\nconst MARKED_INSERT_BEFORE    = 0x0400;\nconst CURRENT_INSERT_COUNT    = 0x03E0;\nconst MARKED_INSERT_COUNT     = 0x001F;\n\nexport default class AATMorxProcessor {\n  constructor(font) {\n    this.processIndicRearragement = this.processIndicRearragement.bind(this);\n    this.processContextualSubstitution = this.processContextualSubstitution.bind(this);\n    this.processLigature = this.processLigature.bind(this);\n    this.processNoncontextualSubstitutions = this.processNoncontextualSubstitutions.bind(this);\n    this.processGlyphInsertion = this.processGlyphInsertion.bind(this);\n    this.font = font;\n    this.morx = font.morx;\n    this.inputCache = null;\n  }\n\n  // Processes an array of glyphs and applies the specified features\n  // Features should be in the form of {featureType:{featureSetting:boolean}}\n  process(glyphs, features = {}) {\n    for (let chain of this.morx.chains) {\n      let flags = chain.defaultFlags;\n\n      // enable/disable the requested features\n      for (let feature of chain.features) {\n        let f;\n        if (f = features[feature.featureType]) {\n          if (f[feature.featureSetting]) {\n            flags &= feature.disableFlags;\n            flags |= feature.enableFlags;\n          } else if (f[feature.featureSetting] === false) {\n            flags |= ~feature.disableFlags;\n            flags &= ~feature.enableFlags;\n          }\n        }\n      }\n\n      for (let subtable of chain.subtables) {\n        if (subtable.subFeatureFlags & flags) {\n          this.processSubtable(subtable, glyphs);\n        }\n      }\n    }\n\n    // remove deleted glyphs\n    let index = glyphs.length - 1;\n    while (index >= 0) {\n      if (glyphs[index].id === 0xffff) {\n        glyphs.splice(index, 1);\n      }\n\n      index--;\n    }\n\n    return glyphs;\n  }\n\n  processSubtable(subtable, glyphs) {\n    this.subtable = subtable;\n    this.glyphs = glyphs;\n    if (this.subtable.type === 4) {\n      this.processNoncontextualSubstitutions(this.subtable, this.glyphs);\n      return;\n    }\n\n    this.ligatureStack = [];\n    this.markedGlyph = null;\n    this.firstGlyph = null;\n    this.lastGlyph = null;\n    this.markedIndex = null;\n\n    let stateMachine = this.getStateMachine(subtable);\n    let process = this.getProcessor();\n\n    let reverse = !!(this.subtable.coverage & REVERSE_DIRECTION);\n    return stateMachine.process(this.glyphs, reverse, process);\n  }\n\n  @cache\n  getStateMachine(subtable) {\n    return new AATStateMachine(subtable.table.stateTable);\n  }\n\n  getProcessor() {\n    switch (this.subtable.type) {\n      case 0:\n        return this.processIndicRearragement;\n      case 1:\n        return this.processContextualSubstitution;\n      case 2:\n        return this.processLigature;\n      case 4:\n        return this.processNoncontextualSubstitutions;\n      case 5:\n        return this.processGlyphInsertion;\n      default:\n        throw new Error(`Invalid morx subtable type: ${this.subtable.type}`);\n    }\n  }\n\n  processIndicRearragement(glyph, entry, index) {\n    if (entry.flags & MARK_FIRST) {\n      this.firstGlyph = index;\n    }\n\n    if (entry.flags & MARK_LAST) {\n      this.lastGlyph = index;\n    }\n\n    reorderGlyphs(this.glyphs, entry.flags & VERB, this.firstGlyph, this.lastGlyph);\n  }\n\n  processContextualSubstitution(glyph, entry, index) {\n    let subsitutions = this.subtable.table.substitutionTable.items;\n    if (entry.markIndex !== 0xffff) {\n      let lookup = subsitutions.getItem(entry.markIndex);\n      let lookupTable = new AATLookupTable(lookup);\n      glyph = this.glyphs[this.markedGlyph];\n      var gid = lookupTable.lookup(glyph.id);\n      if (gid) {\n        this.glyphs[this.markedGlyph] = this.font.getGlyph(gid, glyph.codePoints);\n      }\n    }\n\n    if (entry.currentIndex !== 0xffff) {\n      let lookup = subsitutions.getItem(entry.currentIndex);\n      let lookupTable = new AATLookupTable(lookup);\n      glyph = this.glyphs[index];\n      var gid = lookupTable.lookup(glyph.id);\n      if (gid) {\n        this.glyphs[index] = this.font.getGlyph(gid, glyph.codePoints);\n      }\n    }\n\n    if (entry.flags & SET_MARK) {\n      this.markedGlyph = index;\n    }\n  }\n\n  processLigature(glyph, entry, index) {\n    if (entry.flags & SET_COMPONENT) {\n      this.ligatureStack.push(index);\n    }\n\n    if (entry.flags & PERFORM_ACTION) {\n      let actions = this.subtable.table.ligatureActions;\n      let components = this.subtable.table.components;\n      let ligatureList = this.subtable.table.ligatureList;\n\n      let actionIndex = entry.action;\n      let last = false;\n      let ligatureIndex = 0;\n      let codePoints = [];\n      let ligatureGlyphs = [];\n\n      while (!last) {\n        let componentGlyph = this.ligatureStack.pop();\n        codePoints.unshift(...this.glyphs[componentGlyph].codePoints);\n\n        let action = actions.getItem(actionIndex++);\n        last = !!(action & LAST_MASK);\n        let store = !!(action & STORE_MASK);\n        let offset = (action & OFFSET_MASK) << 2 >> 2; // sign extend 30 to 32 bits\n        offset += this.glyphs[componentGlyph].id;\n\n        let component = components.getItem(offset);\n        ligatureIndex += component;\n\n        if (last || store) {\n          let ligatureEntry = ligatureList.getItem(ligatureIndex);\n          this.glyphs[componentGlyph] = this.font.getGlyph(ligatureEntry, codePoints);\n          ligatureGlyphs.push(componentGlyph);\n          ligatureIndex = 0;\n          codePoints = [];\n        } else {\n          this.glyphs[componentGlyph] = this.font.getGlyph(0xffff);\n        }\n      }\n\n      // Put ligature glyph indexes back on the stack\n      this.ligatureStack.push(...ligatureGlyphs);\n    }\n  }\n\n  processNoncontextualSubstitutions(subtable, glyphs, index) {\n    let lookupTable = new AATLookupTable(subtable.table.lookupTable);\n\n    for (index = 0; index < glyphs.length; index++) {\n      let glyph = glyphs[index];\n      if (glyph.id !== 0xffff) {\n        let gid = lookupTable.lookup(glyph.id);\n        if (gid) { // 0 means do nothing\n          glyphs[index] = this.font.getGlyph(gid, glyph.codePoints);\n        }\n      }\n    }\n  }\n\n  _insertGlyphs(glyphIndex, insertionActionIndex, count, isBefore) {\n    let insertions = [];\n    while (count--) {\n      let gid = this.subtable.table.insertionActions.getItem(insertionActionIndex++);\n      insertions.push(this.font.getGlyph(gid));\n    }\n\n    if (!isBefore) {\n      glyphIndex++;\n    }\n\n    this.glyphs.splice(glyphIndex, 0, ...insertions);\n  }\n\n  processGlyphInsertion(glyph, entry, index) {\n    if (entry.flags & SET_MARK) {\n      this.markedIndex = index;\n    }\n\n    if (entry.markedInsertIndex !== 0xffff) {\n      let count = (entry.flags & MARKED_INSERT_COUNT) >>> 5;\n      let isBefore = !!(entry.flags & MARKED_INSERT_BEFORE);\n      this._insertGlyphs(this.markedIndex, entry.markedInsertIndex, count, isBefore);\n    }\n\n    if (entry.currentInsertIndex !== 0xffff) {\n      let count = (entry.flags & CURRENT_INSERT_COUNT) >>> 5;\n      let isBefore = !!(entry.flags & CURRENT_INSERT_BEFORE);\n      this._insertGlyphs(index, entry.currentInsertIndex, count, isBefore);\n    }\n  }\n\n  getSupportedFeatures() {\n    let features = [];\n    for (let chain of this.morx.chains) {\n      for (let feature of chain.features) {\n        features.push([feature.featureType, feature.featureSetting]);\n      }\n    }\n\n    return features;\n  }\n\n  generateInputs(gid) {\n    if (!this.inputCache) {\n      this.generateInputCache();\n    }\n\n    return this.inputCache[gid] || [];\n  }\n\n  generateInputCache() {\n    this.inputCache = {};\n\n    for (let chain of this.morx.chains) {\n      let flags = chain.defaultFlags;\n\n      for (let subtable of chain.subtables) {\n        if (subtable.subFeatureFlags & flags) {\n          this.generateInputsForSubtable(subtable);\n        }\n      }\n    }\n  }\n\n  generateInputsForSubtable(subtable) {\n    // Currently, only supporting ligature subtables.\n    if (subtable.type !== 2) {\n      return;\n    }\n\n    let reverse = !!(subtable.coverage & REVERSE_DIRECTION);\n    if (reverse) {\n      throw new Error('Reverse subtable, not supported.');\n    }\n\n    this.subtable = subtable;\n    this.ligatureStack = [];\n\n    let stateMachine = this.getStateMachine(subtable);\n    let process = this.getProcessor();\n\n    let input = [];\n    let stack = [];\n    this.glyphs = [];\n\n    stateMachine.traverse({\n      enter: (glyph, entry) => {\n        let glyphs = this.glyphs;\n        stack.push({\n          glyphs: glyphs.slice(),\n          ligatureStack: this.ligatureStack.slice()\n        });\n\n        // Add glyph to input and glyphs to process.\n        let g = this.font.getGlyph(glyph);\n        input.push(g);\n        glyphs.push(input[input.length - 1]);\n\n        // Process ligature substitution\n        process(glyphs[glyphs.length - 1], entry, glyphs.length - 1);\n\n        // Add input to result if only one matching (non-deleted) glyph remains.\n        let count = 0;\n        let found = 0;\n        for (let i = 0; i < glyphs.length && count <= 1; i++) {\n          if (glyphs[i].id !== 0xffff) {\n            count++;\n            found = glyphs[i].id;\n          }\n        }\n\n        if (count === 1) {\n          let result = input.map(g => g.id);\n          let cache = this.inputCache[found];\n          if (cache) {\n            cache.push(result);\n          } else {\n            this.inputCache[found] = [result];\n          }\n        }\n      },\n\n      exit: () => {\n        ({glyphs: this.glyphs, ligatureStack: this.ligatureStack} = stack.pop());\n        input.pop();\n      }\n    });\n  }\n}\n\n// swaps the glyphs in rangeA with those in rangeB\n// reverse the glyphs inside those ranges if specified\n// ranges are in [offset, length] format\nfunction swap(glyphs, rangeA, rangeB, reverseA = false, reverseB = false) {\n  let end = glyphs.splice(rangeB[0] - (rangeB[1] - 1), rangeB[1]);\n  if (reverseB) {\n    end.reverse();\n  }\n\n  let start = glyphs.splice(rangeA[0], rangeA[1], ...end);\n  if (reverseA) {\n    start.reverse();\n  }\n\n  glyphs.splice(rangeB[0] - (rangeA[1] - 1), 0, ...start);\n  return glyphs;\n}\n\nfunction reorderGlyphs(glyphs, verb, firstGlyph, lastGlyph) {\n  let length = lastGlyph - firstGlyph + 1;\n  switch (verb) {\n    case 0: // no change\n      return glyphs;\n\n    case 1: // Ax => xA\n      return swap(glyphs, [firstGlyph, 1], [lastGlyph, 0]);\n\n    case 2: // xD => Dx\n      return swap(glyphs, [firstGlyph, 0], [lastGlyph, 1]);\n\n    case 3: // AxD => DxA\n      return swap(glyphs, [firstGlyph, 1], [lastGlyph, 1]);\n\n    case 4: // ABx => xAB\n      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 0]);\n\n    case 5: // ABx => xBA\n      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 0], true, false);\n\n    case 6: // xCD => CDx\n      return swap(glyphs, [firstGlyph, 0], [lastGlyph, 2]);\n\n    case 7: // xCD => DCx\n      return swap(glyphs, [firstGlyph, 0], [lastGlyph, 2], false, true);\n\n    case 8: // AxCD => CDxA\n      return swap(glyphs, [firstGlyph, 1], [lastGlyph, 2]);\n\n    case 9: // AxCD => DCxA\n      return swap(glyphs, [firstGlyph, 1], [lastGlyph, 2], false, true);\n\n    case 10: // ABxD => DxAB\n      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 1]);\n\n    case 11: // ABxD => DxBA\n      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 1], true, false);\n\n    case 12: // ABxCD => CDxAB\n      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 2]);\n\n    case 13: // ABxCD => CDxBA\n      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 2], true, false);\n\n    case 14: // ABxCD => DCxAB\n      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 2], false, true);\n\n    case 15: // ABxCD => DCxBA\n      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 2], true, true);\n\n    default:\n      throw new Error(`Unknown verb: ${verb}`);\n  }\n}\n","import * as AATFeatureMap from './AATFeatureMap';\nimport * as Script from '../layout/Script';\nimport AATMorxProcessor from './AATMorxProcessor';\n\nexport default class AATLayoutEngine {\n  constructor(font) {\n    this.font = font;\n    this.morxProcessor = new AATMorxProcessor(font);\n    this.fallbackPosition = false;\n  }\n\n  substitute(glyphRun) {\n    // AAT expects the glyphs to be in visual order prior to morx processing,\n    // so reverse the glyphs if the script is right-to-left.\n    if (glyphRun.direction === 'rtl') {\n      glyphRun.glyphs.reverse();\n    }\n\n    this.morxProcessor.process(glyphRun.glyphs, AATFeatureMap.mapOTToAAT(glyphRun.features));\n  }\n\n  getAvailableFeatures(script, language) {\n    return AATFeatureMap.mapAATToOT(this.morxProcessor.getSupportedFeatures());\n  }\n\n  stringsForGlyph(gid) {\n    let glyphStrings = this.morxProcessor.generateInputs(gid);\n    let result = new Set;\n\n    for (let glyphs of glyphStrings) {\n      this._addStrings(glyphs, 0, result, '');\n    }\n\n    return result;\n  }\n\n  _addStrings(glyphs, index, strings, string) {\n    let codePoints = this.font._cmapProcessor.codePointsForGlyph(glyphs[index]);\n\n    for (let codePoint of codePoints) {\n      let s = string + String.fromCodePoint(codePoint);\n      if (index < glyphs.length - 1) {\n        this._addStrings(glyphs, index + 1, strings, s);\n      } else {\n        strings.add(s);\n      }\n    }\n  }\n}\n","import * as Script from '../layout/Script';\n\n/**\n * ShapingPlans are used by the OpenType shapers to store which\n * features should by applied, and in what order to apply them.\n * The features are applied in groups called stages. A feature\n * can be applied globally to all glyphs, or locally to only\n * specific glyphs.\n *\n * @private\n */\nexport default class ShapingPlan {\n  constructor(font, script, direction) {\n    this.font = font;\n    this.script = script;\n    this.direction = direction;\n    this.stages = [];\n    this.globalFeatures = {};\n    this.allFeatures = {};\n  }\n\n  /**\n   * Adds the given features to the last stage.\n   * Ignores features that have already been applied.\n   */\n  _addFeatures(features, global) {\n    let stageIndex = this.stages.length - 1;\n    let stage = this.stages[stageIndex];\n    for (let feature of features) {\n      if (this.allFeatures[feature] == null) {\n        stage.push(feature);\n        this.allFeatures[feature] = stageIndex;\n\n        if (global) {\n          this.globalFeatures[feature] = true;\n        }\n      }\n    }\n  }\n\n  /**\n   * Add features to the last stage\n   */\n  add(arg, global = true) {\n    if (this.stages.length === 0) {\n      this.stages.push([]);\n    }\n\n    if (typeof arg === 'string') {\n      arg = [arg];\n    }\n\n    if (Array.isArray(arg)) {\n      this._addFeatures(arg, global);\n    } else if (typeof arg === 'object') {\n      this._addFeatures(arg.global || [], true);\n      this._addFeatures(arg.local || [], false);\n    } else {\n      throw new Error(\"Unsupported argument to ShapingPlan#add\");\n    }\n  }\n\n  /**\n   * Add a new stage\n   */\n  addStage(arg, global) {\n    if (typeof arg === 'function') {\n      this.stages.push(arg, []);\n    } else {\n      this.stages.push([]);\n      this.add(arg, global);\n    }\n  }\n\n  setFeatureOverrides(features) {\n    if (Array.isArray(features)) {\n      this.add(features);\n    } else if (typeof features === 'object') {\n      for (let tag in features) {\n        if (features[tag]) {\n          this.add(tag);\n        } else if (this.allFeatures[tag] != null) {\n          let stage = this.stages[this.allFeatures[tag]];\n          stage.splice(stage.indexOf(tag), 1);\n          delete this.allFeatures[tag];\n          delete this.globalFeatures[tag];\n        }\n      }\n    }\n  }\n\n  /**\n   * Assigns the global features to the given glyphs\n   */\n  assignGlobalFeatures(glyphs) {\n    for (let glyph of glyphs) {\n      for (let feature in this.globalFeatures) {\n        glyph.features[feature] = true;\n      }\n    }\n  }\n\n  /**\n   * Executes the planned stages using the given OTProcessor\n   */\n  process(processor, glyphs, positions) {\n    for (let stage of this.stages) {\n      if (typeof stage === 'function') {\n        if (!positions) {\n          stage(this.font, glyphs, this);\n        }\n\n      } else if (stage.length > 0) {\n        processor.applyFeatures(stage, glyphs, positions);\n      }\n    }\n  }\n}\n","import {isDigit} from 'unicode-properties';\n\nconst VARIATION_FEATURES = ['rvrn'];\nconst COMMON_FEATURES = ['ccmp', 'locl', 'rlig', 'mark', 'mkmk'];\nconst FRACTIONAL_FEATURES = ['frac', 'numr', 'dnom'];\nconst HORIZONTAL_FEATURES = ['calt', 'clig', 'liga', 'rclt', 'curs', 'kern'];\nconst VERTICAL_FEATURES = ['vert'];\nconst DIRECTIONAL_FEATURES = {\n  ltr: ['ltra', 'ltrm'],\n  rtl: ['rtla', 'rtlm']\n};\n\nexport default class DefaultShaper {\n  static zeroMarkWidths = 'AFTER_GPOS';\n  static plan(plan, glyphs, features) {\n    // Plan the features we want to apply\n    this.planPreprocessing(plan);\n    this.planFeatures(plan);\n    this.planPostprocessing(plan, features);\n\n    // Assign the global features to all the glyphs\n    plan.assignGlobalFeatures(glyphs);\n\n    // Assign local features to glyphs\n    this.assignFeatures(plan, glyphs);\n  }\n\n  static planPreprocessing(plan) {\n    plan.add({\n      global: [...VARIATION_FEATURES, ...DIRECTIONAL_FEATURES[plan.direction]],\n      local: FRACTIONAL_FEATURES\n    });\n  }\n\n  static planFeatures(plan) {\n    // Do nothing by default. Let subclasses override this.\n  }\n\n  static planPostprocessing(plan, userFeatures) {\n    plan.add([...COMMON_FEATURES, ...HORIZONTAL_FEATURES]);\n    plan.setFeatureOverrides(userFeatures);\n  }\n\n  static assignFeatures(plan, glyphs) {\n    // Enable contextual fractions\n    for (let i = 0; i < glyphs.length; i++) {\n      let glyph = glyphs[i];\n      if (glyph.codePoints[0] === 0x2044) { // fraction slash\n        let start = i;\n        let end = i + 1;\n\n        // Apply numerator\n        while (start > 0 && isDigit(glyphs[start - 1].codePoints[0])) {\n          glyphs[start - 1].features.numr = true;\n          glyphs[start - 1].features.frac = true;\n          start--;\n        }\n\n        // Apply denominator\n        while (end < glyphs.length && isDigit(glyphs[end].codePoints[0])) {\n          glyphs[end].features.dnom = true;\n          glyphs[end].features.frac = true;\n          end++;\n        }\n\n        // Apply fraction slash\n        glyph.features.frac = true;\n        i = end - 1;\n      }\n    }\n  }\n}\n","import DefaultShaper from './DefaultShaper';\nimport {getCategory} from 'unicode-properties';\nimport UnicodeTrie from 'unicode-trie';\nimport { decodeBase64 } from '../../utils';\n\nconst trie = new UnicodeTrie(decodeBase64(require('fs').readFileSync(__dirname + '/data.trie', 'base64')));\nconst FEATURES = ['isol', 'fina', 'fin2', 'fin3', 'medi', 'med2', 'init'];\n\nconst ShapingClasses = {\n  Non_Joining: 0,\n  Left_Joining: 1,\n  Right_Joining: 2,\n  Dual_Joining: 3,\n  Join_Causing: 3,\n  ALAPH: 4,\n  'DALATH RISH': 5,\n  Transparent: 6\n};\n\nconst ISOL = 'isol';\nconst FINA = 'fina';\nconst FIN2 = 'fin2';\nconst FIN3 = 'fin3';\nconst MEDI = 'medi';\nconst MED2 = 'med2';\nconst INIT = 'init';\nconst NONE = null;\n\n// Each entry is [prevAction, curAction, nextState]\nconst STATE_TABLE = [\n  //   Non_Joining,        Left_Joining,       Right_Joining,     Dual_Joining,           ALAPH,            DALATH RISH\n  // State 0: prev was U,  not willing to join.\n  [ [ NONE, NONE, 0 ],  [ NONE, ISOL, 2 ],  [ NONE, ISOL, 1 ],  [ NONE, ISOL, 2 ],  [ NONE, ISOL, 1 ],  [ NONE, ISOL, 6 ] ],\n\n  // State 1: prev was R or ISOL/ALAPH,  not willing to join.\n  [ [ NONE, NONE, 0 ],  [ NONE, ISOL, 2 ],  [ NONE, ISOL, 1 ],  [ NONE, ISOL, 2 ],  [ NONE, FIN2, 5 ],  [ NONE, ISOL, 6 ] ],\n\n  // State 2: prev was D/L in ISOL form,  willing to join.\n  [ [ NONE, NONE, 0 ],  [ NONE, ISOL, 2 ],  [ INIT, FINA, 1 ],  [ INIT, FINA, 3 ],  [ INIT, FINA, 4 ],  [ INIT, FINA, 6 ] ],\n\n  // State 3: prev was D in FINA form,  willing to join.\n  [ [ NONE, NONE, 0 ],  [ NONE, ISOL, 2 ],  [ MEDI, FINA, 1 ],  [ MEDI, FINA, 3 ],  [ MEDI, FINA, 4 ],  [ MEDI, FINA, 6 ] ],\n\n  // State 4: prev was FINA ALAPH,  not willing to join.\n  [ [ NONE, NONE, 0 ],  [ NONE, ISOL, 2 ],  [ MED2, ISOL, 1 ],  [ MED2, ISOL, 2 ],  [ MED2, FIN2, 5 ],  [ MED2, ISOL, 6 ] ],\n\n  // State 5: prev was FIN2/FIN3 ALAPH,  not willing to join.\n  [ [ NONE, NONE, 0 ],  [ NONE, ISOL, 2 ],  [ ISOL, ISOL, 1 ],  [ ISOL, ISOL, 2 ],  [ ISOL, FIN2, 5 ],  [ ISOL, ISOL, 6 ] ],\n\n  // State 6: prev was DALATH/RISH,  not willing to join.\n  [ [ NONE, NONE, 0 ],  [ NONE, ISOL, 2 ],  [ NONE, ISOL, 1 ],  [ NONE, ISOL, 2 ],  [ NONE, FIN3, 5 ],  [ NONE, ISOL, 6 ] ]\n];\n\n/**\n * This is a shaper for Arabic, and other cursive scripts.\n * It uses data from ArabicShaping.txt in the Unicode database,\n * compiled to a UnicodeTrie by generate-data.coffee.\n *\n * The shaping state machine was ported from Harfbuzz.\n * https://github.com/behdad/harfbuzz/blob/master/src/hb-ot-shape-complex-arabic.cc\n */\nexport default class ArabicShaper extends DefaultShaper {\n  static planFeatures(plan) {\n    plan.add(['ccmp', 'locl']);\n    for (let i = 0; i < FEATURES.length; i++) {\n      let feature = FEATURES[i];\n      plan.addStage(feature, false);\n    }\n\n    plan.addStage('mset');\n  }\n\n  static assignFeatures(plan, glyphs) {\n    super.assignFeatures(plan, glyphs);\n\n    let prev = -1;\n    let state = 0;\n    let actions = [];\n\n    // Apply the state machine to map glyphs to features\n    for (let i = 0; i < glyphs.length; i++) {\n      let curAction, prevAction;\n      var glyph = glyphs[i];\n      let type = getShapingClass(glyph.codePoints[0]);\n      if (type === ShapingClasses.Transparent) {\n        actions[i] = NONE;\n        continue;\n      }\n\n      [prevAction, curAction, state] = STATE_TABLE[state][type];\n\n      if (prevAction !== NONE && prev !== -1) {\n        actions[prev] = prevAction;\n      }\n\n      actions[i] = curAction;\n      prev = i;\n    }\n\n    // Apply the chosen features to their respective glyphs\n    for (let index = 0; index < glyphs.length; index++) {\n      let feature;\n      var glyph = glyphs[index];\n      if (feature = actions[index]) {\n        glyph.features[feature] = true;\n      }\n    }\n  }\n}\n\nfunction getShapingClass(codePoint) {\n  let res = trie.get(codePoint);\n  if (res) {\n    return res - 1;\n  }\n\n  let category = getCategory(codePoint);\n  if (category === 'Mn' || category === 'Me' || category === 'Cf') {\n    return ShapingClasses.Transparent;\n  }\n\n  return ShapingClasses.Non_Joining;\n}\n","export default class GlyphIterator {\n  constructor(glyphs, options) {\n    this.glyphs = glyphs;\n    this.reset(options);\n  }\n\n  reset(options = {}, index = 0) {\n    this.options = options;\n    this.flags = options.flags || {};\n    this.markAttachmentType = options.markAttachmentType || 0;\n    this.index = index;\n  }\n\n  get cur() {\n    return this.glyphs[this.index] || null;\n  }\n\n  shouldIgnore(glyph) {\n    return (this.flags.ignoreMarks && glyph.isMark) ||\n           (this.flags.ignoreBaseGlyphs && glyph.isBase) ||\n           (this.flags.ignoreLigatures && glyph.isLigature) ||\n           (this.markAttachmentType && glyph.isMark && glyph.markAttachmentType !== this.markAttachmentType);\n  }\n\n  move(dir) {\n    this.index += dir;\n    while (0 <= this.index && this.index < this.glyphs.length && this.shouldIgnore(this.glyphs[this.index])) {\n      this.index += dir;\n    }\n\n    if (0 > this.index || this.index >= this.glyphs.length) {\n      return null;\n    }\n\n    return this.glyphs[this.index];\n  }\n\n  next() {\n    return this.move(+1);\n  }\n\n  prev() {\n    return this.move(-1);\n  }\n\n  peek(count = 1) {\n    let idx = this.index;\n    let res = this.increment(count);\n    this.index = idx;\n    return res;\n  }\n\n  peekIndex(count = 1) {\n    let idx = this.index;\n    this.increment(count);\n    let res = this.index;\n    this.index = idx;\n    return res;\n  }\n\n  increment(count = 1) {\n    let dir = count < 0 ? -1 : 1;\n    count = Math.abs(count);\n    while (count--) {\n      this.move(dir);\n    }\n\n    return this.glyphs[this.index];\n  }\n}\n","import GlyphIterator from './GlyphIterator';\nimport * as Script from '../layout/Script';\n\nconst DEFAULT_SCRIPTS = ['DFLT', 'dflt', 'latn'];\n\nexport default class OTProcessor {\n  constructor(font, table) {\n    this.font = font;\n    this.table = table;\n\n    this.script = null;\n    this.scriptTag = null;\n\n    this.language = null;\n    this.languageTag = null;\n\n    this.features = {};\n    this.lookups = {};\n\n    // Setup variation substitutions\n    this.variationsIndex = font._variationProcessor\n      ? this.findVariationsIndex(font._variationProcessor.normalizedCoords)\n      : -1;\n\n    // initialize to default script + language\n    this.selectScript();\n\n    // current context (set by applyFeatures)\n    this.glyphs = [];\n    this.positions = []; // only used by GPOS\n    this.ligatureID = 1;\n    this.currentFeature = null;\n  }\n\n  findScript(script) {\n    if (this.table.scriptList == null) {\n      return null;\n    }\n\n    if (!Array.isArray(script)) {\n      script = [script];\n    }\n\n    for (let s of script) {\n      for (let entry of this.table.scriptList) {\n        if (entry.tag === s) {\n          return entry;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  selectScript(script, language, direction) {\n    let changed = false;\n    let entry;\n    if (!this.script || script !== this.scriptTag) {\n      entry = this.findScript(script);\n      if (!entry) {\n        entry = this.findScript(DEFAULT_SCRIPTS);\n      }\n\n      if (!entry) {\n        return this.scriptTag;\n      }\n\n      this.scriptTag = entry.tag;\n      this.script = entry.script;\n      this.language = null;\n      this.languageTag = null;\n      changed = true;\n    }\n\n    if (!direction || direction !== this.direction) {\n      this.direction = direction || Script.direction(script);\n    }\n\n    if (language && language.length < 4) {\n      language += ' '.repeat(4 - language.length);\n    }\n\n    if (!language || language !== this.languageTag) {\n      this.language = null;\n\n      for (let lang of this.script.langSysRecords) {\n        if (lang.tag === language) {\n          this.language = lang.langSys;\n          this.languageTag = lang.tag;\n          break;\n        }\n      }\n\n      if (!this.language) {\n        this.language = this.script.defaultLangSys;\n        this.languageTag = null;\n      }\n\n      changed = true;\n    }\n\n    // Build a feature lookup table\n    if (changed) {\n      this.features = {};\n      if (this.language) {\n        for (let featureIndex of this.language.featureIndexes) {\n          let record = this.table.featureList[featureIndex];\n          let substituteFeature = this.substituteFeatureForVariations(featureIndex);\n          this.features[record.tag] = substituteFeature || record.feature;\n        }\n      }\n    }\n\n    return this.scriptTag;\n  }\n\n  lookupsForFeatures(userFeatures = [], exclude) {\n    let lookups = [];\n    for (let tag of userFeatures) {\n      let feature = this.features[tag];\n      if (!feature) {\n        continue;\n      }\n\n      for (let lookupIndex of feature.lookupListIndexes) {\n        if (exclude && exclude.indexOf(lookupIndex) !== -1) {\n          continue;\n        }\n\n        lookups.push({\n          feature: tag,\n          index: lookupIndex,\n          lookup: this.table.lookupList.get(lookupIndex)\n        });\n      }\n    }\n\n    lookups.sort((a, b) => a.index - b.index);\n    return lookups;\n  }\n\n  substituteFeatureForVariations(featureIndex) {\n    if (this.variationsIndex === -1) {\n      return null;\n    }\n\n    let record = this.table.featureVariations.featureVariationRecords[this.variationsIndex];\n    let substitutions = record.featureTableSubstitution.substitutions;\n    for (let substitution of substitutions) {\n      if (substitution.featureIndex === featureIndex) {\n        return substitution.alternateFeatureTable;\n      }\n    }\n\n    return null;\n  }\n\n  findVariationsIndex(coords) {\n    let variations = this.table.featureVariations;\n    if (!variations) {\n      return -1;\n    }\n\n    let records = variations.featureVariationRecords;\n    for (let i = 0; i < records.length; i++) {\n      let conditions = records[i].conditionSet.conditionTable;\n      if (this.variationConditionsMatch(conditions, coords)) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  variationConditionsMatch(conditions, coords) {\n    return conditions.every(condition => {\n      let coord = condition.axisIndex < coords.length ? coords[condition.axisIndex] : 0;\n      return condition.filterRangeMinValue <= coord && coord <= condition.filterRangeMaxValue;\n    });\n  }\n\n  applyFeatures(userFeatures, glyphs, advances) {\n    let lookups = this.lookupsForFeatures(userFeatures);\n    this.applyLookups(lookups, glyphs, advances);\n  }\n\n  applyLookups(lookups, glyphs, positions) {\n    this.glyphs = glyphs;\n    this.positions = positions;\n    this.glyphIterator = new GlyphIterator(glyphs);\n\n    for (let { feature, lookup } of lookups) {\n      this.currentFeature = feature;\n      this.glyphIterator.reset(lookup.flags);\n\n      while (this.glyphIterator.index < glyphs.length) {\n        if (!(feature in this.glyphIterator.cur.features)) {\n          this.glyphIterator.next();\n          continue;\n        }\n\n        for (let table of lookup.subTables) {\n          let res = this.applyLookup(lookup.lookupType, table);\n          if (res) {\n            break;\n          }\n        }\n\n        this.glyphIterator.next();\n      }\n    }\n  }\n\n  applyLookup(lookup, table) {\n    throw new Error(\"applyLookup must be implemented by subclasses\");\n  }\n\n  applyLookupList(lookupRecords) {\n    let options = this.glyphIterator.options;\n    let glyphIndex = this.glyphIterator.index;\n\n    for (let lookupRecord of lookupRecords) {\n      // Reset flags and find glyph index for this lookup record\n      this.glyphIterator.reset(options, glyphIndex);\n      this.glyphIterator.increment(lookupRecord.sequenceIndex);\n\n      // Get the lookup and setup flags for subtables\n      let lookup = this.table.lookupList.get(lookupRecord.lookupListIndex);\n      this.glyphIterator.reset(lookup.flags, this.glyphIterator.index);\n\n      // Apply lookup subtables until one matches\n      for (let table of lookup.subTables) {\n        if (this.applyLookup(lookup.lookupType, table)) {\n          break;\n        }\n      }\n    }\n\n    this.glyphIterator.reset(options, glyphIndex);\n    return true;\n  }\n\n  coverageIndex(coverage, glyph) {\n    if (glyph == null) {\n      glyph = this.glyphIterator.cur.id;\n    }\n\n    switch (coverage.version) {\n      case 1:\n        return coverage.glyphs.indexOf(glyph);\n\n      case 2:\n        for (let range of coverage.rangeRecords) {\n          if (range.start <= glyph && glyph <= range.end) {\n            return range.startCoverageIndex + glyph - range.start;\n          }\n        }\n\n        break;\n    }\n\n    return -1;\n  }\n\n  match(sequenceIndex, sequence, fn, matched) {\n    let pos = this.glyphIterator.index;\n    let glyph = this.glyphIterator.increment(sequenceIndex);\n    let idx = 0;\n\n    while (idx < sequence.length && glyph && fn(sequence[idx], glyph)) {\n      if (matched) {\n        matched.push(this.glyphIterator.index);\n      }\n\n      idx++;\n      glyph = this.glyphIterator.next();\n    }\n\n    this.glyphIterator.index = pos;\n    if (idx < sequence.length) {\n      return false;\n    }\n\n    return matched || true;\n  }\n\n  sequenceMatches(sequenceIndex, sequence) {\n    return this.match(sequenceIndex, sequence, (component, glyph) => component === glyph.id);\n  }\n\n  sequenceMatchIndices(sequenceIndex, sequence) {\n    return this.match(sequenceIndex, sequence, (component, glyph) => {\n      // If the current feature doesn't apply to this glyph,\n      if (!(this.currentFeature in glyph.features)) {\n        return false;\n      }\n\n      return component === glyph.id;\n    }, []);\n  }\n\n  coverageSequenceMatches(sequenceIndex, sequence) {\n    return this.match(sequenceIndex, sequence, (coverage, glyph) =>\n      this.coverageIndex(coverage, glyph.id) >= 0\n    );\n  }\n\n  getClassID(glyph, classDef) {\n    switch (classDef.version) {\n      case 1: // Class array\n        let i = glyph - classDef.startGlyph;\n        if (i >= 0 && i < classDef.classValueArray.length) {\n          return classDef.classValueArray[i];\n        }\n\n        break;\n\n      case 2:\n        for (let range of classDef.classRangeRecord) {\n          if (range.start <= glyph && glyph <= range.end) {\n            return range.class;\n          }\n        }\n\n        break;\n    }\n\n    return 0;\n  }\n\n  classSequenceMatches(sequenceIndex, sequence, classDef) {\n    return this.match(sequenceIndex, sequence, (classID, glyph) =>\n      classID === this.getClassID(glyph.id, classDef)\n    );\n  }\n\n  applyContext(table) {\n    let index, set;\n    switch (table.version) {\n      case 1:\n        index = this.coverageIndex(table.coverage);\n        if (index === -1) {\n          return false;\n        }\n\n        set = table.ruleSets[index];\n        for (let rule of set) {\n          if (this.sequenceMatches(1, rule.input)) {\n            return this.applyLookupList(rule.lookupRecords);\n          }\n        }\n\n        break;\n\n      case 2:\n        if (this.coverageIndex(table.coverage) === -1) {\n          return false;\n        }\n\n        index = this.getClassID(this.glyphIterator.cur.id, table.classDef);\n        if (index === -1) {\n          return false;\n        }\n\n        set = table.classSet[index];\n        for (let rule of set) {\n          if (this.classSequenceMatches(1, rule.classes, table.classDef)) {\n            return this.applyLookupList(rule.lookupRecords);\n          }\n        }\n\n        break;\n\n      case 3:\n        if (this.coverageSequenceMatches(0, table.coverages)) {\n          return this.applyLookupList(table.lookupRecords);\n        }\n\n        break;\n    }\n\n    return false;\n  }\n\n  applyChainingContext(table) {\n    let index;\n    switch (table.version) {\n      case 1:\n        index = this.coverageIndex(table.coverage);\n        if (index === -1) {\n          return false;\n        }\n\n        let set = table.chainRuleSets[index];\n        for (let rule of set) {\n          if (this.sequenceMatches(-rule.backtrack.length, rule.backtrack)\n            && this.sequenceMatches(1, rule.input)\n            && this.sequenceMatches(1 + rule.input.length, rule.lookahead)) {\n            return this.applyLookupList(rule.lookupRecords);\n          }\n        }\n\n        break;\n\n      case 2:\n        if (this.coverageIndex(table.coverage) === -1) {\n          return false;\n        }\n\n        index = this.getClassID(this.glyphIterator.cur.id, table.inputClassDef);\n        let rules = table.chainClassSet[index];\n        if (!rules) {\n          return false;\n        }\n\n        for (let rule of rules) {\n          if (this.classSequenceMatches(-rule.backtrack.length, rule.backtrack, table.backtrackClassDef) &&\n            this.classSequenceMatches(1, rule.input, table.inputClassDef) &&\n            this.classSequenceMatches(1 + rule.input.length, rule.lookahead, table.lookaheadClassDef)) {\n            return this.applyLookupList(rule.lookupRecords);\n          }\n        }\n\n        break;\n\n      case 3:\n        if (this.coverageSequenceMatches(-table.backtrackGlyphCount, table.backtrackCoverage) &&\n          this.coverageSequenceMatches(0, table.inputCoverage) &&\n          this.coverageSequenceMatches(table.inputGlyphCount, table.lookaheadCoverage)) {\n          return this.applyLookupList(table.lookupRecords);\n        }\n\n        break;\n    }\n\n    return false;\n  }\n}\n","import {isMark} from 'unicode-properties';\nimport OTProcessor from './OTProcessor';\n\nexport default class GlyphInfo {\n  constructor(font, id, codePoints = [], features) {\n    this._font = font;\n    this.codePoints = codePoints;\n    this.id = id;\n\n    this.features = {};\n    if (Array.isArray(features)) {\n      for (let i = 0; i < features.length; i++) {\n        let feature = features[i];\n        this.features[feature] = true;\n      }\n    } else if (typeof features === 'object') {\n      Object.assign(this.features, features);\n    }\n\n    this.ligatureID = null;\n    this.ligatureComponent = null;\n    this.isLigated = false;\n    this.cursiveAttachment = null;\n    this.markAttachment = null;\n    this.shaperInfo = null;\n    this.substituted = false;\n    this.isMultiplied = false;\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  set id(id) {\n    this._id = id;\n    this.substituted = true;\n\n    let GDEF = this._font.GDEF;\n    if (GDEF && GDEF.glyphClassDef) {\n      // TODO: clean this up\n      let classID = OTProcessor.prototype.getClassID(id, GDEF.glyphClassDef);\n      this.isBase = classID === 1;\n      this.isLigature = classID === 2;\n      this.isMark = classID === 3;\n      this.markAttachmentType = GDEF.markAttachClassDef ? OTProcessor.prototype.getClassID(id, GDEF.markAttachClassDef) : 0;\n    } else {\n      this.isMark = this.codePoints.length > 0 && this.codePoints.every(isMark);\n      this.isBase = !this.isMark;\n      this.isLigature = this.codePoints.length > 1;\n      this.markAttachmentType = 0;\n    }\n  }\n\n  copy() {\n    return new GlyphInfo(this._font, this.id, this.codePoints, this.features);\n  }\n}\n","import DefaultShaper from './DefaultShaper';\nimport GlyphInfo from '../GlyphInfo';\n\n/**\n * This is a shaper for the Hangul script, used by the Korean language.\n * It does the following:\n *   - decompose if unsupported by the font:\n *     <LV>   -> <L,V>\n *     <LVT>  -> <L,V,T>\n *     <LV,T> -> <L,V,T>\n *\n *   - compose if supported by the font:\n *     <L,V>   -> <LV>\n *     <L,V,T> -> <LVT>\n *     <LV,T>  -> <LVT>\n *\n *   - reorder tone marks (S is any valid syllable):\n *     <S, M> -> <M, S>\n *\n *   - apply ljmo, vjmo, and tjmo OpenType features to decomposed Jamo sequences.\n *\n * This logic is based on the following documents:\n *   - http://www.microsoft.com/typography/OpenTypeDev/hangul/intro.htm\n *   - http://ktug.org/~nomos/harfbuzz-hangul/hangulshaper.pdf\n */\nexport default class HangulShaper extends DefaultShaper {\n  static zeroMarkWidths = 'NONE';\n  static planFeatures(plan) {\n    plan.add(['ljmo', 'vjmo', 'tjmo'], false);\n  }\n\n  static assignFeatures(plan, glyphs) {\n    let state = 0;\n    let i = 0;\n    while (i < glyphs.length) {\n      let action;\n      let glyph = glyphs[i];\n      let code = glyph.codePoints[0];\n      let type = getType(code);\n\n      [ action, state ] = STATE_TABLE[state][type];\n\n      switch (action) {\n        case DECOMPOSE:\n          // Decompose the composed syllable if it is not supported by the font.\n          if (!plan.font.hasGlyphForCodePoint(code)) {\n            i = decompose(glyphs, i, plan.font);\n          }\n          break;\n\n        case COMPOSE:\n          // Found a decomposed syllable. Try to compose if supported by the font.\n          i = compose(glyphs, i, plan.font);\n          break;\n\n        case TONE_MARK:\n          // Got a valid syllable, followed by a tone mark. Move the tone mark to the beginning of the syllable.\n          reorderToneMark(glyphs, i, plan.font);\n          break;\n\n        case INVALID:\n          // Tone mark has no valid syllable to attach to, so insert a dotted circle\n          i = insertDottedCircle(glyphs, i, plan.font);\n          break;\n      }\n\n      i++;\n    }\n  }\n}\n\nconst HANGUL_BASE  = 0xac00;\nconst HANGUL_END   = 0xd7a4;\nconst HANGUL_COUNT = HANGUL_END - HANGUL_BASE + 1;\nconst L_BASE  = 0x1100; // lead\nconst V_BASE  = 0x1161; // vowel\nconst T_BASE  = 0x11a7; // trail\nconst L_COUNT = 19;\nconst V_COUNT = 21;\nconst T_COUNT = 28;\nconst L_END   = L_BASE + L_COUNT - 1;\nconst V_END   = V_BASE + V_COUNT - 1;\nconst T_END   = T_BASE + T_COUNT - 1;\nconst DOTTED_CIRCLE = 0x25cc;\n\nconst isL    = code => 0x1100 <= code && code <= 0x115f || 0xa960 <= code && code <= 0xa97c;\nconst isV    = code => 0x1160 <= code && code <= 0x11a7 || 0xd7b0 <= code && code <= 0xd7c6;\nconst isT    = code => 0x11a8 <= code && code <= 0x11ff || 0xd7cb <= code && code <= 0xd7fb;\nconst isTone = code => 0x302e <= code && code <= 0x302f;\nconst isLVT  = code => HANGUL_BASE <= code && code <= HANGUL_END;\nconst isLV   = code => (code - HANGUL_BASE) < HANGUL_COUNT && (code - HANGUL_BASE) % T_COUNT === 0;\nconst isCombiningL = code => L_BASE <= code && code <= L_END;\nconst isCombiningV = code => V_BASE <= code && code <= V_END;\nconst isCombiningT = code => T_BASE + 1 && 1 <= code && code <= T_END;\n\n// Character categories\nconst X   = 0; // Other character\nconst L   = 1; // Leading consonant\nconst V   = 2; // Medial vowel\nconst T   = 3; // Trailing consonant\nconst LV  = 4; // Composed <LV> syllable\nconst LVT = 5; // Composed <LVT> syllable\nconst M   = 6; // Tone mark\n\n// This function classifies a character using the above categories.\nfunction getType(code) {\n  if (isL(code))    { return L; }\n  if (isV(code))    { return V; }\n  if (isT(code))    { return T; }\n  if (isLV(code))   { return LV; }\n  if (isLVT(code))  { return LVT; }\n  if (isTone(code)) { return M; }\n  return X;\n}\n\n// State machine actions\nconst NO_ACTION = 0;\nconst DECOMPOSE = 1;\nconst COMPOSE   = 2;\nconst TONE_MARK = 4;\nconst INVALID   = 5;\n\n// Build a state machine that accepts valid syllables, and applies actions along the way.\n// The logic this is implementing is documented at the top of the file.\nconst STATE_TABLE = [\n  //       X                 L                 V                T                  LV                LVT               M\n  // State 0: start state\n  [ [ NO_ACTION, 0 ], [ NO_ACTION, 1 ], [ NO_ACTION, 0 ], [ NO_ACTION, 0 ], [ DECOMPOSE, 2 ], [ DECOMPOSE, 3 ], [  INVALID, 0  ] ],\n\n  // State 1: <L>\n  [ [ NO_ACTION, 0 ], [ NO_ACTION, 1 ], [  COMPOSE, 2  ], [ NO_ACTION, 0 ], [ DECOMPOSE, 2 ], [ DECOMPOSE, 3 ], [  INVALID, 0  ] ],\n\n  // State 2: <L,V> or <LV>\n  [ [ NO_ACTION, 0 ], [ NO_ACTION, 1 ], [ NO_ACTION, 0 ], [  COMPOSE, 3  ], [ DECOMPOSE, 2 ], [ DECOMPOSE, 3 ], [ TONE_MARK, 0 ] ],\n\n  // State 3: <L,V,T> or <LVT>\n  [ [ NO_ACTION, 0 ], [ NO_ACTION, 1 ], [ NO_ACTION, 0 ], [ NO_ACTION, 0 ], [ DECOMPOSE, 2 ], [ DECOMPOSE, 3 ], [ TONE_MARK, 0 ] ]\n];\n\nfunction getGlyph(font, code, features) {\n  return new GlyphInfo(font, font.glyphForCodePoint(code).id, [code], features);\n}\n\nfunction decompose(glyphs, i, font) {\n  let glyph = glyphs[i];\n  let code = glyph.codePoints[0];\n\n  let s = code - HANGUL_BASE;\n  let t = T_BASE + s % T_COUNT;\n  s = s / T_COUNT | 0;\n  let l = L_BASE + s / V_COUNT | 0;\n  let v = V_BASE + s % V_COUNT;\n\n  // Don't decompose if all of the components are not available\n  if (!font.hasGlyphForCodePoint(l) ||\n      !font.hasGlyphForCodePoint(v) ||\n      (t !== T_BASE && !font.hasGlyphForCodePoint(t))) {\n    return i;\n  }\n\n  // Replace the current glyph with decomposed L, V, and T glyphs,\n  // and apply the proper OpenType features to each component.\n  let ljmo = getGlyph(font, l, glyph.features);\n  ljmo.features.ljmo = true;\n\n  let vjmo = getGlyph(font, v, glyph.features);\n  vjmo.features.vjmo = true;\n\n  let insert = [ ljmo, vjmo ];\n\n  if (t > T_BASE) {\n    let tjmo = getGlyph(font, t, glyph.features);\n    tjmo.features.tjmo = true;\n    insert.push(tjmo);\n  }\n\n  glyphs.splice(i, 1, ...insert);\n  return i + insert.length - 1;\n}\n\nfunction compose(glyphs, i, font) {\n  let glyph = glyphs[i];\n  let code = glyphs[i].codePoints[0];\n  let type = getType(code);\n\n  let prev = glyphs[i - 1].codePoints[0];\n  let prevType = getType(prev);\n\n  // Figure out what type of syllable we're dealing with\n  let lv, ljmo, vjmo, tjmo;\n  if (prevType === LV && type === T) {\n    // <LV,T>\n    lv = prev;\n    tjmo = glyph;\n  } else {\n    if (type === V) {\n      // <L,V>\n      ljmo = glyphs[i - 1];\n      vjmo = glyph;\n    } else {\n      // <L,V,T>\n      ljmo = glyphs[i - 2];\n      vjmo = glyphs[i - 1];\n      tjmo = glyph;\n    }\n\n    let l = ljmo.codePoints[0];\n    let v = vjmo.codePoints[0];\n\n    // Make sure L and V are combining characters\n    if (isCombiningL(l) && isCombiningV(v)) {\n      lv = HANGUL_BASE + ((l - L_BASE) * V_COUNT + (v - V_BASE)) * T_COUNT;\n    }\n  }\n\n  let t = (tjmo && tjmo.codePoints[0]) || T_BASE;\n  if ((lv != null) && (t === T_BASE || isCombiningT(t))) {\n    let s = lv + (t - T_BASE);\n\n    // Replace with a composed glyph if supported by the font,\n    // otherwise apply the proper OpenType features to each component.\n    if (font.hasGlyphForCodePoint(s)) {\n      let del = prevType === V ? 3 : 2;\n      glyphs.splice(i - del + 1, del, getGlyph(font, s, glyph.features));\n      return i - del + 1;\n    }\n  }\n\n  // Didn't compose (either a non-combining component or unsupported by font).\n  if (ljmo) { ljmo.features.ljmo = true; }\n  if (vjmo) { vjmo.features.vjmo = true; }\n  if (tjmo) { tjmo.features.tjmo = true; }\n\n  if (prevType === LV) {\n    // Sequence was originally <L,V>, which got combined earlier.\n    // Either the T was non-combining, or the LVT glyph wasn't supported.\n    // Decompose the glyph again and apply OT features.\n    decompose(glyphs, i - 1, font);\n    return i + 1;\n  }\n\n  return i;\n}\n\nfunction getLength(code) {\n  switch (getType(code)) {\n    case LV:\n    case LVT:\n      return 1;\n    case V:\n      return 2;\n    case T:\n      return 3;\n  }\n}\n\nfunction reorderToneMark(glyphs, i, font) {\n  let glyph = glyphs[i];\n  let code = glyphs[i].codePoints[0];\n\n  // Move tone mark to the beginning of the previous syllable, unless it is zero width\n  if (font.glyphForCodePoint(code).advanceWidth === 0) { return; }\n\n  let prev = glyphs[i - 1].codePoints[0];\n  let len = getLength(prev);\n\n  glyphs.splice(i, 1);\n  return glyphs.splice(i - len, 0, glyph);\n}\n\nfunction insertDottedCircle(glyphs, i, font) {\n  let glyph = glyphs[i];\n  let code = glyphs[i].codePoints[0];\n\n  if (font.hasGlyphForCodePoint(DOTTED_CIRCLE)) {\n    let dottedCircle = getGlyph(font, DOTTED_CIRCLE, glyph.features);\n\n    // If the tone mark is zero width, insert the dotted circle before, otherwise after\n    let idx = font.glyphForCodePoint(code).advanceWidth === 0 ? i : i + 1;\n    glyphs.splice(idx, 0, dottedCircle);\n    i++;\n  }\n\n  return i;\n}\n","{\"stateTable\":[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,2,3,4,5,6,7,8,9,0,10,11,11,12,13,14,15,16,17],[0,0,0,18,19,20,21,22,23,0,24,0,0,25,26,0,0,27,0],[0,0,0,28,29,30,31,32,33,0,34,0,0,35,36,0,0,37,0],[0,0,0,38,5,7,7,8,9,0,10,0,0,0,13,0,0,16,0],[0,39,0,0,0,40,41,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,43,44,44,8,9,0,0,0,0,12,43,0,0,0,0],[0,0,0,0,43,44,44,8,9,0,0,0,0,0,43,0,0,0,0],[0,0,0,45,46,47,48,49,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,50,0,0,51,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,52,0,0,0,0,0,0,0,0],[0,0,0,53,54,55,56,57,58,0,59,0,0,60,61,0,0,62,0],[0,0,0,4,5,7,7,8,9,0,10,0,0,0,13,0,0,16,0],[0,63,64,0,0,40,41,0,9,0,10,0,0,0,42,0,63,0,0],[0,2,3,4,5,6,7,8,9,0,10,11,11,12,13,0,2,16,0],[0,0,0,18,65,20,21,22,23,0,24,0,0,25,26,0,0,27,0],[0,0,0,0,66,67,67,8,9,0,10,0,0,0,68,0,0,0,0],[0,0,0,69,0,70,70,0,71,0,72,0,0,0,0,0,0,0,0],[0,0,0,73,19,74,74,22,23,0,24,0,0,0,26,0,0,27,0],[0,75,0,0,0,76,77,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,79,80,80,22,23,0,0,0,0,25,79,0,0,0,0],[0,0,0,18,19,20,74,22,23,0,24,0,0,25,26,0,0,27,0],[0,0,0,81,82,83,84,85,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,86,0,0,87,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,88,0,0,0,0,0,0,0,0],[0,0,0,18,19,74,74,22,23,0,24,0,0,0,26,0,0,27,0],[0,89,90,0,0,76,77,0,23,0,24,0,0,0,78,0,89,0,0],[0,0,0,0,91,92,92,22,23,0,24,0,0,0,93,0,0,0,0],[0,0,0,94,29,95,31,32,33,0,34,0,0,0,36,0,0,37,0],[0,96,0,0,0,97,98,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,100,101,101,32,33,0,0,0,0,35,100,0,0,0,0],[0,0,0,0,100,101,101,32,33,0,0,0,0,0,100,0,0,0,0],[0,0,0,102,103,104,105,106,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,107,0,0,108,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,109,0,0,0,0,0,0,0,0],[0,0,0,28,29,95,31,32,33,0,34,0,0,0,36,0,0,37,0],[0,110,111,0,0,97,98,0,33,0,34,0,0,0,99,0,110,0,0],[0,0,0,0,112,113,113,32,33,0,34,0,0,0,114,0,0,0,0],[0,0,0,0,5,7,7,8,9,0,10,0,0,0,13,0,0,16,0],[0,0,0,115,116,117,118,8,9,0,10,0,0,119,120,0,0,16,0],[0,0,0,0,0,121,121,0,9,0,10,0,0,0,42,0,0,0,0],[0,39,0,122,0,123,123,8,9,0,10,0,0,0,42,0,39,0,0],[0,124,64,0,0,0,0,0,0,0,0,0,0,0,0,0,124,0,0],[0,39,0,0,0,121,125,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,0,126,126,8,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,46,47,48,49,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,47,47,49,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,127,127,49,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,128,127,127,49,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,129,130,131,132,133,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,50,0,0,0,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,134,0,0,0,0,0,0,0,0],[0,0,0,135,54,56,56,57,58,0,59,0,0,0,61,0,0,62,0],[0,136,0,0,0,137,138,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,140,141,141,57,58,0,0,0,0,60,140,0,0,0,0],[0,0,0,0,140,141,141,57,58,0,0,0,0,0,140,0,0,0,0],[0,0,0,142,143,144,145,146,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,147,0,0,148,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,149,0,0,0,0,0,0,0,0],[0,0,0,53,54,56,56,57,58,0,59,0,0,0,61,0,0,62,0],[0,150,151,0,0,137,138,0,58,0,59,0,0,0,139,0,150,0,0],[0,0,0,0,152,153,153,57,58,0,59,0,0,0,154,0,0,0,0],[0,0,0,155,116,156,157,8,9,0,10,0,0,158,120,0,0,16,0],[0,0,0,0,0,121,121,0,9,0,10,0,0,0,0,0,0,0,0],[0,75,3,4,5,159,160,8,161,0,162,0,11,12,163,0,75,16,0],[0,0,0,0,0,40,164,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,165,44,44,8,9,0,0,0,0,0,165,0,0,0,0],[0,124,64,0,0,40,164,0,9,0,10,0,0,0,42,0,124,0,0],[0,0,0,0,0,70,70,0,71,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,71,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,166,0,0,167,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,168,0,0,0,0,0,0,0,0],[0,0,0,0,19,74,74,22,23,0,24,0,0,0,26,0,0,27,0],[0,0,0,0,79,80,80,22,23,0,0,0,0,0,79,0,0,0,0],[0,0,0,169,170,171,172,22,23,0,24,0,0,173,174,0,0,27,0],[0,0,0,0,0,175,175,0,23,0,24,0,0,0,78,0,0,0,0],[0,75,0,176,0,177,177,22,23,0,24,0,0,0,78,0,75,0,0],[0,178,90,0,0,0,0,0,0,0,0,0,0,0,0,0,178,0,0],[0,75,0,0,0,175,179,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,0,180,180,22,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,82,83,84,85,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,83,83,85,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,181,181,85,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,182,181,181,85,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,183,184,185,186,187,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,86,0,0,0,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,188,0,0,0,0,0,0,0,0],[0,0,0,189,170,190,191,22,23,0,24,0,0,192,174,0,0,27,0],[0,0,0,0,0,175,175,0,23,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,76,193,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,194,80,80,22,23,0,0,0,0,0,194,0,0,0,0],[0,178,90,0,0,76,193,0,23,0,24,0,0,0,78,0,178,0,0],[0,0,0,0,29,95,31,32,33,0,34,0,0,0,36,0,0,37,0],[0,0,0,0,100,101,101,32,33,0,0,0,0,0,100,0,0,0,0],[0,0,0,195,196,197,198,32,33,0,34,0,0,199,200,0,0,37,0],[0,0,0,0,0,201,201,0,33,0,34,0,0,0,99,0,0,0,0],[0,96,0,202,0,203,203,32,33,0,34,0,0,0,99,0,96,0,0],[0,204,111,0,0,0,0,0,0,0,0,0,0,0,0,0,204,0,0],[0,96,0,0,0,201,205,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,0,206,206,32,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,103,104,105,106,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,104,104,106,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,207,207,106,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,208,207,207,106,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,209,210,211,212,213,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,107,0,0,0,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,214,0,0,0,0,0,0,0,0],[0,0,0,215,196,216,217,32,33,0,34,0,0,218,200,0,0,37,0],[0,0,0,0,0,201,201,0,33,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,97,219,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,220,101,101,32,33,0,0,0,0,0,220,0,0,0,0],[0,204,111,0,0,97,219,0,33,0,34,0,0,0,99,0,204,0,0],[0,0,0,221,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,223,0,0,0,40,224,0,9,0,10,0,0,0,42,0,223,0,0],[0,0,0,0,225,44,44,8,9,0,0,0,0,119,225,0,0,0,0],[0,0,0,115,116,117,222,8,9,0,10,0,0,119,120,0,0,16,0],[0,0,0,115,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,226,64,0,0,40,224,0,9,0,10,0,0,0,42,0,226,0,0],[0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0],[0,39,0,0,0,121,121,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,0,44,44,8,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,227,0,228,229,0,9,0,10,0,0,230,0,0,0,0,0],[0,39,0,122,0,121,121,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,231,231,49,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,232,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,130,131,132,133,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,131,131,133,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,233,233,133,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,234,233,233,133,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,235,236,237,238,239,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,54,56,56,57,58,0,59,0,0,0,61,0,0,62,0],[0,0,0,240,241,242,243,57,58,0,59,0,0,244,245,0,0,62,0],[0,0,0,0,0,246,246,0,58,0,59,0,0,0,139,0,0,0,0],[0,136,0,247,0,248,248,57,58,0,59,0,0,0,139,0,136,0,0],[0,249,151,0,0,0,0,0,0,0,0,0,0,0,0,0,249,0,0],[0,136,0,0,0,246,250,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,0,251,251,57,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,143,144,145,146,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,144,144,146,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,252,252,146,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,253,252,252,146,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,254,255,256,257,258,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,147,0,0,0,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,259,0,0,0,0,0,0,0,0],[0,0,0,260,241,261,262,57,58,0,59,0,0,263,245,0,0,62,0],[0,0,0,0,0,246,246,0,58,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,137,264,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,265,141,141,57,58,0,0,0,0,0,265,0,0,0,0],[0,249,151,0,0,137,264,0,58,0,59,0,0,0,139,0,249,0,0],[0,0,0,221,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,9,0,0,0,0,158,225,0,0,0,0],[0,0,0,155,116,156,222,8,9,0,10,0,0,158,120,0,0,16,0],[0,0,0,155,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,0,0,0,43,266,266,8,161,0,24,0,0,12,267,0,0,0,0],[0,75,0,176,43,268,268,269,161,0,24,0,0,0,267,0,75,0,0],[0,0,0,0,0,270,0,0,271,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,272,0,0,0,0,0,0,0,0],[0,273,274,0,0,40,41,0,9,0,10,0,0,0,42,0,273,0,0],[0,0,0,40,0,123,123,8,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,121,275,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,166,0,0,0,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,276,0,0,0,0,0,0,0,0],[0,0,0,277,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,279,0,0,0,76,280,0,23,0,24,0,0,0,78,0,279,0,0],[0,0,0,0,281,80,80,22,23,0,0,0,0,173,281,0,0,0,0],[0,0,0,169,170,171,278,22,23,0,24,0,0,173,174,0,0,27,0],[0,0,0,169,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,282,90,0,0,76,280,0,23,0,24,0,0,0,78,0,282,0,0],[0,0,0,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0],[0,75,0,0,0,175,175,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,0,80,80,22,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,283,0,284,285,0,23,0,24,0,0,286,0,0,0,0,0],[0,75,0,176,0,175,175,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,0,0,0,22,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,287,287,85,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,288,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,184,185,186,187,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,185,185,187,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,289,289,187,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,290,289,289,187,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,291,292,293,294,295,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,277,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,0,0,0,281,80,80,22,23,0,0,0,0,192,281,0,0,0,0],[0,0,0,189,170,190,278,22,23,0,24,0,0,192,174,0,0,27,0],[0,0,0,189,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,0,0,76,0,177,177,22,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,175,296,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,297,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,299,0,0,0,97,300,0,33,0,34,0,0,0,99,0,299,0,0],[0,0,0,0,301,101,101,32,33,0,0,0,0,199,301,0,0,0,0],[0,0,0,195,196,197,298,32,33,0,34,0,0,199,200,0,0,37,0],[0,0,0,195,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,302,111,0,0,97,300,0,33,0,34,0,0,0,99,0,302,0,0],[0,0,0,0,0,0,0,0,33,0,0,0,0,0,0,0,0,0,0],[0,96,0,0,0,201,201,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,0,101,101,32,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,303,0,304,305,0,33,0,34,0,0,306,0,0,0,0,0],[0,96,0,202,0,201,201,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,307,307,106,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,308,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,210,211,212,213,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,211,211,213,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,309,309,213,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,310,309,309,213,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,311,312,313,314,315,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,297,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,0,0,0,301,101,101,32,33,0,0,0,0,218,301,0,0,0,0],[0,0,0,215,196,216,298,32,33,0,34,0,0,218,200,0,0,37,0],[0,0,0,215,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,0,0,97,0,203,203,32,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,201,316,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,9,0,0,0,0,0,225,0,0,0,0],[0,0,0,317,318,319,320,8,9,0,10,0,0,321,322,0,0,16,0],[0,223,0,323,0,123,123,8,9,0,10,0,0,0,42,0,223,0,0],[0,223,0,0,0,121,324,0,9,0,10,0,0,0,42,0,223,0,0],[0,0,0,325,318,326,327,8,9,0,10,0,0,328,322,0,0,16,0],[0,0,0,64,0,121,121,0,9,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,9,0,0,0,0,230,0,0,0,0,0],[0,0,0,227,0,228,121,0,9,0,10,0,0,230,0,0,0,0,0],[0,0,0,227,0,121,121,0,9,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,0,0],[0,0,0,0,0,329,329,133,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,330,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,236,237,238,239,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,237,237,239,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,331,331,239,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,332,331,331,239,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,333,40,121,334,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,335,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,337,0,0,0,137,338,0,58,0,59,0,0,0,139,0,337,0,0],[0,0,0,0,339,141,141,57,58,0,0,0,0,244,339,0,0,0,0],[0,0,0,240,241,242,336,57,58,0,59,0,0,244,245,0,0,62,0],[0,0,0,240,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,340,151,0,0,137,338,0,58,0,59,0,0,0,139,0,340,0,0],[0,0,0,0,0,0,0,0,58,0,0,0,0,0,0,0,0,0,0],[0,136,0,0,0,246,246,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,0,141,141,57,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,341,0,342,343,0,58,0,59,0,0,344,0,0,0,0,0],[0,136,0,247,0,246,246,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,0,0,0,57,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,345,345,146,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,346,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,255,256,257,258,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,256,256,258,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,347,347,258,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,348,347,347,258,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,349,350,351,352,353,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,335,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,0,0,0,339,141,141,57,58,0,0,0,0,263,339,0,0,0,0],[0,0,0,260,241,261,336,57,58,0,59,0,0,263,245,0,0,62,0],[0,0,0,260,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,0,0,137,0,248,248,57,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,246,354,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,126,126,8,23,0,0,0,0,0,0,0,0,0,0],[0,355,90,0,0,121,125,0,9,0,10,0,0,0,42,0,355,0,0],[0,0,0,0,0,356,356,269,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,357,358,359,360,361,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,270,0,0,0,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,0,0,0,0],[0,0,0,364,116,365,366,8,161,0,162,0,0,367,120,0,0,16,0],[0,0,0,0,0,368,368,0,161,0,162,0,0,0,0,0,0,0,0],[0,0,0,40,0,121,121,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,0,0,0,281,80,80,22,23,0,0,0,0,0,281,0,0,0,0],[0,0,0,369,370,371,372,22,23,0,24,0,0,373,374,0,0,27,0],[0,279,0,375,0,177,177,22,23,0,24,0,0,0,78,0,279,0,0],[0,279,0,0,0,175,376,0,23,0,24,0,0,0,78,0,279,0,0],[0,0,0,377,370,378,379,22,23,0,24,0,0,380,374,0,0,27,0],[0,0,0,90,0,175,175,0,23,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,23,0,0,0,0,286,0,0,0,0,0],[0,0,0,283,0,284,175,0,23,0,24,0,0,286,0,0,0,0,0],[0,0,0,283,0,175,175,0,23,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,85,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,0,0],[0,0,0,0,0,381,381,187,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,382,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,292,293,294,295,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,293,293,295,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,383,383,295,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,384,383,383,295,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,385,76,175,386,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,76,0,175,175,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,0,0,0,301,101,101,32,33,0,0,0,0,0,301,0,0,0,0],[0,0,0,387,388,389,390,32,33,0,34,0,0,391,392,0,0,37,0],[0,299,0,393,0,203,203,32,33,0,34,0,0,0,99,0,299,0,0],[0,299,0,0,0,201,394,0,33,0,34,0,0,0,99,0,299,0,0],[0,0,0,395,388,396,397,32,33,0,34,0,0,398,392,0,0,37,0],[0,0,0,111,0,201,201,0,33,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,33,0,0,0,0,306,0,0,0,0,0],[0,0,0,303,0,304,201,0,33,0,34,0,0,306,0,0,0,0,0],[0,0,0,303,0,201,201,0,33,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,0,0],[0,0,0,0,0,399,399,213,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,400,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,312,313,314,315,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,313,313,315,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,401,401,315,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,402,401,401,315,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,403,97,201,404,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,97,0,201,201,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,405,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,407,0,0,0,40,408,0,9,0,10,0,0,0,42,0,407,0,0],[0,0,0,0,409,44,44,8,9,0,0,0,0,321,409,0,0,0,0],[0,0,0,317,318,319,406,8,9,0,10,0,0,321,322,0,0,16,0],[0,0,0,317,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,410,64,0,0,40,408,0,9,0,10,0,0,0,42,0,410,0,0],[0,223,0,0,0,121,121,0,9,0,10,0,0,0,42,0,223,0,0],[0,223,0,323,0,121,121,0,9,0,10,0,0,0,42,0,223,0,0],[0,0,0,405,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,0,0,0,409,44,44,8,9,0,0,0,0,328,409,0,0,0,0],[0,0,0,325,318,326,406,8,9,0,10,0,0,328,322,0,0,16,0],[0,0,0,325,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,0,0,0,0,0,0,133,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,130,0,0],[0,0,0,0,0,411,411,239,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,412,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,40,121,334,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,413,0,0,0,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,0,0,0,339,141,141,57,58,0,0,0,0,0,339,0,0,0,0],[0,0,0,414,415,416,417,57,58,0,59,0,0,418,419,0,0,62,0],[0,337,0,420,0,248,248,57,58,0,59,0,0,0,139,0,337,0,0],[0,337,0,0,0,246,421,0,58,0,59,0,0,0,139,0,337,0,0],[0,0,0,422,415,423,424,57,58,0,59,0,0,425,419,0,0,62,0],[0,0,0,151,0,246,246,0,58,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,58,0,0,0,0,344,0,0,0,0,0],[0,0,0,341,0,342,246,0,58,0,59,0,0,344,0,0,0,0,0],[0,0,0,341,0,246,246,0,58,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,146,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,143,0,0],[0,0,0,0,0,426,426,258,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,427,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,350,351,352,353,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,351,351,353,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,428,428,353,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,429,428,428,353,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,430,137,246,431,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,137,0,246,246,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,432,116,433,434,8,161,0,162,0,0,435,120,0,0,16,0],[0,0,0,0,0,180,180,269,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,358,359,360,361,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,359,359,361,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,436,436,361,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,437,436,436,361,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,438,439,440,441,442,161,0,162,0,0,0,362,0,0,0,0],[0,443,274,0,0,0,0,0,0,0,0,0,0,0,0,0,443,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,444,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,161,0,0,0,0,367,225,0,0,0,0],[0,0,0,364,116,365,445,8,161,0,162,0,0,367,120,0,0,16,0],[0,0,0,364,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,0,0,0,0,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,446,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,448,0,0,0,76,449,0,23,0,24,0,0,0,78,0,448,0,0],[0,0,0,0,450,80,80,22,23,0,0,0,0,373,450,0,0,0,0],[0,0,0,369,370,371,447,22,23,0,24,0,0,373,374,0,0,27,0],[0,0,0,369,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,451,90,0,0,76,449,0,23,0,24,0,0,0,78,0,451,0,0],[0,279,0,0,0,175,175,0,23,0,24,0,0,0,78,0,279,0,0],[0,279,0,375,0,175,175,0,23,0,24,0,0,0,78,0,279,0,0],[0,0,0,446,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,0,0,0,450,80,80,22,23,0,0,0,0,380,450,0,0,0,0],[0,0,0,377,370,378,447,22,23,0,24,0,0,380,374,0,0,27,0],[0,0,0,377,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,0,0,0,0,0,0,187,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,0,0],[0,0,0,0,0,452,452,295,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,453,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,76,175,386,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,454,0,0,0,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,455,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,457,0,0,0,97,458,0,33,0,34,0,0,0,99,0,457,0,0],[0,0,0,0,459,101,101,32,33,0,0,0,0,391,459,0,0,0,0],[0,0,0,387,388,389,456,32,33,0,34,0,0,391,392,0,0,37,0],[0,0,0,387,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,460,111,0,0,97,458,0,33,0,34,0,0,0,99,0,460,0,0],[0,299,0,0,0,201,201,0,33,0,34,0,0,0,99,0,299,0,0],[0,299,0,393,0,201,201,0,33,0,34,0,0,0,99,0,299,0,0],[0,0,0,455,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,0,0,0,459,101,101,32,33,0,0,0,0,398,459,0,0,0,0],[0,0,0,395,388,396,456,32,33,0,34,0,0,398,392,0,0,37,0],[0,0,0,395,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,0,0,0,0,0,0,213,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,210,0,0],[0,0,0,0,0,461,461,315,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,462,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,97,201,404,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,463,0,0,0,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,0,0,0,409,44,44,8,9,0,0,0,0,0,409,0,0,0,0],[0,0,0,464,465,466,467,8,9,0,10,0,0,468,469,0,0,16,0],[0,407,0,470,0,123,123,8,9,0,10,0,0,0,42,0,407,0,0],[0,407,0,0,0,121,471,0,9,0,10,0,0,0,42,0,407,0,0],[0,0,0,472,465,473,474,8,9,0,10,0,0,475,469,0,0,16,0],[0,0,0,0,0,0,0,239,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,236,0,0],[0,0,0,0,0,0,476,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,477,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,479,0,0,0,137,480,0,58,0,59,0,0,0,139,0,479,0,0],[0,0,0,0,481,141,141,57,58,0,0,0,0,418,481,0,0,0,0],[0,0,0,414,415,416,478,57,58,0,59,0,0,418,419,0,0,62,0],[0,0,0,414,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,482,151,0,0,137,480,0,58,0,59,0,0,0,139,0,482,0,0],[0,337,0,0,0,246,246,0,58,0,59,0,0,0,139,0,337,0,0],[0,337,0,420,0,246,246,0,58,0,59,0,0,0,139,0,337,0,0],[0,0,0,477,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,0,0,0,481,141,141,57,58,0,0,0,0,425,481,0,0,0,0],[0,0,0,422,415,423,478,57,58,0,59,0,0,425,419,0,0,62,0],[0,0,0,422,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,0,0,0,0,0,0,258,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0],[0,0,0,0,0,483,483,353,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,484,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,137,246,431,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,485,0,0,0,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,444,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,161,0,0,0,0,435,225,0,0,0,0],[0,0,0,432,116,433,445,8,161,0,162,0,0,435,120,0,0,16,0],[0,0,0,432,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,0,486,486,361,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,487,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,439,440,441,442,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,440,440,442,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,488,488,442,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,489,488,488,442,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,490,491,492,493,494,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,495,0,496,497,0,161,0,162,0,0,498,0,0,0,0,0],[0,0,0,0,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,161,0,0,0,0,0,225,0,0,0,0],[0,0,0,0,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,0,0,0,450,80,80,22,23,0,0,0,0,0,450,0,0,0,0],[0,0,0,499,500,501,502,22,23,0,24,0,0,503,504,0,0,27,0],[0,448,0,505,0,177,177,22,23,0,24,0,0,0,78,0,448,0,0],[0,448,0,0,0,175,506,0,23,0,24,0,0,0,78,0,448,0,0],[0,0,0,507,500,508,509,22,23,0,24,0,0,510,504,0,0,27,0],[0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,292,0,0],[0,0,0,0,0,0,511,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,0,0,0,459,101,101,32,33,0,0,0,0,0,459,0,0,0,0],[0,0,0,512,513,514,515,32,33,0,34,0,0,516,517,0,0,37,0],[0,457,0,518,0,203,203,32,33,0,34,0,0,0,99,0,457,0,0],[0,457,0,0,0,201,519,0,33,0,34,0,0,0,99,0,457,0,0],[0,0,0,520,513,521,522,32,33,0,34,0,0,523,517,0,0,37,0],[0,0,0,0,0,0,0,315,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,312,0,0],[0,0,0,0,0,0,524,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,525,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,527,0,0,0,40,528,0,9,0,10,0,0,0,42,0,527,0,0],[0,0,0,0,529,44,44,8,9,0,0,0,0,468,529,0,0,0,0],[0,0,0,464,465,466,526,8,9,0,10,0,0,468,469,0,0,16,0],[0,0,0,464,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,530,64,0,0,40,528,0,9,0,10,0,0,0,42,0,530,0,0],[0,407,0,0,0,121,121,0,9,0,10,0,0,0,42,0,407,0,0],[0,407,0,470,0,121,121,0,9,0,10,0,0,0,42,0,407,0,0],[0,0,0,525,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,0,0,0,529,44,44,8,9,0,0,0,0,475,529,0,0,0,0],[0,0,0,472,465,473,526,8,9,0,10,0,0,475,469,0,0,16,0],[0,0,0,472,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,0,0],[0,0,0,0,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,0,0,0,481,141,141,57,58,0,0,0,0,0,481,0,0,0,0],[0,0,0,531,532,533,534,57,58,0,59,0,0,535,536,0,0,62,0],[0,479,0,537,0,248,248,57,58,0,59,0,0,0,139,0,479,0,0],[0,479,0,0,0,246,538,0,58,0,59,0,0,0,139,0,479,0,0],[0,0,0,539,532,540,541,57,58,0,59,0,0,542,536,0,0,62,0],[0,0,0,0,0,0,0,353,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,350,0,0],[0,0,0,0,0,0,543,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,361,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,358,0,0],[0,0,0,0,0,544,544,442,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,545,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,491,492,493,494,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,492,492,494,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,546,546,494,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,547,546,546,494,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,548,549,368,550,0,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,274,0,368,368,0,161,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,161,0,0,0,0,498,0,0,0,0,0],[0,0,0,495,0,496,368,0,161,0,162,0,0,498,0,0,0,0,0],[0,0,0,495,0,368,368,0,161,0,162,0,0,0,0,0,0,0,0],[0,0,0,551,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,553,0,0,0,76,554,0,23,0,24,0,0,0,78,0,553,0,0],[0,0,0,0,555,80,80,22,23,0,0,0,0,503,555,0,0,0,0],[0,0,0,499,500,501,552,22,23,0,24,0,0,503,504,0,0,27,0],[0,0,0,499,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,556,90,0,0,76,554,0,23,0,24,0,0,0,78,0,556,0,0],[0,448,0,0,0,175,175,0,23,0,24,0,0,0,78,0,448,0,0],[0,448,0,505,0,175,175,0,23,0,24,0,0,0,78,0,448,0,0],[0,0,0,551,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,0,0,0,555,80,80,22,23,0,0,0,0,510,555,0,0,0,0],[0,0,0,507,500,508,552,22,23,0,24,0,0,510,504,0,0,27,0],[0,0,0,507,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,0,0],[0,0,0,557,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,559,0,0,0,97,560,0,33,0,34,0,0,0,99,0,559,0,0],[0,0,0,0,561,101,101,32,33,0,0,0,0,516,561,0,0,0,0],[0,0,0,512,513,514,558,32,33,0,34,0,0,516,517,0,0,37,0],[0,0,0,512,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,562,111,0,0,97,560,0,33,0,34,0,0,0,99,0,562,0,0],[0,457,0,0,0,201,201,0,33,0,34,0,0,0,99,0,457,0,0],[0,457,0,518,0,201,201,0,33,0,34,0,0,0,99,0,457,0,0],[0,0,0,557,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,0,0,0,561,101,101,32,33,0,0,0,0,523,561,0,0,0,0],[0,0,0,520,513,521,558,32,33,0,34,0,0,523,517,0,0,37,0],[0,0,0,520,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,0,0],[0,0,0,0,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,0,0,0,529,44,44,8,9,0,0,0,0,0,529,0,0,0,0],[0,0,0,563,66,564,565,8,9,0,10,0,0,566,68,0,0,16,0],[0,527,0,567,0,123,123,8,9,0,10,0,0,0,42,0,527,0,0],[0,527,0,0,0,121,568,0,9,0,10,0,0,0,42,0,527,0,0],[0,0,0,569,66,570,571,8,9,0,10,0,0,572,68,0,0,16,0],[0,0,0,573,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,575,0,0,0,137,576,0,58,0,59,0,0,0,139,0,575,0,0],[0,0,0,0,577,141,141,57,58,0,0,0,0,535,577,0,0,0,0],[0,0,0,531,532,533,574,57,58,0,59,0,0,535,536,0,0,62,0],[0,0,0,531,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,578,151,0,0,137,576,0,58,0,59,0,0,0,139,0,578,0,0],[0,479,0,0,0,246,246,0,58,0,59,0,0,0,139,0,479,0,0],[0,479,0,537,0,246,246,0,58,0,59,0,0,0,139,0,479,0,0],[0,0,0,573,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,0,0,0,577,141,141,57,58,0,0,0,0,542,577,0,0,0,0],[0,0,0,539,532,540,574,57,58,0,59,0,0,542,536,0,0,62,0],[0,0,0,539,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,137,0,0],[0,0,0,0,0,0,0,442,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,439,0,0],[0,0,0,0,0,579,579,494,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,580,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,549,368,550,0,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,368,368,0,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,581,0,0,0,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,0,0,0,555,80,80,22,23,0,0,0,0,0,555,0,0,0,0],[0,0,0,582,91,583,584,22,23,0,24,0,0,585,93,0,0,27,0],[0,553,0,586,0,177,177,22,23,0,24,0,0,0,78,0,553,0,0],[0,553,0,0,0,175,587,0,23,0,24,0,0,0,78,0,553,0,0],[0,0,0,588,91,589,590,22,23,0,24,0,0,591,93,0,0,27,0],[0,0,0,0,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,0,0,0,561,101,101,32,33,0,0,0,0,0,561,0,0,0,0],[0,0,0,592,112,593,594,32,33,0,34,0,0,595,114,0,0,37,0],[0,559,0,596,0,203,203,32,33,0,34,0,0,0,99,0,559,0,0],[0,559,0,0,0,201,597,0,33,0,34,0,0,0,99,0,559,0,0],[0,0,0,598,112,599,600,32,33,0,34,0,0,601,114,0,0,37,0],[0,0,0,602,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,0,165,44,44,8,9,0,0,0,0,566,165,0,0,0,0],[0,0,0,563,66,564,67,8,9,0,10,0,0,566,68,0,0,16,0],[0,0,0,563,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,527,0,0,0,121,121,0,9,0,10,0,0,0,42,0,527,0,0],[0,527,0,567,0,121,121,0,9,0,10,0,0,0,42,0,527,0,0],[0,0,0,602,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,0,165,44,44,8,9,0,0,0,0,572,165,0,0,0,0],[0,0,0,569,66,570,67,8,9,0,10,0,0,572,68,0,0,16,0],[0,0,0,569,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,0,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,0,0,0,577,141,141,57,58,0,0,0,0,0,577,0,0,0,0],[0,0,0,603,152,604,605,57,58,0,59,0,0,606,154,0,0,62,0],[0,575,0,607,0,248,248,57,58,0,59,0,0,0,139,0,575,0,0],[0,575,0,0,0,246,608,0,58,0,59,0,0,0,139,0,575,0,0],[0,0,0,609,152,610,611,57,58,0,59,0,0,612,154,0,0,62,0],[0,0,0,0,0,0,0,494,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,491,0,0],[0,0,0,0,0,0,613,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,614,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,0,194,80,80,22,23,0,0,0,0,585,194,0,0,0,0],[0,0,0,582,91,583,92,22,23,0,24,0,0,585,93,0,0,27,0],[0,0,0,582,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,553,0,0,0,175,175,0,23,0,24,0,0,0,78,0,553,0,0],[0,553,0,586,0,175,175,0,23,0,24,0,0,0,78,0,553,0,0],[0,0,0,614,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,0,194,80,80,22,23,0,0,0,0,591,194,0,0,0,0],[0,0,0,588,91,589,92,22,23,0,24,0,0,591,93,0,0,27,0],[0,0,0,588,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,615,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,220,101,101,32,33,0,0,0,0,595,220,0,0,0,0],[0,0,0,592,112,593,113,32,33,0,34,0,0,595,114,0,0,37,0],[0,0,0,592,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,559,0,0,0,201,201,0,33,0,34,0,0,0,99,0,559,0,0],[0,559,0,596,0,201,201,0,33,0,34,0,0,0,99,0,559,0,0],[0,0,0,615,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,220,101,101,32,33,0,0,0,0,601,220,0,0,0,0],[0,0,0,598,112,599,113,32,33,0,34,0,0,601,114,0,0,37,0],[0,0,0,598,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,616,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,0,0,0,265,141,141,57,58,0,0,0,0,606,265,0,0,0,0],[0,0,0,603,152,604,153,57,58,0,59,0,0,606,154,0,0,62,0],[0,0,0,603,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,575,0,0,0,246,246,0,58,0,59,0,0,0,139,0,575,0,0],[0,575,0,607,0,246,246,0,58,0,59,0,0,0,139,0,575,0,0],[0,0,0,616,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,0,0,0,265,141,141,57,58,0,0,0,0,612,265,0,0,0,0],[0,0,0,609,152,610,153,57,58,0,59,0,0,612,154,0,0,62,0],[0,0,0,609,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,549,0,0],[0,0,0,0,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,0,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0]],\"accepting\":[false,true,true,true,true,true,false,false,true,true,true,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,true,true,true,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,false,false,true,true,true,true,true,true,true,true,true,true,false,true,true,false,true,true,true,false,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,true,false,true,true,false,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,true,false,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,true,false,true,true,false,true,true,true,true,true,true,true,true,true,true,true,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,false,true,false,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,false,true,true,false,false,true,false,true,true,false,true,true,false,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,false,true,true,true,true,false,false,false,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,false,true,true,false,false,true,true,false,false,true,true,true,false,true,false,true,true,true,true,false,false,false,true,false,true,true,true,true,false,false,false,true,true,false,true,true,true,true,true,true,false,true,true,false,true,false,true,true,true,true,false,false,false,false,false,false,false,true,true,false,false,true,true,false,true,true,true,true,false,true,true,true,true,true,true,false,true,true,false,true,true,false,true,true,true,true,true,true,false,true,true,false,true,false,true,true,true,true,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,false,true,true,false,true,false,true,true,true,true,true,false,true,true,true,true,true,false,true,true,true,true,true,false,true,true,true,false,true,true,true,true,false,false,false,true,false,true,true,true,true,true,false,true,true,true,false,true,true,true,true,true,false,true,true,true,true,false,true,true,true,true,true,false,true,true,false,true,true,true],\"tags\":[[],[\"broken_cluster\"],[\"consonant_syllable\"],[\"vowel_syllable\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"standalone_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"consonant_syllable\"],[\"broken_cluster\"],[\"symbol_cluster\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"symbol_cluster\"],[],[\"symbol_cluster\"],[\"symbol_cluster\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"symbol_cluster\"],[\"symbol_cluster\"],[\"symbol_cluster\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[\"broken_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"broken_cluster\"],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"broken_cluster\"],[\"symbol_cluster\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[],[],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[],[],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[],[],[\"broken_cluster\"],[],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[],[],[],[\"consonant_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[],[],[],[\"vowel_syllable\"],[],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[],[],[\"standalone_cluster\"],[],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[],[],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[],[],[],[],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[],[],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"broken_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"consonant_syllable\"],[\"vowel_syllable\"],[\"standalone_cluster\"]]}","{\"categories\":[\"O\",\"IND\",\"S\",\"GB\",\"B\",\"FM\",\"CGJ\",\"VMAbv\",\"VMPst\",\"VAbv\",\"VPst\",\"CMBlw\",\"VPre\",\"VBlw\",\"H\",\"VMBlw\",\"CMAbv\",\"MBlw\",\"CS\",\"R\",\"SUB\",\"MPst\",\"MPre\",\"FAbv\",\"FPst\",\"FBlw\",\"null\",\"SMAbv\",\"SMBlw\",\"VMPre\",\"ZWNJ\",\"ZWJ\",\"WJ\",\"M\",\"VS\",\"N\",\"HN\",\"MAbv\"],\"decompositions\":{\"2507\":[2503,2494],\"2508\":[2503,2519],\"2888\":[2887,2902],\"2891\":[2887,2878],\"2892\":[2887,2903],\"3018\":[3014,3006],\"3019\":[3015,3006],\"3020\":[3014,3031],\"3144\":[3142,3158],\"3264\":[3263,3285],\"3271\":[3270,3285],\"3272\":[3270,3286],\"3274\":[3270,3266],\"3275\":[3270,3266,3285],\"3402\":[3398,3390],\"3403\":[3399,3390],\"3404\":[3398,3415],\"3546\":[3545,3530],\"3548\":[3545,3535],\"3549\":[3545,3535,3530],\"3550\":[3545,3551],\"3635\":[3661,3634],\"3763\":[3789,3762],\"3955\":[3953,3954],\"3957\":[3953,3956],\"3958\":[4018,3968],\"3959\":[4018,3953,3968],\"3960\":[4019,3968],\"3961\":[4019,3953,3968],\"3969\":[3953,3968],\"6971\":[6970,6965],\"6973\":[6972,6965],\"6976\":[6974,6965],\"6977\":[6975,6965],\"6979\":[6978,6965],\"69934\":[69937,69927],\"69935\":[69938,69927],\"70475\":[70471,70462],\"70476\":[70471,70487],\"70843\":[70841,70842],\"70844\":[70841,70832],\"70846\":[70841,70845],\"71098\":[71096,71087],\"71099\":[71097,71087]},\"stateTable\":[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[2,2,3,4,4,5,0,6,7,8,9,10,11,12,13,14,15,16,0,17,18,11,19,20,21,22,0,0,0,23,0,0,2,0,0,24,0,25],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,28,0,0,0,0,0,27,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,34,35,36,37,38,39,40,0,0,41,35,42,43,44,45,0,0,0,46,0,0,0,0,39,0,0,47],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,0,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,0,0,12,0,14,0,0,0,0,0,0,0,20,21,22,0,0,0,23,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,9,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,0,23,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,10,11,12,13,14,0,16,0,0,18,11,19,20,21,22,0,0,0,23,0,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,0,0,0,0,0,0,20,21,22,0,0,0,23,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,9,0,0,12,0,14,0,0,0,0,0,0,0,20,21,22,0,0,0,23,0,0,0,0,0,0,0,0],[0,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,7,0,0,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,10,11,12,13,14,15,16,0,0,18,11,19,20,21,22,0,0,0,23,0,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,0,0,0,0,11,0,20,21,22,0,0,0,23,0,0,0,0,0,0,0,0],[0,0,0,4,4,5,0,6,7,8,9,10,11,12,13,14,15,16,0,0,18,11,19,20,21,22,0,0,0,23,0,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,48,11,12,13,14,48,16,0,0,18,11,19,20,21,22,0,0,0,23,0,0,0,0,49,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,16,0,0,0,11,0,20,21,22,0,0,0,23,0,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,22,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,0,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,0,23,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,51,0],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,16,0,0,0,11,0,20,21,22,0,0,0,23,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,28,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,0,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,0,0,36,0,38,0,0,0,0,0,0,0,43,44,45,0,0,0,46,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,33,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,0,46,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,34,35,36,37,38,0,40,0,0,41,35,42,43,44,45,0,0,0,46,0,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,0,0,0,0,0,0,43,44,45,0,0,0,46,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,33,0,0,36,0,38,0,0,0,0,0,0,0,43,44,45,0,0,0,46,0,0,0,0,0,0,0,0],[0,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,31,0,0,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,34,35,36,37,38,39,40,0,0,41,35,42,43,44,45,0,0,0,46,0,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,0,0,0,0,35,0,43,44,45,0,0,0,46,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,52,35,36,37,38,52,40,0,0,41,35,42,43,44,45,0,0,0,46,0,0,0,0,53,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,40,0,0,0,35,0,43,44,45,0,0,0,46,0,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,45,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,0,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,0,46,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,40,0,0,0,35,0,43,44,45,0,0,0,46,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,48,11,12,13,14,0,16,0,0,18,11,19,20,21,22,0,0,0,23,0,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,48,11,12,13,14,48,16,0,0,18,11,19,20,21,22,0,0,0,23,0,0,0,0,0,0,0,25],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,0,0],[0,0,0,0,0,29,0,30,31,32,33,52,35,36,37,38,0,40,0,0,41,35,42,43,44,45,0,0,0,46,0,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,52,35,36,37,38,52,40,0,0,41,35,42,43,44,45,0,0,0,46,0,0,0,0,0,0,0,47],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,51,0]],\"accepting\":[false,true,true,true,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],\"tags\":[[],[\"broken_cluster\"],[\"independent_cluster\"],[\"symbol_cluster\"],[\"standard_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"numeral_cluster\"],[\"broken_cluster\"],[\"independent_cluster\"],[\"symbol_cluster\"],[\"symbol_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"virama_terminated_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"numeral_cluster\"],[\"number_joiner_terminated_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"numeral_cluster\"]]}","// Cateories used in the OpenType spec:\n// https://www.microsoft.com/typography/otfntdev/devanot/shaping.aspx\nexport const CATEGORIES = {\n  X: 1 << 0,\n  C: 1 << 1,\n  V: 1 << 2,\n  N: 1 << 3,\n  H: 1 << 4,\n  ZWNJ: 1 << 5,\n  ZWJ: 1 << 6,\n  M: 1 << 7,\n  SM: 1 << 8,\n  VD: 1 << 9,\n  A: 1 << 10,\n  Placeholder: 1 << 11,\n  Dotted_Circle: 1 << 12,\n  RS: 1 << 13,    // Register Shifter, used in Khmer OT spec.\n  Coeng: 1 << 14, // Khmer-style Virama.\n  Repha: 1 << 15, // Atomically-encoded logical or visual repha.\n  Ra: 1 << 16,\n  CM: 1 << 17,    // Consonant-Medial.\n  Symbol: 1 << 18 // Avagraha, etc that take marks (SM,A,VD).\n};\n\n// Visual positions in a syllable from left to right.\nexport const POSITIONS = {\n  Start: 1 << 0,\n\n  Ra_To_Become_Reph: 1 << 1,\n  Pre_M: 1 << 2,\n  Pre_C: 1 << 3,\n\n  Base_C: 1 << 4,\n  After_Main: 1 << 5,\n\n  Above_C: 1 << 6,\n\n  Before_Sub: 1 << 7,\n  Below_C: 1 << 8,\n  After_Sub: 1 << 9,\n\n  Before_Post: 1 << 10,\n  Post_C: 1 << 11,\n  After_Post: 1 << 12,\n\n  Final_C: 1 << 13,\n  SMVD: 1 << 14,\n\n  End: 1 << 15\n};\n\nexport const CONSONANT_FLAGS = CATEGORIES.C | CATEGORIES.Ra | CATEGORIES.CM | CATEGORIES.V | CATEGORIES.Placeholder | CATEGORIES.Dotted_Circle;\nexport const JOINER_FLAGS = CATEGORIES.ZWJ | CATEGORIES.ZWNJ;\nexport const HALANT_OR_COENG_FLAGS = CATEGORIES.H | CATEGORIES.Coeng;\n\nexport const INDIC_CONFIGS = {\n  Default: {\n    hasOldSpec: false,\n    virama: 0,\n    basePos: 'Last',\n    rephPos: POSITIONS.Before_Post,\n    rephMode: 'Implicit',\n    blwfMode: 'Pre_And_Post'\n  },\n\n  Devanagari: {\n    hasOldSpec: true,\n    virama: 0x094D,\n    basePos: 'Last',\n    rephPos: POSITIONS.Before_Post,\n    rephMode: 'Implicit',\n    blwfMode: 'Pre_And_Post'\n  },\n\n  Bengali: {\n    hasOldSpec: true,\n    virama: 0x09CD,\n    basePos: 'Last',\n    rephPos: POSITIONS.After_Sub,\n    rephMode: 'Implicit',\n    blwfMode: 'Pre_And_Post'\n  },\n\n  Gurmukhi: {\n    hasOldSpec: true,\n    virama: 0x0A4D,\n    basePos: 'Last',\n    rephPos: POSITIONS.Before_Sub,\n    rephMode: 'Implicit',\n    blwfMode: 'Pre_And_Post'\n  },\n\n  Gujarati: {\n    hasOldSpec: true,\n    virama: 0x0ACD,\n    basePos: 'Last',\n    rephPos: POSITIONS.Before_Post,\n    rephMode: 'Implicit',\n    blwfMode: 'Pre_And_Post'\n  },\n\n  Oriya: {\n    hasOldSpec: true,\n    virama: 0x0B4D,\n    basePos: 'Last',\n    rephPos: POSITIONS.After_Main,\n    rephMode: 'Implicit',\n    blwfMode: 'Pre_And_Post'\n  },\n\n  Tamil: {\n    hasOldSpec: true,\n    virama: 0x0BCD,\n    basePos: 'Last',\n    rephPos: POSITIONS.After_Post,\n    rephMode: 'Implicit',\n    blwfMode: 'Pre_And_Post'\n  },\n\n  Telugu: {\n    hasOldSpec: true,\n    virama: 0x0C4D,\n    basePos: 'Last',\n    rephPos: POSITIONS.After_Post,\n    rephMode: 'Explicit',\n    blwfMode: 'Post_Only'\n  },\n\n  Kannada: {\n    hasOldSpec: true,\n    virama: 0x0CCD,\n    basePos: 'Last',\n    rephPos: POSITIONS.After_Post,\n    rephMode: 'Implicit',\n    blwfMode: 'Post_Only'\n  },\n\n  Malayalam: {\n    hasOldSpec: true,\n    virama: 0x0D4D,\n    basePos: 'Last',\n    rephPos: POSITIONS.After_Main,\n    rephMode: 'Log_Repha',\n    blwfMode: 'Pre_And_Post'\n  },\n\n  // Handled by UniversalShaper\n  // Sinhala: {\n  //   hasOldSpec: false,\n  //   virama: 0x0DCA,\n  //   basePos: 'Last_Sinhala',\n  //   rephPos: POSITIONS.After_Main,\n  //   rephMode: 'Explicit',\n  //   blwfMode: 'Pre_And_Post'\n  // },\n\n  Khmer: {\n    hasOldSpec: false,\n    virama: 0x17D2,\n    basePos: 'First',\n    rephPos: POSITIONS.Ra_To_Become_Reph,\n    rephMode: 'Vis_Repha',\n    blwfMode: 'Pre_And_Post'\n  }\n};\n\n// Additional decompositions that aren't in Unicode\nexport const INDIC_DECOMPOSITIONS = {\n  // Khmer\n  0x17BE: [0x17C1, 0x17BE],\n  0x17BF: [0x17C1, 0x17BF],\n  0x17C0: [0x17C1, 0x17C0],\n  0x17C4: [0x17C1, 0x17C4],\n  0x17C5: [0x17C1, 0x17C5]\n};\n","import DefaultShaper from './DefaultShaper';\nimport StateMachine from 'dfa';\nimport UnicodeTrie from 'unicode-trie';\nimport {getCategory} from 'unicode-properties';\nimport * as Script from '../../layout/Script';\nimport GlyphInfo from '../GlyphInfo';\nimport indicMachine from './indic.json';\nimport useData from './use.json';\nimport {\n  CATEGORIES,\n  POSITIONS,\n  CONSONANT_FLAGS,\n  JOINER_FLAGS,\n  HALANT_OR_COENG_FLAGS, INDIC_CONFIGS,\n  INDIC_DECOMPOSITIONS\n} from './indic-data';\nimport { decodeBase64 } from '../../utils';\n\nconst {decompositions} = useData;\nconst trie = new UnicodeTrie(decodeBase64(require('fs').readFileSync(__dirname + '/indic.trie', 'base64')));\nconst stateMachine = new StateMachine(indicMachine);\n\n/**\n * The IndicShaper supports indic scripts e.g. Devanagari, Kannada, etc.\n * Based on code from Harfbuzz: https://github.com/behdad/harfbuzz/blob/master/src/hb-ot-shape-complex-indic.cc\n */\nexport default class IndicShaper extends DefaultShaper {\n  static zeroMarkWidths = 'NONE';\n  static planFeatures(plan) {\n    plan.addStage(setupSyllables);\n\n    plan.addStage(['locl', 'ccmp']);\n\n    plan.addStage(initialReordering);\n\n    plan.addStage('nukt');\n    plan.addStage('akhn');\n    plan.addStage('rphf', false);\n    plan.addStage('rkrf');\n    plan.addStage('pref', false);\n    plan.addStage('blwf', false);\n    plan.addStage('abvf', false);\n    plan.addStage('half', false);\n    plan.addStage('pstf', false);\n    plan.addStage('vatu');\n    plan.addStage('cjct');\n    plan.addStage('cfar', false);\n\n    plan.addStage(finalReordering);\n\n    plan.addStage({\n      local: ['init'],\n      global: ['pres', 'abvs', 'blws', 'psts', 'haln', 'dist', 'abvm', 'blwm', 'calt', 'clig']\n    });\n\n    // Setup the indic config for the selected script\n    plan.unicodeScript = Script.fromOpenType(plan.script);\n    plan.indicConfig = INDIC_CONFIGS[plan.unicodeScript] || INDIC_CONFIGS.Default;\n    plan.isOldSpec = plan.indicConfig.hasOldSpec && plan.script[plan.script.length - 1] !== '2';\n\n    // TODO: turn off kern (Khmer) and liga features.\n  }\n\n  static assignFeatures(plan, glyphs) {\n    // Decompose split matras\n    // TODO: do this in a more general unicode normalizer\n    for (let i = glyphs.length - 1; i >= 0; i--) {\n      let codepoint = glyphs[i].codePoints[0];\n      let d = INDIC_DECOMPOSITIONS[codepoint] || decompositions[codepoint];\n      if (d) {\n        let decomposed = d.map(c => {\n          let g = plan.font.glyphForCodePoint(c);\n          return new GlyphInfo(plan.font, g.id, [c], glyphs[i].features);\n        });\n\n        glyphs.splice(i, 1, ...decomposed);\n      }\n    }\n  }\n}\n\nfunction indicCategory(glyph) {\n  return trie.get(glyph.codePoints[0]) >> 8;\n}\n\nfunction indicPosition(glyph) {\n  return 1 << (trie.get(glyph.codePoints[0]) & 0xff);\n}\n\nclass IndicInfo {\n  constructor(category, position, syllableType, syllable) {\n    this.category = category;\n    this.position = position;\n    this.syllableType = syllableType;\n    this.syllable = syllable;\n  }\n}\n\nfunction setupSyllables(font, glyphs) {\n  let syllable = 0;\n  let last = 0;\n  for (let [start, end, tags] of stateMachine.match(glyphs.map(indicCategory))) {\n    if (start > last) {\n      ++syllable;\n      for (let i = last; i < start; i++) {\n        glyphs[i].shaperInfo = new IndicInfo(CATEGORIES.X, POSITIONS.End, 'non_indic_cluster', syllable);\n      }\n    }\n\n    ++syllable;\n\n    // Create shaper info\n    for (let i = start; i <= end; i++) {\n      glyphs[i].shaperInfo = new IndicInfo(\n        1 << indicCategory(glyphs[i]),\n        indicPosition(glyphs[i]),\n        tags[0],\n        syllable\n      );\n    }\n\n    last = end + 1;\n  }\n\n  if (last < glyphs.length) {\n    ++syllable;\n    for (let i = last; i < glyphs.length; i++) {\n      glyphs[i].shaperInfo = new IndicInfo(CATEGORIES.X, POSITIONS.End, 'non_indic_cluster', syllable);\n    }\n  }\n}\n\nfunction isConsonant(glyph) {\n  return glyph.shaperInfo.category & CONSONANT_FLAGS;\n}\n\nfunction isJoiner(glyph) {\n  return glyph.shaperInfo.category & JOINER_FLAGS;\n}\n\nfunction isHalantOrCoeng(glyph) {\n  return glyph.shaperInfo.category & HALANT_OR_COENG_FLAGS;\n}\n\nfunction wouldSubstitute(glyphs, feature) {\n  for (let glyph of glyphs) {\n    glyph.features = {[feature]: true};\n  }\n\n  let GSUB = glyphs[0]._font._layoutEngine.engine.GSUBProcessor;\n  GSUB.applyFeatures([feature], glyphs);\n\n  return glyphs.length === 1;\n}\n\nfunction consonantPosition(font, consonant, virama) {\n  let glyphs = [virama, consonant, virama];\n  if (wouldSubstitute(glyphs.slice(0, 2), 'blwf') || wouldSubstitute(glyphs.slice(1, 3), 'blwf')) {\n    return POSITIONS.Below_C;\n  } else if (wouldSubstitute(glyphs.slice(0, 2), 'pstf') || wouldSubstitute(glyphs.slice(1, 3), 'pstf')) {\n    return POSITIONS.Post_C;\n  } else if (wouldSubstitute(glyphs.slice(0, 2), 'pref') || wouldSubstitute(glyphs.slice(1, 3), 'pref')) {\n    return POSITIONS.Post_C;\n  }\n\n  return POSITIONS.Base_C;\n}\n\nfunction initialReordering(font, glyphs, plan) {\n  let indicConfig = plan.indicConfig;\n  let features = font._layoutEngine.engine.GSUBProcessor.features;\n\n  let dottedCircle = font.glyphForCodePoint(0x25cc).id;\n  let virama = font.glyphForCodePoint(indicConfig.virama).id;\n  if (virama) {\n    let info = new GlyphInfo(font, virama, [indicConfig.virama]);\n    for (let i = 0; i < glyphs.length; i++) {\n      if (glyphs[i].shaperInfo.position === POSITIONS.Base_C) {\n        glyphs[i].shaperInfo.position = consonantPosition(font, glyphs[i].copy(), info);\n      }\n    }\n  }\n\n  for (let start = 0, end = nextSyllable(glyphs, 0); start < glyphs.length; start = end, end = nextSyllable(glyphs, start)) {\n    let {category, syllableType} = glyphs[start].shaperInfo;\n\n    if (syllableType === 'symbol_cluster' || syllableType === 'non_indic_cluster') {\n      continue;\n    }\n\n    if (syllableType === 'broken_cluster' && dottedCircle) {\n      let g = new GlyphInfo(font, dottedCircle, [0x25cc]);\n      g.shaperInfo = new IndicInfo(\n        1 << indicCategory(g),\n        indicPosition(g),\n        glyphs[start].shaperInfo.syllableType,\n        glyphs[start].shaperInfo.syllable\n      );\n\n      // Insert after possible Repha.\n      let i = start;\n      while (i < end && glyphs[i].shaperInfo.category === CATEGORIES.Repha) {\n        i++;\n      }\n\n      glyphs.splice(i++, 0, g);\n      end++;\n    }\n\n    // 1. Find base consonant:\n    //\n    // The shaping engine finds the base consonant of the syllable, using the\n    // following algorithm: starting from the end of the syllable, move backwards\n    // until a consonant is found that does not have a below-base or post-base\n    // form (post-base forms have to follow below-base forms), or that is not a\n    // pre-base reordering Ra, or arrive at the first consonant. The consonant\n    // stopped at will be the base.\n\n    let base = end;\n    let limit = start;\n    let hasReph = false;\n\n    // If the syllable starts with Ra + Halant (in a script that has Reph)\n    // and has more than one consonant, Ra is excluded from candidates for\n    // base consonants.\n    if (indicConfig.rephPos !== POSITIONS.Ra_To_Become_Reph &&\n      features.rphf &&\n      start + 3 <= end && (\n        (indicConfig.rephMode === 'Implicit' && !isJoiner(glyphs[start + 2])) ||\n        (indicConfig.rephMode === 'Explicit' && glyphs[start + 2].shaperInfo.category === CATEGORIES.ZWJ)\n      )\n    ) {\n      // See if it matches the 'rphf' feature.\n      let g = [glyphs[start].copy(), glyphs[start + 1].copy(), glyphs[start + 2].copy()];\n      if (wouldSubstitute(g.slice(0, 2), 'rphf') || (indicConfig.rephMode === 'Explicit' && wouldSubstitute(g, 'rphf'))) {\n        limit += 2;\n        while (limit < end && isJoiner(glyphs[limit])) {\n          limit++;\n        }\n        base = start;\n        hasReph = true;\n      }\n    } else if (indicConfig.rephMode === 'Log_Repha' && glyphs[start].shaperInfo.category === CATEGORIES.Repha) {\n      limit++;\n      while (limit < end && isJoiner(glyphs[limit])) {\n        limit++;\n      }\n      base = start;\n      hasReph = true;\n    }\n\n    switch (indicConfig.basePos) {\n      case 'Last': {\n        // starting from the end of the syllable, move backwards\n        let i = end;\n        let seenBelow = false;\n\n        do {\n          let info = glyphs[--i].shaperInfo;\n\n          // until a consonant is found\n          if (isConsonant(glyphs[i])) {\n            // that does not have a below-base or post-base form\n            // (post-base forms have to follow below-base forms),\n            if (info.position !== POSITIONS.Below_C && (info.position !== POSITIONS.Post_C || seenBelow)) {\n              base = i;\n              break;\n            }\n\n            // or that is not a pre-base reordering Ra,\n            //\n            // IMPLEMENTATION NOTES:\n            //\n            // Our pre-base reordering Ra's are marked POS_POST_C, so will be skipped\n            // by the logic above already.\n            //\n\n            // or arrive at the first consonant. The consonant stopped at will\n            // be the base.\n            if (info.position === POSITIONS.Below_C) {\n              seenBelow = true;\n            }\n\n            base = i;\n          } else if (start < i && info.category === CATEGORIES.ZWJ && glyphs[i - 1].shaperInfo.category === CATEGORIES.H) {\n            // A ZWJ after a Halant stops the base search, and requests an explicit\n            // half form.\n            // A ZWJ before a Halant, requests a subjoined form instead, and hence\n            // search continues.  This is particularly important for Bengali\n            // sequence Ra,H,Ya that should form Ya-Phalaa by subjoining Ya.\n            break;\n          }\n        } while (i > limit);\n        break;\n      }\n\n      case 'First': {\n        // The first consonant is always the base.\n        base = start;\n\n        // Mark all subsequent consonants as below.\n        for (let i = base + 1; i < end; i++) {\n          if (isConsonant(glyphs[i])) {\n            glyphs[i].shaperInfo.position = POSITIONS.Below_C;\n          }\n        }\n      }\n    }\n\n    // If the syllable starts with Ra + Halant (in a script that has Reph)\n    // and has more than one consonant, Ra is excluded from candidates for\n    // base consonants.\n    //\n    //  Only do this for unforced Reph. (ie. not for Ra,H,ZWJ)\n    if (hasReph && base === start && limit - base <= 2) {\n      hasReph = false;\n    }\n\n    // 2. Decompose and reorder Matras:\n    //\n    // Each matra and any syllable modifier sign in the cluster are moved to the\n    // appropriate position relative to the consonant(s) in the cluster. The\n    // shaping engine decomposes two- or three-part matras into their constituent\n    // parts before any repositioning. Matra characters are classified by which\n    // consonant in a conjunct they have affinity for and are reordered to the\n    // following positions:\n    //\n    //   o Before first half form in the syllable\n    //   o After subjoined consonants\n    //   o After post-form consonant\n    //   o After main consonant (for above marks)\n    //\n    // IMPLEMENTATION NOTES:\n    //\n    // The normalize() routine has already decomposed matras for us, so we don't\n    // need to worry about that.\n\n    // 3.  Reorder marks to canonical order:\n    //\n    // Adjacent nukta and halant or nukta and vedic sign are always repositioned\n    // if necessary, so that the nukta is first.\n    //\n    // IMPLEMENTATION NOTES:\n    //\n    // We don't need to do this: the normalize() routine already did this for us.\n\n    // Reorder characters\n\n    for (let i = start; i < base; i++) {\n      let info = glyphs[i].shaperInfo;\n      info.position = Math.min(POSITIONS.Pre_C, info.position);\n    }\n\n    if (base < end) {\n      glyphs[base].shaperInfo.position = POSITIONS.Base_C;\n    }\n\n    // Mark final consonants.  A final consonant is one appearing after a matra,\n    // like in Khmer.\n    for (let i = base + 1; i < end; i++) {\n      if (glyphs[i].shaperInfo.category === CATEGORIES.M) {\n        for (let j = i + 1; j < end; j++) {\n          if (isConsonant(glyphs[j])) {\n            glyphs[j].shaperInfo.position = POSITIONS.Final_C;\n            break;\n          }\n        }\n        break;\n      }\n    }\n\n    // Handle beginning Ra\n    if (hasReph) {\n      glyphs[start].shaperInfo.position = POSITIONS.Ra_To_Become_Reph;\n    }\n\n    // For old-style Indic script tags, move the first post-base Halant after\n    // last consonant.\n    //\n    // Reports suggest that in some scripts Uniscribe does this only if there\n    // is *not* a Halant after last consonant already (eg. Kannada), while it\n    // does it unconditionally in other scripts (eg. Malayalam).  We don't\n    // currently know about other scripts, so we single out Malayalam for now.\n    //\n    // Kannada test case:\n    // U+0C9A,U+0CCD,U+0C9A,U+0CCD\n    // With some versions of Lohit Kannada.\n    // https://bugs.freedesktop.org/show_bug.cgi?id=59118\n    //\n    // Malayalam test case:\n    // U+0D38,U+0D4D,U+0D31,U+0D4D,U+0D31,U+0D4D\n    // With lohit-ttf-20121122/Lohit-Malayalam.ttf\n    if (plan.isOldSpec) {\n      let disallowDoubleHalants = plan.unicodeScript !== 'Malayalam';\n      for (let i = base + 1; i < end; i++) {\n        if (glyphs[i].shaperInfo.category === CATEGORIES.H) {\n          let j;\n          for (j = end - 1; j > i; j--) {\n            if (isConsonant(glyphs[j]) || (disallowDoubleHalants && glyphs[j].shaperInfo.category === CATEGORIES.H)) {\n              break;\n            }\n          }\n\n          if (glyphs[j].shaperInfo.category !== CATEGORIES.H && j > i) {\n            // Move Halant to after last consonant.\n            let t = glyphs[i];\n            glyphs.splice(i, 0, ...glyphs.splice(i + 1, j - i));\n            glyphs[j] = t;\n          }\n\n          break;\n        }\n      }\n    }\n\n    // Attach misc marks to previous char to move with them.\n    let lastPos = POSITIONS.Start;\n    for (let i = start; i < end; i++) {\n      let info = glyphs[i].shaperInfo;\n      if (info.category & (JOINER_FLAGS | CATEGORIES.N | CATEGORIES.RS | CATEGORIES.CM | HALANT_OR_COENG_FLAGS & info.category)) {\n        info.position = lastPos;\n        if (info.category === CATEGORIES.H && info.position === POSITIONS.Pre_M) {\n          // Uniscribe doesn't move the Halant with Left Matra.\n          // TEST: U+092B,U+093F,U+094DE\n          // We follow.  This is important for the Sinhala\n          // U+0DDA split matra since it decomposes to U+0DD9,U+0DCA\n          // where U+0DD9 is a left matra and U+0DCA is the virama.\n          // We don't want to move the virama with the left matra.\n          // TEST: U+0D9A,U+0DDA\n          for (let j = i; j > start; j--) {\n            if (glyphs[j - 1].shaperInfo.position !== POSITIONS.Pre_M) {\n              info.position = glyphs[j - 1].shaperInfo.position;\n              break;\n            }\n          }\n        }\n      } else if (info.position !== POSITIONS.SMVD) {\n        lastPos = info.position;\n      }\n    }\n\n    // For post-base consonants let them own anything before them\n    // since the last consonant or matra.\n    let last = base;\n    for (let i = base + 1; i < end; i++) {\n      if (isConsonant(glyphs[i])) {\n        for (let j = last + 1; j < i; j++) {\n          if (glyphs[j].shaperInfo.position < POSITIONS.SMVD) {\n            glyphs[j].shaperInfo.position = glyphs[i].shaperInfo.position;\n          }\n        }\n        last = i;\n      } else if (glyphs[i].shaperInfo.category === CATEGORIES.M) {\n        last = i;\n      }\n    }\n\n    let arr = glyphs.slice(start, end);\n    arr.sort((a, b) => a.shaperInfo.position - b.shaperInfo.position);\n    glyphs.splice(start, arr.length, ...arr);\n\n    // Find base again\n    for (let i = start; i < end; i++) {\n      if (glyphs[i].shaperInfo.position === POSITIONS.Base_C) {\n        base = i;\n        break;\n      }\n    }\n\n    // Setup features now\n\n    // Reph\n    for (let i = start; i < end && glyphs[i].shaperInfo.position === POSITIONS.Ra_To_Become_Reph; i++) {\n      glyphs[i].features.rphf = true;\n    }\n\n    // Pre-base\n    let blwf = !plan.isOldSpec && indicConfig.blwfMode === 'Pre_And_Post';\n    for (let i = start; i < base; i++) {\n      glyphs[i].features.half = true;\n      if (blwf) {\n        glyphs[i].features.blwf = true;\n      }\n    }\n\n    // Post-base\n    for (let i = base + 1; i < end; i++) {\n      glyphs[i].features.abvf = true;\n      glyphs[i].features.pstf = true;\n      glyphs[i].features.blwf = true;\n    }\n\n    if (plan.isOldSpec && plan.unicodeScript === 'Devanagari') {\n      // Old-spec eye-lash Ra needs special handling.  From the\n      // spec:\n      //\n      // \"The feature 'below-base form' is applied to consonants\n      // having below-base forms and following the base consonant.\n      // The exception is vattu, which may appear below half forms\n      // as well as below the base glyph. The feature 'below-base\n      // form' will be applied to all such occurrences of Ra as well.\"\n      //\n      // Test case: U+0924,U+094D,U+0930,U+094d,U+0915\n      // with Sanskrit 2003 font.\n      //\n      // However, note that Ra,Halant,ZWJ is the correct way to\n      // request eyelash form of Ra, so we wouldbn't inhibit it\n      // in that sequence.\n      //\n      // Test case: U+0924,U+094D,U+0930,U+094d,U+200D,U+0915\n      for (let i = start; i + 1 < base; i++) {\n        if (glyphs[i].shaperInfo.category === CATEGORIES.Ra &&\n          glyphs[i + 1].shaperInfo.category === CATEGORIES.H &&\n          (i + 1 === base || glyphs[i + 2].shaperInfo.category === CATEGORIES.ZWJ)\n        ) {\n          glyphs[i].features.blwf = true;\n          glyphs[i + 1].features.blwf = true;\n        }\n      }\n    }\n\n    let prefLen = 2;\n    if (features.pref && base + prefLen < end) {\n      // Find a Halant,Ra sequence and mark it for pre-base reordering processing.\n      for (let i = base + 1; i + prefLen - 1 < end; i++) {\n        let g = [glyphs[i].copy(), glyphs[i + 1].copy()];\n        if (wouldSubstitute(g, 'pref')) {\n          for (let j = 0; j < prefLen; j++) {\n            glyphs[i++].features.pref = true;\n          }\n\n          // Mark the subsequent stuff with 'cfar'.  Used in Khmer.\n          // Read the feature spec.\n          // This allows distinguishing the following cases with MS Khmer fonts:\n          // U+1784,U+17D2,U+179A,U+17D2,U+1782\n          // U+1784,U+17D2,U+1782,U+17D2,U+179A\n          if (features.cfar) {\n            for (; i < end; i++) {\n              glyphs[i].features.cfar = true;\n            }\n          }\n\n          break;\n        }\n      }\n    }\n\n    // Apply ZWJ/ZWNJ effects\n    for (let i = start + 1; i < end; i++) {\n      if (isJoiner(glyphs[i])) {\n        let nonJoiner = glyphs[i].shaperInfo.category === CATEGORIES.ZWNJ;\n        let j = i;\n\n        do {\n          j--;\n\n          // ZWJ/ZWNJ should disable CJCT.  They do that by simply\n          // being there, since we don't skip them for the CJCT\n          // feature (ie. F_MANUAL_ZWJ)\n\n          // A ZWNJ disables HALF.\n          if (nonJoiner) {\n            delete glyphs[j].features.half;\n          }\n        } while (j > start && !isConsonant(glyphs[j]));\n      }\n    }\n  }\n}\n\nfunction finalReordering(font, glyphs, plan) {\n  let indicConfig = plan.indicConfig;\n  let features = font._layoutEngine.engine.GSUBProcessor.features;\n\n  for (let start = 0, end = nextSyllable(glyphs, 0); start < glyphs.length; start = end, end = nextSyllable(glyphs, start)) {\n    // 4. Final reordering:\n    //\n    // After the localized forms and basic shaping forms GSUB features have been\n    // applied (see below), the shaping engine performs some final glyph\n    // reordering before applying all the remaining font features to the entire\n    // cluster.\n\n    let tryPref = !!features.pref;\n\n    // Find base again\n    let base = start;\n    for (; base < end; base++) {\n      if (glyphs[base].shaperInfo.position >= POSITIONS.Base_C) {\n        if (tryPref && base + 1 < end) {\n          for (let i = base + 1; i < end; i++) {\n            if (glyphs[i].features.pref) {\n              if (!(glyphs[i].substituted && glyphs[i].isLigated && !glyphs[i].isMultiplied)) {\n                // Ok, this was a 'pref' candidate but didn't form any.\n                // Base is around here...\n                base = i;\n                while (base < end && isHalantOrCoeng(glyphs[base])) {\n                  base++;\n                }\n                glyphs[base].shaperInfo.position = POSITIONS.BASE_C;\n                tryPref = false;\n              }\n              break;\n            }\n          }\n        }\n\n        // For Malayalam, skip over unformed below- (but NOT post-) forms.\n        if (plan.unicodeScript === 'Malayalam') {\n          for (let i = base + 1; i < end; i++) {\n            while (i < end && isJoiner(glyphs[i])) {\n              i++;\n            }\n\n            if (i === end || !isHalantOrCoeng(glyphs[i])) {\n              break;\n            }\n\n            i++; // Skip halant.\n            while (i < end && isJoiner(glyphs[i])) {\n              i++;\n            }\n\n            if (i < end && isConsonant(glyphs[i]) && glyphs[i].shaperInfo.position === POSITIONS.Below_C) {\n              base = i;\n              glyphs[base].shaperInfo.position = POSITIONS.Base_C;\n            }\n          }\n        }\n\n        if (start < base && glyphs[base].shaperInfo.position > POSITIONS.Base_C) {\n          base--;\n        }\n        break;\n      }\n    }\n\n    if (base === end && start < base && glyphs[base - 1].shaperInfo.category === CATEGORIES.ZWJ) {\n      base--;\n    }\n\n    if (base < end) {\n      while (start < base && glyphs[base].shaperInfo.category & (CATEGORIES.N | HALANT_OR_COENG_FLAGS)) {\n        base--;\n      }\n    }\n\n    // o Reorder matras:\n    //\n    // If a pre-base matra character had been reordered before applying basic\n    // features, the glyph can be moved closer to the main consonant based on\n    // whether half-forms had been formed. Actual position for the matra is\n    // defined as “after last standalone halant glyph, after initial matra\n    // position and before the main consonant”. If ZWJ or ZWNJ follow this\n    // halant, position is moved after it.\n    //\n\n    if (start + 1 < end && start < base) { // Otherwise there can't be any pre-base matra characters.\n      // If we lost track of base, alas, position before last thingy.\n      let newPos = base === end ? base - 2 : base - 1;\n\n      // Malayalam / Tamil do not have \"half\" forms or explicit virama forms.\n      // The glyphs formed by 'half' are Chillus or ligated explicit viramas.\n      // We want to position matra after them.\n      if (plan.unicodeScript !== 'Malayalam' && plan.unicodeScript !== 'Tamil') {\n        while (newPos > start && !(glyphs[newPos].shaperInfo.category & (CATEGORIES.M | HALANT_OR_COENG_FLAGS))) {\n          newPos--;\n        }\n\n        // If we found no Halant we are done.\n        // Otherwise only proceed if the Halant does\n        // not belong to the Matra itself!\n        if (isHalantOrCoeng(glyphs[newPos]) && glyphs[newPos].shaperInfo.position !== POSITIONS.Pre_M) {\n          // If ZWJ or ZWNJ follow this halant, position is moved after it.\n          if (newPos + 1 < end && isJoiner(glyphs[newPos + 1])) {\n            newPos++;\n          }\n        } else {\n          newPos = start; // No move.\n        }\n      }\n\n      if (start < newPos && glyphs[newPos].shaperInfo.position !== POSITIONS.Pre_M) {\n        // Now go see if there's actually any matras...\n        for (let i = newPos; i > start; i--) {\n          if (glyphs[i - 1].shaperInfo.position === POSITIONS.Pre_M) {\n            let oldPos = i - 1;\n            if (oldPos < base && base <= newPos) { // Shouldn't actually happen.\n              base--;\n            }\n\n            let tmp = glyphs[oldPos];\n            glyphs.splice(oldPos, 0, ...glyphs.splice(oldPos + 1, newPos - oldPos));\n            glyphs[newPos] = tmp;\n\n            newPos--;\n          }\n        }\n      }\n    }\n\n    // o Reorder reph:\n    //\n    // Reph’s original position is always at the beginning of the syllable,\n    // (i.e. it is not reordered at the character reordering stage). However,\n    // it will be reordered according to the basic-forms shaping results.\n    // Possible positions for reph, depending on the script, are; after main,\n    // before post-base consonant forms, and after post-base consonant forms.\n\n    // Two cases:\n    //\n    // - If repha is encoded as a sequence of characters (Ra,H or Ra,H,ZWJ), then\n    //   we should only move it if the sequence ligated to the repha form.\n    //\n    // - If repha is encoded separately and in the logical position, we should only\n    //   move it if it did NOT ligate.  If it ligated, it's probably the font trying\n    //   to make it work without the reordering.\n    if (start + 1 < end &&\n      glyphs[start].shaperInfo.position === POSITIONS.Ra_To_Become_Reph &&\n      (glyphs[start].shaperInfo.category === CATEGORIES.Repha) !== (glyphs[start].isLigated && !glyphs[start].isMultiplied)\n    ) {\n      let newRephPos;\n      let rephPos = indicConfig.rephPos;\n      let found = false;\n\n      // 1. If reph should be positioned after post-base consonant forms,\n      //    proceed to step 5.\n      if (rephPos !== POSITIONS.After_Post) {\n        //  2. If the reph repositioning class is not after post-base: target\n        //     position is after the first explicit halant glyph between the\n        //     first post-reph consonant and last main consonant. If ZWJ or ZWNJ\n        //     are following this halant, position is moved after it. If such\n        //     position is found, this is the target position. Otherwise,\n        //     proceed to the next step.\n        //\n        //     Note: in old-implementation fonts, where classifications were\n        //     fixed in shaping engine, there was no case where reph position\n        //     will be found on this step.\n        newRephPos = start + 1;\n        while (newRephPos < base && !isHalantOrCoeng(glyphs[newRephPos])) {\n          newRephPos++;\n        }\n\n        if (newRephPos < base && isHalantOrCoeng(glyphs[newRephPos])) {\n          // ->If ZWJ or ZWNJ are following this halant, position is moved after it.\n          if (newRephPos + 1 < base && isJoiner(glyphs[newRephPos + 1])) {\n            newRephPos++;\n          }\n\n          found = true;\n        }\n\n        // 3. If reph should be repositioned after the main consonant: find the\n        //    first consonant not ligated with main, or find the first\n        //    consonant that is not a potential pre-base reordering Ra.\n        if (!found && rephPos === POSITIONS.After_Main) {\n          newRephPos = base;\n          while (newRephPos + 1 < end && glyphs[newRephPos + 1].shaperInfo.position <= POSITIONS.After_Main) {\n            newRephPos++;\n          }\n\n          found = newRephPos < end;\n        }\n\n        // 4. If reph should be positioned before post-base consonant, find\n        //    first post-base classified consonant not ligated with main. If no\n        //    consonant is found, the target position should be before the\n        //    first matra, syllable modifier sign or vedic sign.\n        //\n        // This is our take on what step 4 is trying to say (and failing, BADLY).\n        if (!found && rephPos === POSITIONS.After_Sub) {\n          newRephPos = base;\n          while (newRephPos + 1 < end && !(glyphs[newRephPos + 1].shaperInfo.position & (POSITIONS.Post_C | POSITIONS.After_Post | POSITIONS.SMVD))) {\n            newRephPos++;\n          }\n\n          found = newRephPos < end;\n        }\n      }\n\n      //  5. If no consonant is found in steps 3 or 4, move reph to a position\n      //     immediately before the first post-base matra, syllable modifier\n      //     sign or vedic sign that has a reordering class after the intended\n      //     reph position. For example, if the reordering position for reph\n      //     is post-main, it will skip above-base matras that also have a\n      //     post-main position.\n      if (!found) {\n        // Copied from step 2.\n        newRephPos = start + 1;\n        while (newRephPos < base && !isHalantOrCoeng(glyphs[newRephPos])) {\n          newRephPos++;\n        }\n\n        if (newRephPos < base && isHalantOrCoeng(glyphs[newRephPos])) {\n          // ->If ZWJ or ZWNJ are following this halant, position is moved after it.\n          if (newRephPos + 1 < base && isJoiner(glyphs[newRephPos + 1])) {\n            newRephPos++;\n          }\n\n          found = true;\n        }\n      }\n\n      // 6. Otherwise, reorder reph to the end of the syllable.\n      if (!found) {\n        newRephPos = end - 1;\n        while (newRephPos > start && glyphs[newRephPos].shaperInfo.position === POSITIONS.SMVD) {\n          newRephPos--;\n        }\n\n        // If the Reph is to be ending up after a Matra,Halant sequence,\n        // position it before that Halant so it can interact with the Matra.\n        // However, if it's a plain Consonant,Halant we shouldn't do that.\n        // Uniscribe doesn't do this.\n        // TEST: U+0930,U+094D,U+0915,U+094B,U+094D\n        if (isHalantOrCoeng(glyphs[newRephPos])) {\n          for (let i = base + 1; i < newRephPos; i++) {\n            if (glyphs[i].shaperInfo.category === CATEGORIES.M) {\n              newRephPos--;\n            }\n          }\n        }\n      }\n\n      let reph = glyphs[start];\n      glyphs.splice(start, 0, ...glyphs.splice(start + 1, newRephPos - start));\n      glyphs[newRephPos] = reph;\n\n      if (start < base && base <= newRephPos) {\n        base--;\n      }\n    }\n\n    // o Reorder pre-base reordering consonants:\n    //\n    // If a pre-base reordering consonant is found, reorder it according to\n    // the following rules:\n    if (tryPref && base + 1 < end) {\n      for (let i = base + 1; i < end; i++) {\n        if (glyphs[i].features.pref) {\n           // 1. Only reorder a glyph produced by substitution during application\n           //    of the <pref> feature. (Note that a font may shape a Ra consonant with\n           //    the feature generally but block it in certain contexts.)\n\n          // Note: We just check that something got substituted.  We don't check that\n          // the <pref> feature actually did it...\n          //\n          // Reorder pref only if it ligated.\n          if (glyphs[i].isLigated && !glyphs[i].isMultiplied) {\n            // 2. Try to find a target position the same way as for pre-base matra.\n            //    If it is found, reorder pre-base consonant glyph.\n            //\n            // 3. If position is not found, reorder immediately before main\n            //    consonant.\n            let newPos = base;\n\n            // Malayalam / Tamil do not have \"half\" forms or explicit virama forms.\n            // The glyphs formed by 'half' are Chillus or ligated explicit viramas.\n            // We want to position matra after them.\n            if (plan.unicodeScript !== 'Malayalam' && plan.unicodeScript !== 'Tamil') {\n              while (newPos > start && !(glyphs[newPos - 1].shaperInfo.category & (CATEGORIES.M | HALANT_OR_COENG_FLAGS))) {\n                newPos--;\n              }\n\n              // In Khmer coeng model, a H,Ra can go *after* matras.  If it goes after a\n              // split matra, it should be reordered to *before* the left part of such matra.\n              if (newPos > start && glyphs[newPos - 1].shaperInfo.category === CATEGORIES.M) {\n                let oldPos = i;\n                for (let j = base + 1; j < oldPos; j++) {\n                  if (glyphs[j].shaperInfo.category === CATEGORIES.M) {\n                    newPos--;\n                    break;\n                  }\n                }\n              }\n            }\n\n            if (newPos > start && isHalantOrCoeng(glyphs[newPos - 1])) {\n              // -> If ZWJ or ZWNJ follow this halant, position is moved after it.\n              if (newPos < end && isJoiner(glyphs[newPos])) {\n                newPos++;\n              }\n            }\n\n            let oldPos = i;\n            let tmp = glyphs[oldPos];\n            glyphs.splice(newPos + 1, 0, ...glyphs.splice(newPos, oldPos - newPos));\n            glyphs[newPos] = tmp;\n\n            if (newPos <= base && base < oldPos) {\n              base++;\n            }\n          }\n\n          break;\n        }\n      }\n    }\n\n    // Apply 'init' to the Left Matra if it's a word start.\n    if (glyphs[start].shaperInfo.position === POSITIONS.Pre_M && (!start || !/Cf|Mn/.test(getCategory(glyphs[start - 1].codePoints[0])))) {\n      glyphs[start].features.init = true;\n    }\n  }\n}\n\nfunction nextSyllable(glyphs, start) {\n  if (start >= glyphs.length) return start;\n  let syllable = glyphs[start].shaperInfo.syllable;\n  while (++start < glyphs.length && glyphs[start].shaperInfo.syllable === syllable);\n  return start;\n}\n","import DefaultShaper from './DefaultShaper';\nimport StateMachine from 'dfa';\nimport UnicodeTrie from 'unicode-trie';\nimport GlyphInfo from '../GlyphInfo';\nimport useData from './use.json';\nimport { decodeBase64 } from '../../utils';\n\nconst {categories, decompositions} = useData;\nconst trie = new UnicodeTrie(decodeBase64(require('fs').readFileSync(__dirname + '/use.trie', 'base64')));\nconst stateMachine = new StateMachine(useData);\n\n/**\n * This shaper is an implementation of the Universal Shaping Engine, which\n * uses Unicode data to shape a number of scripts without a dedicated shaping engine.\n * See https://www.microsoft.com/typography/OpenTypeDev/USE/intro.htm.\n */\nexport default class UniversalShaper extends DefaultShaper {\n  static zeroMarkWidths = 'BEFORE_GPOS';\n  static planFeatures(plan) {\n    plan.addStage(setupSyllables);\n\n    // Default glyph pre-processing group\n    plan.addStage(['locl', 'ccmp', 'nukt', 'akhn']);\n\n    // Reordering group\n    plan.addStage(clearSubstitutionFlags);\n    plan.addStage(['rphf'], false);\n    plan.addStage(recordRphf);\n    plan.addStage(clearSubstitutionFlags);\n    plan.addStage(['pref']);\n    plan.addStage(recordPref);\n\n    // Orthographic unit shaping group\n    plan.addStage(['rkrf', 'abvf', 'blwf', 'half', 'pstf', 'vatu', 'cjct']);\n    plan.addStage(reorder);\n\n    // Topographical features\n    // Scripts that need this are handled by the Arabic shaper, not implemented here for now.\n    // plan.addStage(['isol', 'init', 'medi', 'fina', 'med2', 'fin2', 'fin3'], false);\n\n    // Standard topographic presentation and positional feature application\n    plan.addStage(['abvs', 'blws', 'pres', 'psts', 'dist', 'abvm', 'blwm']);\n  }\n\n  static assignFeatures(plan, glyphs) {\n    // Decompose split vowels\n    // TODO: do this in a more general unicode normalizer\n    for (let i = glyphs.length - 1; i >= 0; i--) {\n      let codepoint = glyphs[i].codePoints[0];\n      if (decompositions[codepoint]) {\n        let decomposed = decompositions[codepoint].map(c => {\n          let g = plan.font.glyphForCodePoint(c);\n          return new GlyphInfo(plan.font, g.id, [c], glyphs[i].features);\n        });\n\n        glyphs.splice(i, 1, ...decomposed);\n      }\n    }\n  }\n}\n\nfunction useCategory(glyph) {\n  return trie.get(glyph.codePoints[0]);\n}\n\nclass USEInfo {\n  constructor(category, syllableType, syllable) {\n    this.category = category;\n    this.syllableType = syllableType;\n    this.syllable = syllable;\n  }\n}\n\nfunction setupSyllables(font, glyphs) {\n  let syllable = 0;\n  for (let [start, end, tags] of stateMachine.match(glyphs.map(useCategory))) {\n    ++syllable;\n\n    // Create shaper info\n    for (let i = start; i <= end; i++) {\n      glyphs[i].shaperInfo = new USEInfo(categories[useCategory(glyphs[i])], tags[0], syllable);\n    }\n\n    // Assign rphf feature\n    let limit = glyphs[start].shaperInfo.category === 'R' ? 1 : Math.min(3, end - start);\n    for (let i = start; i < start + limit; i++) {\n      glyphs[i].features.rphf = true;\n    }\n  }\n}\n\nfunction clearSubstitutionFlags(font, glyphs) {\n  for (let glyph of glyphs) {\n    glyph.substituted = false;\n  }\n}\n\nfunction recordRphf(font, glyphs) {\n  for (let glyph of glyphs) {\n    if (glyph.substituted && glyph.features.rphf) {\n      // Mark a substituted repha.\n      glyph.shaperInfo.category = 'R';\n    }\n  }\n}\n\nfunction recordPref(font, glyphs) {\n  for (let glyph of glyphs) {\n    if (glyph.substituted) {\n      // Mark a substituted pref as VPre, as they behave the same way.\n      glyph.shaperInfo.category = 'VPre';\n    }\n  }\n}\n\nfunction reorder(font, glyphs) {\n  let dottedCircle = font.glyphForCodePoint(0x25cc).id;\n\n  for (let start = 0, end = nextSyllable(glyphs, 0); start < glyphs.length; start = end, end = nextSyllable(glyphs, start)) {\n    let i, j;\n    let info = glyphs[start].shaperInfo;\n    let type = info.syllableType;\n\n    // Only a few syllable types need reordering.\n    if (type !== 'virama_terminated_cluster' && type !== 'standard_cluster' && type !== 'broken_cluster') {\n      continue;\n    }\n\n    // Insert a dotted circle glyph in broken clusters.\n    if (type === 'broken_cluster' && dottedCircle) {\n      let g = new GlyphInfo(font, dottedCircle, [0x25cc]);\n      g.shaperInfo = info;\n\n      // Insert after possible Repha.\n      for (i = start; i < end && glyphs[i].shaperInfo.category === 'R'; i++);\n      glyphs.splice(++i, 0, g);\n      end++;\n    }\n\n    // Move things forward.\n    if (info.category === 'R' && end - start > 1) {\n      // Got a repha. Reorder it to after first base, before first halant.\n      for (i = start + 1; i < end; i++) {\n        info = glyphs[i].shaperInfo;\n        if (isBase(info) || isHalant(glyphs[i])) {\n          // If we hit a halant, move before it; otherwise it's a base: move to it's\n          // place, and shift things in between backward.\n          if (isHalant(glyphs[i])) {\n            i--;\n          }\n\n          glyphs.splice(start, 0, ...glyphs.splice(start + 1, i - start), glyphs[i]);\n          break;\n        }\n      }\n    }\n\n    // Move things back.\n    for (i = start, j = end; i < end; i++) {\n      info = glyphs[i].shaperInfo;\n      if (isBase(info) || isHalant(glyphs[i])) {\n        // If we hit a halant, move after it; otherwise it's a base: move to it's\n        // place, and shift things in between backward.\n        j = isHalant(glyphs[i]) ? i + 1 : i;\n      } else if ((info.category === 'VPre' || info.category === 'VMPre') && j < i) {\n        glyphs.splice(j, 1, glyphs[i], ...glyphs.splice(j, i - j));\n      }\n    }\n  }\n}\n\nfunction nextSyllable(glyphs, start) {\n  if (start >= glyphs.length) return start;\n  let syllable = glyphs[start].shaperInfo.syllable;\n  while (++start < glyphs.length && glyphs[start].shaperInfo.syllable === syllable);\n  return start;\n}\n\nfunction isHalant(glyph) {\n  return glyph.shaperInfo.category === 'H' && !glyph.isLigated;\n}\n\nfunction isBase(info) {\n  return info.category === 'B' || info.category === 'GB';\n}\n","import DefaultShaper from './DefaultShaper';\nimport ArabicShaper from './ArabicShaper';\nimport HangulShaper from './HangulShaper';\nimport IndicShaper from './IndicShaper';\nimport UniversalShaper from './UniversalShaper';\n\nconst SHAPERS = {\n  arab: ArabicShaper,    // Arabic\n  mong: ArabicShaper,    // Mongolian\n  syrc: ArabicShaper,    // Syriac\n  'nko ': ArabicShaper,  // N'Ko\n  phag: ArabicShaper,    // Phags Pa\n  mand: ArabicShaper,    // Mandaic\n  mani: ArabicShaper,    // Manichaean\n  phlp: ArabicShaper,    // Psalter Pahlavi\n\n  hang: HangulShaper,    // Hangul\n\n  bng2: IndicShaper,     // Bengali\n  beng: IndicShaper,     // Bengali\n  dev2: IndicShaper,     // Devanagari\n  deva: IndicShaper,     // Devanagari\n  gjr2: IndicShaper,     // Gujarati\n  gujr: IndicShaper,     // Gujarati\n  guru: IndicShaper,     // Gurmukhi\n  gur2: IndicShaper,     // Gurmukhi\n  knda: IndicShaper,     // Kannada\n  knd2: IndicShaper,     // Kannada\n  mlm2: IndicShaper,     // Malayalam\n  mlym: IndicShaper,     // Malayalam\n  ory2: IndicShaper,     // Oriya\n  orya: IndicShaper,     // Oriya\n  taml: IndicShaper,     // Tamil\n  tml2: IndicShaper,     // Tamil\n  telu: IndicShaper,     // Telugu\n  tel2: IndicShaper,     // Telugu\n  khmr: IndicShaper,     // Khmer\n\n  bali: UniversalShaper, // Balinese\n  batk: UniversalShaper, // Batak\n  brah: UniversalShaper, // Brahmi\n  bugi: UniversalShaper, // Buginese\n  buhd: UniversalShaper, // Buhid\n  cakm: UniversalShaper, // Chakma\n  cham: UniversalShaper, // Cham\n  dupl: UniversalShaper, // Duployan\n  egyp: UniversalShaper, // Egyptian Hieroglyphs\n  gran: UniversalShaper, // Grantha\n  hano: UniversalShaper, // Hanunoo\n  java: UniversalShaper, // Javanese\n  kthi: UniversalShaper, // Kaithi\n  kali: UniversalShaper, // Kayah Li\n  khar: UniversalShaper, // Kharoshthi\n  khoj: UniversalShaper, // Khojki\n  sind: UniversalShaper, // Khudawadi\n  lepc: UniversalShaper, // Lepcha\n  limb: UniversalShaper, // Limbu\n  mahj: UniversalShaper, // Mahajani\n  // mand: UniversalShaper, // Mandaic\n  // mani: UniversalShaper, // Manichaean\n  mtei: UniversalShaper, // Meitei Mayek\n  modi: UniversalShaper, // Modi\n  // mong: UniversalShaper, // Mongolian\n  // 'nko ': UniversalShaper, // N’Ko\n  hmng: UniversalShaper, // Pahawh Hmong\n  // phag: UniversalShaper, // Phags-pa\n  // phlp: UniversalShaper, // Psalter Pahlavi\n  rjng: UniversalShaper, // Rejang\n  saur: UniversalShaper, // Saurashtra\n  shrd: UniversalShaper, // Sharada\n  sidd: UniversalShaper, // Siddham\n  sinh: IndicShaper, // Sinhala\n  sund: UniversalShaper, // Sundanese\n  sylo: UniversalShaper, // Syloti Nagri\n  tglg: UniversalShaper, // Tagalog\n  tagb: UniversalShaper, // Tagbanwa\n  tale: UniversalShaper, // Tai Le\n  lana: UniversalShaper, // Tai Tham\n  tavt: UniversalShaper, // Tai Viet\n  takr: UniversalShaper, // Takri\n  tibt: UniversalShaper, // Tibetan\n  tfng: UniversalShaper, // Tifinagh\n  tirh: UniversalShaper, // Tirhuta\n\n  latn: DefaultShaper,   // Latin\n  DFLT: DefaultShaper    // Default\n};\n\nexport function choose(script) {\n  if (!Array.isArray(script)) {\n    script = [script];\n  }\n\n  for (let s of script) {\n    let shaper = SHAPERS[s];\n    if (shaper) {\n      return shaper;\n    }\n  }\n\n  return DefaultShaper;\n}\n","import OTProcessor from './OTProcessor';\nimport GlyphInfo from './GlyphInfo';\n\nexport default class GSUBProcessor extends OTProcessor {\n  applyLookup(lookupType, table) {\n    switch (lookupType) {\n      case 1: { // Single Substitution\n        let index = this.coverageIndex(table.coverage);\n        if (index === -1) {\n          return false;\n        }\n\n        let glyph = this.glyphIterator.cur;\n        switch (table.version) {\n          case 1:\n            glyph.id = (glyph.id + table.deltaGlyphID) & 0xffff;\n            break;\n\n          case 2:\n            glyph.id = table.substitute.get(index);\n            break;\n        }\n\n        return true;\n      }\n\n      case 2: { // Multiple Substitution\n        let index = this.coverageIndex(table.coverage);\n        if (index !== -1) {\n          let sequence = table.sequences.get(index);\n\n          if (sequence.length === 0) {\n            // If the sequence length is zero, delete the glyph.\n            // The OpenType spec disallows this, but seems like Harfbuzz and Uniscribe allow it.\n            this.glyphs.splice(this.glyphIterator.index, 1);\n            return true;\n          }\n\n          this.glyphIterator.cur.id = sequence[0];\n          this.glyphIterator.cur.ligatureComponent = 0;\n\n          let features = this.glyphIterator.cur.features;\n          let curGlyph = this.glyphIterator.cur;\n          let replacement = sequence.slice(1).map((gid, i) => {\n            let glyph = new GlyphInfo(this.font, gid, undefined, features);\n            glyph.shaperInfo = curGlyph.shaperInfo;\n            glyph.isLigated = curGlyph.isLigated;\n            glyph.ligatureComponent = i + 1;\n            glyph.substituted = true;\n            glyph.isMultiplied = true;\n            return glyph;\n          });\n\n          this.glyphs.splice(this.glyphIterator.index + 1, 0, ...replacement);\n          return true;\n        }\n\n        return false;\n      }\n\n      case 3: { // Alternate Substitution\n        let index = this.coverageIndex(table.coverage);\n        if (index !== -1) {\n          let USER_INDEX = 0; // TODO\n          this.glyphIterator.cur.id = table.alternateSet.get(index)[USER_INDEX];\n          return true;\n        }\n\n        return false;\n      }\n\n      case 4: { // Ligature Substitution\n        let index = this.coverageIndex(table.coverage);\n        if (index === -1) {\n          return false;\n        }\n\n        for (let ligature of table.ligatureSets.get(index)) {\n          let matched = this.sequenceMatchIndices(1, ligature.components);\n          if (!matched) {\n            continue;\n          }\n\n          let curGlyph = this.glyphIterator.cur;\n\n          // Concatenate all of the characters the new ligature will represent\n          let characters = curGlyph.codePoints.slice();\n          for (let index of matched) {\n            characters.push(...this.glyphs[index].codePoints);\n          }\n\n          // Create the replacement ligature glyph\n          let ligatureGlyph = new GlyphInfo(this.font, ligature.glyph, characters, curGlyph.features);\n          ligatureGlyph.shaperInfo = curGlyph.shaperInfo;\n          ligatureGlyph.isLigated = true;\n          ligatureGlyph.substituted = true;\n\n          // From Harfbuzz:\n          // - If it *is* a mark ligature, we don't allocate a new ligature id, and leave\n          //   the ligature to keep its old ligature id.  This will allow it to attach to\n          //   a base ligature in GPOS.  Eg. if the sequence is: LAM,LAM,SHADDA,FATHA,HEH,\n          //   and LAM,LAM,HEH for a ligature, they will leave SHADDA and FATHA with a\n          //   ligature id and component value of 2.  Then if SHADDA,FATHA form a ligature\n          //   later, we don't want them to lose their ligature id/component, otherwise\n          //   GPOS will fail to correctly position the mark ligature on top of the\n          //   LAM,LAM,HEH ligature. See https://bugzilla.gnome.org/show_bug.cgi?id=676343\n          //\n          // - If a ligature is formed of components that some of which are also ligatures\n          //   themselves, and those ligature components had marks attached to *their*\n          //   components, we have to attach the marks to the new ligature component\n          //   positions!  Now *that*'s tricky!  And these marks may be following the\n          //   last component of the whole sequence, so we should loop forward looking\n          //   for them and update them.\n          //\n          //   Eg. the sequence is LAM,LAM,SHADDA,FATHA,HEH, and the font first forms a\n          //   'calt' ligature of LAM,HEH, leaving the SHADDA and FATHA with a ligature\n          //   id and component == 1.  Now, during 'liga', the LAM and the LAM-HEH ligature\n          //   form a LAM-LAM-HEH ligature.  We need to reassign the SHADDA and FATHA to\n          //   the new ligature with a component value of 2.\n          //\n          //   This in fact happened to a font...  See https://bugzilla.gnome.org/show_bug.cgi?id=437633\n          let isMarkLigature = curGlyph.isMark;\n          for (let i = 0; i < matched.length && isMarkLigature; i++) {\n            isMarkLigature = this.glyphs[matched[i]].isMark;\n          }\n\n          ligatureGlyph.ligatureID = isMarkLigature ? null : this.ligatureID++;\n\n          let lastLigID = curGlyph.ligatureID;\n          let lastNumComps = curGlyph.codePoints.length;\n          let curComps = lastNumComps;\n          let idx = this.glyphIterator.index + 1;\n\n          // Set ligatureID and ligatureComponent on glyphs that were skipped in the matched sequence.\n          // This allows GPOS to attach marks to the correct ligature components.\n          for (let matchIndex of matched) {\n            // Don't assign new ligature components for mark ligatures (see above)\n            if (isMarkLigature) {\n              idx = matchIndex;\n            } else {\n              while (idx < matchIndex) {\n                var ligatureComponent = curComps - lastNumComps + Math.min(this.glyphs[idx].ligatureComponent || 1, lastNumComps);\n                this.glyphs[idx].ligatureID = ligatureGlyph.ligatureID;\n                this.glyphs[idx].ligatureComponent = ligatureComponent;\n                idx++;\n              }\n            }\n\n            lastLigID = this.glyphs[idx].ligatureID;\n            lastNumComps = this.glyphs[idx].codePoints.length;\n            curComps += lastNumComps;\n            idx++; // skip base glyph\n          }\n\n          // Adjust ligature components for any marks following\n          if (lastLigID && !isMarkLigature) {\n            for (let i = idx; i < this.glyphs.length; i++) {\n              if (this.glyphs[i].ligatureID === lastLigID) {\n                var ligatureComponent = curComps - lastNumComps + Math.min(this.glyphs[i].ligatureComponent || 1, lastNumComps);\n                this.glyphs[i].ligatureComponent = ligatureComponent;\n              } else {\n                break;\n              }\n            }\n          }\n\n          // Delete the matched glyphs, and replace the current glyph with the ligature glyph\n          for (let i = matched.length - 1; i >= 0; i--) {\n            this.glyphs.splice(matched[i], 1);\n          }\n\n          this.glyphs[this.glyphIterator.index] = ligatureGlyph;\n          return true;\n        }\n\n        return false;\n      }\n\n      case 5: // Contextual Substitution\n        return this.applyContext(table);\n\n      case 6: // Chaining Contextual Substitution\n        return this.applyChainingContext(table);\n\n      case 7: // Extension Substitution\n        return this.applyLookup(table.lookupType, table.extension);\n\n      default:\n        throw new Error(`GSUB lookupType ${lookupType} is not supported`);\n    }\n  }\n}\n","import OTProcessor from './OTProcessor';\n\nexport default class GPOSProcessor extends OTProcessor {\n  applyPositionValue(sequenceIndex, value) {\n    let position = this.positions[this.glyphIterator.peekIndex(sequenceIndex)];\n    if (value.xAdvance != null) {\n      position.xAdvance += value.xAdvance;\n    }\n\n    if (value.yAdvance != null) {\n      position.yAdvance += value.yAdvance;\n    }\n\n    if (value.xPlacement != null) {\n      position.xOffset += value.xPlacement;\n    }\n\n    if (value.yPlacement != null) {\n      position.yOffset += value.yPlacement;\n    }\n\n    // Adjustments for font variations\n    let variationProcessor = this.font._variationProcessor;\n    let variationStore = this.font.GDEF && this.font.GDEF.itemVariationStore;\n    if (variationProcessor && variationStore) {\n      if (value.xPlaDevice) {\n        position.xOffset += variationProcessor.getDelta(variationStore, value.xPlaDevice.a, value.xPlaDevice.b);\n      }\n\n      if (value.yPlaDevice) {\n        position.yOffset += variationProcessor.getDelta(variationStore, value.yPlaDevice.a, value.yPlaDevice.b);\n      }\n\n      if (value.xAdvDevice) {\n        position.xAdvance += variationProcessor.getDelta(variationStore, value.xAdvDevice.a, value.xAdvDevice.b);\n      }\n\n      if (value.yAdvDevice) {\n        position.yAdvance += variationProcessor.getDelta(variationStore, value.yAdvDevice.a, value.yAdvDevice.b);\n      }\n    }\n\n    // TODO: device tables\n  }\n\n  applyLookup(lookupType, table) {\n    switch (lookupType) {\n      case 1: { // Single positioning value\n        let index = this.coverageIndex(table.coverage);\n        if (index === -1) {\n          return false;\n        }\n\n        switch (table.version) {\n          case 1:\n            this.applyPositionValue(0, table.value);\n            break;\n\n          case 2:\n            this.applyPositionValue(0, table.values.get(index));\n            break;\n        }\n\n        return true;\n      }\n\n      case 2: { // Pair Adjustment Positioning\n        let nextGlyph = this.glyphIterator.peek();\n        if (!nextGlyph) {\n          return false;\n        }\n\n        let index = this.coverageIndex(table.coverage);\n        if (index === -1) {\n          return false;\n        }\n\n        switch (table.version) {\n          case 1: // Adjustments for glyph pairs\n            let set = table.pairSets.get(index);\n\n            for (let pair of set) {\n              if (pair.secondGlyph === nextGlyph.id) {\n                this.applyPositionValue(0, pair.value1);\n                this.applyPositionValue(1, pair.value2);\n                return true;\n              }\n            }\n\n            return false;\n\n          case 2: // Class pair adjustment\n            let class1 = this.getClassID(this.glyphIterator.cur.id, table.classDef1);\n            let class2 = this.getClassID(nextGlyph.id, table.classDef2);\n            if (class1 === -1 || class2 === -1) {\n              return false;\n            }\n\n            var pair = table.classRecords.get(class1).get(class2);\n            this.applyPositionValue(0, pair.value1);\n            this.applyPositionValue(1, pair.value2);\n            return true;\n        }\n      }\n\n      case 3: { // Cursive Attachment Positioning\n        let nextIndex = this.glyphIterator.peekIndex();\n        let nextGlyph = this.glyphs[nextIndex];\n        if (!nextGlyph) {\n          return false;\n        }\n\n        let curRecord = table.entryExitRecords[this.coverageIndex(table.coverage)];\n        if (!curRecord || !curRecord.exitAnchor) {\n          return false;\n        }\n\n        let nextRecord = table.entryExitRecords[this.coverageIndex(table.coverage, nextGlyph.id)];\n        if (!nextRecord || !nextRecord.entryAnchor) {\n          return false;\n        }\n\n        let entry = this.getAnchor(nextRecord.entryAnchor);\n        let exit = this.getAnchor(curRecord.exitAnchor);\n\n        let cur = this.positions[this.glyphIterator.index];\n        let next = this.positions[nextIndex];\n        let d;\n\n        switch (this.direction) {\n          case 'ltr':\n            cur.xAdvance = exit.x + cur.xOffset;\n\n            d = entry.x + next.xOffset;\n            next.xAdvance -= d;\n            next.xOffset -= d;\n            break;\n\n          case 'rtl':\n            d = exit.x + cur.xOffset;\n            cur.xAdvance -= d;\n            cur.xOffset -= d;\n            next.xAdvance = entry.x + next.xOffset;\n            break;\n        }\n\n        if (this.glyphIterator.flags.rightToLeft) {\n          this.glyphIterator.cur.cursiveAttachment = nextIndex;\n          cur.yOffset = entry.y - exit.y;\n        } else {\n          nextGlyph.cursiveAttachment = this.glyphIterator.index;\n          cur.yOffset = exit.y - entry.y;\n        }\n\n        return true;\n      }\n\n      case 4: { // Mark to base positioning\n        let markIndex = this.coverageIndex(table.markCoverage);\n        if (markIndex === -1) {\n          return false;\n        }\n\n        // search backward for a base glyph\n        let baseGlyphIndex = this.glyphIterator.index;\n        while (--baseGlyphIndex >= 0 && (this.glyphs[baseGlyphIndex].isMark || this.glyphs[baseGlyphIndex].ligatureComponent > 0));\n\n        if (baseGlyphIndex < 0) {\n          return false;\n        }\n\n        let baseIndex = this.coverageIndex(table.baseCoverage, this.glyphs[baseGlyphIndex].id);\n        if (baseIndex === -1) {\n          return false;\n        }\n\n        let markRecord = table.markArray[markIndex];\n        let baseAnchor = table.baseArray[baseIndex][markRecord.class];\n        this.applyAnchor(markRecord, baseAnchor, baseGlyphIndex);\n        return true;\n      }\n\n      case 5: { // Mark to ligature positioning\n        let markIndex = this.coverageIndex(table.markCoverage);\n        if (markIndex === -1) {\n          return false;\n        }\n\n        // search backward for a base glyph\n        let baseGlyphIndex = this.glyphIterator.index;\n        while (--baseGlyphIndex >= 0 && this.glyphs[baseGlyphIndex].isMark);\n\n        if (baseGlyphIndex < 0) {\n          return false;\n        }\n\n        let ligIndex = this.coverageIndex(table.ligatureCoverage, this.glyphs[baseGlyphIndex].id);\n        if (ligIndex === -1) {\n          return false;\n        }\n\n        let ligAttach = table.ligatureArray[ligIndex];\n        let markGlyph = this.glyphIterator.cur;\n        let ligGlyph = this.glyphs[baseGlyphIndex];\n        let compIndex = ligGlyph.ligatureID && ligGlyph.ligatureID === markGlyph.ligatureID && (markGlyph.ligatureComponent > 0)\n          ? Math.min(markGlyph.ligatureComponent, ligGlyph.codePoints.length) - 1\n          : ligGlyph.codePoints.length - 1;\n\n        let markRecord = table.markArray[markIndex];\n        let baseAnchor = ligAttach[compIndex][markRecord.class];\n        this.applyAnchor(markRecord, baseAnchor, baseGlyphIndex);\n        return true;\n      }\n\n      case 6: { // Mark to mark positioning\n        let mark1Index = this.coverageIndex(table.mark1Coverage);\n        if (mark1Index === -1) {\n          return false;\n        }\n\n        // get the previous mark to attach to\n        let prevIndex = this.glyphIterator.peekIndex(-1);\n        let prev = this.glyphs[prevIndex];\n        if (!prev || !prev.isMark) {\n          return false;\n        }\n\n        let cur = this.glyphIterator.cur;\n\n        // The following logic was borrowed from Harfbuzz\n        let good = false;\n        if (cur.ligatureID === prev.ligatureID) {\n          if (!cur.ligatureID) { // Marks belonging to the same base\n            good = true;\n          } else if (cur.ligatureComponent === prev.ligatureComponent) { // Marks belonging to the same ligature component\n            good = true;\n          }\n        } else {\n          // If ligature ids don't match, it may be the case that one of the marks\n          // itself is a ligature, in which case match.\n          if ((cur.ligatureID && !cur.ligatureComponent) || (prev.ligatureID && !prev.ligatureComponent)) {\n            good = true;\n          }\n        }\n\n        if (!good) {\n          return false;\n        }\n\n        let mark2Index = this.coverageIndex(table.mark2Coverage, prev.id);\n        if (mark2Index === -1) {\n          return false;\n        }\n\n        let markRecord = table.mark1Array[mark1Index];\n        let baseAnchor = table.mark2Array[mark2Index][markRecord.class];\n        this.applyAnchor(markRecord, baseAnchor, prevIndex);\n        return true;\n      }\n\n      case 7: // Contextual positioning\n        return this.applyContext(table);\n\n      case 8: // Chaining contextual positioning\n        return this.applyChainingContext(table);\n\n      case 9: // Extension positioning\n        return this.applyLookup(table.lookupType, table.extension);\n\n      default:\n        throw new Error(`Unsupported GPOS table: ${lookupType}`);\n    }\n  }\n\n  applyAnchor(markRecord, baseAnchor, baseGlyphIndex) {\n    let baseCoords = this.getAnchor(baseAnchor);\n    let markCoords = this.getAnchor(markRecord.markAnchor);\n\n    let basePos = this.positions[baseGlyphIndex];\n    let markPos = this.positions[this.glyphIterator.index];\n\n    markPos.xOffset = baseCoords.x - markCoords.x;\n    markPos.yOffset = baseCoords.y - markCoords.y;\n    this.glyphIterator.cur.markAttachment = baseGlyphIndex;\n  }\n\n  getAnchor(anchor) {\n    // TODO: contour point, device tables\n    let x = anchor.xCoordinate;\n    let y = anchor.yCoordinate;\n\n    // Adjustments for font variations\n    let variationProcessor = this.font._variationProcessor;\n    let variationStore = this.font.GDEF && this.font.GDEF.itemVariationStore;\n    if (variationProcessor && variationStore) {\n      if (anchor.xDeviceTable) {\n        x += variationProcessor.getDelta(variationStore, anchor.xDeviceTable.a, anchor.xDeviceTable.b);\n      }\n\n      if (anchor.yDeviceTable) {\n        y += variationProcessor.getDelta(variationStore, anchor.yDeviceTable.a, anchor.yDeviceTable.b);\n      }\n    }\n\n    return { x, y };\n  }\n\n  applyFeatures(userFeatures, glyphs, advances) {\n    super.applyFeatures(userFeatures, glyphs, advances);\n\n    for (var i = 0; i < this.glyphs.length; i++) {\n      this.fixCursiveAttachment(i);\n    }\n\n    this.fixMarkAttachment();\n  }\n\n  fixCursiveAttachment(i) {\n    let glyph = this.glyphs[i];\n    if (glyph.cursiveAttachment != null) {\n      let j = glyph.cursiveAttachment;\n\n      glyph.cursiveAttachment = null;\n      this.fixCursiveAttachment(j);\n\n      this.positions[i].yOffset += this.positions[j].yOffset;\n    }\n  }\n\n  fixMarkAttachment() {\n    for (let i = 0; i < this.glyphs.length; i++) {\n      let glyph = this.glyphs[i];\n      if (glyph.markAttachment != null) {\n        let j = glyph.markAttachment;\n\n        this.positions[i].xOffset += this.positions[j].xOffset;\n        this.positions[i].yOffset += this.positions[j].yOffset;\n\n        if (this.direction === 'ltr') {\n          for (let k = j; k < i; k++) {\n            this.positions[i].xOffset -= this.positions[k].xAdvance;\n            this.positions[i].yOffset -= this.positions[k].yAdvance;\n          }\n        } else {\n          for (let k = j + 1; k < i + 1; k++) {\n            this.positions[i].xOffset += this.positions[k].xAdvance;\n            this.positions[i].yOffset += this.positions[k].yAdvance;\n          }\n        }\n      }\n    }\n  }\n}\n","import ShapingPlan from './ShapingPlan';\nimport * as Shapers from './shapers';\nimport GlyphInfo from './GlyphInfo';\nimport GSUBProcessor from './GSUBProcessor';\nimport GPOSProcessor from './GPOSProcessor';\n\nexport default class OTLayoutEngine {\n  constructor(font) {\n    this.font = font;\n    this.glyphInfos = null;\n    this.plan = null;\n    this.GSUBProcessor = null;\n    this.GPOSProcessor = null;\n    this.fallbackPosition = true;\n\n    if (font.GSUB) {\n      this.GSUBProcessor = new GSUBProcessor(font, font.GSUB);\n    }\n\n    if (font.GPOS) {\n      this.GPOSProcessor = new GPOSProcessor(font, font.GPOS);\n    }\n  }\n\n  setup(glyphRun) {\n    // Map glyphs to GlyphInfo objects so data can be passed between\n    // GSUB and GPOS without mutating the real (shared) Glyph objects.\n    this.glyphInfos = glyphRun.glyphs.map(glyph => new GlyphInfo(this.font, glyph.id, [...glyph.codePoints]));\n\n    // Select a script based on what is available in GSUB/GPOS.\n    let script = null;\n    if (this.GPOSProcessor) {\n      script = this.GPOSProcessor.selectScript(glyphRun.script, glyphRun.language, glyphRun.direction);\n    }\n\n    if (this.GSUBProcessor) {\n      script = this.GSUBProcessor.selectScript(glyphRun.script, glyphRun.language, glyphRun.direction);\n    }\n\n    // Choose a shaper based on the script, and setup a shaping plan.\n    // This determines which features to apply to which glyphs.\n    this.shaper = Shapers.choose(script);\n    this.plan = new ShapingPlan(this.font, script, glyphRun.direction);\n    this.shaper.plan(this.plan, this.glyphInfos, glyphRun.features);\n\n    // Assign chosen features to output glyph run\n    for (let key in this.plan.allFeatures) {\n      glyphRun.features[key] = true;\n    }\n  }\n\n  substitute(glyphRun) {\n    if (this.GSUBProcessor) {\n      this.plan.process(this.GSUBProcessor, this.glyphInfos);\n\n      // Map glyph infos back to normal Glyph objects\n      glyphRun.glyphs = this.glyphInfos.map(glyphInfo => this.font.getGlyph(glyphInfo.id, glyphInfo.codePoints));\n    }\n  }\n\n  position(glyphRun) {\n    if (this.shaper.zeroMarkWidths === 'BEFORE_GPOS') {\n      this.zeroMarkAdvances(glyphRun.positions);\n    }\n\n    if (this.GPOSProcessor) {\n      this.plan.process(this.GPOSProcessor, this.glyphInfos, glyphRun.positions);\n    }\n\n    if (this.shaper.zeroMarkWidths === 'AFTER_GPOS') {\n      this.zeroMarkAdvances(glyphRun.positions);\n    }\n\n    // Reverse the glyphs and positions if the script is right-to-left\n    if (glyphRun.direction === 'rtl') {\n      glyphRun.glyphs.reverse();\n      glyphRun.positions.reverse();\n    }\n\n    return this.GPOSProcessor && this.GPOSProcessor.features;\n  }\n\n  zeroMarkAdvances(positions) {\n    for (let i = 0; i < this.glyphInfos.length; i++) {\n      if (this.glyphInfos[i].isMark) {\n        positions[i].xAdvance = 0;\n        positions[i].yAdvance = 0;\n      }\n    }\n  }\n\n  cleanup() {\n    this.glyphInfos = null;\n    this.plan = null;\n    this.shaper = null;\n  }\n\n  getAvailableFeatures(script, language) {\n    let features = [];\n\n    if (this.GSUBProcessor) {\n      this.GSUBProcessor.selectScript(script, language);\n      features.push(...Object.keys(this.GSUBProcessor.features));\n    }\n\n    if (this.GPOSProcessor) {\n      this.GPOSProcessor.selectScript(script, language);\n      features.push(...Object.keys(this.GPOSProcessor.features));\n    }\n\n    return features;\n  }\n}\n","import KernProcessor from './KernProcessor';\nimport UnicodeLayoutEngine from './UnicodeLayoutEngine';\nimport GlyphRun from './GlyphRun';\nimport GlyphPosition from './GlyphPosition';\nimport * as Script from './Script';\nimport AATLayoutEngine from '../aat/AATLayoutEngine';\nimport OTLayoutEngine from '../opentype/OTLayoutEngine';\n\nexport default class LayoutEngine {\n  constructor(font) {\n    this.font = font;\n    this.unicodeLayoutEngine = null;\n    this.kernProcessor = null;\n\n    // Choose an advanced layout engine. We try the AAT morx table first since more\n    // scripts are currently supported because the shaping logic is built into the font.\n    if (this.font.morx) {\n      this.engine = new AATLayoutEngine(this.font);\n\n    } else if (this.font.GSUB || this.font.GPOS) {\n      this.engine = new OTLayoutEngine(this.font);\n    }\n  }\n\n  layout(string, features, script, language, direction) {\n    // Make the features parameter optional\n    if (typeof features === 'string') {\n      direction = language;\n      language = script;\n      script = features;\n      features = [];\n    }\n\n    // Map string to glyphs if needed\n    if (typeof string === 'string') {\n      // Attempt to detect the script from the string if not provided.\n      if (script == null) {\n        script = Script.forString(string);\n      }\n\n      var glyphs = this.font.glyphsForString(string);\n    } else {\n      // Attempt to detect the script from the glyph code points if not provided.\n      if (script == null) {\n        let codePoints = [];\n        for (let glyph of string) {\n          codePoints.push(...glyph.codePoints);\n        }\n\n        script = Script.forCodePoints(codePoints);\n      }\n\n      var glyphs = string;\n    }\n\n    let glyphRun = new GlyphRun(glyphs, features, script, language, direction);\n\n    // Return early if there are no glyphs\n    if (glyphs.length === 0) {\n      glyphRun.positions = [];\n      return glyphRun;\n    }\n\n    // Setup the advanced layout engine\n    if (this.engine && this.engine.setup) {\n      this.engine.setup(glyphRun);\n    }\n\n    // Substitute and position the glyphs\n    this.substitute(glyphRun);\n    this.position(glyphRun);\n\n    this.hideDefaultIgnorables(glyphRun.glyphs, glyphRun.positions);\n\n    // Let the layout engine clean up any state it might have\n    if (this.engine && this.engine.cleanup) {\n      this.engine.cleanup();\n    }\n\n    return glyphRun;\n  }\n\n  substitute(glyphRun) {\n    // Call the advanced layout engine to make substitutions\n    if (this.engine && this.engine.substitute) {\n      this.engine.substitute(glyphRun);\n    }\n  }\n\n  position(glyphRun) {\n    // Get initial glyph positions\n    glyphRun.positions = glyphRun.glyphs.map(glyph => new GlyphPosition(glyph.advanceWidth));\n    let positioned = null;\n\n    // Call the advanced layout engine. Returns the features applied.\n    if (this.engine && this.engine.position) {\n      positioned = this.engine.position(glyphRun);\n    }\n\n    // if there is no GPOS table, use unicode properties to position marks.\n    if (!positioned && (!this.engine || this.engine.fallbackPosition)) {\n      if (!this.unicodeLayoutEngine) {\n        this.unicodeLayoutEngine = new UnicodeLayoutEngine(this.font);\n      }\n\n      this.unicodeLayoutEngine.positionGlyphs(glyphRun.glyphs, glyphRun.positions);\n    }\n\n    // if kerning is not supported by GPOS, do kerning with the TrueType/AAT kern table\n    if ((!positioned || !positioned.kern) && glyphRun.features.kern !== false && this.font.kern) {\n      if (!this.kernProcessor) {\n        this.kernProcessor = new KernProcessor(this.font);\n      }\n\n      this.kernProcessor.process(glyphRun.glyphs, glyphRun.positions);\n      glyphRun.features.kern = true;\n    }\n  }\n\n  hideDefaultIgnorables(glyphs, positions) {\n    let space = this.font.glyphForCodePoint(0x20);\n    for (let i = 0; i < glyphs.length; i++) {\n      if (this.isDefaultIgnorable(glyphs[i].codePoints[0])) {\n        glyphs[i] = space;\n        positions[i].xAdvance = 0;\n        positions[i].yAdvance = 0;\n      }\n    }\n  }\n\n  isDefaultIgnorable(ch) {\n    // From DerivedCoreProperties.txt in the Unicode database,\n    // minus U+115F, U+1160, U+3164 and U+FFA0, which is what\n    // Harfbuzz and Uniscribe do.\n    let plane = ch >> 16;\n    if (plane === 0) {\n      // BMP\n      switch (ch >> 8) {\n      \tcase 0x00: return ch === 0x00AD;\n      \tcase 0x03: return ch === 0x034F;\n      \tcase 0x06: return ch === 0x061C;\n      \tcase 0x17: return 0x17B4 <= ch && ch <= 0x17B5;\n      \tcase 0x18: return 0x180B <= ch && ch <= 0x180E;\n      \tcase 0x20: return (0x200B <= ch && ch <= 0x200F) || (0x202A <= ch && ch <= 0x202E) || (0x2060 <= ch && ch <= 0x206F);\n      \tcase 0xFE: return (0xFE00 <= ch && ch <= 0xFE0F) || ch === 0xFEFF;\n      \tcase 0xFF: return 0xFFF0 <= ch && ch <= 0xFFF8;\n      \tdefault:   return false;\n      }\n    } else {\n      // Other planes\n      switch (plane) {\n      \tcase 0x01: return (0x1BCA0 <= ch && ch <= 0x1BCA3) || (0x1D173 <= ch && ch <= 0x1D17A);\n      \tcase 0x0E: return 0xE0000 <= ch && ch <= 0xE0FFF;\n      \tdefault:   return false;\n      }\n    }\n  }\n\n  getAvailableFeatures(script, language) {\n    let features = [];\n\n    if (this.engine) {\n      features.push(...this.engine.getAvailableFeatures(script, language));\n    }\n\n    if (this.font.kern && features.indexOf('kern') === -1) {\n      features.push('kern');\n    }\n\n    return features;\n  }\n\n  stringsForGlyph(gid) {\n    let result = new Set;\n\n    let codePoints = this.font._cmapProcessor.codePointsForGlyph(gid);\n    for (let codePoint of codePoints) {\n      result.add(String.fromCodePoint(codePoint));\n    }\n\n    if (this.engine && this.engine.stringsForGlyph) {\n      for (let string of this.engine.stringsForGlyph(gid)) {\n        result.add(string);\n      }\n    }\n\n    return Array.from(result);\n  }\n}\n","import BBox from './BBox';\n\nconst SVG_COMMANDS = {\n  moveTo: 'M',\n  lineTo: 'L',\n  quadraticCurveTo: 'Q',\n  bezierCurveTo: 'C',\n  closePath: 'Z'\n};\n\n/**\n * Path objects are returned by glyphs and represent the actual\n * vector outlines for each glyph in the font. Paths can be converted\n * to SVG path data strings, or to functions that can be applied to\n * render the path to a graphics context.\n */\nexport default class Path {\n  constructor() {\n    this.commands = [];\n    this._bbox = null;\n    this._cbox = null;\n  }\n\n  /**\n   * Compiles the path to a JavaScript function that can be applied with\n   * a graphics context in order to render the path.\n   * @return {string}\n   */\n  toFunction() {\n    return ctx => {\n      this.commands.forEach(c => {\n        return ctx[c.command].apply(ctx, c.args)\n      })\n    };\n  }\n\n  /**\n   * Converts the path to an SVG path data string\n   * @return {string}\n   */\n  toSVG() {\n    let cmds = this.commands.map(c => {\n      let args = c.args.map(arg => Math.round(arg * 100) / 100);\n      return `${SVG_COMMANDS[c.command]}${args.join(' ')}`;\n    });\n\n    return cmds.join('');\n  }\n\n  /**\n   * Gets the \"control box\" of a path.\n   * This is like the bounding box, but it includes all points including\n   * control points of bezier segments and is much faster to compute than\n   * the real bounding box.\n   * @type {BBox}\n   */\n  get cbox() {\n    if (!this._cbox) {\n      let cbox = new BBox;\n      for (let command of this.commands) {\n        for (let i = 0; i < command.args.length; i += 2) {\n          cbox.addPoint(command.args[i], command.args[i + 1]);\n        }\n      }\n\n      this._cbox = Object.freeze(cbox);\n    }\n\n    return this._cbox;\n  }\n\n  /**\n   * Gets the exact bounding box of the path by evaluating curve segments.\n   * Slower to compute than the control box, but more accurate.\n   * @type {BBox}\n   */\n  get bbox() {\n    if (this._bbox) {\n      return this._bbox;\n    }\n\n    let bbox = new BBox;\n    let cx = 0, cy = 0;\n\n    let f = t => (\n      Math.pow(1 - t, 3) * p0[i]\n        + 3 * Math.pow(1 - t, 2) * t * p1[i]\n        + 3 * (1 - t) * Math.pow(t, 2) * p2[i]\n        + Math.pow(t, 3) * p3[i]\n    );\n\n    for (let c of this.commands) {\n      switch (c.command) {\n        case 'moveTo':\n        case 'lineTo':\n          let [x, y] = c.args;\n          bbox.addPoint(x, y);\n          cx = x;\n          cy = y;\n          break;\n\n        case 'quadraticCurveTo':\n        case 'bezierCurveTo':\n          if (c.command === 'quadraticCurveTo') {\n            // http://fontforge.org/bezier.html\n            var [qp1x, qp1y, p3x, p3y] = c.args;\n            var cp1x = cx + 2 / 3 * (qp1x - cx);    // CP1 = QP0 + 2/3 * (QP1-QP0)\n            var cp1y = cy + 2 / 3 * (qp1y - cy);\n            var cp2x = p3x + 2 / 3 * (qp1x - p3x);  // CP2 = QP2 + 2/3 * (QP1-QP2)\n            var cp2y = p3y + 2 / 3 * (qp1y - p3y);\n          } else {\n            var [cp1x, cp1y, cp2x, cp2y, p3x, p3y] = c.args;\n          }\n\n          // http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html\n          bbox.addPoint(p3x, p3y);\n\n          var p0 = [cx, cy];\n          var p1 = [cp1x, cp1y];\n          var p2 = [cp2x, cp2y];\n          var p3 = [p3x, p3y];\n\n          for (var i = 0; i <= 1; i++) {\n            let b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];\n            let a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];\n            c = 3 * p1[i] - 3 * p0[i];\n\n            if (a === 0) {\n              if (b === 0) {\n                continue;\n              }\n\n              let t = -c / b;\n              if (0 < t && t < 1) {\n                if (i === 0) {\n                  bbox.addPoint(f(t), bbox.maxY);\n                } else if (i === 1) {\n                  bbox.addPoint(bbox.maxX, f(t));\n                }\n              }\n\n              continue;\n            }\n\n            let b2ac = Math.pow(b, 2) - 4 * c * a;\n            if (b2ac < 0) {\n              continue;\n            }\n\n            let t1 = (-b + Math.sqrt(b2ac)) / (2 * a);\n            if (0 < t1 && t1 < 1) {\n              if (i === 0) {\n                bbox.addPoint(f(t1), bbox.maxY);\n              } else if (i === 1) {\n                bbox.addPoint(bbox.maxX, f(t1));\n              }\n            }\n\n            let t2 = (-b - Math.sqrt(b2ac)) / (2 * a);\n            if (0 < t2 && t2 < 1) {\n              if (i === 0) {\n                bbox.addPoint(f(t2), bbox.maxY);\n              } else if (i === 1) {\n                bbox.addPoint(bbox.maxX, f(t2));\n              }\n            }\n          }\n\n          cx = p3x;\n          cy = p3y;\n          break;\n      }\n    }\n\n    return this._bbox = Object.freeze(bbox);\n  }\n\n  /**\n   * Applies a mapping function to each point in the path.\n   * @param {function} fn\n   * @return {Path}\n   */\n  mapPoints(fn) {\n    let path = new Path;\n\n    for (let c of this.commands) {\n      let args = [];\n      for (let i = 0; i < c.args.length; i += 2) {\n        let [x, y] = fn(c.args[i], c.args[i + 1]);\n        args.push(x, y);\n      }\n\n      path[c.command](...args);\n    }\n\n    return path;\n  }\n\n  /**\n   * Transforms the path by the given matrix.\n   */\n  transform(m0, m1, m2, m3, m4, m5) {\n    return this.mapPoints((x, y) => {\n      const tx = m0 * x + m2 * y + m4;\n      const ty = m1 * x + m3 * y + m5;\n      return [tx, ty];\n    });\n  }\n\n  /**\n   * Translates the path by the given offset.\n   */\n  translate(x, y) {\n    return this.transform(1, 0, 0, 1, x, y);\n  }\n\n  /**\n   * Rotates the path by the given angle (in radians).\n   */\n  rotate(angle) {\n    let cos = Math.cos(angle);\n    let sin = Math.sin(angle);\n    return this.transform(cos, sin, -sin, cos, 0, 0);\n  }\n\n  /**\n   * Scales the path.\n   */\n  scale(scaleX, scaleY = scaleX) {\n    return this.transform(scaleX, 0, 0, scaleY, 0, 0);\n  }\n}\n\nfor (let command of ['moveTo', 'lineTo', 'quadraticCurveTo', 'bezierCurveTo', 'closePath']) {\n  Path.prototype[command] = function(...args) {\n    this._bbox = this._cbox = null;\n    this.commands.push({\n      command,\n      args\n    });\n\n    return this;\n  };\n}\n","export default [\n  '.notdef', '.null', 'nonmarkingreturn', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent',\n  'ampersand', 'quotesingle', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash',\n  'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less',\n  'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O',\n  'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright',\n  'asciicircum', 'underscore', 'grave', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\n  'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde',\n  'Adieresis', 'Aring', 'Ccedilla', 'Eacute', 'Ntilde', 'Odieresis', 'Udieresis', 'aacute', 'agrave',\n  'acircumflex', 'adieresis', 'atilde', 'aring', 'ccedilla', 'eacute', 'egrave', 'ecircumflex', 'edieresis',\n  'iacute', 'igrave', 'icircumflex', 'idieresis', 'ntilde', 'oacute', 'ograve', 'ocircumflex', 'odieresis',\n  'otilde', 'uacute', 'ugrave', 'ucircumflex', 'udieresis', 'dagger', 'degree', 'cent', 'sterling', 'section',\n  'bullet', 'paragraph', 'germandbls', 'registered', 'copyright', 'trademark', 'acute', 'dieresis', 'notequal',\n  'AE', 'Oslash', 'infinity', 'plusminus', 'lessequal', 'greaterequal', 'yen', 'mu', 'partialdiff', 'summation',\n  'product', 'pi', 'integral', 'ordfeminine', 'ordmasculine', 'Omega', 'ae', 'oslash', 'questiondown',\n  'exclamdown', 'logicalnot', 'radical', 'florin', 'approxequal', 'Delta', 'guillemotleft', 'guillemotright',\n  'ellipsis', 'nonbreakingspace', 'Agrave', 'Atilde', 'Otilde', 'OE', 'oe', 'endash', 'emdash', 'quotedblleft',\n  'quotedblright', 'quoteleft', 'quoteright', 'divide', 'lozenge', 'ydieresis', 'Ydieresis', 'fraction',\n  'currency', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'daggerdbl', 'periodcentered', 'quotesinglbase',\n  'quotedblbase', 'perthousand', 'Acircumflex', 'Ecircumflex', 'Aacute', 'Edieresis', 'Egrave', 'Iacute',\n  'Icircumflex', 'Idieresis', 'Igrave', 'Oacute', 'Ocircumflex', 'apple', 'Ograve', 'Uacute', 'Ucircumflex',\n  'Ugrave', 'dotlessi', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'ring', 'cedilla', 'hungarumlaut',\n  'ogonek', 'caron', 'Lslash', 'lslash', 'Scaron', 'scaron', 'Zcaron', 'zcaron', 'brokenbar', 'Eth', 'eth',\n  'Yacute', 'yacute', 'Thorn', 'thorn', 'minus', 'multiply', 'onesuperior', 'twosuperior', 'threesuperior',\n  'onehalf', 'onequarter', 'threequarters', 'franc', 'Gbreve', 'gbreve', 'Idotaccent', 'Scedilla', 'scedilla',\n  'Cacute', 'cacute', 'Ccaron', 'ccaron', 'dcroat'\n];\n","import { cache } from '../decorators';\nimport Path from './Path';\nimport {isMark} from 'unicode-properties';\nimport StandardNames from './StandardNames';\n\n/**\n * Glyph objects represent a glyph in the font. They have various properties for accessing metrics and\n * the actual vector path the glyph represents, and methods for rendering the glyph to a graphics context.\n *\n * You do not create glyph objects directly. They are created by various methods on the font object.\n * There are several subclasses of the base Glyph class internally that may be returned depending\n * on the font format, but they all inherit from this class.\n */\nexport default class Glyph {\n  constructor(id, codePoints, font) {\n    /**\n     * The glyph id in the font\n     * @type {number}\n     */\n    this.id = id;\n\n    /**\n     * An array of unicode code points that are represented by this glyph.\n     * There can be multiple code points in the case of ligatures and other glyphs\n     * that represent multiple visual characters.\n     * @type {number[]}\n     */\n    this.codePoints = codePoints;\n    this._font = font;\n\n    // TODO: get this info from GDEF if available\n    this.isMark = this.codePoints.length > 0 && this.codePoints.every(isMark);\n    this.isLigature = this.codePoints.length > 1;\n  }\n\n  _getPath() {\n    return new Path();\n  }\n\n  _getCBox() {\n    return this.path.cbox;\n  }\n\n  _getBBox() {\n    return this.path.bbox;\n  }\n\n  _getTableMetrics(table) {\n    if (this.id < table.metrics.length) {\n      return table.metrics.get(this.id);\n    }\n\n    let metric = table.metrics.get(table.metrics.length - 1);\n    let res = {\n      advance: metric ? metric.advance : 0,\n      bearing: table.bearings.get(this.id - table.metrics.length) || 0\n    };\n\n    return res;\n  }\n\n  _getMetrics(cbox) {\n    if (this._metrics) { return this._metrics; }\n\n    let {advance:advanceWidth, bearing:leftBearing} = this._getTableMetrics(this._font.hmtx);\n\n    // For vertical metrics, use vmtx if available, or fall back to global data from OS/2 or hhea\n    if (this._font.vmtx) {\n      var {advance:advanceHeight, bearing:topBearing} = this._getTableMetrics(this._font.vmtx);\n\n    } else {\n      let os2;\n      if (typeof cbox === 'undefined' || cbox === null) { ({ cbox } = this); }\n\n      if ((os2 = this._font['OS/2']) && os2.version > 0) {\n        var advanceHeight = Math.abs(os2.typoAscender - os2.typoDescender);\n        var topBearing = os2.typoAscender - cbox.maxY;\n\n      } else {\n        let { hhea } = this._font;\n        var advanceHeight = Math.abs(hhea.ascent - hhea.descent);\n        var topBearing = hhea.ascent - cbox.maxY;\n      }\n    }\n\n    if (this._font._variationProcessor && this._font.HVAR) {\n      advanceWidth += this._font._variationProcessor.getAdvanceAdjustment(this.id, this._font.HVAR);\n    }\n\n    return this._metrics = { advanceWidth, advanceHeight, leftBearing, topBearing };\n  }\n\n  /**\n   * The glyph’s control box.\n   * This is often the same as the bounding box, but is faster to compute.\n   * Because of the way bezier curves are defined, some of the control points\n   * can be outside of the bounding box. Where `bbox` takes this into account,\n   * `cbox` does not. Thus, cbox is less accurate, but faster to compute.\n   * See [here](http://www.freetype.org/freetype2/docs/glyphs/glyphs-6.html#section-2)\n   * for a more detailed description.\n   *\n   * @type {BBox}\n   */\n  @cache\n  get cbox() {\n    return this._getCBox();\n  }\n\n  /**\n   * The glyph’s bounding box, i.e. the rectangle that encloses the\n   * glyph outline as tightly as possible.\n   * @type {BBox}\n   */\n  @cache\n  get bbox() {\n    return this._getBBox();\n  }\n\n  /**\n   * A vector Path object representing the glyph outline.\n   * @type {Path}\n   */\n  @cache\n  get path() {\n    // Cache the path so we only decode it once\n    // Decoding is actually performed by subclasses\n    return this._getPath();\n  }\n\n  /**\n   * Returns a path scaled to the given font size.\n   * @param {number} size\n   * @return {Path}\n   */\n  getScaledPath(size) {\n    let scale = 1 / this._font.unitsPerEm * size;\n    return this.path.scale(scale);\n  }\n\n  /**\n   * The glyph's advance width.\n   * @type {number}\n   */\n  @cache\n  get advanceWidth() {\n    return this._getMetrics().advanceWidth;\n  }\n\n  /**\n   * The glyph's advance height.\n   * @type {number}\n   */\n  @cache\n  get advanceHeight() {\n    return this._getMetrics().advanceHeight;\n  }\n\n  get ligatureCaretPositions() {}\n\n  _getName() {\n    let { post } = this._font;\n    if (!post) {\n      return null;\n    }\n\n    switch (post.version) {\n      case 1:\n        return StandardNames[this.id];\n\n      case 2:\n        let id = post.glyphNameIndex[this.id];\n        if (id < StandardNames.length) {\n          return StandardNames[id];\n        }\n\n        return post.names[id - StandardNames.length];\n\n      case 2.5:\n        return StandardNames[this.id + post.offsets[this.id]];\n\n      case 4:\n        return String.fromCharCode(post.map[this.id]);\n    }\n  }\n\n  /**\n   * The glyph's name\n   * @type {string}\n   */\n  @cache\n  get name() {\n    return this._getName();\n  }\n\n  /**\n   * Renders the glyph to the given graphics context, at the specified font size.\n   * @param {CanvasRenderingContext2d} ctx\n   * @param {number} size\n   */\n  render(ctx, size) {\n    ctx.save();\n\n    let scale = 1 / this._font.head.unitsPerEm * size;\n    ctx.scale(scale, scale);\n\n    let fn = this.path.toFunction();\n    fn(ctx);\n    ctx.fill();\n\n    ctx.restore();\n  }\n}\n","import Glyph from './Glyph';\nimport Path from './Path';\nimport BBox from './BBox';\nimport * as r from 'restructure';\n\n// The header for both simple and composite glyphs\nlet GlyfHeader = new r.Struct({\n  numberOfContours: r.int16, // if negative, this is a composite glyph\n  xMin:             r.int16,\n  yMin:             r.int16,\n  xMax:             r.int16,\n  yMax:             r.int16\n});\n\n// Flags for simple glyphs\nconst ON_CURVE        = 1 << 0;\nconst X_SHORT_VECTOR  = 1 << 1;\nconst Y_SHORT_VECTOR  = 1 << 2;\nconst REPEAT          = 1 << 3;\nconst SAME_X          = 1 << 4;\nconst SAME_Y          = 1 << 5;\n\n// Flags for composite glyphs\nconst ARG_1_AND_2_ARE_WORDS     = 1 << 0;\nconst ARGS_ARE_XY_VALUES        = 1 << 1;\nconst ROUND_XY_TO_GRID          = 1 << 2;\nconst WE_HAVE_A_SCALE           = 1 << 3;\nconst MORE_COMPONENTS           = 1 << 5;\nconst WE_HAVE_AN_X_AND_Y_SCALE  = 1 << 6;\nconst WE_HAVE_A_TWO_BY_TWO      = 1 << 7;\nconst WE_HAVE_INSTRUCTIONS      = 1 << 8;\nconst USE_MY_METRICS            = 1 << 9;\nconst OVERLAP_COMPOUND          = 1 << 10;\nconst SCALED_COMPONENT_OFFSET   = 1 << 11;\nconst UNSCALED_COMPONENT_OFFSET = 1 << 12;\n\n// Represents a point in a simple glyph\nexport class Point {\n  constructor(onCurve, endContour, x = 0, y = 0) {\n    this.onCurve = onCurve;\n    this.endContour = endContour;\n    this.x = x;\n    this.y = y;\n  }\n\n  copy() {\n    return new Point(this.onCurve, this.endContour, this.x, this.y);\n  }\n}\n\n// Represents a component in a composite glyph\nclass Component {\n  constructor(glyphID, dx, dy) {\n    this.glyphID = glyphID;\n    this.dx = dx;\n    this.dy = dy;\n    this.pos = 0;\n    this.scaleX = this.scaleY = 1;\n    this.scale01 = this.scale10 = 0;\n  }\n}\n\n/**\n * Represents a TrueType glyph.\n */\nexport default class TTFGlyph extends Glyph {\n  type = 'TTF';\n\n  // Parses just the glyph header and returns the bounding box\n  _getCBox(internal) {\n    // We need to decode the glyph if variation processing is requested,\n    // so it's easier just to recompute the path's cbox after decoding.\n    if (this._font._variationProcessor && !internal) {\n      return this.path.cbox;\n    }\n\n    let stream = this._font._getTableStream('glyf');\n    stream.pos += this._font.loca.offsets[this.id];\n    let glyph = GlyfHeader.decode(stream);\n\n    let cbox = new BBox(glyph.xMin, glyph.yMin, glyph.xMax, glyph.yMax);\n    return Object.freeze(cbox);\n  }\n\n  // Parses a single glyph coordinate\n  _parseGlyphCoord(stream, prev, short, same) {\n    if (short) {\n      var val = stream.readUInt8();\n      if (!same) {\n        val = -val;\n      }\n\n      val += prev;\n    } else {\n      if (same) {\n        var val = prev;\n      } else {\n        var val = prev + stream.readInt16BE();\n      }\n    }\n\n    return val;\n  }\n\n  // Decodes the glyph data into points for simple glyphs,\n  // or components for composite glyphs\n  _decode() {\n    let glyfPos = this._font.loca.offsets[this.id];\n    let nextPos = this._font.loca.offsets[this.id + 1];\n\n    // Nothing to do if there is no data for this glyph\n    if (glyfPos === nextPos) { return null; }\n\n    let stream = this._font._getTableStream('glyf');\n    stream.pos += glyfPos;\n    let startPos = stream.pos;\n\n    let glyph = GlyfHeader.decode(stream);\n\n    if (glyph.numberOfContours > 0) {\n      this._decodeSimple(glyph, stream);\n\n    } else if (glyph.numberOfContours < 0) {\n      this._decodeComposite(glyph, stream, startPos);\n    }\n\n    return glyph;\n  }\n\n  _decodeSimple(glyph, stream) {\n    // this is a simple glyph\n    glyph.points = [];\n\n    let endPtsOfContours = new r.Array(r.uint16, glyph.numberOfContours).decode(stream);\n    glyph.instructions = new r.Array(r.uint8, r.uint16).decode(stream);\n\n    let flags = [];\n    let numCoords = endPtsOfContours[endPtsOfContours.length - 1] + 1;\n\n    while (flags.length < numCoords) {\n      var flag = stream.readUInt8();\n      flags.push(flag);\n\n      // check for repeat flag\n      if (flag & REPEAT) {\n        let count = stream.readUInt8();\n        for (let j = 0; j < count; j++) {\n          flags.push(flag);\n        }\n      }\n    }\n\n    for (var i = 0; i < flags.length; i++) {\n      var flag = flags[i];\n      let point = new Point(!!(flag & ON_CURVE), endPtsOfContours.indexOf(i) >= 0, 0, 0);\n      glyph.points.push(point);\n    }\n\n    let px = 0;\n    for (var i = 0; i < flags.length; i++) {\n      var flag = flags[i];\n      glyph.points[i].x = px = this._parseGlyphCoord(stream, px, flag & X_SHORT_VECTOR, flag & SAME_X);\n    }\n\n    let py = 0;\n    for (var i = 0; i < flags.length; i++) {\n      var flag = flags[i];\n      glyph.points[i].y = py = this._parseGlyphCoord(stream, py, flag & Y_SHORT_VECTOR, flag & SAME_Y);\n    }\n\n    if (this._font._variationProcessor) {\n      let points = glyph.points.slice();\n      points.push(...this._getPhantomPoints(glyph));\n\n      this._font._variationProcessor.transformPoints(this.id, points);\n      glyph.phantomPoints = points.slice(-4);\n    }\n\n    return;\n  }\n\n  _decodeComposite(glyph, stream, offset = 0) {\n    // this is a composite glyph\n    glyph.components = [];\n    let haveInstructions = false;\n    let flags = MORE_COMPONENTS;\n\n    while (flags & MORE_COMPONENTS) {\n      flags = stream.readUInt16BE();\n      let gPos = stream.pos - offset;\n      let glyphID = stream.readUInt16BE();\n      if (!haveInstructions) {\n        haveInstructions = (flags & WE_HAVE_INSTRUCTIONS) !== 0;\n      }\n\n      if (flags & ARG_1_AND_2_ARE_WORDS) {\n        var dx = stream.readInt16BE();\n        var dy = stream.readInt16BE();\n      } else {\n        var dx = stream.readInt8();\n        var dy = stream.readInt8();\n      }\n\n      var component = new Component(glyphID, dx, dy);\n      component.pos = gPos;\n\n      if (flags & WE_HAVE_A_SCALE) {\n        // fixed number with 14 bits of fraction\n        component.scaleX =\n        component.scaleY = ((stream.readUInt8() << 24) | (stream.readUInt8() << 16)) / 1073741824;\n\n      } else if (flags & WE_HAVE_AN_X_AND_Y_SCALE) {\n        component.scaleX = ((stream.readUInt8() << 24) | (stream.readUInt8() << 16)) / 1073741824;\n        component.scaleY = ((stream.readUInt8() << 24) | (stream.readUInt8() << 16)) / 1073741824;\n\n      } else if (flags & WE_HAVE_A_TWO_BY_TWO) {\n        component.scaleX  = ((stream.readUInt8() << 24) | (stream.readUInt8() << 16)) / 1073741824;\n        component.scale01 = ((stream.readUInt8() << 24) | (stream.readUInt8() << 16)) / 1073741824;\n        component.scale10 = ((stream.readUInt8() << 24) | (stream.readUInt8() << 16)) / 1073741824;\n        component.scaleY  = ((stream.readUInt8() << 24) | (stream.readUInt8() << 16)) / 1073741824;\n      }\n\n      glyph.components.push(component);\n    }\n\n    if (this._font._variationProcessor) {\n      let points = [];\n      for (let j = 0; j < glyph.components.length; j++) {\n        var component = glyph.components[j];\n        points.push(new Point(true, true, component.dx, component.dy));\n      }\n\n      points.push(...this._getPhantomPoints(glyph));\n\n      this._font._variationProcessor.transformPoints(this.id, points);\n      glyph.phantomPoints = points.splice(-4, 4);\n\n      for (let i = 0; i < points.length; i++) {\n        let point = points[i];\n        glyph.components[i].dx = point.x;\n        glyph.components[i].dy = point.y;\n      }\n    }\n\n    return haveInstructions;\n  }\n\n  _getPhantomPoints(glyph) {\n    let cbox = this._getCBox(true);\n    if (this._metrics == null) {\n      this._metrics = Glyph.prototype._getMetrics.call(this, cbox);\n    }\n\n    let { advanceWidth, advanceHeight, leftBearing, topBearing } = this._metrics;\n\n    return [\n      new Point(false, true, glyph.xMin - leftBearing, 0),\n      new Point(false, true, glyph.xMin - leftBearing + advanceWidth, 0),\n      new Point(false, true, 0, glyph.yMax + topBearing),\n      new Point(false, true, 0, glyph.yMax + topBearing + advanceHeight)\n    ];\n  }\n\n  // Decodes font data, resolves composite glyphs, and returns an array of contours\n  _getContours() {\n    let glyph = this._decode();\n    if (!glyph) {\n      return [];\n    }\n\n    let points = [];\n\n    if (glyph.numberOfContours < 0) {\n      // resolve composite glyphs\n      for (let component of glyph.components) {\n        let contours = this._font.getGlyph(component.glyphID)._getContours();\n        for (let i = 0; i < contours.length; i++) {\n          let contour = contours[i];\n          for (let j = 0; j < contour.length; j++) {\n            let point = contour[j];\n            let x = point.x * component.scaleX + point.y * component.scale01 + component.dx;\n            let y = point.y * component.scaleY + point.x * component.scale10 + component.dy;\n            points.push(new Point(point.onCurve, point.endContour, x, y));\n          }\n        }\n      }\n    } else {\n      points = glyph.points || [];\n    }\n\n    // Recompute and cache metrics if we performed variation processing, and don't have an HVAR table\n    if (glyph.phantomPoints && !this._font.directory.tables.HVAR) {\n      this._metrics.advanceWidth  = glyph.phantomPoints[1].x - glyph.phantomPoints[0].x;\n      this._metrics.advanceHeight = glyph.phantomPoints[3].y - glyph.phantomPoints[2].y;\n      this._metrics.leftBearing   = glyph.xMin - glyph.phantomPoints[0].x;\n      this._metrics.topBearing    = glyph.phantomPoints[2].y - glyph.yMax;\n    }\n\n    let contours = [];\n    let cur = [];\n    for (let k = 0; k < points.length; k++) {\n      var point = points[k];\n      cur.push(point);\n      if (point.endContour) {\n        contours.push(cur);\n        cur = [];\n      }\n    }\n\n    return contours;\n  }\n\n  _getMetrics() {\n    if (this._metrics) {\n      return this._metrics;\n    }\n\n    let cbox = this._getCBox(true);\n    super._getMetrics(cbox);\n\n    if (this._font._variationProcessor && !this._font.HVAR) {\n      // No HVAR table, decode the glyph. This triggers recomputation of metrics.\n      this.path;\n    }\n\n    return this._metrics;\n  }\n\n  // Converts contours to a Path object that can be rendered\n  _getPath() {\n    let contours = this._getContours();\n    let path = new Path;\n\n    for (let i = 0; i < contours.length; i++) {\n      let contour = contours[i];\n      let firstPt = contour[0];\n      let lastPt = contour[contour.length - 1];\n      let start = 0;\n\n      if (firstPt.onCurve) {\n        // The first point will be consumed by the moveTo command, so skip in the loop\n        var curvePt = null;\n        start = 1;\n      } else {\n        if (lastPt.onCurve) {\n          // Start at the last point if the first point is off curve and the last point is on curve\n          firstPt = lastPt;\n        } else {\n          // Start at the middle if both the first and last points are off curve\n          firstPt = new Point(false, false, (firstPt.x + lastPt.x) / 2, (firstPt.y + lastPt.y) / 2);\n        }\n\n        var curvePt = firstPt;\n      }\n\n      path.moveTo(firstPt.x, firstPt.y);\n\n      for (let j = start; j < contour.length; j++) {\n        let pt = contour[j];\n        let prevPt = j === 0 ? firstPt : contour[j - 1];\n\n        if (prevPt.onCurve && pt.onCurve) {\n          path.lineTo(pt.x, pt.y);\n\n        } else if (prevPt.onCurve && !pt.onCurve) {\n          var curvePt = pt;\n\n        } else if (!prevPt.onCurve && !pt.onCurve) {\n          let midX = (prevPt.x + pt.x) / 2;\n          let midY = (prevPt.y + pt.y) / 2;\n          path.quadraticCurveTo(prevPt.x, prevPt.y, midX, midY);\n          var curvePt = pt;\n\n        } else if (!prevPt.onCurve && pt.onCurve) {\n          path.quadraticCurveTo(curvePt.x, curvePt.y, pt.x, pt.y);\n          var curvePt = null;\n\n        } else {\n          throw new Error(\"Unknown TTF path state\");\n        }\n      }\n\n      // Connect the first and last points\n      if (curvePt) {\n        path.quadraticCurveTo(curvePt.x, curvePt.y, firstPt.x, firstPt.y);\n      }\n\n      path.closePath();\n    }\n\n    return path;\n  }\n}\n","import Glyph from './Glyph';\nimport Path from './Path';\n\n/**\n * Represents an OpenType PostScript glyph, in the Compact Font Format.\n */\nexport default class CFFGlyph extends Glyph {\n  type = 'CFF';\n\n  _getName() {\n    if (this._font.CFF2) {\n      return super._getName();\n    }\n\n    return this._font['CFF '].getGlyphName(this.id);\n  }\n\n  bias(s) {\n    if (s.length < 1240) {\n      return 107;\n    } else if (s.length < 33900) {\n      return 1131;\n    } else {\n      return 32768;\n    }\n  }\n\n  _getPath() {\n    let cff = this._font.CFF2 || this._font['CFF '];\n    let { stream } = cff;\n    let str = cff.topDict.CharStrings[this.id];\n    let end = str.offset + str.length;\n    stream.pos = str.offset;\n\n    let path = new Path;\n    let stack = [];\n    let trans = [];\n\n    let width = null;\n    let nStems = 0;\n    let x = 0, y = 0;\n    let usedGsubrs;\n    let usedSubrs;\n    let open = false;\n\n    this._usedGsubrs = usedGsubrs = {};\n    this._usedSubrs = usedSubrs = {};\n\n    let gsubrs = cff.globalSubrIndex || [];\n    let gsubrsBias = this.bias(gsubrs);\n\n    let privateDict = cff.privateDictForGlyph(this.id) || {};\n    let subrs = privateDict.Subrs || [];\n    let subrsBias = this.bias(subrs);\n\n    let vstore = cff.topDict.vstore && cff.topDict.vstore.itemVariationStore;\n    let vsindex = privateDict.vsindex;\n    let variationProcessor = this._font._variationProcessor;\n\n    function checkWidth() {\n      if (width == null) {\n        width = stack.shift() + privateDict.nominalWidthX;\n      }\n    }\n\n    function parseStems() {\n      if (stack.length % 2 !== 0) {\n        checkWidth();\n      }\n\n      nStems += stack.length >> 1;\n      return stack.length = 0;\n    }\n\n    function moveTo(x, y) {\n      if (open) {\n        path.closePath();\n      }\n\n      path.moveTo(x, y);\n      open = true;\n    }\n\n    let parse = function () {\n      while (stream.pos < end) {\n        let op = stream.readUInt8();\n        if (op < 32) {\n          let index, subr, phase;\n          let c1x, c1y, c2x, c2y, c3x, c3y;\n          let c4x, c4y, c5x, c5y, c6x, c6y;\n          let pts;\n\n          switch (op) {\n            case 1:  // hstem\n            case 3:  // vstem\n            case 18: // hstemhm\n            case 23: // vstemhm\n              parseStems();\n              break;\n\n            case 4: // vmoveto\n              if (stack.length > 1) {\n                checkWidth();\n              }\n\n              y += stack.shift();\n              moveTo(x, y);\n              break;\n\n            case 5: // rlineto\n              while (stack.length >= 2) {\n                x += stack.shift();\n                y += stack.shift();\n                path.lineTo(x, y);\n              }\n              break;\n\n            case 6: // hlineto\n            case 7: // vlineto\n              phase = op === 6;\n              while (stack.length >= 1) {\n                if (phase) {\n                  x += stack.shift();\n                } else {\n                  y += stack.shift();\n                }\n\n                path.lineTo(x, y);\n                phase = !phase;\n              }\n              break;\n\n            case 8: // rrcurveto\n              while (stack.length > 0) {\n                c1x = x + stack.shift();\n                c1y = y + stack.shift();\n                c2x = c1x + stack.shift();\n                c2y = c1y + stack.shift();\n                x = c2x + stack.shift();\n                y = c2y + stack.shift();\n                path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);\n              }\n              break;\n\n            case 10: // callsubr\n              index = stack.pop() + subrsBias;\n              subr = subrs[index];\n              if (subr) {\n                usedSubrs[index] = true;\n                let p = stream.pos;\n                let e = end;\n                stream.pos = subr.offset;\n                end = subr.offset + subr.length;\n                parse();\n                stream.pos = p;\n                end = e;\n              }\n              break;\n\n            case 11: // return\n              if (cff.version >= 2) {\n                break;\n              }\n              return;\n\n            case 14: // endchar\n              if (cff.version >= 2) {\n                break;\n              }\n\n              if (stack.length > 0) {\n                checkWidth();\n              }\n\n              if (open) {\n                path.closePath();\n                open = false;\n              }\n              break;\n\n            case 15: { // vsindex\n              if (cff.version < 2) {\n                throw new Error('vsindex operator not supported in CFF v1');\n              }\n\n              vsindex = stack.pop();\n              break;\n            }\n\n            case 16: { // blend\n              if (cff.version < 2) {\n                throw new Error('blend operator not supported in CFF v1');\n              }\n\n              if (!variationProcessor) {\n                throw new Error('blend operator in non-variation font');\n              }\n\n              let blendVector = variationProcessor.getBlendVector(vstore, vsindex);\n              let numBlends = stack.pop();\n              let numOperands = numBlends * blendVector.length;\n              let delta = stack.length - numOperands;\n              let base = delta - numBlends;\n\n              for (let i = 0; i < numBlends; i++) {\n                let sum = stack[base + i];\n                for (let j = 0; j < blendVector.length; j++) {\n                  sum += blendVector[j] * stack[delta++];\n                }\n\n                stack[base + i] = sum;\n              }\n\n              while (numOperands--) {\n                stack.pop();\n              }\n\n              break;\n            }\n\n            case 19: // hintmask\n            case 20: // cntrmask\n              parseStems();\n              stream.pos += (nStems + 7) >> 3;\n              break;\n\n            case 21: // rmoveto\n              if (stack.length > 2) {\n                checkWidth();\n              }\n\n              x += stack.shift();\n              y += stack.shift();\n              moveTo(x, y);\n              break;\n\n            case 22: // hmoveto\n              if (stack.length > 1) {\n                checkWidth();\n              }\n\n              x += stack.shift();\n              moveTo(x, y);\n              break;\n\n            case 24: // rcurveline\n              while (stack.length >= 8) {\n                c1x = x + stack.shift();\n                c1y = y + stack.shift();\n                c2x = c1x + stack.shift();\n                c2y = c1y + stack.shift();\n                x = c2x + stack.shift();\n                y = c2y + stack.shift();\n                path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);\n              }\n\n              x += stack.shift();\n              y += stack.shift();\n              path.lineTo(x, y);\n              break;\n\n            case 25: // rlinecurve\n              while (stack.length >= 8) {\n                x += stack.shift();\n                y += stack.shift();\n                path.lineTo(x, y);\n              }\n\n              c1x = x + stack.shift();\n              c1y = y + stack.shift();\n              c2x = c1x + stack.shift();\n              c2y = c1y + stack.shift();\n              x = c2x + stack.shift();\n              y = c2y + stack.shift();\n              path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);\n              break;\n\n            case 26: // vvcurveto\n              if (stack.length % 2) {\n                x += stack.shift();\n              }\n\n              while (stack.length >= 4) {\n                c1x = x;\n                c1y = y + stack.shift();\n                c2x = c1x + stack.shift();\n                c2y = c1y + stack.shift();\n                x = c2x;\n                y = c2y + stack.shift();\n                path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);\n              }\n              break;\n\n            case 27: // hhcurveto\n              if (stack.length % 2) {\n                y += stack.shift();\n              }\n\n              while (stack.length >= 4) {\n                c1x = x + stack.shift();\n                c1y = y;\n                c2x = c1x + stack.shift();\n                c2y = c1y + stack.shift();\n                x = c2x + stack.shift();\n                y = c2y;\n                path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);\n              }\n              break;\n\n            case 28: // shortint\n              stack.push(stream.readInt16BE());\n              break;\n\n            case 29: // callgsubr\n              index = stack.pop() + gsubrsBias;\n              subr = gsubrs[index];\n              if (subr) {\n                usedGsubrs[index] = true;\n                let p = stream.pos;\n                let e = end;\n                stream.pos = subr.offset;\n                end = subr.offset + subr.length;\n                parse();\n                stream.pos = p;\n                end = e;\n              }\n              break;\n\n            case 30: // vhcurveto\n            case 31: // hvcurveto\n              phase = op === 31;\n              while (stack.length >= 4) {\n                if (phase) {\n                  c1x = x + stack.shift();\n                  c1y = y;\n                  c2x = c1x + stack.shift();\n                  c2y = c1y + stack.shift();\n                  y = c2y + stack.shift();\n                  x = c2x + (stack.length === 1 ? stack.shift() : 0);\n                } else {\n                  c1x = x;\n                  c1y = y + stack.shift();\n                  c2x = c1x + stack.shift();\n                  c2y = c1y + stack.shift();\n                  x = c2x + stack.shift();\n                  y = c2y + (stack.length === 1 ? stack.shift() : 0);\n                }\n\n                path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);\n                phase = !phase;\n              }\n              break;\n\n            case 12:\n              op = stream.readUInt8();\n              switch (op) {\n                case 3: // and\n                  let a = stack.pop();\n                  let b = stack.pop();\n                  stack.push(a && b ? 1 : 0);\n                  break;\n\n                case 4: // or\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(a || b ? 1 : 0);\n                  break;\n\n                case 5: // not\n                  a = stack.pop();\n                  stack.push(a ? 0 : 1);\n                  break;\n\n                case 9: // abs\n                  a = stack.pop();\n                  stack.push(Math.abs(a));\n                  break;\n\n                case 10: // add\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(a + b);\n                  break;\n\n                case 11: // sub\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(a - b);\n                  break;\n\n                case 12: // div\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(a / b);\n                  break;\n\n                case 14: // neg\n                  a = stack.pop();\n                  stack.push(-a);\n                  break;\n\n                case 15: // eq\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(a === b ? 1 : 0);\n                  break;\n\n                case 18: // drop\n                  stack.pop();\n                  break;\n\n                case 20: // put\n                  let val = stack.pop();\n                  let idx = stack.pop();\n                  trans[idx] = val;\n                  break;\n\n                case 21: // get\n                  idx = stack.pop();\n                  stack.push(trans[idx] || 0);\n                  break;\n\n                case 22: // ifelse\n                  let s1 = stack.pop();\n                  let s2 = stack.pop();\n                  let v1 = stack.pop();\n                  let v2 = stack.pop();\n                  stack.push(v1 <= v2 ? s1 : s2);\n                  break;\n\n                case 23: // random\n                  stack.push(Math.random());\n                  break;\n\n                case 24: // mul\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(a * b);\n                  break;\n\n                case 26: // sqrt\n                  a = stack.pop();\n                  stack.push(Math.sqrt(a));\n                  break;\n\n                case 27: // dup\n                  a = stack.pop();\n                  stack.push(a, a);\n                  break;\n\n                case 28: // exch\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(b, a);\n                  break;\n\n                case 29: // index\n                  idx = stack.pop();\n                  if (idx < 0) {\n                    idx = 0;\n                  } else if (idx > stack.length - 1) {\n                    idx = stack.length - 1;\n                  }\n\n                  stack.push(stack[idx]);\n                  break;\n\n                case 30: // roll\n                  let n = stack.pop();\n                  let j = stack.pop();\n\n                  if (j >= 0) {\n                    while (j > 0) {\n                      var t = stack[n - 1];\n                      for (let i = n - 2; i >= 0; i--) {\n                        stack[i + 1] = stack[i];\n                      }\n\n                      stack[0] = t;\n                      j--;\n                    }\n                  } else {\n                    while (j < 0) {\n                      var t = stack[0];\n                      for (let i = 0; i <= n; i++) {\n                        stack[i] = stack[i + 1];\n                      }\n\n                      stack[n - 1] = t;\n                      j++;\n                    }\n                  }\n                  break;\n\n                case 34: // hflex\n                  c1x = x + stack.shift();\n                  c1y = y;\n                  c2x = c1x + stack.shift();\n                  c2y = c1y + stack.shift();\n                  c3x = c2x + stack.shift();\n                  c3y = c2y;\n                  c4x = c3x + stack.shift();\n                  c4y = c3y;\n                  c5x = c4x + stack.shift();\n                  c5y = c4y;\n                  c6x = c5x + stack.shift();\n                  c6y = c5y;\n                  x = c6x;\n                  y = c6y;\n\n                  path.bezierCurveTo(c1x, c1y, c2x, c2y, c3x, c3y);\n                  path.bezierCurveTo(c4x, c4y, c5x, c5y, c6x, c6y);\n                  break;\n\n                case 35: // flex\n                  pts = [];\n\n                  for (let i = 0; i <= 5; i++) {\n                    x += stack.shift();\n                    y += stack.shift();\n                    pts.push(x, y);\n                  }\n\n                  path.bezierCurveTo(...pts.slice(0, 6));\n                  path.bezierCurveTo(...pts.slice(6));\n                  stack.shift(); // fd\n                  break;\n\n                case 36: // hflex1\n                  c1x = x + stack.shift();\n                  c1y = y + stack.shift();\n                  c2x = c1x + stack.shift();\n                  c2y = c1y + stack.shift();\n                  c3x = c2x + stack.shift();\n                  c3y = c2y;\n                  c4x = c3x + stack.shift();\n                  c4y = c3y;\n                  c5x = c4x + stack.shift();\n                  c5y = c4y + stack.shift();\n                  c6x = c5x + stack.shift();\n                  c6y = c5y;\n                  x = c6x;\n                  y = c6y;\n\n                  path.bezierCurveTo(c1x, c1y, c2x, c2y, c3x, c3y);\n                  path.bezierCurveTo(c4x, c4y, c5x, c5y, c6x, c6y);\n                  break;\n\n                case 37: // flex1\n                  let startx = x;\n                  let starty = y;\n\n                  pts = [];\n                  for (let i = 0; i <= 4; i++) {\n                    x += stack.shift();\n                    y += stack.shift();\n                    pts.push(x, y);\n                  }\n\n                  if (Math.abs(x - startx) > Math.abs(y - starty)) { // horizontal\n                    x += stack.shift();\n                    y = starty;\n                  } else {\n                    x = startx;\n                    y += stack.shift();\n                  }\n\n                  pts.push(x, y);\n                  path.bezierCurveTo(...pts.slice(0, 6));\n                  path.bezierCurveTo(...pts.slice(6));\n                  break;\n\n                default:\n                  throw new Error(`Unknown op: 12 ${op}`);\n              }\n              break;\n\n            default:\n              throw new Error(`Unknown op: ${op}`);\n          }\n\n        } else if (op < 247) {\n          stack.push(op - 139);\n        } else if (op < 251) {\n          var b1 = stream.readUInt8();\n          stack.push((op - 247) * 256 + b1 + 108);\n        } else if (op < 255) {\n          var b1 = stream.readUInt8();\n          stack.push(-(op - 251) * 256 - b1 - 108);\n        } else {\n          stack.push(stream.readInt32BE() / 65536);\n        }\n      }\n    };\n\n    parse();\n\n    if (open) {\n      path.closePath();\n    }\n\n    return path;\n  }\n}\n","import TTFGlyph from './TTFGlyph';\nimport * as r from 'restructure';\n\nlet SBIXImage = new r.Struct({\n  originX: r.uint16,\n  originY: r.uint16,\n  type: new r.String(4),\n  data: new r.Buffer(t => t.parent.buflen - t._currentOffset)\n});\n\n/**\n * Represents a color (e.g. emoji) glyph in Apple's SBIX format.\n */\nexport default class SBIXGlyph extends TTFGlyph {\n  type = 'SBIX';\n\n  /**\n   * Returns an object representing a glyph image at the given point size.\n   * The object has a data property with a Buffer containing the actual image data,\n   * along with the image type, and origin.\n   *\n   * @param {number} size\n   * @return {object}\n   */\n  getImageForSize(size) {\n    for (let i = 0; i < this._font.sbix.imageTables.length; i++) {\n      var table = this._font.sbix.imageTables[i];\n      if (table.ppem >= size) { break; }\n    }\n\n    let offsets = table.imageOffsets;\n    let start = offsets[this.id];\n    let end = offsets[this.id + 1];\n\n    if (start === end) {\n      return null;\n    }\n\n    this._font.stream.pos = start;\n    return SBIXImage.decode(this._font.stream, {buflen: end - start});\n  }\n\n  render(ctx, size) {\n    let img = this.getImageForSize(size);\n    if (img != null) {\n      let scale = size / this._font.unitsPerEm;\n      ctx.image(img.data, {height: size, x: img.originX, y: (this.bbox.minY - img.originY) * scale});\n    }\n\n    if (this._font.sbix.flags.renderOutlines) {\n      super.render(ctx, size);\n    }\n  }\n}\n","import Glyph from './Glyph';\nimport BBox from './BBox';\n\nclass COLRLayer {\n  constructor(glyph, color) {\n    this.glyph = glyph;\n    this.color = color;\n  }\n}\n\n/**\n * Represents a color (e.g. emoji) glyph in Microsoft's COLR format.\n * Each glyph in this format contain a list of colored layers, each\n * of which  is another vector glyph.\n */\nexport default class COLRGlyph extends Glyph {\n  type = 'COLR';\n\n  _getBBox() {\n    let bbox = new BBox;\n    for (let i = 0; i < this.layers.length; i++) {\n      let layer = this.layers[i];\n      let b = layer.glyph.bbox;\n      bbox.addPoint(b.minX, b.minY);\n      bbox.addPoint(b.maxX, b.maxY);\n    }\n\n    return bbox;\n  }\n\n  /**\n   * Returns an array of objects containing the glyph and color for\n   * each layer in the composite color glyph.\n   * @type {object[]}\n   */\n  get layers() {\n    let cpal = this._font.CPAL;\n    let colr = this._font.COLR;\n    let low = 0;\n    let high = colr.baseGlyphRecord.length - 1;\n\n    while (low <= high) {\n      let mid = (low + high) >> 1;\n      var rec = colr.baseGlyphRecord[mid];\n\n      if (this.id < rec.gid) {\n        high = mid - 1;\n      } else if (this.id > rec.gid) {\n        low = mid + 1;\n      } else {\n        var baseLayer = rec;\n        break;\n      }\n    }\n\n    // if base glyph not found in COLR table,\n    // default to normal glyph from glyf or CFF\n    if (baseLayer == null) {\n      var g = this._font._getBaseGlyph(this.id);\n      var color = {\n        red: 0,\n        green: 0,\n        blue: 0,\n        alpha: 255\n      };\n\n      return [new COLRLayer(g, color)];\n    }\n\n    // otherwise, return an array of all the layers\n    let layers = [];\n    for (let i = baseLayer.firstLayerIndex; i < baseLayer.firstLayerIndex + baseLayer.numLayers; i++) {\n      var rec = colr.layerRecords[i];\n      var color = cpal.colorRecords[rec.paletteIndex];\n      var g = this._font._getBaseGlyph(rec.gid);\n      layers.push(new COLRLayer(g, color));\n    }\n\n    return layers;\n  }\n\n  render(ctx, size) {\n    for (let {glyph, color} of this.layers) {\n      ctx.fillColor([color.red, color.green, color.blue], color.alpha / 255 * 100);\n      glyph.render(ctx, size);\n    }\n\n    return;\n  }\n}\n","const TUPLES_SHARE_POINT_NUMBERS = 0x8000;\nconst TUPLE_COUNT_MASK           = 0x0fff;\nconst EMBEDDED_TUPLE_COORD       = 0x8000;\nconst INTERMEDIATE_TUPLE         = 0x4000;\nconst PRIVATE_POINT_NUMBERS      = 0x2000;\nconst TUPLE_INDEX_MASK           = 0x0fff;\nconst POINTS_ARE_WORDS           = 0x80;\nconst POINT_RUN_COUNT_MASK       = 0x7f;\nconst DELTAS_ARE_ZERO            = 0x80;\nconst DELTAS_ARE_WORDS           = 0x40;\nconst DELTA_RUN_COUNT_MASK       = 0x3f;\n\n/**\n * This class is transforms TrueType glyphs according to the data from\n * the Apple Advanced Typography variation tables (fvar, gvar, and avar).\n * These tables allow infinite adjustments to glyph weight, width, slant,\n * and optical size without the designer needing to specify every exact style.\n *\n * Apple's documentation for these tables is not great, so thanks to the\n * Freetype project for figuring much of this out.\n *\n * @private\n */\nexport default class GlyphVariationProcessor {\n  constructor(font, coords) {\n    this.font = font;\n    this.normalizedCoords = this.normalizeCoords(coords);\n    this.blendVectors = new Map;\n  }\n\n  normalizeCoords(coords) {\n    // the default mapping is linear along each axis, in two segments:\n    // from the minValue to defaultValue, and from defaultValue to maxValue.\n    let normalized = [];\n    for (var i = 0; i < this.font.fvar.axis.length; i++) {\n      let axis = this.font.fvar.axis[i];\n      if (coords[i] < axis.defaultValue) {\n        normalized.push((coords[i] - axis.defaultValue + Number.EPSILON) / (axis.defaultValue - axis.minValue + Number.EPSILON));\n      } else {\n        normalized.push((coords[i] - axis.defaultValue + Number.EPSILON) / (axis.maxValue - axis.defaultValue + Number.EPSILON));\n      }\n    }\n\n    // if there is an avar table, the normalized value is calculated\n    // by interpolating between the two nearest mapped values.\n    if (this.font.avar) {\n      for (var i = 0; i < this.font.avar.segment.length; i++) {\n        let segment = this.font.avar.segment[i];\n        for (let j = 0; j < segment.correspondence.length; j++) {\n          let pair = segment.correspondence[j];\n          if (j >= 1 && normalized[i] < pair.fromCoord) {\n            let prev = segment.correspondence[j - 1];\n            normalized[i] = ((normalized[i] - prev.fromCoord) * (pair.toCoord - prev.toCoord) + Number.EPSILON) /\n              (pair.fromCoord - prev.fromCoord + Number.EPSILON) +\n              prev.toCoord;\n\n            break;\n          }\n        }\n      }\n    }\n\n    return normalized;\n  }\n\n  transformPoints(gid, glyphPoints) {\n    if (!this.font.fvar || !this.font.gvar) { return; }\n\n    let { gvar } = this.font;\n    if (gid >= gvar.glyphCount) { return; }\n\n    let offset = gvar.offsets[gid];\n    if (offset === gvar.offsets[gid + 1]) { return; }\n\n    // Read the gvar data for this glyph\n    let { stream } = this.font;\n    stream.pos = offset;\n    if (stream.pos >= stream.length) {\n      return;\n    }\n\n    let tupleCount = stream.readUInt16BE();\n    let offsetToData = offset + stream.readUInt16BE();\n\n    if (tupleCount & TUPLES_SHARE_POINT_NUMBERS) {\n      var here = stream.pos;\n      stream.pos = offsetToData;\n      var sharedPoints = this.decodePoints();\n      offsetToData = stream.pos;\n      stream.pos = here;\n    }\n\n    let origPoints = glyphPoints.map(pt => pt.copy());\n\n    tupleCount &= TUPLE_COUNT_MASK;\n    for (let i = 0; i < tupleCount; i++) {\n      let tupleDataSize = stream.readUInt16BE();\n      let tupleIndex = stream.readUInt16BE();\n\n      if (tupleIndex & EMBEDDED_TUPLE_COORD) {\n        var tupleCoords = [];\n        for (let a = 0; a < gvar.axisCount; a++) {\n          tupleCoords.push(stream.readInt16BE() / 16384);\n        }\n\n      } else {\n        if ((tupleIndex & TUPLE_INDEX_MASK) >= gvar.globalCoordCount) {\n          throw new Error('Invalid gvar table');\n        }\n\n        var tupleCoords = gvar.globalCoords[tupleIndex & TUPLE_INDEX_MASK];\n      }\n\n      if (tupleIndex & INTERMEDIATE_TUPLE) {\n        var startCoords = [];\n        for (let a = 0; a < gvar.axisCount; a++) {\n          startCoords.push(stream.readInt16BE() / 16384);\n        }\n\n        var endCoords = [];\n        for (let a = 0; a < gvar.axisCount; a++) {\n          endCoords.push(stream.readInt16BE() / 16384);\n        }\n      }\n\n      // Get the factor at which to apply this tuple\n      let factor = this.tupleFactor(tupleIndex, tupleCoords, startCoords, endCoords);\n      if (factor === 0) {\n        offsetToData += tupleDataSize;\n        continue;\n      }\n\n      var here = stream.pos;\n      stream.pos = offsetToData;\n\n      if (tupleIndex & PRIVATE_POINT_NUMBERS) {\n        var points = this.decodePoints();\n      } else {\n        var points = sharedPoints;\n      }\n\n      // points.length = 0 means there are deltas for all points\n      let nPoints = points.length === 0 ? glyphPoints.length : points.length;\n      let xDeltas = this.decodeDeltas(nPoints);\n      let yDeltas = this.decodeDeltas(nPoints);\n\n      if (points.length === 0) { // all points\n        for (let i = 0; i < glyphPoints.length; i++) {\n          var point = glyphPoints[i];\n          point.x += Math.round(xDeltas[i] * factor);\n          point.y += Math.round(yDeltas[i] * factor);\n        }\n      } else {\n        let outPoints = origPoints.map(pt => pt.copy());\n        let hasDelta = glyphPoints.map(() => false);\n\n        for (let i = 0; i < points.length; i++) {\n          let idx = points[i];\n          if (idx < glyphPoints.length) {\n            let point = outPoints[idx];\n            hasDelta[idx] = true;\n\n            point.x += xDeltas[i] * factor;\n            point.y += yDeltas[i] * factor;\n          }\n        }\n\n        this.interpolateMissingDeltas(outPoints, origPoints, hasDelta);\n\n        for (let i = 0; i < glyphPoints.length; i++) {\n          let deltaX = outPoints[i].x - origPoints[i].x;\n          let deltaY = outPoints[i].y - origPoints[i].y;\n\n          glyphPoints[i].x = Math.round(glyphPoints[i].x + deltaX);\n          glyphPoints[i].y = Math.round(glyphPoints[i].y + deltaY);\n        }\n      }\n\n      offsetToData += tupleDataSize;\n      stream.pos = here;\n    }\n  }\n\n  decodePoints() {\n    let stream = this.font.stream;\n    let count = stream.readUInt8();\n\n    if (count & POINTS_ARE_WORDS) {\n      count = (count & POINT_RUN_COUNT_MASK) << 8 | stream.readUInt8();\n    }\n\n    let points = new Uint16Array(count);\n    let i = 0;\n    let point = 0;\n    while (i < count) {\n      let run = stream.readUInt8();\n      let runCount = (run & POINT_RUN_COUNT_MASK) + 1;\n      let fn = run & POINTS_ARE_WORDS ? stream.readUInt16 : stream.readUInt8;\n\n      for (let j = 0; j < runCount && i < count; j++) {\n        point += fn.call(stream);\n        points[i++] = point;\n      }\n    }\n\n    return points;\n  }\n\n  decodeDeltas(count) {\n    let stream = this.font.stream;\n    let i = 0;\n    let deltas = new Int16Array(count);\n\n    while (i < count) {\n      let run = stream.readUInt8();\n      let runCount = (run & DELTA_RUN_COUNT_MASK) + 1;\n\n      if (run & DELTAS_ARE_ZERO) {\n        i += runCount;\n\n      } else {\n        let fn = run & DELTAS_ARE_WORDS ? stream.readInt16BE : stream.readInt8;\n        for (let j = 0; j < runCount && i < count; j++) {\n          deltas[i++] = fn.call(stream);\n        }\n      }\n    }\n\n    return deltas;\n  }\n\n  tupleFactor(tupleIndex, tupleCoords, startCoords, endCoords) {\n    let normalized = this.normalizedCoords;\n    let { gvar } = this.font;\n    let factor = 1;\n\n    for (let i = 0; i < gvar.axisCount; i++) {\n      if (tupleCoords[i] === 0) {\n        continue;\n      }\n\n      if (normalized[i] === 0) {\n        return 0;\n      }\n\n      if ((tupleIndex & INTERMEDIATE_TUPLE) === 0) {\n        if ((normalized[i] < Math.min(0, tupleCoords[i])) ||\n            (normalized[i] > Math.max(0, tupleCoords[i]))) {\n          return 0;\n        }\n\n        factor = (factor * normalized[i] + Number.EPSILON) / (tupleCoords[i] + Number.EPSILON);\n      } else {\n        if ((normalized[i] < startCoords[i]) ||\n            (normalized[i] > endCoords[i])) {\n          return 0;\n\n        } else if (normalized[i] < tupleCoords[i]) {\n          factor = factor * (normalized[i] - startCoords[i] + Number.EPSILON) / (tupleCoords[i] - startCoords[i] + Number.EPSILON);\n\n        } else {\n          factor = factor * (endCoords[i] - normalized[i] + Number.EPSILON) / (endCoords[i] - tupleCoords[i] + Number.EPSILON);\n        }\n      }\n    }\n\n    return factor;\n  }\n\n  // Interpolates points without delta values.\n  // Needed for the Ø and Q glyphs in Skia.\n  // Algorithm from Freetype.\n  interpolateMissingDeltas(points, inPoints, hasDelta) {\n    if (points.length === 0) {\n      return;\n    }\n\n    let point = 0;\n    while (point < points.length) {\n      let firstPoint = point;\n\n      // find the end point of the contour\n      let endPoint = point;\n      let pt = points[endPoint];\n      while (!pt.endContour) {\n        pt = points[++endPoint];\n      }\n\n      // find the first point that has a delta\n      while (point <= endPoint && !hasDelta[point]) {\n        point++;\n      }\n\n      if (point > endPoint) {\n        continue;\n      }\n\n      let firstDelta = point;\n      let curDelta = point;\n      point++;\n\n      while (point <= endPoint) {\n        // find the next point with a delta, and interpolate intermediate points\n        if (hasDelta[point]) {\n          this.deltaInterpolate(curDelta + 1, point - 1, curDelta, point, inPoints, points);\n          curDelta = point;\n        }\n\n        point++;\n      }\n\n      // shift contour if we only have a single delta\n      if (curDelta === firstDelta) {\n        this.deltaShift(firstPoint, endPoint, curDelta, inPoints, points);\n      } else {\n        // otherwise, handle the remaining points at the end and beginning of the contour\n        this.deltaInterpolate(curDelta + 1, endPoint, curDelta, firstDelta, inPoints, points);\n\n        if (firstDelta > 0) {\n          this.deltaInterpolate(firstPoint, firstDelta - 1, curDelta, firstDelta, inPoints, points);\n        }\n      }\n\n      point = endPoint + 1;\n    }\n  }\n\n  deltaInterpolate(p1, p2, ref1, ref2, inPoints, outPoints) {\n    if (p1 > p2) {\n      return;\n    }\n\n    let iterable = ['x', 'y'];\n    for (let i = 0; i < iterable.length; i++) {\n      let k = iterable[i];\n      if (inPoints[ref1][k] > inPoints[ref2][k]) {\n        var p = ref1;\n        ref1 = ref2;\n        ref2 = p;\n      }\n\n      let in1 = inPoints[ref1][k];\n      let in2 = inPoints[ref2][k];\n      let out1 = outPoints[ref1][k];\n      let out2 = outPoints[ref2][k];\n\n      // If the reference points have the same coordinate but different\n      // delta, inferred delta is zero.  Otherwise interpolate.\n      if (in1 !== in2 || out1 === out2) {\n        let scale = in1 === in2 ? 0 : (out2 - out1) / (in2 - in1);\n\n        for (let p = p1; p <= p2; p++) {\n          let out = inPoints[p][k];\n\n          if (out <= in1) {\n            out += out1 - in1;\n          } else if (out >= in2) {\n            out += out2 - in2;\n          } else {\n            out = out1 + (out - in1) * scale;\n          }\n\n          outPoints[p][k] = out;\n        }\n      }\n    }\n  }\n\n  deltaShift(p1, p2, ref, inPoints, outPoints) {\n    let deltaX = outPoints[ref].x - inPoints[ref].x;\n    let deltaY = outPoints[ref].y - inPoints[ref].y;\n\n    if (deltaX === 0 && deltaY === 0) {\n      return;\n    }\n\n    for (let p = p1; p <= p2; p++) {\n      if (p !== ref) {\n        outPoints[p].x += deltaX;\n        outPoints[p].y += deltaY;\n      }\n    }\n  }\n\n  getAdvanceAdjustment(gid, table) {\n    let outerIndex, innerIndex;\n\n    if (table.advanceWidthMapping) {\n      let idx = gid;\n      if (idx >= table.advanceWidthMapping.mapCount) {\n        idx = table.advanceWidthMapping.mapCount - 1;\n      }\n\n      let entryFormat = table.advanceWidthMapping.entryFormat;\n      ({outerIndex, innerIndex} = table.advanceWidthMapping.mapData[idx]);\n    } else {\n      outerIndex = 0;\n      innerIndex = gid;\n    }\n\n    return this.getDelta(table.itemVariationStore, outerIndex, innerIndex);\n  }\n\n  // See pseudo code from `Font Variations Overview'\n  // in the OpenType specification.\n  getDelta(itemStore, outerIndex, innerIndex) {\n    if (outerIndex >= itemStore.itemVariationData.length) {\n      return 0;\n    }\n\n    let varData = itemStore.itemVariationData[outerIndex];\n    if (innerIndex >= varData.deltaSets.length) {\n      return 0;\n    }\n\n    let deltaSet = varData.deltaSets[innerIndex];\n    let blendVector = this.getBlendVector(itemStore, outerIndex);\n    let netAdjustment = 0;\n\n    for (let master = 0; master < varData.regionIndexCount; master++) {\n      netAdjustment += deltaSet.deltas[master] * blendVector[master];\n    }\n\n    return netAdjustment;\n  }\n\n  getBlendVector(itemStore, outerIndex) {\n    let varData = itemStore.itemVariationData[outerIndex];\n    if (this.blendVectors.has(varData)) {\n      return this.blendVectors.get(varData);\n    }\n\n    let normalizedCoords = this.normalizedCoords;\n    let blendVector = [];\n\n    // outer loop steps through master designs to be blended\n    for (let master = 0; master < varData.regionIndexCount; master++) {\n      let scalar = 1;\n      let regionIndex = varData.regionIndexes[master];\n      let axes = itemStore.variationRegionList.variationRegions[regionIndex];\n\n      // inner loop steps through axes in this region\n      for (let j = 0; j < axes.length; j++) {\n        let axis = axes[j];\n        let axisScalar;\n\n        // compute the scalar contribution of this axis\n        // ignore invalid ranges\n        if (axis.startCoord > axis.peakCoord || axis.peakCoord > axis.endCoord) {\n          axisScalar = 1;\n\n        } else if (axis.startCoord < 0 && axis.endCoord > 0 && axis.peakCoord !== 0) {\n          axisScalar = 1;\n\n        // peak of 0 means ignore this axis\n        } else if (axis.peakCoord === 0) {\n          axisScalar = 1;\n\n        // ignore this region if coords are out of range\n        } else if (normalizedCoords[j] < axis.startCoord || normalizedCoords[j] > axis.endCoord) {\n          axisScalar = 0;\n\n        // calculate a proportional factor\n        } else {\n          if (normalizedCoords[j] === axis.peakCoord) {\n            axisScalar = 1;\n          } else if (normalizedCoords[j] < axis.peakCoord) {\n            axisScalar = (normalizedCoords[j] - axis.startCoord + Number.EPSILON) /\n              (axis.peakCoord - axis.startCoord + Number.EPSILON);\n          } else {\n            axisScalar = (axis.endCoord - normalizedCoords[j] + Number.EPSILON) /\n              (axis.endCoord - axis.peakCoord + Number.EPSILON);\n          }\n        }\n\n        // take product of all the axis scalars\n        scalar *= axisScalar;\n      }\n\n      blendVector[master] = scalar;\n    }\n\n    this.blendVectors.set(varData, blendVector);\n    return blendVector;\n  }\n}\n","import * as r from 'restructure';\n\nconst resolved = Promise.resolve();\n\nexport default class Subset {\n  constructor(font) {\n    this.font = font;\n    this.glyphs = [];\n    this.mapping = {};\n\n    // always include the missing glyph\n    this.includeGlyph(0);\n  }\n\n  includeGlyph(glyph) {\n    if (typeof glyph === 'object') {\n      glyph = glyph.id;\n    }\n\n    if (this.mapping[glyph] == null) {\n      this.glyphs.push(glyph);\n      this.mapping[glyph] = this.glyphs.length - 1;\n    }\n\n    return this.mapping[glyph];\n  }\n}\n","import * as r from 'restructure';\n\n// Flags for simple glyphs\nconst ON_CURVE        = 1 << 0;\nconst X_SHORT_VECTOR  = 1 << 1;\nconst Y_SHORT_VECTOR  = 1 << 2;\nconst REPEAT          = 1 << 3;\nconst SAME_X          = 1 << 4;\nconst SAME_Y          = 1 << 5;\n\nclass Point {\n  static size(val) {\n    return val >= 0 && val <= 255 ? 1 : 2;\n  }\n  \n  static encode(stream, value) {\n    if (value >= 0 && value <= 255) {\n      stream.writeUInt8(value);\n    } else {\n      stream.writeInt16BE(value);\n    }\n  }\n}\n\nlet Glyf = new r.Struct({\n  numberOfContours: r.int16, // if negative, this is a composite glyph\n  xMin: r.int16,\n  yMin: r.int16,\n  xMax: r.int16,\n  yMax: r.int16,\n  endPtsOfContours: new r.Array(r.uint16, 'numberOfContours'),\n  instructions: new r.Array(r.uint8, r.uint16),\n  flags: new r.Array(r.uint8, 0),\n  xPoints: new r.Array(Point, 0),\n  yPoints: new r.Array(Point, 0)\n});\n\n/**\n * Encodes TrueType glyph outlines\n */\nexport default class TTFGlyphEncoder {\n  encodeSimple(path, instructions = []) {\n    let endPtsOfContours = [];\n    let xPoints = [];\n    let yPoints = [];\n    let flags = [];\n    let same = 0;\n    let lastX = 0, lastY = 0, lastFlag = 0;\n    let pointCount = 0;\n    \n    for (let i = 0; i < path.commands.length; i++) {\n      let c = path.commands[i];\n      \n      for (let j = 0; j < c.args.length; j += 2) {\n        let x = c.args[j];\n        let y = c.args[j + 1];\n        let flag = 0;\n        \n        // If the ending point of a quadratic curve is the midpoint\n        // between the control point and the control point of the next\n        // quadratic curve, we can omit the ending point.\n        if (c.command === 'quadraticCurveTo' && j === 2) {\n          let next = path.commands[i + 1];\n          if (next && next.command === 'quadraticCurveTo') {\n            let midX = (lastX + next.args[0]) / 2;\n            let midY = (lastY + next.args[1]) / 2;\n            \n            if (x === midX && y === midY) {\n              continue;\n            }\n          }\n        }\n        \n        // All points except control points are on curve.\n        if (!(c.command === 'quadraticCurveTo' && j === 0)) {\n          flag |= ON_CURVE;\n        }\n        \n        flag = this._encodePoint(x, lastX, xPoints, flag, X_SHORT_VECTOR, SAME_X);\n        flag = this._encodePoint(y, lastY, yPoints, flag, Y_SHORT_VECTOR, SAME_Y);\n        \n        if (flag === lastFlag && same < 255) {\n          flags[flags.length - 1] |= REPEAT;\n          same++;\n        } else {\n          if (same > 0) {\n            flags.push(same);\n            same = 0;\n          }\n      \n          flags.push(flag);\n          lastFlag = flag;\n        }\n        \n        lastX = x;\n        lastY = y;\n        pointCount++;\n      }\n  \n      if (c.command === 'closePath') {\n        endPtsOfContours.push(pointCount - 1);\n      }\n    }\n\n    // Close the path if the last command didn't already\n    if (path.commands.length > 1 && path.commands[path.commands.length - 1].command !== 'closePath') {\n      endPtsOfContours.push(pointCount - 1);\n    }\n    \n    let bbox = path.bbox;\n    let glyf = {\n      numberOfContours: endPtsOfContours.length,\n      xMin: bbox.minX,\n      yMin: bbox.minY,\n      xMax: bbox.maxX,\n      yMax: bbox.maxY,\n      endPtsOfContours: endPtsOfContours,\n      instructions: instructions,\n      flags: flags,\n      xPoints: xPoints,\n      yPoints: yPoints\n    };\n    \n    let size = Glyf.size(glyf);\n    let tail = 4 - (size % 4);\n    \n    let stream = new r.EncodeStream(size + tail);\n    Glyf.encode(stream, glyf);\n    \n    // Align to 4-byte length\n    if (tail !== 0) {\n      stream.fill(0, tail);\n    }\n    \n    return stream.buffer;\n  }\n  \n  _encodePoint(value, last, points, flag, shortFlag, sameFlag) {\n    let diff = value - last;\n    \n    if (value === last) {\n      flag |= sameFlag;\n    } else {\n      if (-255 <= diff && diff <= 255) {\n        flag |= shortFlag;\n        if (diff < 0) {\n          diff = -diff;\n        } else {\n          flag |= sameFlag;\n        }\n      }\n      \n      points.push(diff);\n    }\n    \n    return flag;\n  }\n}\n","import cloneDeep from 'clone';\nimport Subset from './Subset';\nimport Directory from '../tables/directory';\nimport Tables from '../tables';\nimport TTFGlyphEncoder from '../glyph/TTFGlyphEncoder';\n\nexport default class TTFSubset extends Subset {\n  constructor(font) {\n    super(font);\n    this.glyphEncoder = new TTFGlyphEncoder;\n  }\n\n  _addGlyph(gid) {\n    let glyph = this.font.getGlyph(gid);\n    let glyf = glyph._decode();\n\n    // get the offset to the glyph from the loca table\n    let curOffset = this.font.loca.offsets[gid];\n    let nextOffset = this.font.loca.offsets[gid + 1];\n\n    let stream = this.font._getTableStream('glyf');\n    stream.pos += curOffset;\n\n    let buffer = stream.readBuffer(nextOffset - curOffset);\n\n    // if it is a compound glyph, include its components\n    if (glyf && glyf.numberOfContours < 0) {\n      buffer = new Uint8Array(buffer);\n      let view = new DataView(buffer.buffer);\n      for (let component of glyf.components) {\n        gid = this.includeGlyph(component.glyphID);\n        view.setUint16(component.pos, gid);\n      }\n    } else if (glyf && this.font._variationProcessor) {\n      // If this is a TrueType variation glyph, re-encode the path\n      buffer = this.glyphEncoder.encodeSimple(glyph.path, glyf.instructions);\n    }\n\n    this.glyf.push(buffer);\n    this.loca.offsets.push(this.offset);\n\n    this.hmtx.metrics.push({\n      advance: glyph.advanceWidth,\n      bearing: glyph._getMetrics().leftBearing\n    });\n\n    this.offset += buffer.length;\n    return this.glyf.length - 1;\n  }\n\n  encode() {\n    // tables required by PDF spec:\n    //   head, hhea, loca, maxp, cvt , prep, glyf, hmtx, fpgm\n    //\n    // additional tables required for standalone fonts:\n    //   name, cmap, OS/2, post\n\n    this.glyf = [];\n    this.offset = 0;\n    this.loca = {\n      offsets: [],\n      version: this.font.loca.version\n    };\n\n    this.hmtx = {\n      metrics: [],\n      bearings: []\n    };\n\n    // include all the glyphs\n    // not using a for loop because we need to support adding more\n    // glyphs to the array as we go, and CoffeeScript caches the length.\n    let i = 0;\n    while (i < this.glyphs.length) {\n      this._addGlyph(this.glyphs[i++]);\n    }\n\n    let maxp = cloneDeep(this.font.maxp);\n    maxp.numGlyphs = this.glyf.length;\n\n    this.loca.offsets.push(this.offset);\n\n    let head = cloneDeep(this.font.head);\n    head.indexToLocFormat = this.loca.version;\n\n    let hhea = cloneDeep(this.font.hhea);\n    hhea.numberOfMetrics = this.hmtx.metrics.length;\n\n    // map = []\n    // for index in [0...256]\n    //     if index < @numGlyphs\n    //         map[index] = index\n    //     else\n    //         map[index] = 0\n    //\n    // cmapTable =\n    //     version: 0\n    //     length: 262\n    //     language: 0\n    //     codeMap: map\n    //\n    // cmap =\n    //     version: 0\n    //     numSubtables: 1\n    //     tables: [\n    //         platformID: 1\n    //         encodingID: 0\n    //         table: cmapTable\n    //     ]\n\n    // TODO: subset prep, cvt, fpgm?\n    return Directory.toBuffer({\n      tables: {\n        head,\n        hhea,\n        loca: this.loca,\n        maxp,\n        'cvt ': this.font['cvt '],\n        prep: this.font.prep,\n        glyf: this.glyf,\n        hmtx: this.hmtx,\n        fpgm: this.font.fpgm\n\n        // name: clone @font.name\n        // 'OS/2': clone @font['OS/2']\n        // post: clone @font.post\n        // cmap: cmap\n      }\n    });\n  }\n}\n","import Subset from './Subset';\nimport CFFTop from '../cff/CFFTop';\nimport CFFPrivateDict from '../cff/CFFPrivateDict';\nimport standardStrings from '../cff/CFFStandardStrings';\n\nexport default class CFFSubset extends Subset {\n  constructor(font) {\n    super(font);\n\n    this.cff = this.font['CFF '];\n    if (!this.cff) {\n      throw new Error('Not a CFF Font');\n    }\n  }\n\n  subsetCharstrings() {\n    this.charstrings = [];\n    let gsubrs = {};\n\n    for (let gid of this.glyphs) {\n      this.charstrings.push(this.cff.getCharString(gid));\n\n      let glyph = this.font.getGlyph(gid);\n      let path = glyph.path; // this causes the glyph to be parsed\n\n      for (let subr in glyph._usedGsubrs) {\n        gsubrs[subr] = true;\n      }\n    }\n\n    this.gsubrs = this.subsetSubrs(this.cff.globalSubrIndex, gsubrs);\n  }\n\n  subsetSubrs(subrs, used) {\n    let res = [];\n    for (let i = 0; i < subrs.length; i++) {\n      let subr = subrs[i];\n      if (used[i]) {\n        this.cff.stream.pos = subr.offset;\n        res.push(this.cff.stream.readBuffer(subr.length));\n      } else {\n        res.push(new Uint8Array([11])); // return\n      }\n    }\n\n    return res;\n  }\n\n  subsetFontdict(topDict) {\n    topDict.FDArray = [];\n    topDict.FDSelect = {\n      version: 0,\n      fds: []\n    };\n\n    let used_fds = {};\n    let used_subrs = [];\n    let fd_select = {};\n    for (let gid of this.glyphs) {\n      let fd = this.cff.fdForGlyph(gid);\n      if (fd == null) {\n        continue;\n      }\n\n      if (!used_fds[fd]) {\n        topDict.FDArray.push(Object.assign({}, this.cff.topDict.FDArray[fd]));\n        used_subrs.push({});\n        fd_select[fd] = topDict.FDArray.length - 1;\n      }\n\n      used_fds[fd] = true;\n      topDict.FDSelect.fds.push(fd_select[fd]);\n\n      let glyph = this.font.getGlyph(gid);\n      let path = glyph.path; // this causes the glyph to be parsed\n      for (let subr in glyph._usedSubrs) {\n        used_subrs[fd_select[fd]][subr] = true;\n      }\n    }\n\n    for (let i = 0; i < topDict.FDArray.length; i++) {\n      let dict = topDict.FDArray[i];\n      delete dict.FontName;\n      if (dict.Private && dict.Private.Subrs) {\n        dict.Private = Object.assign({}, dict.Private);\n        dict.Private.Subrs = this.subsetSubrs(dict.Private.Subrs, used_subrs[i]);\n      }\n    }\n\n    return;\n  }\n\n  createCIDFontdict(topDict) {\n    let used_subrs = {};\n    for (let gid of this.glyphs) {\n      let glyph = this.font.getGlyph(gid);\n      let path = glyph.path; // this causes the glyph to be parsed\n\n      for (let subr in glyph._usedSubrs) {\n        used_subrs[subr] = true;\n      }\n    }\n\n    let privateDict = Object.assign({}, this.cff.topDict.Private);\n    if (this.cff.topDict.Private && this.cff.topDict.Private.Subrs) {\n      privateDict.Subrs = this.subsetSubrs(this.cff.topDict.Private.Subrs, used_subrs);\n    }\n\n    topDict.FDArray = [{ Private: privateDict }];\n    return topDict.FDSelect = {\n      version: 3,\n      nRanges: 1,\n      ranges: [{ first: 0, fd: 0 }],\n      sentinel: this.charstrings.length\n    };\n  }\n\n  addString(string) {\n    if (!string) {\n      return null;\n    }\n\n    if (!this.strings) {\n      this.strings = [];\n    }\n\n    this.strings.push(string);\n    return standardStrings.length + this.strings.length - 1;\n  }\n\n  encode() {\n    this.subsetCharstrings();\n\n    let charset = {\n      version: this.charstrings.length > 255 ? 2 : 1,\n      ranges: [{ first: 1, nLeft: this.charstrings.length - 2 }]\n    };\n\n    let topDict = Object.assign({}, this.cff.topDict);\n    topDict.Private = null;\n    topDict.charset = charset;\n    topDict.Encoding = null;\n    topDict.CharStrings = this.charstrings;\n\n    for (let key of ['version', 'Notice', 'Copyright', 'FullName', 'FamilyName', 'Weight', 'PostScript', 'BaseFontName', 'FontName']) {\n      topDict[key] = this.addString(this.cff.string(topDict[key]));\n    }\n\n    topDict.ROS = [this.addString('Adobe'), this.addString('Identity'), 0];\n    topDict.CIDCount = this.charstrings.length;\n\n    if (this.cff.isCIDFont) {\n      this.subsetFontdict(topDict);\n    } else {\n      this.createCIDFontdict(topDict);\n    }\n\n    let top = {\n      version: 1,\n      hdrSize: this.cff.hdrSize,\n      offSize: 4,\n      header: this.cff.header,\n      nameIndex: [this.cff.postscriptName],\n      topDictIndex: [topDict],\n      stringIndex: this.strings,\n      globalSubrIndex: this.gsubrs\n    };\n\n    return CFFTop.toBuffer(top);\n  }\n}\n","import * as r from 'restructure';\nimport { cache } from './decorators';\nimport * as fontkit from './base';\nimport Directory from './tables/directory';\nimport tables from './tables';\nimport CmapProcessor from './CmapProcessor';\nimport LayoutEngine from './layout/LayoutEngine';\nimport TTFGlyph from './glyph/TTFGlyph';\nimport CFFGlyph from './glyph/CFFGlyph';\nimport SBIXGlyph from './glyph/SBIXGlyph';\nimport COLRGlyph from './glyph/COLRGlyph';\nimport GlyphVariationProcessor from './glyph/GlyphVariationProcessor';\nimport TTFSubset from './subset/TTFSubset';\nimport CFFSubset from './subset/CFFSubset';\nimport BBox from './glyph/BBox';\nimport { asciiDecoder } from './utils';\n\n/**\n * This is the base class for all SFNT-based font formats in fontkit.\n * It supports TrueType, and PostScript glyphs, and several color glyph formats.\n */\nexport default class TTFFont {\n  type = 'TTF';\n\n  static probe(buffer) {\n    let format = asciiDecoder.decode(buffer.slice(0, 4));\n    return format === 'true' || format === 'OTTO' || format === String.fromCharCode(0, 1, 0, 0);\n  }\n\n  constructor(stream, variationCoords = null) {\n    this.defaultLanguage = null;\n    this.stream = stream;\n    this.variationCoords = variationCoords;\n\n    this._directoryPos = this.stream.pos;\n    this._tables = {};\n    this._glyphs = {};\n    this._decodeDirectory();\n\n    // define properties for each table to lazily parse\n    for (let tag in this.directory.tables) {\n      let table = this.directory.tables[tag];\n      if (tables[tag] && table.length > 0) {\n        Object.defineProperty(this, tag, {\n          get: this._getTable.bind(this, table)\n        });\n      }\n    }\n  }\n\n  setDefaultLanguage(lang = null) {\n    this.defaultLanguage = lang;\n  }\n\n  _getTable(table) {\n    if (!(table.tag in this._tables)) {\n      try {\n        this._tables[table.tag] = this._decodeTable(table);\n      } catch (e) {\n        if (fontkit.logErrors) {\n          console.error(`Error decoding table ${table.tag}`);\n          console.error(e.stack);\n        }\n      }\n    }\n\n    return this._tables[table.tag];\n  }\n\n  _getTableStream(tag) {\n    let table = this.directory.tables[tag];\n    if (table) {\n      this.stream.pos = table.offset;\n      return this.stream;\n    }\n\n    return null;\n  }\n\n  _decodeDirectory() {\n    return this.directory = Directory.decode(this.stream, {_startOffset: 0});\n  }\n\n  _decodeTable(table) {\n    let pos = this.stream.pos;\n\n    let stream = this._getTableStream(table.tag);\n    let result = tables[table.tag].decode(stream, this, table.length);\n\n    this.stream.pos = pos;\n    return result;\n  }\n\n  /**\n   * Gets a string from the font's `name` table\n   * `lang` is a BCP-47 language code.\n   * @return {string}\n   */\n  getName(key, lang = this.defaultLanguage || fontkit.defaultLanguage) {\n    let record = this.name && this.name.records[key];\n    if (record) {\n      // Attempt to retrieve the entry, depending on which translation is available:\n      return (\n          record[lang]\n          || record[this.defaultLanguage]\n          || record[fontkit.defaultLanguage]\n          || record['en']\n          || record[Object.keys(record)[0]] // Seriously, ANY language would be fine\n          || null\n      );\n    }\n\n    return null;\n  }\n\n  /**\n   * The unique PostScript name for this font, e.g. \"Helvetica-Bold\"\n   * @type {string}\n   */\n  get postscriptName() {\n    return this.getName('postscriptName');\n  }\n\n  /**\n   * The font's full name, e.g. \"Helvetica Bold\"\n   * @type {string}\n   */\n  get fullName() {\n    return this.getName('fullName');\n  }\n\n  /**\n   * The font's family name, e.g. \"Helvetica\"\n   * @type {string}\n   */\n  get familyName() {\n    return this.getName('fontFamily');\n  }\n\n  /**\n   * The font's sub-family, e.g. \"Bold\".\n   * @type {string}\n   */\n  get subfamilyName() {\n    return this.getName('fontSubfamily');\n  }\n\n  /**\n   * The font's copyright information\n   * @type {string}\n   */\n  get copyright() {\n    return this.getName('copyright');\n  }\n\n  /**\n   * The font's version number\n   * @type {string}\n   */\n  get version() {\n    return this.getName('version');\n  }\n\n  /**\n   * The font’s [ascender](https://en.wikipedia.org/wiki/Ascender_(typography))\n   * @type {number}\n   */\n  get ascent() {\n    return this.hhea.ascent;\n  }\n\n  /**\n   * The font’s [descender](https://en.wikipedia.org/wiki/Descender)\n   * @type {number}\n   */\n  get descent() {\n    return this.hhea.descent;\n  }\n\n  /**\n   * The amount of space that should be included between lines\n   * @type {number}\n   */\n  get lineGap() {\n    return this.hhea.lineGap;\n  }\n\n  /**\n   * The offset from the normal underline position that should be used\n   * @type {number}\n   */\n  get underlinePosition() {\n    return this.post.underlinePosition;\n  }\n\n  /**\n   * The weight of the underline that should be used\n   * @type {number}\n   */\n  get underlineThickness() {\n    return this.post.underlineThickness;\n  }\n\n  /**\n   * If this is an italic font, the angle the cursor should be drawn at to match the font design\n   * @type {number}\n   */\n  get italicAngle() {\n    return this.post.italicAngle;\n  }\n\n  /**\n   * The height of capital letters above the baseline.\n   * See [here](https://en.wikipedia.org/wiki/Cap_height) for more details.\n   * @type {number}\n   */\n  get capHeight() {\n    let os2 = this['OS/2'];\n    return os2 ? os2.capHeight : this.ascent;\n  }\n\n  /**\n   * The height of lower case letters in the font.\n   * See [here](https://en.wikipedia.org/wiki/X-height) for more details.\n   * @type {number}\n   */\n  get xHeight() {\n    let os2 = this['OS/2'];\n    return os2 ? os2.xHeight : 0;\n  }\n\n  /**\n   * The number of glyphs in the font.\n   * @type {number}\n   */\n  get numGlyphs() {\n    return this.maxp.numGlyphs;\n  }\n\n  /**\n   * The size of the font’s internal coordinate grid\n   * @type {number}\n   */\n  get unitsPerEm() {\n    return this.head.unitsPerEm;\n  }\n\n  /**\n   * The font’s bounding box, i.e. the box that encloses all glyphs in the font.\n   * @type {BBox}\n   */\n  @cache\n  get bbox() {\n    return Object.freeze(new BBox(this.head.xMin, this.head.yMin, this.head.xMax, this.head.yMax));\n  }\n\n  @cache\n  get _cmapProcessor() {\n    return new CmapProcessor(this.cmap);\n  }\n\n  /**\n   * An array of all of the unicode code points supported by the font.\n   * @type {number[]}\n   */\n  @cache\n  get characterSet() {\n    return this._cmapProcessor.getCharacterSet();\n  }\n\n  /**\n   * Returns whether there is glyph in the font for the given unicode code point.\n   *\n   * @param {number} codePoint\n   * @return {boolean}\n   */\n  hasGlyphForCodePoint(codePoint) {\n    return !!this._cmapProcessor.lookup(codePoint);\n  }\n\n  /**\n   * Maps a single unicode code point to a Glyph object.\n   * Does not perform any advanced substitutions (there is no context to do so).\n   *\n   * @param {number} codePoint\n   * @return {Glyph}\n   */\n  glyphForCodePoint(codePoint) {\n    return this.getGlyph(this._cmapProcessor.lookup(codePoint), [codePoint]);\n  }\n\n  /**\n   * Returns an array of Glyph objects for the given string.\n   * This is only a one-to-one mapping from characters to glyphs.\n   * For most uses, you should use font.layout (described below), which\n   * provides a much more advanced mapping supporting AAT and OpenType shaping.\n   *\n   * @param {string} string\n   * @return {Glyph[]}\n   */\n  glyphsForString(string) {\n    let glyphs = [];\n    let len = string.length;\n    let idx = 0;\n    let last = -1;\n    let state = -1;\n\n    while (idx <= len) {\n      let code = 0;\n      let nextState = 0;\n\n      if (idx < len) {\n        // Decode the next codepoint from UTF 16\n        code = string.charCodeAt(idx++);\n        if (0xd800 <= code && code <= 0xdbff && idx < len) {\n          let next = string.charCodeAt(idx);\n          if (0xdc00 <= next && next <= 0xdfff) {\n            idx++;\n            code = ((code & 0x3ff) << 10) + (next & 0x3ff) + 0x10000;\n          }\n        }\n\n        // Compute the next state: 1 if the next codepoint is a variation selector, 0 otherwise.\n        nextState = ((0xfe00 <= code && code <= 0xfe0f) || (0xe0100 <= code && code <= 0xe01ef)) ? 1 : 0;\n      } else {\n        idx++;\n      }\n\n      if (state === 0 && nextState === 1) {\n        // Variation selector following normal codepoint.\n        glyphs.push(this.getGlyph(this._cmapProcessor.lookup(last, code), [last, code]));\n      } else if (state === 0 && nextState === 0) {\n        // Normal codepoint following normal codepoint.\n        glyphs.push(this.glyphForCodePoint(last));\n      }\n\n      last = code;\n      state = nextState;\n    }\n\n    return glyphs;\n  }\n\n  @cache\n  get _layoutEngine() {\n    return new LayoutEngine(this);\n  }\n\n  /**\n   * Returns a GlyphRun object, which includes an array of Glyphs and GlyphPositions for the given string.\n   *\n   * @param {string} string\n   * @param {string[]} [userFeatures]\n   * @param {string} [script]\n   * @param {string} [language]\n   * @param {string} [direction]\n   * @return {GlyphRun}\n   */\n  layout(string, userFeatures, script, language, direction) {\n    return this._layoutEngine.layout(string, userFeatures, script, language, direction);\n  }\n\n  /**\n   * Returns an array of strings that map to the given glyph id.\n   * @param {number} gid - glyph id\n   */\n  stringsForGlyph(gid) {\n    return this._layoutEngine.stringsForGlyph(gid);\n  }\n\n  /**\n   * An array of all [OpenType feature tags](https://www.microsoft.com/typography/otspec/featuretags.htm)\n   * (or mapped AAT tags) supported by the font.\n   * The features parameter is an array of OpenType feature tags to be applied in addition to the default set.\n   * If this is an AAT font, the OpenType feature tags are mapped to AAT features.\n   *\n   * @type {string[]}\n   */\n  get availableFeatures() {\n    return this._layoutEngine.getAvailableFeatures();\n  }\n\n  getAvailableFeatures(script, language) {\n    return this._layoutEngine.getAvailableFeatures(script, language);\n  }\n\n  _getBaseGlyph(glyph, characters = []) {\n    if (!this._glyphs[glyph]) {\n      if (this.directory.tables.glyf) {\n        this._glyphs[glyph] = new TTFGlyph(glyph, characters, this);\n\n      } else if (this.directory.tables['CFF '] || this.directory.tables.CFF2) {\n        this._glyphs[glyph] = new CFFGlyph(glyph, characters, this);\n      }\n    }\n\n    return this._glyphs[glyph] || null;\n  }\n\n  /**\n   * Returns a glyph object for the given glyph id.\n   * You can pass the array of code points this glyph represents for\n   * your use later, and it will be stored in the glyph object.\n   *\n   * @param {number} glyph\n   * @param {number[]} characters\n   * @return {Glyph}\n   */\n  getGlyph(glyph, characters = []) {\n    if (!this._glyphs[glyph]) {\n      if (this.directory.tables.sbix) {\n        this._glyphs[glyph] = new SBIXGlyph(glyph, characters, this);\n\n      } else if ((this.directory.tables.COLR) && (this.directory.tables.CPAL)) {\n        this._glyphs[glyph] = new COLRGlyph(glyph, characters, this);\n\n      } else {\n        this._getBaseGlyph(glyph, characters);\n      }\n    }\n\n    return this._glyphs[glyph] || null;\n  }\n\n  /**\n   * Returns a Subset for this font.\n   * @return {Subset}\n   */\n  createSubset() {\n    if (this.directory.tables['CFF ']) {\n      return new CFFSubset(this);\n    }\n\n    return new TTFSubset(this);\n  }\n\n  /**\n   * Returns an object describing the available variation axes\n   * that this font supports. Keys are setting tags, and values\n   * contain the axis name, range, and default value.\n   *\n   * @type {object}\n   */\n  @cache\n  get variationAxes() {\n    let res = {};\n    if (!this.fvar) {\n      return res;\n    }\n\n    for (let axis of this.fvar.axis) {\n      res[axis.axisTag.trim()] = {\n        name: axis.name.en,\n        min: axis.minValue,\n        default: axis.defaultValue,\n        max: axis.maxValue\n      };\n    }\n\n    return res;\n  }\n\n  /**\n   * Returns an object describing the named variation instances\n   * that the font designer has specified. Keys are variation names\n   * and values are the variation settings for this instance.\n   *\n   * @type {object}\n   */\n  @cache\n  get namedVariations() {\n    let res = {};\n    if (!this.fvar) {\n      return res;\n    }\n\n    for (let instance of this.fvar.instance) {\n      let settings = {};\n      for (let i = 0; i < this.fvar.axis.length; i++) {\n        let axis = this.fvar.axis[i];\n        settings[axis.axisTag.trim()] = instance.coord[i];\n      }\n\n      res[instance.name.en] = settings;\n    }\n\n    return res;\n  }\n\n  /**\n   * Returns a new font with the given variation settings applied.\n   * Settings can either be an instance name, or an object containing\n   * variation tags as specified by the `variationAxes` property.\n   *\n   * @param {object} settings\n   * @return {TTFFont}\n   */\n  getVariation(settings) {\n    if (!(this.directory.tables.fvar && ((this.directory.tables.gvar && this.directory.tables.glyf) || this.directory.tables.CFF2))) {\n      throw new Error('Variations require a font with the fvar, gvar and glyf, or CFF2 tables.');\n    }\n\n    if (typeof settings === 'string') {\n      settings = this.namedVariations[settings];\n    }\n\n    if (typeof settings !== 'object') {\n      throw new Error('Variation settings must be either a variation name or settings object.');\n    }\n\n    // normalize the coordinates\n    let coords = this.fvar.axis.map((axis, i) => {\n      let axisTag = axis.axisTag.trim();\n      if (axisTag in settings) {\n        return Math.max(axis.minValue, Math.min(axis.maxValue, settings[axisTag]));\n      } else {\n        return axis.defaultValue;\n      }\n    });\n\n    let stream = new r.DecodeStream(this.stream.buffer);\n    stream.pos = this._directoryPos;\n\n    let font = new TTFFont(stream, coords);\n    font._tables = this._tables;\n\n    return font;\n  }\n\n  @cache\n  get _variationProcessor() {\n    if (!this.fvar) {\n      return null;\n    }\n\n    let variationCoords = this.variationCoords;\n\n    // Ignore if no variation coords and not CFF2\n    if (!variationCoords && !this.CFF2) {\n      return null;\n    }\n\n    if (!variationCoords) {\n      variationCoords = this.fvar.axis.map(axis => axis.defaultValue);\n    }\n\n    return new GlyphVariationProcessor(this, variationCoords);\n  }\n\n  // Standardized format plugin API\n  getFont(name) {\n    return this.getVariation(name);\n  }\n}\n","import * as r from 'restructure';\nimport tables from './';\n\nlet WOFFDirectoryEntry = new r.Struct({\n  tag:          new r.String(4),\n  offset:       new r.Pointer(r.uint32, 'void', {type: 'global'}),\n  compLength:   r.uint32,\n  length:       r.uint32,\n  origChecksum: r.uint32\n});\n\nlet WOFFDirectory = new r.Struct({\n  tag:            new r.String(4), // should be 'wOFF'\n  flavor:         r.uint32,\n  length:         r.uint32,\n  numTables:      r.uint16,\n  reserved:       new r.Reserved(r.uint16),\n  totalSfntSize:  r.uint32,\n  majorVersion:   r.uint16,\n  minorVersion:   r.uint16,\n  metaOffset:     r.uint32,\n  metaLength:     r.uint32,\n  metaOrigLength: r.uint32,\n  privOffset:     r.uint32,\n  privLength:     r.uint32,\n  tables:         new r.Array(WOFFDirectoryEntry, 'numTables')\n});\n\nWOFFDirectory.process = function() {\n  let tables = {};\n  for (let table of this.tables) {\n    tables[table.tag] = table;\n  }\n\n  this.tables = tables;\n};\n\nexport default WOFFDirectory;\n","import TTFFont from './TTFFont';\nimport WOFFDirectory from './tables/WOFFDirectory';\nimport tables from './tables';\nimport inflate from 'tiny-inflate';\nimport * as r from 'restructure';\nimport { asciiDecoder } from './utils';\n\nexport default class WOFFFont extends TTFFont {\n  type = 'WOFF';\n\n  static probe(buffer) {\n    return asciiDecoder.decode(buffer.slice(0, 4)) === 'wOFF';\n  }\n\n  _decodeDirectory() {\n    this.directory = WOFFDirectory.decode(this.stream, { _startOffset: 0 });\n  }\n\n  _getTableStream(tag) {\n    let table = this.directory.tables[tag];\n    if (table) {\n      this.stream.pos = table.offset;\n\n      if (table.compLength < table.length) {\n        this.stream.pos += 2; // skip deflate header\n        let outBuffer = new Uint8Array(table.length);\n        let buf = inflate(this.stream.readBuffer(table.compLength - 2), outBuffer);\n        return new r.DecodeStream(buf);\n      } else {\n        return this.stream;\n      }\n    }\n\n    return null;\n  }\n}\n","import TTFGlyph from './TTFGlyph';\n\n/**\n * Represents a TrueType glyph in the WOFF2 format, which compresses glyphs differently.\n */\nexport default class WOFF2Glyph extends TTFGlyph {\n  type = 'WOFF2';\n\n  _decode() {\n    // We have to decode in advance (in WOFF2Font), so just return the pre-decoded data.\n    return this._font._transformedGlyphs[this.id];\n  }\n\n  _getCBox() {\n    return this.path.bbox;\n  }\n}\n","import * as r from 'restructure';\n\nconst Base128 = {\n  decode(stream) {\n    let result = 0;\n    let iterable = [0, 1, 2, 3, 4];\n    for (let j = 0; j < iterable.length; j++) {\n      let i = iterable[j];\n      let code = stream.readUInt8();\n\n      // If any of the top seven bits are set then we're about to overflow.\n      if (result & 0xe0000000) {\n        throw new Error('Overflow');\n      }\n\n      result = (result << 7) | (code & 0x7f);\n      if ((code & 0x80) === 0) {\n        return result;\n      }\n    }\n\n    throw new Error('Bad base 128 number');\n  }\n};\n\nlet knownTags = [\n  'cmap', 'head', 'hhea', 'hmtx', 'maxp', 'name', 'OS/2', 'post', 'cvt ',\n  'fpgm', 'glyf', 'loca', 'prep', 'CFF ', 'VORG', 'EBDT', 'EBLC', 'gasp',\n  'hdmx', 'kern', 'LTSH', 'PCLT', 'VDMX', 'vhea', 'vmtx', 'BASE', 'GDEF',\n  'GPOS', 'GSUB', 'EBSC', 'JSTF', 'MATH', 'CBDT', 'CBLC', 'COLR', 'CPAL',\n  'SVG ', 'sbix', 'acnt', 'avar', 'bdat', 'bloc', 'bsln', 'cvar', 'fdsc',\n  'feat', 'fmtx', 'fvar', 'gvar', 'hsty', 'just', 'lcar', 'mort', 'morx',\n  'opbd', 'prop', 'trak', 'Zapf', 'Silf', 'Glat', 'Gloc', 'Feat', 'Sill'\n];\n\nlet WOFF2DirectoryEntry = new r.Struct({\n  flags: r.uint8,\n  customTag: new r.Optional(new r.String(4), t => (t.flags & 0x3f) === 0x3f),\n  tag: t => t.customTag || knownTags[t.flags & 0x3f],// || (() => { throw new Error(`Bad tag: ${flags & 0x3f}`); })(); },\n  length: Base128,\n  transformVersion: t => (t.flags >>> 6) & 0x03,\n  transformed: t => (t.tag === 'glyf' || t.tag === 'loca') ? t.transformVersion === 0 : t.transformVersion !== 0,\n  transformLength: new r.Optional(Base128, t => t.transformed)\n});\n\nlet WOFF2Directory = new r.Struct({\n  tag: new r.String(4), // should be 'wOF2'\n  flavor: r.uint32,\n  length: r.uint32,\n  numTables: r.uint16,\n  reserved: new r.Reserved(r.uint16),\n  totalSfntSize: r.uint32,\n  totalCompressedSize: r.uint32,\n  majorVersion: r.uint16,\n  minorVersion: r.uint16,\n  metaOffset: r.uint32,\n  metaLength: r.uint32,\n  metaOrigLength: r.uint32,\n  privOffset: r.uint32,\n  privLength: r.uint32,\n  tables: new r.Array(WOFF2DirectoryEntry, 'numTables')\n});\n\nWOFF2Directory.process = function() {\n  let tables = {};\n  for (let i = 0; i < this.tables.length; i++) {\n    let table = this.tables[i];\n    tables[table.tag] = table;\n  }\n\n  return this.tables = tables;\n};\n\nexport default WOFF2Directory;\n","import * as r from 'restructure';\nimport brotli from 'brotli/decompress.js';\nimport TTFFont from './TTFFont';\nimport TTFGlyph, { Point } from './glyph/TTFGlyph';\nimport WOFF2Glyph from './glyph/WOFF2Glyph';\nimport WOFF2Directory from './tables/WOFF2Directory';\nimport { asciiDecoder } from './utils';\n\n/**\n * Subclass of TTFFont that represents a TTF/OTF font compressed by WOFF2\n * See spec here: http://www.w3.org/TR/WOFF2/\n */\nexport default class WOFF2Font extends TTFFont {\n  type = 'WOFF2';\n\n  static probe(buffer) {\n    return asciiDecoder.decode(buffer.slice(0, 4)) === 'wOF2';\n  }\n\n  _decodeDirectory() {\n    this.directory = WOFF2Directory.decode(this.stream);\n    this._dataPos = this.stream.pos;\n  }\n\n  _decompress() {\n    // decompress data and setup table offsets if we haven't already\n    if (!this._decompressed) {\n      this.stream.pos = this._dataPos;\n      let buffer = this.stream.readBuffer(this.directory.totalCompressedSize);\n\n      let decompressedSize = 0;\n      for (let tag in this.directory.tables) {\n        let entry = this.directory.tables[tag];\n        entry.offset = decompressedSize;\n        decompressedSize += (entry.transformLength != null) ? entry.transformLength : entry.length;\n      }\n\n      let decompressed = brotli(buffer, decompressedSize);\n      if (!decompressed) {\n        throw new Error('Error decoding compressed data in WOFF2');\n      }\n\n      this.stream = new r.DecodeStream(decompressed);\n      this._decompressed = true;\n    }\n  }\n\n  _decodeTable(table) {\n    this._decompress();\n    return super._decodeTable(table);\n  }\n\n  // Override this method to get a glyph and return our\n  // custom subclass if there is a glyf table.\n  _getBaseGlyph(glyph, characters = []) {\n    if (!this._glyphs[glyph]) {\n      if (this.directory.tables.glyf && this.directory.tables.glyf.transformed) {\n        if (!this._transformedGlyphs) { this._transformGlyfTable(); }\n        return this._glyphs[glyph] = new WOFF2Glyph(glyph, characters, this);\n\n      } else {\n        return super._getBaseGlyph(glyph, characters);\n      }\n    }\n  }\n\n  _transformGlyfTable() {\n    this._decompress();\n    this.stream.pos = this.directory.tables.glyf.offset;\n    let table = GlyfTable.decode(this.stream);\n    let glyphs = [];\n\n    for (let index = 0; index < table.numGlyphs; index++) {\n      let glyph = {};\n      let nContours = table.nContours.readInt16BE();\n      glyph.numberOfContours = nContours;\n\n      if (nContours > 0) { // simple glyph\n        let nPoints = [];\n        let totalPoints = 0;\n\n        for (let i = 0; i < nContours; i++) {\n          let r = read255UInt16(table.nPoints);\n          totalPoints += r;\n          nPoints.push(totalPoints);\n        }\n\n        glyph.points = decodeTriplet(table.flags, table.glyphs, totalPoints);\n        for (let i = 0; i < nContours; i++) {\n          glyph.points[nPoints[i] - 1].endContour = true;\n        }\n\n        var instructionSize = read255UInt16(table.glyphs);\n\n      } else if (nContours < 0) { // composite glyph\n        let haveInstructions = TTFGlyph.prototype._decodeComposite.call({ _font: this }, glyph, table.composites);\n        if (haveInstructions) {\n          var instructionSize = read255UInt16(table.glyphs);\n        }\n      }\n\n      glyphs.push(glyph);\n    }\n\n    this._transformedGlyphs = glyphs;\n  }\n}\n\n// Special class that accepts a length and returns a sub-stream for that data\nclass Substream {\n  constructor(length) {\n    this.length = length;\n    this._buf = new r.Buffer(length);\n  }\n\n  decode(stream, parent) {\n    return new r.DecodeStream(this._buf.decode(stream, parent));\n  }\n}\n\n// This struct represents the entire glyf table\nlet GlyfTable = new r.Struct({\n  version: r.uint32,\n  numGlyphs: r.uint16,\n  indexFormat: r.uint16,\n  nContourStreamSize: r.uint32,\n  nPointsStreamSize: r.uint32,\n  flagStreamSize: r.uint32,\n  glyphStreamSize: r.uint32,\n  compositeStreamSize: r.uint32,\n  bboxStreamSize: r.uint32,\n  instructionStreamSize: r.uint32,\n  nContours: new Substream('nContourStreamSize'),\n  nPoints: new Substream('nPointsStreamSize'),\n  flags: new Substream('flagStreamSize'),\n  glyphs: new Substream('glyphStreamSize'),\n  composites: new Substream('compositeStreamSize'),\n  bboxes: new Substream('bboxStreamSize'),\n  instructions: new Substream('instructionStreamSize')\n});\n\nconst WORD_CODE = 253;\nconst ONE_MORE_BYTE_CODE2 = 254;\nconst ONE_MORE_BYTE_CODE1 = 255;\nconst LOWEST_U_CODE = 253;\n\nfunction read255UInt16(stream) {\n  let code = stream.readUInt8();\n\n  if (code === WORD_CODE) {\n    return stream.readUInt16BE();\n  }\n\n  if (code === ONE_MORE_BYTE_CODE1) {\n    return stream.readUInt8() + LOWEST_U_CODE;\n  }\n\n  if (code === ONE_MORE_BYTE_CODE2) {\n    return stream.readUInt8() + LOWEST_U_CODE * 2;\n  }\n\n  return code;\n}\n\nfunction withSign(flag, baseval) {\n  return flag & 1 ? baseval : -baseval;\n}\n\nfunction decodeTriplet(flags, glyphs, nPoints) {\n  let y;\n  let x = y = 0;\n  let res = [];\n\n  for (let i = 0; i < nPoints; i++) {\n    let dx = 0, dy = 0;\n    let flag = flags.readUInt8();\n    let onCurve = !(flag >> 7);\n    flag &= 0x7f;\n\n    if (flag < 10) {\n      dx = 0;\n      dy = withSign(flag, ((flag & 14) << 7) + glyphs.readUInt8());\n\n    } else if (flag < 20) {\n      dx = withSign(flag, (((flag - 10) & 14) << 7) + glyphs.readUInt8());\n      dy = 0;\n\n    } else if (flag < 84) {\n      var b0 = flag - 20;\n      var b1 = glyphs.readUInt8();\n      dx = withSign(flag, 1 + (b0 & 0x30) + (b1 >> 4));\n      dy = withSign(flag >> 1, 1 + ((b0 & 0x0c) << 2) + (b1 & 0x0f));\n\n    } else if (flag < 120) {\n      var b0 = flag - 84;\n      dx = withSign(flag, 1 + ((b0 / 12) << 8) + glyphs.readUInt8());\n      dy = withSign(flag >> 1, 1 + (((b0 % 12) >> 2) << 8) + glyphs.readUInt8());\n\n    } else if (flag < 124) {\n      var b1 = glyphs.readUInt8();\n      let b2 = glyphs.readUInt8();\n      dx = withSign(flag, (b1 << 4) + (b2 >> 4));\n      dy = withSign(flag >> 1, ((b2 & 0x0f) << 8) + glyphs.readUInt8());\n\n    } else {\n      dx = withSign(flag, glyphs.readUInt16BE());\n      dy = withSign(flag >> 1, glyphs.readUInt16BE());\n    }\n\n    x += dx;\n    y += dy;\n    res.push(new Point(onCurve, false, x, y));\n  }\n\n  return res;\n}\n","import * as r from 'restructure';\nimport TTFFont from './TTFFont';\nimport Directory from './tables/directory';\nimport tables from './tables';\nimport { asciiDecoder } from './utils';\n\nlet TTCHeader = new r.VersionedStruct(r.uint32, {\n  0x00010000: {\n    numFonts:   r.uint32,\n    offsets:    new r.Array(r.uint32, 'numFonts')\n  },\n  0x00020000: {\n    numFonts:   r.uint32,\n    offsets:    new r.Array(r.uint32, 'numFonts'),\n    dsigTag:    r.uint32,\n    dsigLength: r.uint32,\n    dsigOffset: r.uint32\n  }\n});\n\nexport default class TrueTypeCollection {\n  type = 'TTC';\n\n  static probe(buffer) {\n    return asciiDecoder.decode(buffer.slice(0, 4)) === 'ttcf';\n  }\n\n  constructor(stream) {\n    this.stream = stream;\n    if (stream.readString(4) !== 'ttcf') {\n      throw new Error('Not a TrueType collection');\n    }\n\n    this.header = TTCHeader.decode(stream);\n  }\n\n  getFont(name) {\n    for (let offset of this.header.offsets) {\n      let stream = new r.DecodeStream(this.stream.buffer);\n      stream.pos = offset;\n      let font = new TTFFont(stream);\n      if (\n        font.postscriptName === name ||\n        (\n          font.postscriptName instanceof Uint8Array && \n          name instanceof Uint8Array && \n          font.postscriptName.every((v, i) => name[i] === v)\n        )\n      ) {\n        return font;\n      }\n    }\n\n    return null;\n  }\n\n  get fonts() {\n    let fonts = [];\n    for (let offset of this.header.offsets) {\n      let stream = new r.DecodeStream(this.stream.buffer);\n      stream.pos = offset;\n      fonts.push(new TTFFont(stream));\n    }\n\n    return fonts;\n  }\n}\n","import * as r from 'restructure';\nimport TTFFont from './TTFFont';\n\nlet DFontName = new r.String(r.uint8);\nlet DFontData = new r.Struct({\n  len: r.uint32,\n  buf: new r.Buffer('len')\n});\n\nlet Ref = new r.Struct({\n  id: r.uint16,\n  nameOffset: r.int16,\n  attr: r.uint8,\n  dataOffset: r.uint24,\n  handle: r.uint32\n});\n\nlet Type = new r.Struct({\n  name: new r.String(4),\n  maxTypeIndex: r.uint16,\n  refList: new r.Pointer(r.uint16, new r.Array(Ref, t => t.maxTypeIndex + 1), { type: 'parent' })\n});\n\nlet TypeList = new r.Struct({\n  length: r.uint16,\n  types: new r.Array(Type, t => t.length + 1)\n});\n\nlet DFontMap = new r.Struct({\n  reserved: new r.Reserved(r.uint8, 24),\n  typeList: new r.Pointer(r.uint16, TypeList),\n  nameListOffset: new r.Pointer(r.uint16, 'void')\n});\n\nlet DFontHeader = new r.Struct({\n  dataOffset: r.uint32,\n  map: new r.Pointer(r.uint32, DFontMap),\n  dataLength: r.uint32,\n  mapLength: r.uint32\n});\n\nexport default class DFont {\n  type = 'DFont';\n\n  static probe(buffer) {\n    let stream = new r.DecodeStream(buffer);\n\n    try {\n      var header = DFontHeader.decode(stream);\n    } catch (e) {\n      return false;\n    }\n\n    for (let type of header.map.typeList.types) {\n      if (type.name === 'sfnt') {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  constructor(stream) {\n    this.stream = stream;\n    this.header = DFontHeader.decode(this.stream);\n\n    for (let type of this.header.map.typeList.types) {\n      for (let ref of type.refList) {\n        if (ref.nameOffset >= 0) {\n          this.stream.pos = ref.nameOffset + this.header.map.nameListOffset;\n          ref.name = DFontName.decode(this.stream);\n        } else {\n          ref.name = null;\n        }\n      }\n\n      if (type.name === 'sfnt') {\n        this.sfnt = type;\n      }\n    }\n  }\n\n  getFont(name) {\n    if (!this.sfnt) {\n      return null;\n    }\n\n    for (let ref of this.sfnt.refList) {\n      let pos = this.header.dataOffset + ref.dataOffset + 4;\n      let stream = new r.DecodeStream(this.stream.buffer.slice(pos));\n      let font = new TTFFont(stream);\n      if (\n        font.postscriptName === name ||\n        (\n          font.postscriptName instanceof Uint8Array && \n          name instanceof Uint8Array && \n          font.postscriptName.every((v, i) => name[i] === v)\n        )\n      ) {\n        return font;\n      }\n    }\n\n    return null;\n  }\n\n  get fonts() {\n    let fonts = [];\n    for (let ref of this.sfnt.refList) {\n      let pos = this.header.dataOffset + ref.dataOffset + 4;\n      let stream = new r.DecodeStream(this.stream.buffer.slice(pos));\n      fonts.push(new TTFFont(stream));\n    }\n\n    return fonts;\n  }\n}\n","import { registerFormat, create, defaultLanguage, setDefaultLanguage } from './base';\nimport TTFFont from './TTFFont';\nimport WOFFFont from './WOFFFont';\nimport WOFF2Font from './WOFF2Font';\nimport TrueTypeCollection from './TrueTypeCollection';\nimport DFont from './DFont';\n\n// Register font formats\nregisterFormat(TTFFont);\nregisterFormat(WOFFFont);\nregisterFormat(WOFF2Font);\nregisterFormat(TrueTypeCollection);\nregisterFormat(DFont);\n\nexport * from './base';\n"]},"metadata":{},"sourceType":"module"}