{"ast":null,"code":"/** Text hyphenation in Javascript.\n *  Copyright (C) 2024 Yevhen Tiurin (yevhentiurin@gmail.com)\n *  https://github.com/ytiurin/hyphen\n *\n *  Released under the ISC license\n *  https://github.com/ytiurin/hyphen/blob/master/LICENSE\n */\n(function (root, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if (typeof module === \"object\" && module.exports) {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = factory();\n  } else {\n    // Browser globals (root is window)\n    root.createHyphenator = factory();\n  }\n})(this, function () {\n  function createTextReader(setup) {\n    var char1 = \"\";\n    var char2 = \"\";\n    var i = 0;\n    var verifier = setup();\n    return function (text) {\n      while (i < text.length) {\n        char1 = text.charAt(i++);\n        char2 = text.charAt(i);\n        var verified = verifier(char1, char2);\n\n        if (verified !== void 0) {\n          return verified;\n        }\n      }\n    };\n  }\n\n  var isNotLetter = RegExp.prototype.test.bind(/\\s|(?![\\'])[\\!-\\@\\[-\\`\\{-\\~\\u2013-\\u203C]/);\n\n  function createHTMLVerifier() {\n    var skip = false;\n    return function (accumulate, chars) {\n      if (skip) {\n        if (chars[0] === \">\") {\n          accumulate();\n          skip = false;\n        }\n      } else if (chars[0] === \"<\" && (!isNotLetter(chars[1]) || chars[1] === \"/\")) {\n        skip = true;\n      }\n\n      return skip;\n    };\n  }\n\n  function createHyphenCharVerifier(hyphenChar) {\n    var skip = false;\n    return function (accumulate, chars) {\n      if (skip) {\n        if (!isNotLetter(chars[0]) && isNotLetter(chars[1])) {\n          accumulate();\n          skip = false;\n        }\n      } else if (!isNotLetter(chars[0]) && chars[1] === hyphenChar) {\n        skip = true;\n      }\n\n      return skip;\n    };\n  }\n\n  function createHyphenationVerifier(verifiers, minWordLength) {\n    return function () {\n      var accum0 = \"\";\n      var accum = \"\";\n\n      function accumulate() {\n        accum0 += accum;\n        accum = \"\";\n      }\n\n      function resolveWith(value) {\n        accum0 = \"\";\n        accum = \"\";\n        return value;\n      }\n\n      return function (char1, char2) {\n        accum += char1;\n        var skip = verifiers.reduce(function (skip2, verify) {\n          return skip2 || verify(accumulate, [char1, char2]);\n        }, false);\n\n        if (!skip) {\n          if (isNotLetter(char1) && !isNotLetter(char2)) {\n            accumulate();\n          }\n\n          if (!isNotLetter(char1) && isNotLetter(char2)) {\n            if (accum.length >= minWordLength) {\n              return resolveWith([accum0, accum]);\n            } else {\n              accumulate();\n            }\n          }\n        }\n\n        if (char2 === \"\") {\n          if (accum.length < minWordLength || skip) {\n            accumulate();\n          }\n\n          return resolveWith([accum0, accum]);\n        }\n      };\n    };\n  }\n\n  function createCharIterator(str) {\n    var i = 0;\n\n    function nextChar() {\n      return str[i++];\n    }\n\n    return nextChar;\n  }\n\n  function createStringSlicer(str) {\n    var i = 0,\n        slice = str;\n\n    function next() {\n      slice = str.slice(i++);\n\n      if (slice.length < 3) {\n        return;\n      }\n\n      return slice;\n    }\n\n    function isFirstCharacter() {\n      return i === 2;\n    }\n\n    return [next, isFirstCharacter];\n  }\n\n  function hyphenateWord(text, levelsTable, patternTrie, debug, hyphenChar) {\n    var levels = new Array(text.length + 1),\n        loweredText = (\".\" + text.toLocaleLowerCase() + \".\").split(\"\"),\n        wordSlice,\n        letter,\n        triePtr,\n        trieNode,\n        patternLevelsIndex,\n        patternLevels,\n        patternEntityIndex = -1,\n        slicer,\n        nextSlice,\n        isFirstCharacter,\n        nextLetter;\n\n    for (var i = levels.length; i--;) {\n      levels[i] = 0;\n    }\n\n    slicer = createStringSlicer(loweredText);\n    nextSlice = slicer[0];\n    isFirstCharacter = slicer[1];\n\n    while (wordSlice = nextSlice()) {\n      patternEntityIndex++;\n\n      if (isFirstCharacter()) {\n        patternEntityIndex--;\n      }\n\n      triePtr = patternTrie;\n      nextLetter = createCharIterator(wordSlice);\n\n      while (letter = nextLetter()) {\n        if ((trieNode = triePtr[letter]) === void 0) {\n          break;\n        }\n\n        triePtr = {};\n        patternLevelsIndex = -1;\n\n        switch (Object.prototype.toString.call(trieNode)) {\n          case \"[object Array]\":\n            triePtr = trieNode[0];\n            patternLevelsIndex = trieNode[1];\n            break;\n\n          case \"[object Object]\":\n            triePtr = trieNode;\n            break;\n\n          case \"[object Number]\":\n            patternLevelsIndex = trieNode;\n            break;\n        }\n\n        if (patternLevelsIndex < 0) {\n          continue;\n        }\n\n        if (!levelsTable[patternLevelsIndex].splice) {\n          levelsTable[patternLevelsIndex] = levelsTable[patternLevelsIndex].slice(\"\");\n        }\n\n        patternLevels = levelsTable[patternLevelsIndex];\n\n        for (var k = 0; k < patternLevels.length; k++) {\n          levels[patternEntityIndex + k] = Math.max(patternLevels[k], levels[patternEntityIndex + k]);\n        }\n      }\n    }\n\n    levels[0] = levels[1] = levels[levels.length - 1] = levels[levels.length - 2] = 0;\n    var hyphenatedText = \"\";\n\n    for (var i = 0; i < levels.length; i++) {\n      hyphenatedText += (levels[i] % 2 === 1 ? hyphenChar : \"\") + text.charAt(i);\n    }\n\n    return hyphenatedText;\n  }\n\n  function start(text, levelsTable, patterns, cache, debug, hyphenChar, skipHTML, minWordLength, isAsync) {\n    function done() {\n      resolveNewText(newText);\n    }\n\n    var newText = \"\",\n        fragments,\n        readText = createTextReader(createHyphenationVerifier((skipHTML ? [createHTMLVerifier()] : []).concat(createHyphenCharVerifier(hyphenChar)), minWordLength)),\n        resolveNewText = function resolveNewText() {};\n\n    function nextTick() {\n      var loopStart = /* @__PURE__ */new Date();\n\n      while ((!isAsync || /* @__PURE__ */new Date() - loopStart < 10) && (fragments = readText(text))) {\n        if (fragments[1]) {\n          var cacheKey = fragments[1].length ? \"~\" + fragments[1] : \"\";\n\n          if (cache[cacheKey] === void 0) {\n            cache[cacheKey] = hyphenateWord(fragments[1], levelsTable, patterns, debug, hyphenChar);\n          }\n\n          fragments[1] = cache[cacheKey];\n        }\n\n        newText += fragments[0] + fragments[1];\n      }\n\n      if (!fragments) {\n        done();\n      } else {\n        setTimeout(nextTick);\n      }\n    }\n\n    if (isAsync) {\n      setTimeout(nextTick);\n      return new Promise(function (resolve) {\n        resolveNewText = resolve;\n      });\n    } else {\n      nextTick();\n      return newText;\n    }\n  }\n\n  var SETTING_DEFAULT_ASYNC = false;\n  var SETTING_DEFAULT_DEBUG = false;\n  var SETTING_DEFAULT_EXCEPTIONS = [];\n  var SETTING_DEFAULT_HTML = true;\n  var SETTING_DEFAULT_HYPH_CHAR = \"\\xAD\";\n  var SETTING_DEFAULT_MIN_WORD_LENGTH = 5;\n  var SETTING_NAME_ASYNC = \"async\";\n  var SETTING_NAME_DEBUG = \"debug\";\n  var SETTING_NAME_EXCEPTIONS = \"exceptions\";\n  var SETTING_NAME_HTML = \"html\";\n  var SETTING_NAME_HYPH_CHAR = \"hyphenChar\";\n  var SETTING_NAME_MIN_WORD_LENGTH = \"minWordLength\";\n\n  var _global = typeof global === \"object\" ? global : typeof window === \"object\" ? window : typeof self === \"object\" ? self : false ? void 0 : {};\n\n  function extend(target, source) {\n    target = target || {};\n\n    for (var key in source) {\n      target[key] = source[key];\n    }\n\n    return target;\n  }\n\n  function validateArray(value) {\n    return value instanceof Array;\n  }\n\n  function keyOrDefault(object, key, defaultValue, test) {\n    if (key in object && (test ? test(object[key]) : true)) {\n      return object[key];\n    }\n\n    return defaultValue;\n  }\n\n  function exceptionsFromDefinition(excetionsList, hyphenChar) {\n    return excetionsList.reduce(function (exceptions, exception) {\n      exceptions[\"~\" + exception.replace(/\\-/g, \"\")] = exception.replace(/\\-/g, hyphenChar);\n      return exceptions;\n    }, {});\n  }\n\n  function createHyphenator(patternsDefinition, options) {\n    options = options || {};\n    var asyncMode = keyOrDefault(options, SETTING_NAME_ASYNC, SETTING_DEFAULT_ASYNC),\n        caches = {},\n        debug = keyOrDefault(options, SETTING_NAME_DEBUG, SETTING_DEFAULT_DEBUG),\n        exceptions = {},\n        hyphenChar = keyOrDefault(options, SETTING_NAME_HYPH_CHAR, SETTING_DEFAULT_HYPH_CHAR),\n        levelsTable = patternsDefinition[0].split(\",\"),\n        patterns = JSON.parse(patternsDefinition[1]),\n        minWordLength = keyOrDefault(options, SETTING_NAME_MIN_WORD_LENGTH, SETTING_DEFAULT_MIN_WORD_LENGTH) >> 0,\n        skipHTML = keyOrDefault(options, SETTING_NAME_HTML, SETTING_DEFAULT_HTML),\n        userExceptions = keyOrDefault(options, SETTING_NAME_EXCEPTIONS, SETTING_DEFAULT_EXCEPTIONS, validateArray);\n    var cacheKey = hyphenChar + minWordLength;\n    exceptions[cacheKey] = {};\n\n    if (patternsDefinition[2]) {\n      exceptions[cacheKey] = exceptionsFromDefinition(patternsDefinition[2], hyphenChar);\n    }\n\n    if (userExceptions && userExceptions.length) {\n      exceptions[cacheKey] = extend(exceptions[cacheKey], exceptionsFromDefinition(userExceptions, hyphenChar));\n    }\n\n    caches[cacheKey] = extend({}, exceptions[cacheKey]);\n\n    if (asyncMode && !(\"Promise\" in _global)) {\n      throw new Error(\"Failed to create hyphenator: Could not find global Promise object, needed for hyphenator to work in async mode\");\n    }\n\n    return function (text, options2) {\n      options2 = options2 || {};\n      var localDebug = keyOrDefault(options2, SETTING_NAME_DEBUG, debug),\n          localHyphenChar = keyOrDefault(options2, SETTING_NAME_HYPH_CHAR, hyphenChar),\n          localMinWordLength = keyOrDefault(options2, SETTING_NAME_MIN_WORD_LENGTH, minWordLength) >> 0,\n          localUserExceptions = keyOrDefault(options2, SETTING_NAME_EXCEPTIONS, SETTING_DEFAULT_EXCEPTIONS, validateArray),\n          cacheKey2 = localHyphenChar + localMinWordLength;\n\n      if (!exceptions[cacheKey2] && patternsDefinition[2]) {\n        exceptions[cacheKey2] = exceptionsFromDefinition(patternsDefinition[2], localHyphenChar);\n        caches[cacheKey2] = extend(caches[cacheKey2], exceptions[cacheKey2]);\n      }\n\n      if (localUserExceptions && localUserExceptions.length) {\n        exceptions[cacheKey2] = extend(exceptions[cacheKey2], exceptionsFromDefinition(localUserExceptions, localHyphenChar));\n        caches[cacheKey2] = extend(caches[cacheKey2], exceptions[cacheKey2]);\n      }\n\n      return start(text, levelsTable, patterns, caches[cacheKey2], localDebug, localHyphenChar, skipHTML, localMinWordLength, asyncMode);\n    };\n  }\n\n  return createHyphenator;\n});","map":{"version":3,"sources":["C:/Users/PC/Documents/PROGRAMMING/MERN/frontend/node_modules/hyphen/hyphen.js"],"names":["root","factory","define","amd","module","exports","createHyphenator","createTextReader","setup","char1","char2","i","verifier","text","length","charAt","verified","isNotLetter","RegExp","prototype","test","bind","createHTMLVerifier","skip","accumulate","chars","createHyphenCharVerifier","hyphenChar","createHyphenationVerifier","verifiers","minWordLength","accum0","accum","resolveWith","value","reduce","skip2","verify","createCharIterator","str","nextChar","createStringSlicer","slice","next","isFirstCharacter","hyphenateWord","levelsTable","patternTrie","debug","levels","Array","loweredText","toLocaleLowerCase","split","wordSlice","letter","triePtr","trieNode","patternLevelsIndex","patternLevels","patternEntityIndex","slicer","nextSlice","nextLetter","Object","toString","call","splice","k","Math","max","hyphenatedText","start","patterns","cache","skipHTML","isAsync","done","resolveNewText","newText","fragments","readText","concat","nextTick","loopStart","Date","cacheKey","setTimeout","Promise","resolve","SETTING_DEFAULT_ASYNC","SETTING_DEFAULT_DEBUG","SETTING_DEFAULT_EXCEPTIONS","SETTING_DEFAULT_HTML","SETTING_DEFAULT_HYPH_CHAR","SETTING_DEFAULT_MIN_WORD_LENGTH","SETTING_NAME_ASYNC","SETTING_NAME_DEBUG","SETTING_NAME_EXCEPTIONS","SETTING_NAME_HTML","SETTING_NAME_HYPH_CHAR","SETTING_NAME_MIN_WORD_LENGTH","_global","global","window","self","extend","target","source","key","validateArray","keyOrDefault","object","defaultValue","exceptionsFromDefinition","excetionsList","exceptions","exception","replace","patternsDefinition","options","asyncMode","caches","JSON","parse","userExceptions","Error","options2","localDebug","localHyphenChar","localMinWordLength","localUserExceptions","cacheKey2"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,UAAUA,IAAV,EAAgBC,OAAhB,EAAyB;AACxB,MAAI,OAAOC,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,CAACC,GAA3C,EAAgD;AAC9C;AACAD,IAAAA,MAAM,CAAC,EAAD,EAAKD,OAAL,CAAN;AACD,GAHD,MAGO,IAAI,OAAOG,MAAP,KAAkB,QAAlB,IAA8BA,MAAM,CAACC,OAAzC,EAAkD;AACvD;AACA;AACA;AACAD,IAAAA,MAAM,CAACC,OAAP,GAAiBJ,OAAO,EAAxB;AACD,GALM,MAKA;AACL;AACAD,IAAAA,IAAI,CAACM,gBAAL,GAAwBL,OAAO,EAA/B;AACD;AACF,CAbD,EAaG,IAbH,EAaS,YAAY;AACnB,WAASM,gBAAT,CAA0BC,KAA1B,EAAiC;AAC/B,QAAIC,KAAK,GAAG,EAAZ;AACA,QAAIC,KAAK,GAAG,EAAZ;AACA,QAAIC,CAAC,GAAG,CAAR;AACA,QAAIC,QAAQ,GAAGJ,KAAK,EAApB;AACA,WAAO,UAAUK,IAAV,EAAgB;AACrB,aAAOF,CAAC,GAAGE,IAAI,CAACC,MAAhB,EAAwB;AACtBL,QAAAA,KAAK,GAAGI,IAAI,CAACE,MAAL,CAAYJ,CAAC,EAAb,CAAR;AACAD,QAAAA,KAAK,GAAGG,IAAI,CAACE,MAAL,CAAYJ,CAAZ,CAAR;AACA,YAAIK,QAAQ,GAAGJ,QAAQ,CAACH,KAAD,EAAQC,KAAR,CAAvB;;AACA,YAAIM,QAAQ,KAAK,KAAK,CAAtB,EAAyB;AACvB,iBAAOA,QAAP;AACD;AACF;AACF,KATD;AAUD;;AAED,MAAIC,WAAW,GAAGC,MAAM,CAACC,SAAP,CAAiBC,IAAjB,CAAsBC,IAAtB,CAChB,2CADgB,CAAlB;;AAGA,WAASC,kBAAT,GAA8B;AAC5B,QAAIC,IAAI,GAAG,KAAX;AACA,WAAO,UAAUC,UAAV,EAAsBC,KAAtB,EAA6B;AAClC,UAAIF,IAAJ,EAAU;AACR,YAAIE,KAAK,CAAC,CAAD,CAAL,KAAa,GAAjB,EAAsB;AACpBD,UAAAA,UAAU;AACVD,UAAAA,IAAI,GAAG,KAAP;AACD;AACF,OALD,MAKO,IACLE,KAAK,CAAC,CAAD,CAAL,KAAa,GAAb,KACC,CAACR,WAAW,CAACQ,KAAK,CAAC,CAAD,CAAN,CAAZ,IAA0BA,KAAK,CAAC,CAAD,CAAL,KAAa,GADxC,CADK,EAGL;AACAF,QAAAA,IAAI,GAAG,IAAP;AACD;;AACD,aAAOA,IAAP;AACD,KAbD;AAcD;;AACD,WAASG,wBAAT,CAAkCC,UAAlC,EAA8C;AAC5C,QAAIJ,IAAI,GAAG,KAAX;AACA,WAAO,UAAUC,UAAV,EAAsBC,KAAtB,EAA6B;AAClC,UAAIF,IAAJ,EAAU;AACR,YAAI,CAACN,WAAW,CAACQ,KAAK,CAAC,CAAD,CAAN,CAAZ,IAA0BR,WAAW,CAACQ,KAAK,CAAC,CAAD,CAAN,CAAzC,EAAqD;AACnDD,UAAAA,UAAU;AACVD,UAAAA,IAAI,GAAG,KAAP;AACD;AACF,OALD,MAKO,IAAI,CAACN,WAAW,CAACQ,KAAK,CAAC,CAAD,CAAN,CAAZ,IAA0BA,KAAK,CAAC,CAAD,CAAL,KAAaE,UAA3C,EAAuD;AAC5DJ,QAAAA,IAAI,GAAG,IAAP;AACD;;AACD,aAAOA,IAAP;AACD,KAVD;AAWD;;AACD,WAASK,yBAAT,CAAmCC,SAAnC,EAA8CC,aAA9C,EAA6D;AAC3D,WAAO,YAAY;AACjB,UAAIC,MAAM,GAAG,EAAb;AACA,UAAIC,KAAK,GAAG,EAAZ;;AACA,eAASR,UAAT,GAAsB;AACpBO,QAAAA,MAAM,IAAIC,KAAV;AACAA,QAAAA,KAAK,GAAG,EAAR;AACD;;AACD,eAASC,WAAT,CAAqBC,KAArB,EAA4B;AAC1BH,QAAAA,MAAM,GAAG,EAAT;AACAC,QAAAA,KAAK,GAAG,EAAR;AACA,eAAOE,KAAP;AACD;;AACD,aAAO,UAAUzB,KAAV,EAAiBC,KAAjB,EAAwB;AAC7BsB,QAAAA,KAAK,IAAIvB,KAAT;AACA,YAAIc,IAAI,GAAGM,SAAS,CAACM,MAAV,CAAiB,UAAUC,KAAV,EAAiBC,MAAjB,EAAyB;AACnD,iBAAOD,KAAK,IAAIC,MAAM,CAACb,UAAD,EAAa,CAACf,KAAD,EAAQC,KAAR,CAAb,CAAtB;AACD,SAFU,EAER,KAFQ,CAAX;;AAGA,YAAI,CAACa,IAAL,EAAW;AACT,cAAIN,WAAW,CAACR,KAAD,CAAX,IAAsB,CAACQ,WAAW,CAACP,KAAD,CAAtC,EAA+C;AAC7Cc,YAAAA,UAAU;AACX;;AACD,cAAI,CAACP,WAAW,CAACR,KAAD,CAAZ,IAAuBQ,WAAW,CAACP,KAAD,CAAtC,EAA+C;AAC7C,gBAAIsB,KAAK,CAAClB,MAAN,IAAgBgB,aAApB,EAAmC;AACjC,qBAAOG,WAAW,CAAC,CAACF,MAAD,EAASC,KAAT,CAAD,CAAlB;AACD,aAFD,MAEO;AACLR,cAAAA,UAAU;AACX;AACF;AACF;;AACD,YAAId,KAAK,KAAK,EAAd,EAAkB;AAChB,cAAIsB,KAAK,CAAClB,MAAN,GAAegB,aAAf,IAAgCP,IAApC,EAA0C;AACxCC,YAAAA,UAAU;AACX;;AACD,iBAAOS,WAAW,CAAC,CAACF,MAAD,EAASC,KAAT,CAAD,CAAlB;AACD;AACF,OAvBD;AAwBD,KApCD;AAqCD;;AAED,WAASM,kBAAT,CAA4BC,GAA5B,EAAiC;AAC/B,QAAI5B,CAAC,GAAG,CAAR;;AACA,aAAS6B,QAAT,GAAoB;AAClB,aAAOD,GAAG,CAAC5B,CAAC,EAAF,CAAV;AACD;;AACD,WAAO6B,QAAP;AACD;;AACD,WAASC,kBAAT,CAA4BF,GAA5B,EAAiC;AAC/B,QAAI5B,CAAC,GAAG,CAAR;AAAA,QACE+B,KAAK,GAAGH,GADV;;AAEA,aAASI,IAAT,GAAgB;AACdD,MAAAA,KAAK,GAAGH,GAAG,CAACG,KAAJ,CAAU/B,CAAC,EAAX,CAAR;;AACA,UAAI+B,KAAK,CAAC5B,MAAN,GAAe,CAAnB,EAAsB;AACpB;AACD;;AACD,aAAO4B,KAAP;AACD;;AACD,aAASE,gBAAT,GAA4B;AAC1B,aAAOjC,CAAC,KAAK,CAAb;AACD;;AACD,WAAO,CAACgC,IAAD,EAAOC,gBAAP,CAAP;AACD;;AACD,WAASC,aAAT,CAAuBhC,IAAvB,EAA6BiC,WAA7B,EAA0CC,WAA1C,EAAuDC,KAAvD,EAA8DrB,UAA9D,EAA0E;AACxE,QAAIsB,MAAM,GAAG,IAAIC,KAAJ,CAAUrC,IAAI,CAACC,MAAL,GAAc,CAAxB,CAAb;AAAA,QACEqC,WAAW,GAAG,CAAC,MAAMtC,IAAI,CAACuC,iBAAL,EAAN,GAAiC,GAAlC,EAAuCC,KAAvC,CAA6C,EAA7C,CADhB;AAAA,QAEEC,SAFF;AAAA,QAGEC,MAHF;AAAA,QAIEC,OAJF;AAAA,QAKEC,QALF;AAAA,QAMEC,kBANF;AAAA,QAOEC,aAPF;AAAA,QAQEC,kBAAkB,GAAG,CAAC,CARxB;AAAA,QASEC,MATF;AAAA,QAUEC,SAVF;AAAA,QAWElB,gBAXF;AAAA,QAYEmB,UAZF;;AAaA,SAAK,IAAIpD,CAAC,GAAGsC,MAAM,CAACnC,MAApB,EAA4BH,CAAC,EAA7B;AAAmCsC,MAAAA,MAAM,CAACtC,CAAD,CAAN,GAAY,CAAZ;AAAnC;;AACAkD,IAAAA,MAAM,GAAGpB,kBAAkB,CAACU,WAAD,CAA3B;AACAW,IAAAA,SAAS,GAAGD,MAAM,CAAC,CAAD,CAAlB;AACAjB,IAAAA,gBAAgB,GAAGiB,MAAM,CAAC,CAAD,CAAzB;;AACA,WAAQP,SAAS,GAAGQ,SAAS,EAA7B,EAAkC;AAChCF,MAAAA,kBAAkB;;AAClB,UAAIhB,gBAAgB,EAApB,EAAwB;AACtBgB,QAAAA,kBAAkB;AACnB;;AACDJ,MAAAA,OAAO,GAAGT,WAAV;AACAgB,MAAAA,UAAU,GAAGzB,kBAAkB,CAACgB,SAAD,CAA/B;;AACA,aAAQC,MAAM,GAAGQ,UAAU,EAA3B,EAAgC;AAC9B,YAAI,CAACN,QAAQ,GAAGD,OAAO,CAACD,MAAD,CAAnB,MAAiC,KAAK,CAA1C,EAA6C;AAC3C;AACD;;AACDC,QAAAA,OAAO,GAAG,EAAV;AACAE,QAAAA,kBAAkB,GAAG,CAAC,CAAtB;;AACA,gBAAQM,MAAM,CAAC7C,SAAP,CAAiB8C,QAAjB,CAA0BC,IAA1B,CAA+BT,QAA/B,CAAR;AACE,eAAK,gBAAL;AACED,YAAAA,OAAO,GAAGC,QAAQ,CAAC,CAAD,CAAlB;AACAC,YAAAA,kBAAkB,GAAGD,QAAQ,CAAC,CAAD,CAA7B;AACA;;AACF,eAAK,iBAAL;AACED,YAAAA,OAAO,GAAGC,QAAV;AACA;;AACF,eAAK,iBAAL;AACEC,YAAAA,kBAAkB,GAAGD,QAArB;AACA;AAVJ;;AAYA,YAAIC,kBAAkB,GAAG,CAAzB,EAA4B;AAC1B;AACD;;AACD,YAAI,CAACZ,WAAW,CAACY,kBAAD,CAAX,CAAgCS,MAArC,EAA6C;AAC3CrB,UAAAA,WAAW,CAACY,kBAAD,CAAX,GAAkCZ,WAAW,CAC3CY,kBAD2C,CAAX,CAEhChB,KAFgC,CAE1B,EAF0B,CAAlC;AAGD;;AACDiB,QAAAA,aAAa,GAAGb,WAAW,CAACY,kBAAD,CAA3B;;AACA,aAAK,IAAIU,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,aAAa,CAAC7C,MAAlC,EAA0CsD,CAAC,EAA3C;AACEnB,UAAAA,MAAM,CAACW,kBAAkB,GAAGQ,CAAtB,CAAN,GAAiCC,IAAI,CAACC,GAAL,CAC/BX,aAAa,CAACS,CAAD,CADkB,EAE/BnB,MAAM,CAACW,kBAAkB,GAAGQ,CAAtB,CAFyB,CAAjC;AADF;AAKD;AACF;;AACDnB,IAAAA,MAAM,CAAC,CAAD,CAAN,GAAYA,MAAM,CAAC,CAAD,CAAN,GAAYA,MAAM,CAACA,MAAM,CAACnC,MAAP,GAAgB,CAAjB,CAAN,GAA4BmC,MAAM,CACxDA,MAAM,CAACnC,MAAP,GAAgB,CADwC,CAAN,GAEhD,CAFJ;AAGA,QAAIyD,cAAc,GAAG,EAArB;;AACA,SAAK,IAAI5D,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGsC,MAAM,CAACnC,MAA3B,EAAmCH,CAAC,EAApC,EAAwC;AACtC4D,MAAAA,cAAc,IACZ,CAACtB,MAAM,CAACtC,CAAD,CAAN,GAAY,CAAZ,KAAkB,CAAlB,GAAsBgB,UAAtB,GAAmC,EAApC,IAA0Cd,IAAI,CAACE,MAAL,CAAYJ,CAAZ,CAD5C;AAED;;AACD,WAAO4D,cAAP;AACD;;AAED,WAASC,KAAT,CACE3D,IADF,EAEEiC,WAFF,EAGE2B,QAHF,EAIEC,KAJF,EAKE1B,KALF,EAMErB,UANF,EAOEgD,QAPF,EAQE7C,aARF,EASE8C,OATF,EAUE;AACA,aAASC,IAAT,GAAgB;AACdC,MAAAA,cAAc,CAACC,OAAD,CAAd;AACD;;AACD,QAAIA,OAAO,GAAG,EAAd;AAAA,QACEC,SADF;AAAA,QAEEC,QAAQ,GAAG1E,gBAAgB,CACzBqB,yBAAyB,CACvB,CAAC+C,QAAQ,GAAG,CAACrD,kBAAkB,EAAnB,CAAH,GAA4B,EAArC,EAAyC4D,MAAzC,CACExD,wBAAwB,CAACC,UAAD,CAD1B,CADuB,EAIvBG,aAJuB,CADA,CAF7B;AAAA,QAUEgD,cAAc,GAAG,0BAAY,CAAE,CAVjC;;AAWA,aAASK,QAAT,GAAoB;AAClB,UAAIC,SAAS,GAAG,eAAgB,IAAIC,IAAJ,EAAhC;;AACA,aACE,CAAC,CAACT,OAAD,IAAY,eAAgB,IAAIS,IAAJ,KAAaD,SAAb,GAAyB,EAAtD,MACCJ,SAAS,GAAGC,QAAQ,CAACpE,IAAD,CADrB,CADF,EAGE;AACA,YAAImE,SAAS,CAAC,CAAD,CAAb,EAAkB;AAChB,cAAIM,QAAQ,GAAGN,SAAS,CAAC,CAAD,CAAT,CAAalE,MAAb,GAAsB,MAAMkE,SAAS,CAAC,CAAD,CAArC,GAA2C,EAA1D;;AACA,cAAIN,KAAK,CAACY,QAAD,CAAL,KAAoB,KAAK,CAA7B,EAAgC;AAC9BZ,YAAAA,KAAK,CAACY,QAAD,CAAL,GAAkBzC,aAAa,CAC7BmC,SAAS,CAAC,CAAD,CADoB,EAE7BlC,WAF6B,EAG7B2B,QAH6B,EAI7BzB,KAJ6B,EAK7BrB,UAL6B,CAA/B;AAOD;;AACDqD,UAAAA,SAAS,CAAC,CAAD,CAAT,GAAeN,KAAK,CAACY,QAAD,CAApB;AACD;;AACDP,QAAAA,OAAO,IAAIC,SAAS,CAAC,CAAD,CAAT,GAAeA,SAAS,CAAC,CAAD,CAAnC;AACD;;AACD,UAAI,CAACA,SAAL,EAAgB;AACdH,QAAAA,IAAI;AACL,OAFD,MAEO;AACLU,QAAAA,UAAU,CAACJ,QAAD,CAAV;AACD;AACF;;AACD,QAAIP,OAAJ,EAAa;AACXW,MAAAA,UAAU,CAACJ,QAAD,CAAV;AACA,aAAO,IAAIK,OAAJ,CAAY,UAAUC,OAAV,EAAmB;AACpCX,QAAAA,cAAc,GAAGW,OAAjB;AACD,OAFM,CAAP;AAGD,KALD,MAKO;AACLN,MAAAA,QAAQ;AACR,aAAOJ,OAAP;AACD;AACF;;AAED,MAAIW,qBAAqB,GAAG,KAA5B;AACA,MAAIC,qBAAqB,GAAG,KAA5B;AACA,MAAIC,0BAA0B,GAAG,EAAjC;AACA,MAAIC,oBAAoB,GAAG,IAA3B;AACA,MAAIC,yBAAyB,GAAG,MAAhC;AACA,MAAIC,+BAA+B,GAAG,CAAtC;AACA,MAAIC,kBAAkB,GAAG,OAAzB;AACA,MAAIC,kBAAkB,GAAG,OAAzB;AACA,MAAIC,uBAAuB,GAAG,YAA9B;AACA,MAAIC,iBAAiB,GAAG,MAAxB;AACA,MAAIC,sBAAsB,GAAG,YAA7B;AACA,MAAIC,4BAA4B,GAAG,eAAnC;;AACA,MAAIC,OAAO,GACT,OAAOC,MAAP,KAAkB,QAAlB,GACIA,MADJ,GAEI,OAAOC,MAAP,KAAkB,QAAlB,GACAA,MADA,GAEA,OAAOC,IAAP,KAAgB,QAAhB,GACAA,IADA,GAEA,QACA,KAAK,CADL,GAEA,EATN;;AAUA,WAASC,MAAT,CAAgBC,MAAhB,EAAwBC,MAAxB,EAAgC;AAC9BD,IAAAA,MAAM,GAAGA,MAAM,IAAI,EAAnB;;AACA,SAAK,IAAIE,GAAT,IAAgBD,MAAhB,EAAwB;AACtBD,MAAAA,MAAM,CAACE,GAAD,CAAN,GAAcD,MAAM,CAACC,GAAD,CAApB;AACD;;AACD,WAAOF,MAAP;AACD;;AACD,WAASG,aAAT,CAAuB5E,KAAvB,EAA8B;AAC5B,WAAOA,KAAK,YAAYgB,KAAxB;AACD;;AACD,WAAS6D,YAAT,CAAsBC,MAAtB,EAA8BH,GAA9B,EAAmCI,YAAnC,EAAiD7F,IAAjD,EAAuD;AACrD,QAAIyF,GAAG,IAAIG,MAAP,KAAkB5F,IAAI,GAAGA,IAAI,CAAC4F,MAAM,CAACH,GAAD,CAAP,CAAP,GAAuB,IAA7C,CAAJ,EAAwD;AACtD,aAAOG,MAAM,CAACH,GAAD,CAAb;AACD;;AACD,WAAOI,YAAP;AACD;;AACD,WAASC,wBAAT,CAAkCC,aAAlC,EAAiDxF,UAAjD,EAA6D;AAC3D,WAAOwF,aAAa,CAAChF,MAAd,CAAqB,UAAUiF,UAAV,EAAsBC,SAAtB,EAAiC;AAC3DD,MAAAA,UAAU,CAAC,MAAMC,SAAS,CAACC,OAAV,CAAkB,KAAlB,EAAyB,EAAzB,CAAP,CAAV,GAAiDD,SAAS,CAACC,OAAV,CAC/C,KAD+C,EAE/C3F,UAF+C,CAAjD;AAIA,aAAOyF,UAAP;AACD,KANM,EAMJ,EANI,CAAP;AAOD;;AACD,WAAS9G,gBAAT,CAA0BiH,kBAA1B,EAA8CC,OAA9C,EAAuD;AACrDA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACA,QAAIC,SAAS,GAAGV,YAAY,CACxBS,OADwB,EAExBxB,kBAFwB,EAGxBN,qBAHwB,CAA5B;AAAA,QAKEgC,MAAM,GAAG,EALX;AAAA,QAME1E,KAAK,GAAG+D,YAAY,CAACS,OAAD,EAAUvB,kBAAV,EAA8BN,qBAA9B,CANtB;AAAA,QAOEyB,UAAU,GAAG,EAPf;AAAA,QAQEzF,UAAU,GAAGoF,YAAY,CACvBS,OADuB,EAEvBpB,sBAFuB,EAGvBN,yBAHuB,CAR3B;AAAA,QAaEhD,WAAW,GAAGyE,kBAAkB,CAAC,CAAD,CAAlB,CAAsBlE,KAAtB,CAA4B,GAA5B,CAbhB;AAAA,QAcEoB,QAAQ,GAAGkD,IAAI,CAACC,KAAL,CAAWL,kBAAkB,CAAC,CAAD,CAA7B,CAdb;AAAA,QAeEzF,aAAa,GACXiF,YAAY,CACVS,OADU,EAEVnB,4BAFU,EAGVN,+BAHU,CAAZ,IAIK,CApBT;AAAA,QAqBEpB,QAAQ,GAAGoC,YAAY,CAACS,OAAD,EAAUrB,iBAAV,EAA6BN,oBAA7B,CArBzB;AAAA,QAsBEgC,cAAc,GAAGd,YAAY,CAC3BS,OAD2B,EAE3BtB,uBAF2B,EAG3BN,0BAH2B,EAI3BkB,aAJ2B,CAtB/B;AA4BA,QAAIxB,QAAQ,GAAG3D,UAAU,GAAGG,aAA5B;AACAsF,IAAAA,UAAU,CAAC9B,QAAD,CAAV,GAAuB,EAAvB;;AACA,QAAIiC,kBAAkB,CAAC,CAAD,CAAtB,EAA2B;AACzBH,MAAAA,UAAU,CAAC9B,QAAD,CAAV,GAAuB4B,wBAAwB,CAC7CK,kBAAkB,CAAC,CAAD,CAD2B,EAE7C5F,UAF6C,CAA/C;AAID;;AACD,QAAIkG,cAAc,IAAIA,cAAc,CAAC/G,MAArC,EAA6C;AAC3CsG,MAAAA,UAAU,CAAC9B,QAAD,CAAV,GAAuBoB,MAAM,CAC3BU,UAAU,CAAC9B,QAAD,CADiB,EAE3B4B,wBAAwB,CAACW,cAAD,EAAiBlG,UAAjB,CAFG,CAA7B;AAID;;AACD+F,IAAAA,MAAM,CAACpC,QAAD,CAAN,GAAmBoB,MAAM,CAAC,EAAD,EAAKU,UAAU,CAAC9B,QAAD,CAAf,CAAzB;;AACA,QAAImC,SAAS,IAAI,EAAE,aAAanB,OAAf,CAAjB,EAA0C;AACxC,YAAM,IAAIwB,KAAJ,CACJ,gHADI,CAAN;AAGD;;AACD,WAAO,UAAUjH,IAAV,EAAgBkH,QAAhB,EAA0B;AAC/BA,MAAAA,QAAQ,GAAGA,QAAQ,IAAI,EAAvB;AACA,UAAIC,UAAU,GAAGjB,YAAY,CAACgB,QAAD,EAAW9B,kBAAX,EAA+BjD,KAA/B,CAA7B;AAAA,UACEiF,eAAe,GAAGlB,YAAY,CAC5BgB,QAD4B,EAE5B3B,sBAF4B,EAG5BzE,UAH4B,CADhC;AAAA,UAMEuG,kBAAkB,GAChBnB,YAAY,CAACgB,QAAD,EAAW1B,4BAAX,EAAyCvE,aAAzC,CAAZ,IACA,CARJ;AAAA,UASEqG,mBAAmB,GAAGpB,YAAY,CAChCgB,QADgC,EAEhC7B,uBAFgC,EAGhCN,0BAHgC,EAIhCkB,aAJgC,CATpC;AAAA,UAeEsB,SAAS,GAAGH,eAAe,GAAGC,kBAfhC;;AAgBA,UAAI,CAACd,UAAU,CAACgB,SAAD,CAAX,IAA0Bb,kBAAkB,CAAC,CAAD,CAAhD,EAAqD;AACnDH,QAAAA,UAAU,CAACgB,SAAD,CAAV,GAAwBlB,wBAAwB,CAC9CK,kBAAkB,CAAC,CAAD,CAD4B,EAE9CU,eAF8C,CAAhD;AAIAP,QAAAA,MAAM,CAACU,SAAD,CAAN,GAAoB1B,MAAM,CAACgB,MAAM,CAACU,SAAD,CAAP,EAAoBhB,UAAU,CAACgB,SAAD,CAA9B,CAA1B;AACD;;AACD,UAAID,mBAAmB,IAAIA,mBAAmB,CAACrH,MAA/C,EAAuD;AACrDsG,QAAAA,UAAU,CAACgB,SAAD,CAAV,GAAwB1B,MAAM,CAC5BU,UAAU,CAACgB,SAAD,CADkB,EAE5BlB,wBAAwB,CAACiB,mBAAD,EAAsBF,eAAtB,CAFI,CAA9B;AAIAP,QAAAA,MAAM,CAACU,SAAD,CAAN,GAAoB1B,MAAM,CAACgB,MAAM,CAACU,SAAD,CAAP,EAAoBhB,UAAU,CAACgB,SAAD,CAA9B,CAA1B;AACD;;AACD,aAAO5D,KAAK,CACV3D,IADU,EAEViC,WAFU,EAGV2B,QAHU,EAIViD,MAAM,CAACU,SAAD,CAJI,EAKVJ,UALU,EAMVC,eANU,EAOVtD,QAPU,EAQVuD,kBARU,EASVT,SATU,CAAZ;AAWD,KA3CD;AA4CD;;AAED,SAAOnH,gBAAP;AACD,CApZD","sourcesContent":["/** Text hyphenation in Javascript.\n *  Copyright (C) 2024 Yevhen Tiurin (yevhentiurin@gmail.com)\n *  https://github.com/ytiurin/hyphen\n *\n *  Released under the ISC license\n *  https://github.com/ytiurin/hyphen/blob/master/LICENSE\n */\n(function (root, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if (typeof module === \"object\" && module.exports) {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = factory();\n  } else {\n    // Browser globals (root is window)\n    root.createHyphenator = factory();\n  }\n})(this, function () {\n  function createTextReader(setup) {\n    var char1 = \"\";\n    var char2 = \"\";\n    var i = 0;\n    var verifier = setup();\n    return function (text) {\n      while (i < text.length) {\n        char1 = text.charAt(i++);\n        char2 = text.charAt(i);\n        var verified = verifier(char1, char2);\n        if (verified !== void 0) {\n          return verified;\n        }\n      }\n    };\n  }\n\n  var isNotLetter = RegExp.prototype.test.bind(\n    /\\s|(?![\\'])[\\!-\\@\\[-\\`\\{-\\~\\u2013-\\u203C]/\n  );\n  function createHTMLVerifier() {\n    var skip = false;\n    return function (accumulate, chars) {\n      if (skip) {\n        if (chars[0] === \">\") {\n          accumulate();\n          skip = false;\n        }\n      } else if (\n        chars[0] === \"<\" &&\n        (!isNotLetter(chars[1]) || chars[1] === \"/\")\n      ) {\n        skip = true;\n      }\n      return skip;\n    };\n  }\n  function createHyphenCharVerifier(hyphenChar) {\n    var skip = false;\n    return function (accumulate, chars) {\n      if (skip) {\n        if (!isNotLetter(chars[0]) && isNotLetter(chars[1])) {\n          accumulate();\n          skip = false;\n        }\n      } else if (!isNotLetter(chars[0]) && chars[1] === hyphenChar) {\n        skip = true;\n      }\n      return skip;\n    };\n  }\n  function createHyphenationVerifier(verifiers, minWordLength) {\n    return function () {\n      var accum0 = \"\";\n      var accum = \"\";\n      function accumulate() {\n        accum0 += accum;\n        accum = \"\";\n      }\n      function resolveWith(value) {\n        accum0 = \"\";\n        accum = \"\";\n        return value;\n      }\n      return function (char1, char2) {\n        accum += char1;\n        var skip = verifiers.reduce(function (skip2, verify) {\n          return skip2 || verify(accumulate, [char1, char2]);\n        }, false);\n        if (!skip) {\n          if (isNotLetter(char1) && !isNotLetter(char2)) {\n            accumulate();\n          }\n          if (!isNotLetter(char1) && isNotLetter(char2)) {\n            if (accum.length >= minWordLength) {\n              return resolveWith([accum0, accum]);\n            } else {\n              accumulate();\n            }\n          }\n        }\n        if (char2 === \"\") {\n          if (accum.length < minWordLength || skip) {\n            accumulate();\n          }\n          return resolveWith([accum0, accum]);\n        }\n      };\n    };\n  }\n\n  function createCharIterator(str) {\n    var i = 0;\n    function nextChar() {\n      return str[i++];\n    }\n    return nextChar;\n  }\n  function createStringSlicer(str) {\n    var i = 0,\n      slice = str;\n    function next() {\n      slice = str.slice(i++);\n      if (slice.length < 3) {\n        return;\n      }\n      return slice;\n    }\n    function isFirstCharacter() {\n      return i === 2;\n    }\n    return [next, isFirstCharacter];\n  }\n  function hyphenateWord(text, levelsTable, patternTrie, debug, hyphenChar) {\n    var levels = new Array(text.length + 1),\n      loweredText = (\".\" + text.toLocaleLowerCase() + \".\").split(\"\"),\n      wordSlice,\n      letter,\n      triePtr,\n      trieNode,\n      patternLevelsIndex,\n      patternLevels,\n      patternEntityIndex = -1,\n      slicer,\n      nextSlice,\n      isFirstCharacter,\n      nextLetter;\n    for (var i = levels.length; i--; ) levels[i] = 0;\n    slicer = createStringSlicer(loweredText);\n    nextSlice = slicer[0];\n    isFirstCharacter = slicer[1];\n    while ((wordSlice = nextSlice())) {\n      patternEntityIndex++;\n      if (isFirstCharacter()) {\n        patternEntityIndex--;\n      }\n      triePtr = patternTrie;\n      nextLetter = createCharIterator(wordSlice);\n      while ((letter = nextLetter())) {\n        if ((trieNode = triePtr[letter]) === void 0) {\n          break;\n        }\n        triePtr = {};\n        patternLevelsIndex = -1;\n        switch (Object.prototype.toString.call(trieNode)) {\n          case \"[object Array]\":\n            triePtr = trieNode[0];\n            patternLevelsIndex = trieNode[1];\n            break;\n          case \"[object Object]\":\n            triePtr = trieNode;\n            break;\n          case \"[object Number]\":\n            patternLevelsIndex = trieNode;\n            break;\n        }\n        if (patternLevelsIndex < 0) {\n          continue;\n        }\n        if (!levelsTable[patternLevelsIndex].splice) {\n          levelsTable[patternLevelsIndex] = levelsTable[\n            patternLevelsIndex\n          ].slice(\"\");\n        }\n        patternLevels = levelsTable[patternLevelsIndex];\n        for (var k = 0; k < patternLevels.length; k++)\n          levels[patternEntityIndex + k] = Math.max(\n            patternLevels[k],\n            levels[patternEntityIndex + k]\n          );\n      }\n    }\n    levels[0] = levels[1] = levels[levels.length - 1] = levels[\n      levels.length - 2\n    ] = 0;\n    var hyphenatedText = \"\";\n    for (var i = 0; i < levels.length; i++) {\n      hyphenatedText +=\n        (levels[i] % 2 === 1 ? hyphenChar : \"\") + text.charAt(i);\n    }\n    return hyphenatedText;\n  }\n\n  function start(\n    text,\n    levelsTable,\n    patterns,\n    cache,\n    debug,\n    hyphenChar,\n    skipHTML,\n    minWordLength,\n    isAsync\n  ) {\n    function done() {\n      resolveNewText(newText);\n    }\n    var newText = \"\",\n      fragments,\n      readText = createTextReader(\n        createHyphenationVerifier(\n          (skipHTML ? [createHTMLVerifier()] : []).concat(\n            createHyphenCharVerifier(hyphenChar)\n          ),\n          minWordLength\n        )\n      ),\n      resolveNewText = function () {};\n    function nextTick() {\n      var loopStart = /* @__PURE__ */ new Date();\n      while (\n        (!isAsync || /* @__PURE__ */ new Date() - loopStart < 10) &&\n        (fragments = readText(text))\n      ) {\n        if (fragments[1]) {\n          var cacheKey = fragments[1].length ? \"~\" + fragments[1] : \"\";\n          if (cache[cacheKey] === void 0) {\n            cache[cacheKey] = hyphenateWord(\n              fragments[1],\n              levelsTable,\n              patterns,\n              debug,\n              hyphenChar\n            );\n          }\n          fragments[1] = cache[cacheKey];\n        }\n        newText += fragments[0] + fragments[1];\n      }\n      if (!fragments) {\n        done();\n      } else {\n        setTimeout(nextTick);\n      }\n    }\n    if (isAsync) {\n      setTimeout(nextTick);\n      return new Promise(function (resolve) {\n        resolveNewText = resolve;\n      });\n    } else {\n      nextTick();\n      return newText;\n    }\n  }\n\n  var SETTING_DEFAULT_ASYNC = false;\n  var SETTING_DEFAULT_DEBUG = false;\n  var SETTING_DEFAULT_EXCEPTIONS = [];\n  var SETTING_DEFAULT_HTML = true;\n  var SETTING_DEFAULT_HYPH_CHAR = \"\\xAD\";\n  var SETTING_DEFAULT_MIN_WORD_LENGTH = 5;\n  var SETTING_NAME_ASYNC = \"async\";\n  var SETTING_NAME_DEBUG = \"debug\";\n  var SETTING_NAME_EXCEPTIONS = \"exceptions\";\n  var SETTING_NAME_HTML = \"html\";\n  var SETTING_NAME_HYPH_CHAR = \"hyphenChar\";\n  var SETTING_NAME_MIN_WORD_LENGTH = \"minWordLength\";\n  var _global =\n    typeof global === \"object\"\n      ? global\n      : typeof window === \"object\"\n      ? window\n      : typeof self === \"object\"\n      ? self\n      : false\n      ? void 0\n      : {};\n  function extend(target, source) {\n    target = target || {};\n    for (var key in source) {\n      target[key] = source[key];\n    }\n    return target;\n  }\n  function validateArray(value) {\n    return value instanceof Array;\n  }\n  function keyOrDefault(object, key, defaultValue, test) {\n    if (key in object && (test ? test(object[key]) : true)) {\n      return object[key];\n    }\n    return defaultValue;\n  }\n  function exceptionsFromDefinition(excetionsList, hyphenChar) {\n    return excetionsList.reduce(function (exceptions, exception) {\n      exceptions[\"~\" + exception.replace(/\\-/g, \"\")] = exception.replace(\n        /\\-/g,\n        hyphenChar\n      );\n      return exceptions;\n    }, {});\n  }\n  function createHyphenator(patternsDefinition, options) {\n    options = options || {};\n    var asyncMode = keyOrDefault(\n        options,\n        SETTING_NAME_ASYNC,\n        SETTING_DEFAULT_ASYNC\n      ),\n      caches = {},\n      debug = keyOrDefault(options, SETTING_NAME_DEBUG, SETTING_DEFAULT_DEBUG),\n      exceptions = {},\n      hyphenChar = keyOrDefault(\n        options,\n        SETTING_NAME_HYPH_CHAR,\n        SETTING_DEFAULT_HYPH_CHAR\n      ),\n      levelsTable = patternsDefinition[0].split(\",\"),\n      patterns = JSON.parse(patternsDefinition[1]),\n      minWordLength =\n        keyOrDefault(\n          options,\n          SETTING_NAME_MIN_WORD_LENGTH,\n          SETTING_DEFAULT_MIN_WORD_LENGTH\n        ) >> 0,\n      skipHTML = keyOrDefault(options, SETTING_NAME_HTML, SETTING_DEFAULT_HTML),\n      userExceptions = keyOrDefault(\n        options,\n        SETTING_NAME_EXCEPTIONS,\n        SETTING_DEFAULT_EXCEPTIONS,\n        validateArray\n      );\n    var cacheKey = hyphenChar + minWordLength;\n    exceptions[cacheKey] = {};\n    if (patternsDefinition[2]) {\n      exceptions[cacheKey] = exceptionsFromDefinition(\n        patternsDefinition[2],\n        hyphenChar\n      );\n    }\n    if (userExceptions && userExceptions.length) {\n      exceptions[cacheKey] = extend(\n        exceptions[cacheKey],\n        exceptionsFromDefinition(userExceptions, hyphenChar)\n      );\n    }\n    caches[cacheKey] = extend({}, exceptions[cacheKey]);\n    if (asyncMode && !(\"Promise\" in _global)) {\n      throw new Error(\n        \"Failed to create hyphenator: Could not find global Promise object, needed for hyphenator to work in async mode\"\n      );\n    }\n    return function (text, options2) {\n      options2 = options2 || {};\n      var localDebug = keyOrDefault(options2, SETTING_NAME_DEBUG, debug),\n        localHyphenChar = keyOrDefault(\n          options2,\n          SETTING_NAME_HYPH_CHAR,\n          hyphenChar\n        ),\n        localMinWordLength =\n          keyOrDefault(options2, SETTING_NAME_MIN_WORD_LENGTH, minWordLength) >>\n          0,\n        localUserExceptions = keyOrDefault(\n          options2,\n          SETTING_NAME_EXCEPTIONS,\n          SETTING_DEFAULT_EXCEPTIONS,\n          validateArray\n        ),\n        cacheKey2 = localHyphenChar + localMinWordLength;\n      if (!exceptions[cacheKey2] && patternsDefinition[2]) {\n        exceptions[cacheKey2] = exceptionsFromDefinition(\n          patternsDefinition[2],\n          localHyphenChar\n        );\n        caches[cacheKey2] = extend(caches[cacheKey2], exceptions[cacheKey2]);\n      }\n      if (localUserExceptions && localUserExceptions.length) {\n        exceptions[cacheKey2] = extend(\n          exceptions[cacheKey2],\n          exceptionsFromDefinition(localUserExceptions, localHyphenChar)\n        );\n        caches[cacheKey2] = extend(caches[cacheKey2], exceptions[cacheKey2]);\n      }\n      return start(\n        text,\n        levelsTable,\n        patterns,\n        caches[cacheKey2],\n        localDebug,\n        localHyphenChar,\n        skipHTML,\n        localMinWordLength,\n        asyncMode\n      );\n    };\n  }\n\n  return createHyphenator;\n});\n"]},"metadata":{},"sourceType":"script"}