{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\Documents\\\\PROGRAMMING\\\\MERN\\\\frontend\\\\src\\\\components\\\\Printing\\\\EmployeePDF.js\";\nimport React from \"react\";\nimport { Page, Text, View, Document, StyleSheet, Font } from \"@react-pdf/renderer\"; // Register Noto Sans font (supports ₱)\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nFont.register({\n  family: \"NotoSans\",\n  src: \"https://raw.githubusercontent.com/googlefonts/noto-fonts/main/hinted/ttf/NotoSans-Regular.ttf\"\n}); // Define styles\n\nconst styles = StyleSheet.create({\n  page: {\n    padding: 20,\n    fontSize: 10,\n    fontFamily: \"NotoSans\"\n  },\n  // Use NotoSans\n  header: {\n    fontSize: 18,\n    textAlign: \"center\",\n    marginBottom: 15,\n    fontWeight: \"bold\",\n    color: \"#333\"\n  },\n  table: {\n    display: \"table\",\n    width: \"100%\",\n    borderStyle: \"solid\",\n    borderWidth: 1,\n    borderColor: \"#000\",\n    marginBottom: 10\n  },\n  tableRow: {\n    flexDirection: \"row\",\n    backgroundColor: \"#f9f9f9\"\n  },\n  tableHeader: {\n    flexDirection: \"row\",\n    backgroundColor: \"#4CAF50\",\n    color: \"#fff\",\n    fontWeight: \"bold\"\n  },\n  tableCell: {\n    flex: 1,\n    borderStyle: \"solid\",\n    borderWidth: 1,\n    padding: 8,\n    fontSize: 10,\n    textAlign: \"center\"\n  },\n  boldText: {\n    fontWeight: \"bold\"\n  }\n}); // Employee PDF Component\n\nconst EmployeePDF = _ref => {\n  let {\n    users\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(Document, {\n    children: /*#__PURE__*/_jsxDEV(Page, {\n      size: \"A4\",\n      style: styles.page,\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        style: styles.header,\n        children: \"Employee Report\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(View, {\n        style: styles.table,\n        children: [/*#__PURE__*/_jsxDEV(View, {\n          style: styles.tableHeader,\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            style: [styles.tableCell, styles.boldText],\n            children: \"Employee ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            style: [styles.tableCell, styles.boldText],\n            children: \"Full Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            style: [styles.tableCell, styles.boldText],\n            children: \"Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            style: [styles.tableCell, styles.boldText],\n            children: \"Job Title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            style: [styles.tableCell, styles.boldText],\n            children: \"Salary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 9\n        }, this), users.map((user, index) => /*#__PURE__*/_jsxDEV(View, {\n          style: [styles.tableRow, {\n            backgroundColor: index % 2 === 0 ? \"#fff\" : \"#f1f1f1\"\n          }],\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            style: styles.tableCell,\n            children: user.id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            style: styles.tableCell,\n            children: user.full_name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            style: styles.tableCell,\n            children: user.email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            style: styles.tableCell,\n            children: user.Job_Title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            style: styles.tableCell,\n            children: user.salary ? `\\u20B1${parseFloat(user.salary).toLocaleString(\"en-PH\", {\n              minimumFractionDigits: 2\n            })}` : \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, this)]\n        }, user.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 3\n  }, this);\n}; // Export component\n\n\n_c = EmployeePDF;\nexport default EmployeePDF;\n\nvar _c;\n\n$RefreshReg$(_c, \"EmployeePDF\");","map":{"version":3,"sources":["C:/Users/PC/Documents/PROGRAMMING/MERN/frontend/src/components/Printing/EmployeePDF.js"],"names":["React","Page","Text","View","Document","StyleSheet","Font","register","family","src","styles","create","page","padding","fontSize","fontFamily","header","textAlign","marginBottom","fontWeight","color","table","display","width","borderStyle","borderWidth","borderColor","tableRow","flexDirection","backgroundColor","tableHeader","tableCell","flex","boldText","EmployeePDF","users","map","user","index","id","full_name","email","Job_Title","salary","parseFloat","toLocaleString","minimumFractionDigits"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Page, Text, View, Document, StyleSheet, Font } from \"@react-pdf/renderer\";\r\n\r\n// Register Noto Sans font (supports ₱)\r\nFont.register({\r\n  family: \"NotoSans\",\r\n  src: \"https://raw.githubusercontent.com/googlefonts/noto-fonts/main/hinted/ttf/NotoSans-Regular.ttf\",\r\n});\r\n\r\n// Define styles\r\nconst styles = StyleSheet.create({\r\n  page: { padding: 20, fontSize: 10, fontFamily: \"NotoSans\" }, // Use NotoSans\r\n  header: {\r\n    fontSize: 18,\r\n    textAlign: \"center\",\r\n    marginBottom: 15,\r\n    fontWeight: \"bold\",\r\n    color: \"#333\",\r\n  },\r\n  table: {\r\n    display: \"table\",\r\n    width: \"100%\",\r\n    borderStyle: \"solid\",\r\n    borderWidth: 1,\r\n    borderColor: \"#000\",\r\n    marginBottom: 10,\r\n  },\r\n  tableRow: { flexDirection: \"row\", backgroundColor: \"#f9f9f9\" },\r\n  tableHeader: {\r\n    flexDirection: \"row\",\r\n    backgroundColor: \"#4CAF50\",\r\n    color: \"#fff\",\r\n    fontWeight: \"bold\",\r\n  },\r\n  tableCell: {\r\n    flex: 1,\r\n    borderStyle: \"solid\",\r\n    borderWidth: 1,\r\n    padding: 8,\r\n    fontSize: 10,\r\n    textAlign: \"center\",\r\n  },\r\n  boldText: { fontWeight: \"bold\" },\r\n});\r\n\r\n// Employee PDF Component\r\nconst EmployeePDF = ({ users }) => (\r\n  <Document>\r\n    <Page size=\"A4\" style={styles.page}>\r\n      <Text style={styles.header}>Employee Report</Text>\r\n      <View style={styles.table}>\r\n        <View style={styles.tableHeader}>\r\n          <Text style={[styles.tableCell, styles.boldText]}>Employee ID</Text>\r\n          <Text style={[styles.tableCell, styles.boldText]}>Full Name</Text>\r\n          <Text style={[styles.tableCell, styles.boldText]}>Email</Text>\r\n          <Text style={[styles.tableCell, styles.boldText]}>Job Title</Text>\r\n          <Text style={[styles.tableCell, styles.boldText]}>Salary</Text>\r\n        </View>\r\n        {users.map((user, index) => (\r\n          <View\r\n            style={[\r\n              styles.tableRow,\r\n              { backgroundColor: index % 2 === 0 ? \"#fff\" : \"#f1f1f1\" },\r\n            ]}\r\n            key={user.id}\r\n          >\r\n            <Text style={styles.tableCell}>{user.id}</Text>\r\n            <Text style={styles.tableCell}>{user.full_name}</Text>\r\n            <Text style={styles.tableCell}>{user.email}</Text>\r\n            <Text style={styles.tableCell}>{user.Job_Title}</Text>\r\n            {/* ✅ Fix Peso Sign Display */}\r\n            <Text style={styles.tableCell}>\r\n              {user.salary\r\n                ? `\\u20B1${parseFloat(user.salary).toLocaleString(\"en-PH\", {\r\n                    minimumFractionDigits: 2,\r\n                  })}`\r\n                : \"\"}\r\n            </Text>\r\n          </View>\r\n        ))}\r\n      </View>\r\n    </Page>\r\n  </Document>\r\n);\r\n\r\n// Export component\r\nexport default EmployeePDF;\r\n"]},"metadata":{},"sourceType":"module"}