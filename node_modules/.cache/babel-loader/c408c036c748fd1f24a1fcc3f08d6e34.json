{"ast":null,"code":"import { Base } from './Base.js';\nimport { Number as NumberT } from './Number.js';\nimport * as utils from './utils.js';\n\nclass StringT extends Base {\n  constructor(length) {\n    let encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'ascii';\n    super();\n    this.length = length;\n    this.encoding = encoding;\n  }\n\n  decode(stream, parent) {\n    let length, pos;\n    let {\n      encoding\n    } = this;\n\n    if (typeof encoding === 'function') {\n      encoding = encoding.call(parent, parent) || 'ascii';\n    }\n\n    let width = encodingWidth(encoding);\n\n    if (this.length != null) {\n      length = utils.resolveLength(this.length, stream, parent);\n    } else {\n      let buffer;\n      ({\n        buffer,\n        length,\n        pos\n      } = stream);\n\n      while (pos < length - width + 1 && (buffer[pos] !== 0x00 || width === 2 && buffer[pos + 1] !== 0x00)) {\n        pos += width;\n      }\n\n      length = pos - stream.pos;\n    }\n\n    const string = stream.readString(length, encoding);\n\n    if (this.length == null && stream.pos < stream.length) {\n      stream.pos += width;\n    }\n\n    return string;\n  }\n\n  size(val, parent) {\n    // Use the defined value if no value was given\n    if (val === undefined || val === null) {\n      return utils.resolveLength(this.length, null, parent);\n    }\n\n    let {\n      encoding\n    } = this;\n\n    if (typeof encoding === 'function') {\n      encoding = encoding.call(parent != null ? parent.val : undefined, parent != null ? parent.val : undefined) || 'ascii';\n    }\n\n    if (encoding === 'utf16be') {\n      encoding = 'utf16le';\n    }\n\n    let size = byteLength(val, encoding);\n\n    if (this.length instanceof NumberT) {\n      size += this.length.size();\n    }\n\n    if (this.length == null) {\n      size += encodingWidth(encoding);\n    }\n\n    return size;\n  }\n\n  encode(stream, val, parent) {\n    let {\n      encoding\n    } = this;\n\n    if (typeof encoding === 'function') {\n      encoding = encoding.call(parent != null ? parent.val : undefined, parent != null ? parent.val : undefined) || 'ascii';\n    }\n\n    if (this.length instanceof NumberT) {\n      this.length.encode(stream, byteLength(val, encoding));\n    }\n\n    stream.writeString(val, encoding);\n\n    if (this.length == null) {\n      return encodingWidth(encoding) == 2 ? stream.writeUInt16LE(0x0000) : stream.writeUInt8(0x00);\n    }\n  }\n\n}\n\nfunction encodingWidth(encoding) {\n  switch (encoding) {\n    case 'ascii':\n    case 'utf8':\n      // utf8 is a byte-based encoding for zero-term string\n      return 1;\n\n    case 'utf16le':\n    case 'utf16-le':\n    case 'utf-16be':\n    case 'utf-16le':\n    case 'utf16be':\n    case 'utf16-be':\n    case 'ucs2':\n      return 2;\n\n    default:\n      //TODO: assume all other encodings are 1-byters\n      //throw new Error('Unknown encoding ' + encoding);\n      return 1;\n  }\n}\n\nfunction byteLength(string, encoding) {\n  switch (encoding) {\n    case 'ascii':\n      return string.length;\n\n    case 'utf8':\n      let len = 0;\n\n      for (let i = 0; i < string.length; i++) {\n        let c = string.charCodeAt(i);\n\n        if (c >= 0xd800 && c <= 0xdbff && i < string.length - 1) {\n          let c2 = string.charCodeAt(++i);\n\n          if ((c2 & 0xfc00) === 0xdc00) {\n            c = ((c & 0x3ff) << 10) + (c2 & 0x3ff) + 0x10000;\n          } else {\n            // unmatched surrogate.\n            i--;\n          }\n        }\n\n        if ((c & 0xffffff80) === 0) {\n          len++;\n        } else if ((c & 0xfffff800) === 0) {\n          len += 2;\n        } else if ((c & 0xffff0000) === 0) {\n          len += 3;\n        } else if ((c & 0xffe00000) === 0) {\n          len += 4;\n        }\n      }\n\n      return len;\n\n    case 'utf16le':\n    case 'utf16-le':\n    case 'utf16be':\n    case 'utf16-be':\n    case 'ucs2':\n      return string.length * 2;\n\n    default:\n      throw new Error('Unknown encoding ' + encoding);\n  }\n}\n\nexport { StringT as String };","map":{"version":3,"sources":["C:/Users/PC/Documents/PROGRAMMING/MERN/frontend/node_modules/restructure/src/String.js"],"names":["Base","Number","NumberT","utils","StringT","constructor","length","encoding","decode","stream","parent","pos","call","width","encodingWidth","resolveLength","buffer","string","readString","size","val","undefined","byteLength","encode","writeString","writeUInt16LE","writeUInt8","len","i","c","charCodeAt","c2","Error","String"],"mappings":"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","sourcesContent":["import {Base} from './Base.js';\nimport {Number as NumberT} from './Number.js';\nimport * as utils from './utils.js';\n\nclass StringT extends Base {\n  constructor(length, encoding = 'ascii') {\n    super();\n    this.length = length;\n    this.encoding = encoding;\n  }\n\n  decode(stream, parent) {\n    let length, pos;\n\n    let { encoding } = this;\n    if (typeof encoding === 'function') {\n      encoding = encoding.call(parent, parent) || 'ascii';\n    }\n    let width = encodingWidth(encoding);\n\n    if (this.length != null) {\n      length = utils.resolveLength(this.length, stream, parent);\n    } else {\n      let buffer;\n      ({buffer, length, pos} = stream);\n\n      while ((pos < length - width + 1) &&\n        (buffer[pos] !== 0x00 ||\n        (width === 2 && buffer[pos+1] !== 0x00)\n        )) {\n        pos += width;\n      }\n\n      length = pos - stream.pos;\n    }\n\n\n    const string = stream.readString(length, encoding);\n\n    if ((this.length == null) && (stream.pos < stream.length)) {\n      stream.pos+=width;\n    }\n\n    return string;\n  }\n\n  size(val, parent) {\n    // Use the defined value if no value was given\n    if (val === undefined || val === null) {\n      return utils.resolveLength(this.length, null, parent);\n    }\n\n    let { encoding } = this;\n    if (typeof encoding === 'function') {\n      encoding = encoding.call(parent != null ? parent.val : undefined, parent != null ? parent.val : undefined) || 'ascii';\n    }\n\n    if (encoding === 'utf16be') {\n      encoding = 'utf16le';\n    }\n\n    let size = byteLength(val, encoding);\n    if (this.length instanceof NumberT) {\n      size += this.length.size();\n    }\n\n    if ((this.length == null)) {\n      size += encodingWidth(encoding);\n    }\n\n    return size;\n  }\n\n  encode(stream, val, parent) {\n    let { encoding } = this;\n    if (typeof encoding === 'function') {\n      encoding = encoding.call(parent != null ? parent.val : undefined, parent != null ? parent.val : undefined) || 'ascii';\n    }\n\n    if (this.length instanceof NumberT) {\n      this.length.encode(stream, byteLength(val, encoding));\n    }\n\n    stream.writeString(val, encoding);\n\n    if ((this.length == null)) {\n      return encodingWidth(encoding) == 2 ?\n        stream.writeUInt16LE(0x0000) :\n        stream.writeUInt8(0x00);\n    }\n  }\n}\n\nfunction encodingWidth(encoding) {\n  switch(encoding) {\n    case 'ascii':\n    case 'utf8': // utf8 is a byte-based encoding for zero-term string\n      return 1;\n    case 'utf16le':\n    case 'utf16-le':\n    case 'utf-16be':\n    case 'utf-16le':\n    case 'utf16be':\n    case 'utf16-be':\n    case 'ucs2':\n      return 2;\n    default:\n      //TODO: assume all other encodings are 1-byters\n      //throw new Error('Unknown encoding ' + encoding);\n      return 1;\n  }\n}\n\nfunction byteLength(string, encoding) {\n  switch (encoding) {\n    case 'ascii':\n      return string.length;\n    case 'utf8':\n      let len = 0;\n      for (let i = 0; i < string.length; i++) {\n        let c = string.charCodeAt(i);\n\n        if (c >= 0xd800 && c <= 0xdbff && i < string.length - 1) {\n          let c2 = string.charCodeAt(++i);\n          if ((c2 & 0xfc00) === 0xdc00) {\n            c = ((c & 0x3ff) << 10) + (c2 & 0x3ff) + 0x10000;\n          } else {\n            // unmatched surrogate.\n            i--;\n          }\n        }\n\n        if ((c & 0xffffff80) === 0) {\n          len++;\n        } else if ((c & 0xfffff800) === 0) {\n          len += 2;\n        } else if ((c & 0xffff0000) === 0) {\n          len += 3;\n        } else if ((c & 0xffe00000) === 0) {\n          len += 4;\n        }\n      }\n      return len;\n    case 'utf16le':\n    case 'utf16-le':\n    case 'utf16be':\n    case 'utf16-be':\n    case 'ucs2':\n      return string.length * 2;\n    default:\n      throw new Error('Unknown encoding ' + encoding);\n  }\n}\n\nexport {StringT as String};\n"]},"metadata":{},"sourceType":"module"}