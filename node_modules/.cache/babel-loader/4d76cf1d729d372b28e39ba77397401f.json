{"ast":null,"code":"import { Array as ArrayT } from './Array.js';\nimport { Number as NumberT } from './Number.js';\nimport * as utils from './utils.js';\nexport class LazyArray extends ArrayT {\n  decode(stream, parent) {\n    const {\n      pos\n    } = stream;\n    const length = utils.resolveLength(this.length, stream, parent);\n\n    if (this.length instanceof NumberT) {\n      parent = {\n        parent,\n        _startOffset: pos,\n        _currentOffset: 0,\n        _length: length\n      };\n    }\n\n    const res = new LazyArrayValue(this.type, length, stream, parent);\n    stream.pos += length * this.type.size(null, parent);\n    return res;\n  }\n\n  size(val, ctx) {\n    if (val instanceof LazyArrayValue) {\n      val = val.toArray();\n    }\n\n    return super.size(val, ctx);\n  }\n\n  encode(stream, val, ctx) {\n    if (val instanceof LazyArrayValue) {\n      val = val.toArray();\n    }\n\n    return super.encode(stream, val, ctx);\n  }\n\n}\n\nclass LazyArrayValue {\n  constructor(type, length, stream, ctx) {\n    this.type = type;\n    this.length = length;\n    this.stream = stream;\n    this.ctx = ctx;\n    this.base = this.stream.pos;\n    this.items = [];\n  }\n\n  get(index) {\n    if (index < 0 || index >= this.length) {\n      return undefined;\n    }\n\n    if (this.items[index] == null) {\n      const {\n        pos\n      } = this.stream;\n      this.stream.pos = this.base + this.type.size(null, this.ctx) * index;\n      this.items[index] = this.type.decode(this.stream, this.ctx);\n      this.stream.pos = pos;\n    }\n\n    return this.items[index];\n  }\n\n  toArray() {\n    const result = [];\n\n    for (let i = 0, end = this.length; i < end; i++) {\n      result.push(this.get(i));\n    }\n\n    return result;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/PC/Documents/PROGRAMMING/MERN/frontend/node_modules/restructure/src/LazyArray.js"],"names":["Array","ArrayT","Number","NumberT","utils","LazyArray","decode","stream","parent","pos","length","resolveLength","_startOffset","_currentOffset","_length","res","LazyArrayValue","type","size","val","ctx","toArray","encode","constructor","base","items","get","index","undefined","result","i","end","push"],"mappings":"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","sourcesContent":["import {Array as ArrayT} from './Array.js';\nimport {Number as NumberT} from './Number.js';\nimport * as utils from './utils.js';\n\nexport class LazyArray extends ArrayT {\n  decode(stream, parent) {\n    const { pos } = stream;\n    const length = utils.resolveLength(this.length, stream, parent);\n\n    if (this.length instanceof NumberT) {\n      parent = {\n        parent,\n        _startOffset: pos,\n        _currentOffset: 0,\n        _length: length\n      };\n    }\n\n    const res = new LazyArrayValue(this.type, length, stream, parent);\n\n    stream.pos += length * this.type.size(null, parent);\n    return res;\n  }\n\n  size(val, ctx) {\n    if (val instanceof LazyArrayValue) {\n      val = val.toArray();\n    }\n\n    return super.size(val, ctx);\n  }\n\n  encode(stream, val, ctx) {\n    if (val instanceof LazyArrayValue) {\n      val = val.toArray();\n    }\n\n    return super.encode(stream, val, ctx);\n  }\n}\n\nclass LazyArrayValue {\n  constructor(type, length, stream, ctx) {\n    this.type = type;\n    this.length = length;\n    this.stream = stream;\n    this.ctx = ctx;\n    this.base = this.stream.pos;\n    this.items = [];\n  }\n\n  get(index) {\n    if ((index < 0) || (index >= this.length)) {\n      return undefined;\n    }\n\n    if (this.items[index] == null) {\n      const { pos } = this.stream;\n      this.stream.pos = this.base + (this.type.size(null, this.ctx) * index);\n      this.items[index] = this.type.decode(this.stream, this.ctx);\n      this.stream.pos = pos;\n    }\n\n    return this.items[index];\n  }\n\n  toArray() {\n    const result = [];\n    for (let i = 0, end = this.length; i < end; i++) {\n      result.push(this.get(i));\n    }\n    return result;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}