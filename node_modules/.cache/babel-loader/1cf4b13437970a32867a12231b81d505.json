{"ast":null,"code":"import _classCallCheck from \"C:/Users/PC/Documents/PROGRAMMING/MERN/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/PC/Documents/PROGRAMMING/MERN/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/PC/Documents/PROGRAMMING/MERN/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/PC/Documents/PROGRAMMING/MERN/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Base } from './Base.js';\nexport var Optional = /*#__PURE__*/function (_Base) {\n  _inherits(Optional, _Base);\n\n  var _super = _createSuper(Optional);\n\n  function Optional(type) {\n    var _this;\n\n    var condition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n    _classCallCheck(this, Optional);\n\n    _this = _super.call(this);\n    _this.type = type;\n    _this.condition = condition;\n    return _this;\n  }\n\n  _createClass(Optional, [{\n    key: \"decode\",\n    value: function decode(stream, parent) {\n      var condition = this.condition;\n\n      if (typeof condition === 'function') {\n        condition = condition.call(parent, parent);\n      }\n\n      if (condition) {\n        return this.type.decode(stream, parent);\n      }\n    }\n  }, {\n    key: \"size\",\n    value: function size(val, parent) {\n      var condition = this.condition;\n\n      if (typeof condition === 'function') {\n        condition = condition.call(parent, parent);\n      }\n\n      if (condition) {\n        return this.type.size(val, parent);\n      } else {\n        return 0;\n      }\n    }\n  }, {\n    key: \"encode\",\n    value: function encode(stream, val, parent) {\n      var condition = this.condition;\n\n      if (typeof condition === 'function') {\n        condition = condition.call(parent, parent);\n      }\n\n      if (condition) {\n        return this.type.encode(stream, val, parent);\n      }\n    }\n  }]);\n\n  return Optional;\n}(Base);","map":{"version":3,"sources":["C:/Users/PC/Documents/PROGRAMMING/MERN/frontend/node_modules/restructure/src/Optional.js"],"names":["Base","Optional","type","condition","stream","parent","call","decode","val","size","encode"],"mappings":";;;;AAAA,SAAQA,IAAR,QAAmB,WAAnB;AAEA,WAAaC,QAAb;AAAA;;AAAA;;AACE,oBAAYC,IAAZ,EAAoC;AAAA;;AAAA,QAAlBC,SAAkB,uEAAN,IAAM;;AAAA;;AAClC;AACA,UAAKD,IAAL,GAAYA,IAAZ;AACA,UAAKC,SAAL,GAAiBA,SAAjB;AAHkC;AAInC;;AALH;AAAA;AAAA,WAOE,gBAAOC,MAAP,EAAeC,MAAf,EAAuB;AACrB,UAAMF,SAAN,GAAoB,IAApB,CAAMA,SAAN;;AACA,UAAI,OAAOA,SAAP,KAAqB,UAAzB,EAAqC;AACnCA,QAAAA,SAAS,GAAGA,SAAS,CAACG,IAAV,CAAeD,MAAf,EAAuBA,MAAvB,CAAZ;AACD;;AAED,UAAIF,SAAJ,EAAe;AACb,eAAO,KAAKD,IAAL,CAAUK,MAAV,CAAiBH,MAAjB,EAAyBC,MAAzB,CAAP;AACD;AACF;AAhBH;AAAA;AAAA,WAkBE,cAAKG,GAAL,EAAUH,MAAV,EAAkB;AAChB,UAAMF,SAAN,GAAoB,IAApB,CAAMA,SAAN;;AACA,UAAI,OAAOA,SAAP,KAAqB,UAAzB,EAAqC;AACnCA,QAAAA,SAAS,GAAGA,SAAS,CAACG,IAAV,CAAeD,MAAf,EAAuBA,MAAvB,CAAZ;AACD;;AAED,UAAIF,SAAJ,EAAe;AACb,eAAO,KAAKD,IAAL,CAAUO,IAAV,CAAeD,GAAf,EAAoBH,MAApB,CAAP;AACD,OAFD,MAEO;AACL,eAAO,CAAP;AACD;AACF;AA7BH;AAAA;AAAA,WA+BE,gBAAOD,MAAP,EAAeI,GAAf,EAAoBH,MAApB,EAA4B;AAC1B,UAAMF,SAAN,GAAoB,IAApB,CAAMA,SAAN;;AACA,UAAI,OAAOA,SAAP,KAAqB,UAAzB,EAAqC;AACnCA,QAAAA,SAAS,GAAGA,SAAS,CAACG,IAAV,CAAeD,MAAf,EAAuBA,MAAvB,CAAZ;AACD;;AAED,UAAIF,SAAJ,EAAe;AACb,eAAO,KAAKD,IAAL,CAAUQ,MAAV,CAAiBN,MAAjB,EAAyBI,GAAzB,EAA8BH,MAA9B,CAAP;AACD;AACF;AAxCH;;AAAA;AAAA,EAA8BL,IAA9B","sourcesContent":["import {Base} from './Base.js';\n\nexport class Optional extends Base {\n  constructor(type, condition = true) {\n    super();\n    this.type = type;\n    this.condition = condition;\n  }\n\n  decode(stream, parent) {\n    let { condition } = this;\n    if (typeof condition === 'function') {\n      condition = condition.call(parent, parent);\n    }\n\n    if (condition) {\n      return this.type.decode(stream, parent);\n    }\n  }\n\n  size(val, parent) {\n    let { condition } = this;\n    if (typeof condition === 'function') {\n      condition = condition.call(parent, parent);\n    }\n\n    if (condition) {\n      return this.type.size(val, parent);\n    } else {\n      return 0;\n    }\n  }\n\n  encode(stream, val, parent) {\n    let { condition } = this;\n    if (typeof condition === 'function') {\n      condition = condition.call(parent, parent);\n    }\n\n    if (condition) {\n      return this.type.encode(stream, val, parent);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}