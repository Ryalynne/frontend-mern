{"ast":null,"code":"export const readUInt8 = (array, offset) => {\n  return array[offset];\n};\nexport const readUInt16BE = (array, offset) => {\n  return array[offset] << 8 | array[offset + 1];\n};\nexport const readUInt16LE = (array, offset) => {\n  return array[offset] | array[offset + 1] << 8;\n};\nexport const readUInt32BE = (array, offset) => {\n  return readInt32BE(array, offset) >>> 0;\n};\nexport const readUInt32LE = (array, offset) => {\n  return readInt32LE(array, offset) >>> 0;\n};\nexport const uint8ArrayToHexString = uint8Array => {\n  return Array.from(uint8Array, byte => byte.toString(16).padStart(2, \"0\")).join(\"\");\n};\nconst decoder = new TextDecoder(\"utf-8\");\nexport const uint8ArrayToString = uint8Array => {\n  return decoder.decode(uint8Array);\n};\nexport const concatenateUint8Arrays = arrays => {\n  const totalLength = arrays.reduce((length, arr) => length + arr.length, 0);\n  const concatenatedArray = new Uint8Array(totalLength);\n  let offset = 0;\n  arrays.forEach(arr => {\n    concatenatedArray.set(arr, offset);\n    offset += arr.length;\n  });\n  return concatenatedArray;\n};\nexport const readInt32BE = (array, offset) => {\n  return array[offset] << 24 | array[offset + 1] << 16 | array[offset + 2] << 8 | array[offset + 3];\n};\nexport const readInt32LE = (array, offset) => {\n  return array[offset] | array[offset + 1] << 8 | array[offset + 2] << 16 | array[offset + 3] << 24;\n};","map":{"version":3,"sources":["C:/Users/PC/Documents/PROGRAMMING/MERN/frontend/node_modules/jay-peg/src/markers/utils.js"],"names":["readUInt8","array","offset","readUInt16BE","readUInt16LE","readUInt32BE","readInt32BE","readUInt32LE","readInt32LE","uint8ArrayToHexString","uint8Array","Array","from","byte","toString","padStart","join","decoder","TextDecoder","uint8ArrayToString","decode","concatenateUint8Arrays","arrays","totalLength","reduce","length","arr","concatenatedArray","Uint8Array","forEach","set"],"mappings":"AAAA,OAAO,MAAMA,SAAS,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC1C,SAAOD,KAAK,CAACC,MAAD,CAAZ;AACD,CAFM;AAIP,OAAO,MAAMC,YAAY,GAAG,CAACF,KAAD,EAAQC,MAAR,KAAmB;AAC7C,SAAQD,KAAK,CAACC,MAAD,CAAL,IAAiB,CAAlB,GAAuBD,KAAK,CAACC,MAAM,GAAG,CAAV,CAAnC;AACD,CAFM;AAIP,OAAO,MAAME,YAAY,GAAG,CAACH,KAAD,EAAQC,MAAR,KAAmB;AAC7C,SAAOD,KAAK,CAACC,MAAD,CAAL,GAAiBD,KAAK,CAACC,MAAM,GAAG,CAAV,CAAL,IAAqB,CAA7C;AACD,CAFM;AAIP,OAAO,MAAMG,YAAY,GAAG,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AAC7C,SAAOI,WAAW,CAACL,KAAD,EAAQC,MAAR,CAAX,KAA+B,CAAtC;AACD,CAFM;AAIP,OAAO,MAAMK,YAAY,GAAG,CAACN,KAAD,EAAQC,MAAR,KAAmB;AAC7C,SAAOM,WAAW,CAACP,KAAD,EAAQC,MAAR,CAAX,KAA+B,CAAtC;AACD,CAFM;AAIP,OAAO,MAAMO,qBAAqB,GAAIC,UAAD,IAAgB;AACnD,SAAOC,KAAK,CAACC,IAAN,CAAWF,UAAX,EAAwBG,IAAD,IAC5BA,IAAI,CAACC,QAAL,CAAc,EAAd,EAAkBC,QAAlB,CAA2B,CAA3B,EAA8B,GAA9B,CADK,EAELC,IAFK,CAEA,EAFA,CAAP;AAGD,CAJM;AAMP,MAAMC,OAAO,GAAG,IAAIC,WAAJ,CAAgB,OAAhB,CAAhB;AAEA,OAAO,MAAMC,kBAAkB,GAAIT,UAAD,IAAgB;AAChD,SAAOO,OAAO,CAACG,MAAR,CAAeV,UAAf,CAAP;AACD,CAFM;AAIP,OAAO,MAAMW,sBAAsB,GAAIC,MAAD,IAAY;AAChD,QAAMC,WAAW,GAAGD,MAAM,CAACE,MAAP,CAAc,CAACC,MAAD,EAASC,GAAT,KAAiBD,MAAM,GAAGC,GAAG,CAACD,MAA5C,EAAoD,CAApD,CAApB;AACA,QAAME,iBAAiB,GAAG,IAAIC,UAAJ,CAAeL,WAAf,CAA1B;AAEA,MAAIrB,MAAM,GAAG,CAAb;AAEAoB,EAAAA,MAAM,CAACO,OAAP,CAAgBH,GAAD,IAAS;AACtBC,IAAAA,iBAAiB,CAACG,GAAlB,CAAsBJ,GAAtB,EAA2BxB,MAA3B;AACAA,IAAAA,MAAM,IAAIwB,GAAG,CAACD,MAAd;AACD,GAHD;AAKA,SAAOE,iBAAP;AACD,CAZM;AAcP,OAAO,MAAMrB,WAAW,GAAG,CAACL,KAAD,EAAQC,MAAR,KAAmB;AAC5C,SACGD,KAAK,CAACC,MAAD,CAAL,IAAiB,EAAlB,GACCD,KAAK,CAACC,MAAM,GAAG,CAAV,CAAL,IAAqB,EADtB,GAECD,KAAK,CAACC,MAAM,GAAG,CAAV,CAAL,IAAqB,CAFtB,GAGAD,KAAK,CAACC,MAAM,GAAG,CAAV,CAJP;AAMD,CAPM;AASP,OAAO,MAAMM,WAAW,GAAG,CAACP,KAAD,EAAQC,MAAR,KAAmB;AAC5C,SACED,KAAK,CAACC,MAAD,CAAL,GACCD,KAAK,CAACC,MAAM,GAAG,CAAV,CAAL,IAAqB,CADtB,GAECD,KAAK,CAACC,MAAM,GAAG,CAAV,CAAL,IAAqB,EAFtB,GAGCD,KAAK,CAACC,MAAM,GAAG,CAAV,CAAL,IAAqB,EAJxB;AAMD,CAPM","sourcesContent":["export const readUInt8 = (array, offset) => {\n  return array[offset];\n};\n\nexport const readUInt16BE = (array, offset) => {\n  return (array[offset] << 8) | array[offset + 1];\n};\n\nexport const readUInt16LE = (array, offset) => {\n  return array[offset] | (array[offset + 1] << 8);\n};\n\nexport const readUInt32BE = (array, offset) => {\n  return readInt32BE(array, offset) >>> 0;\n};\n\nexport const readUInt32LE = (array, offset) => {\n  return readInt32LE(array, offset) >>> 0;\n};\n\nexport const uint8ArrayToHexString = (uint8Array) => {\n  return Array.from(uint8Array, (byte) =>\n    byte.toString(16).padStart(2, \"0\"),\n  ).join(\"\");\n};\n\nconst decoder = new TextDecoder(\"utf-8\");\n\nexport const uint8ArrayToString = (uint8Array) => {\n  return decoder.decode(uint8Array);\n};\n\nexport const concatenateUint8Arrays = (arrays) => {\n  const totalLength = arrays.reduce((length, arr) => length + arr.length, 0);\n  const concatenatedArray = new Uint8Array(totalLength);\n\n  let offset = 0;\n\n  arrays.forEach((arr) => {\n    concatenatedArray.set(arr, offset);\n    offset += arr.length;\n  });\n\n  return concatenatedArray;\n};\n\nexport const readInt32BE = (array, offset) => {\n  return (\n    (array[offset] << 24) |\n    (array[offset + 1] << 16) |\n    (array[offset + 2] << 8) |\n    array[offset + 3]\n  );\n};\n\nexport const readInt32LE = (array, offset) => {\n  return (\n    array[offset] |\n    (array[offset + 1] << 8) |\n    (array[offset + 2] << 16) |\n    (array[offset + 3] << 24)\n  );\n};\n"]},"metadata":{},"sourceType":"module"}